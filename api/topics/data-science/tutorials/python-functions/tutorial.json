{"layout":"tutorial_hands_on","title":"Python - Functions","level":"Introductory","requirements":[{"type":"internal","topic_name":"data-science","tutorials":["python-math"]}],"follow_up_training":[],"questions":["How do I write functions in Python?","What is a function?","What do they look like?","Fill in the missing part of a function"],"objectives":["Understand the structure of a \"function\" in order to be able to construct their own functions and predict which functions will not work."],"time_estimation":"30M","key_points":["Functions are foundational in Python","Everything you do will require functions","Functions keep your code DRY (don't repeat yourself), reducing your copying and pasting or rewriting the same block of code.","Deciding what part of your code should, or should not be, a function is something that will come with practice."],"subtopic":"python-modular","contributors":[{"name":"The Carpentries","joined":"2021-09","id":"carpentries","url":"https://training.galaxyproject.org/training-material/api/organisations/carpentries.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/carpentries/"},{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"},{"name":"Donny Vrins","joined":"2021-10","linkedin":"Donny Vrins","email":"D.vrins@live.nl","former_affiliations":["avans-atgm"],"id":"dirowa","url":"https://training.galaxyproject.org/training-material/api/contributors/dirowa.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/dirowa/"},{"name":"Bazante Sanders","joined":"2020-12","affiliations":["avans-atgm"],"id":"bazante1","url":"https://training.galaxyproject.org/training-material/api/contributors/bazante1.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/bazante1/"}],"priority":2,"notebook":{"language":"python","pyolite":true},"abbreviations":{"DRY":"Don't Repeat Yourself"},"js_requirements":{"mathjax":1872,"mermaid":false},"short_id":"T00089","url":"/topics/data-science/tutorials/python-functions/tutorial.html","topic_name":"data-science","tutorial_name":"python-functions","dir":"topics/data-science/tutorials/python-functions","symlink":null,"id":"data-science/python-functions","ref_tutorials":["<p>Functions are the basic unit of all work in Python! Absolutely everything you do uses functions. Conceptually, functions are super simple. Just like in maths, they take an input, do some transformation, and return an output. As an example, <code class=\"language-plaintext highlighter-rouge\">f(x) = x + 2</code> is a function that calculates whatever value you request, plus two. But functions are foundational, so, you should understand them well before moving on.</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#what-is-a-function\" id=\"markdown-toc-what-is-a-function\">What is a Function</a></li>\n  <li><a href=\"#create-functions\" id=\"markdown-toc-create-functions\">Create Functions</a></li>\n</ol>\n\n</blockquote>\n\n<h2 id=\"what-is-a-function\">What is a Function</h2>\n\n<p>Functions are a way to re-use some computation you want to do, multiple times. If you don’t have a function, you need to re-write the calculation every time, so we use functions to collect those statements and make them easy to re-run. Additionally they let us “parameterise” some computation. Instead of computing the same value every time, we can template it out, we can re-run the computation with new inputs, and see new results.</p>\n\n<blockquote class=\"code-2col\">\n  <blockquote class=\"code-in\">\n    <code-in-title>Math</code-in-title>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Define our function\nf(x) = 3 * x\n# Compute some value\nf(3) # is 9\n</code></pre></div>    </div>\n  </blockquote>\n\n  <blockquote class=\"code-out\">\n    <code-out-title>Python</code-out-title>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Define our function\ndef f(x):\n   return 3 * x\n# Compute some value\nf(3)\n</code></pre></div>    </div>\n  </blockquote>\n\n</blockquote>\n\n<p>We’ve talked about mathematical functions before, but now we’ll talk about more programing-related functions</p>\n\n<h2 id=\"create-functions\">Create Functions</h2>\n\n<p>Human beings can only keep a few items in working memory at a time. Breaking down larger/more complicated pieces of code in functions helps in understanding and using it. A function can be re-used. Write one time, use many times. (Known as staying Don’t Repeat Yourself (DRY) in the industry.)</p>\n\n<p>Knowing what Americans mean when they talk about temperatures and weather can be difficult, but we can wrap the temperature conversion calculation (\\(^{\\circ}\\text{C} = (^{\\circ}\\text{F} - 32) * \\dfrac{5}{9}\\)) up as a function that we can easily re-use.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">fahr_to_celsius</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">):</span>\n    <span class=\"nf\">return </span><span class=\"p\">((</span><span class=\"n\">temp</span> <span class=\"o\">-</span> <span class=\"mi\">32</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"o\">/</span><span class=\"mi\">9</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p><a href=\"../../images/python-basics/Figure7_Functions.png\" rel=\"noopener noreferrer\"><img src=\"../../images/python-basics/Figure7_Functions.png\" alt=\"The above function fahr to celsius is shown except annotated. def is labelled &quot;def statement&quot;, fahr_to_celsius is noted as the function name. Inside parentheses is temp and an arrow shows it is called parameter names. The next line which is indented is annotated as the function body which has a return statement and the calculation from above.\" width=\"340\" height=\"130\" loading=\"lazy\" /></a></p>\n\n<p>The function definition opens with the keyword <code class=\"language-plaintext highlighter-rouge\">def</code> followed by the name of the function <code class=\"language-plaintext highlighter-rouge\">fahr_to_celsius</code> and a parenthesized list of parameter names <code class=\"language-plaintext highlighter-rouge\">temp</code>. The body of the function — the statements that are executed when it runs — is indented below the definition line. The body concludes with a <code class=\"language-plaintext highlighter-rouge\">return</code> keyword followed by the return value.</p>\n\n<p>When we call the function, the values we pass to it are assigned to those variables so that we can use them inside the function. Inside the function, we use a return statement to send a result back to whoever asked for it.</p>\n\n<p>Let’s try running our function.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">fahr_to_celsius</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">freezing point of water: </span><span class=\"si\">{</span><span class=\"nf\">fahr_to_celsius</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s\">C</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">boiling point of water: </span><span class=\"si\">{</span><span class=\"nf\">fahr_to_celsius</span><span class=\"p\">(</span><span class=\"mi\">212</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s\">C</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"tip\">\n  <tip-title>Formatting Strings</tip-title>\n  <p>There are several ways to print out a few values in python. We’d recommend you to use <code class=\"language-plaintext highlighter-rouge\">f-strings</code> as it’s the cleanest and most modern way to do it.</p>\n\n  <p><code class=\"language-plaintext highlighter-rouge\">f</code>-strings start with an <code class=\"language-plaintext highlighter-rouge\">f</code> (very descriptive name eh?). Within the text between the single or double quotes (<code class=\"language-plaintext highlighter-rouge\">'</code>/<code class=\"language-plaintext highlighter-rouge\">\"</code>) you can use curly braces to refer to variables or python code which will be placed there in the string.</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>a = 10\nb = f\"Here is the value of a: {a}\"\nprint(b)\nprint(f\"Here is the value of a: {5 + 5}\")\nprint(f\"Here is the value of a: {function_that_returns_10()}\")\n</code></pre></div>  </div>\n\n  <p>All of those would print out <code class=\"language-plaintext highlighter-rouge\">Here is the value of a: 10</code>.</p>\n\n  <p>f-strings can be a lot fancier for formatting decimal places, but we don’t need that for now. Just know:</p>\n\n  <ol>\n    <li>Start with an <code class=\"language-plaintext highlighter-rouge\">f</code></li>\n    <li>Use braces to use the value of a variable, a function, or some python expression.</li>\n  </ol>\n</blockquote>\n\n<p>We’ve successfully called the function that we defined, and we have access to the value that we returned.</p>\n\n<p>Now that we’ve seen how to turn Fahrenheit into Celsius, we can also write the function to turn Celsius into Kelvin:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">celsius_to_kelvin</span><span class=\"p\">(</span><span class=\"n\">temp_c</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">temp_c</span> <span class=\"o\">+</span> <span class=\"mf\">273.15</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">freezing point of water in Kelvin: </span><span class=\"si\">{</span><span class=\"nf\">celsius_to_kelvin</span><span class=\"p\">(</span><span class=\"mf\">0.</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"tip\">\n  <tip-title>What is `0.`</tip-title>\n  <p>That’s a float! A <code class=\"language-plaintext highlighter-rouge\">.</code> in a number makes it a float, rather than an integer.</p>\n</blockquote>\n\n<p>What about converting Fahrenheit to Kelvin? We could write out both formulae, but we don’t need to. Instead, we can <em>compose</em> the two functions we have already created:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">fahr_to_kelvin</span><span class=\"p\">(</span><span class=\"n\">temp_f</span><span class=\"p\">):</span>\n    <span class=\"n\">temp_c</span> <span class=\"o\">=</span> <span class=\"nf\">fahr_to_celsius</span><span class=\"p\">(</span><span class=\"n\">temp_f</span><span class=\"p\">)</span>\n    <span class=\"n\">temp_k</span> <span class=\"o\">=</span> <span class=\"nf\">celsius_to_kelvin</span><span class=\"p\">(</span><span class=\"n\">temp_c</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">temp_k</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">boiling point of water in Kelvin: </span><span class=\"si\">{</span><span class=\"nf\">fahr_to_kelvin</span><span class=\"p\">(</span><span class=\"mf\">212.0</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>This is our first taste of how larger programs are built: we define basic operations, then combine them in ever-larger chunks to get the effect we want. Real-life functions will usually be larger than the ones shown here — typically half a dozen to a few dozen lines — but they shouldn’t ever be much longer than that, or the next person who reads it won’t be able to understand what’s going on.</p>\n\n<h3 id=\"documentation\">Documentation</h3>\n\n<p>Documenting your code is extremely, <em>extremely</em>, <strong>extremely</strong> important to do. We all forget what we’re doing, it’s only normal, so documenting what you’re doing is key to being able to restart work later.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">fahr_to_kelvin</span><span class=\"p\">(</span><span class=\"n\">temp_f</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    Converts a temperature from Fahrenheit to Kelvin\n\n    temp_f: the temperature in Fahrenheit\n\n    returns the temperature in Celsius\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">temp_c</span> <span class=\"o\">=</span> <span class=\"nf\">fahr_to_celsius</span><span class=\"p\">(</span><span class=\"n\">temp_f</span><span class=\"p\">)</span>\n    <span class=\"n\">temp_k</span> <span class=\"o\">=</span> <span class=\"nf\">celsius_to_kelvin</span><span class=\"p\">(</span><span class=\"n\">temp_c</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">temp_k</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">boiling point of water in Kelvin: </span><span class=\"si\">{</span><span class=\"nf\">fahr_to_kelvin</span><span class=\"p\">(</span><span class=\"mf\">212.0</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>For a function this small, with such a descriptive name (<code class=\"language-plaintext highlighter-rouge\">fahr_to_kelvin</code>) it feels quite obvious what the function should do, what inputs it takes, what outputs it produces. However, you will thank yourself in the future if you do this now. You may think you will remember what the code does, but, be kind to your future self who is busy and stressed and may not want to spend time reading the code over again to figure out what every single function does.</p>\n\n<blockquote class=\"question\">\n  <question-title>Converting statements to functions</question-title>\n  <p>A lot of what you’ll do in programing is to turn a procedure that you want to do, into statements and a function.</p>\n\n  <p>Fill in the missing portions of this function, two average numbers. Then use it to find the average of 32326 and 631</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>def average2(a, b):\n    c = (a + b) / 2\n    return c\n</code></pre></div>    </div>\n    <p>We call it “average2” here because it will only average two numbers. It will not work for three numbers or a list of them.</p>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Test out solutions here!\n</span><span class=\"k\">def</span> <span class=\"nf\">average2</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span>\n    <span class=\"k\">return</span> <span class=\"n\">c</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">average2</span><span class=\"p\">(</span><span class=\"mi\">32326</span><span class=\"p\">,</span> <span class=\"mi\">631</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>A more complicated example</question-title>\n\n  <p>The formula for a 90° triangle can be expressed as: \\(c = \\sqrt{a^2 + b^2}\\)</p>\n\n  <ol>\n    <li>Write a function which takes <code class=\"language-plaintext highlighter-rouge\">a</code> and <code class=\"language-plaintext highlighter-rouge\">b</code>, and calculates <code class=\"language-plaintext highlighter-rouge\">c</code></li>\n    <li>Name this function “pythagorus”</li>\n    <li>Remember to import math, if you haven’t already</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>def pythagorus(a, b):\n    c = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n    return c\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Test out solutions here!\n</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">pythagorus</span><span class=\"p\">(</span><span class=\"mi\">1234</span><span class=\"p\">,</span> <span class=\"mi\">4321</span><span class=\"p\">))</span> <span class=\"c1\"># Should return 4493.750883170984\n</span></code></pre></div></div>\n\n<h3 id=\"variable-scope\">Variable Scope</h3>\n\n<p>In composing our temperature conversion functions, we created variables inside of those functions, <code class=\"language-plaintext highlighter-rouge\">temp</code>, <code class=\"language-plaintext highlighter-rouge\">temp_c</code>, <code class=\"language-plaintext highlighter-rouge\">temp_f</code>, and <code class=\"language-plaintext highlighter-rouge\">temp_k</code>. We refer to these variables as local variables because they no longer exist once the function is done executing. If we try to access their values outside of the function, we will encounter an error:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">Again, temperature in Kelvin was: </span><span class=\"si\">{</span><span class=\"n\">temp_k</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>If you want to reuse the temperature in Kelvin after you have calculated it with fahr_to_kelvin, you can store the result of the function call in a variable:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">temp_kelvin</span> <span class=\"o\">=</span> <span class=\"nf\">fahr_to_kelvin</span><span class=\"p\">(</span><span class=\"mf\">212.0</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">temperature in Kelvin was: </span><span class=\"si\">{</span><span class=\"n\">temp_kelvin</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Watch out for scope issues:</p>\n\n<ul>\n  <li>Variables created inside a function will stay inside the function</li>\n  <li>Variables created outside of the function can be accessible inside the function, but you should not do this!</li>\n  <li>Ensure that variables are properly scoped will prevent later errors when working with modules or testing big projects.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span>\n\n<span class=\"c1\"># Location 1\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">some_generic_computation</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n    <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">y</span>\n    <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">c</span> <span class=\"o\">/</span> <span class=\"n\">d</span>\n    <span class=\"c1\"># Location 2\n</span>    <span class=\"k\">return</span> <span class=\"n\">e</span>\n\n<span class=\"c1\"># Location 3\n</span></code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Scope</question-title>\n  <p>Given the above code, which variables are accessible at Locations 1, 2, and 3?</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <ol>\n      <li>a, b</li>\n      <li>a and b are there but you shouldn’t use these. x, y, c, d, e are also accessible.</li>\n      <li>a, b.</li>\n    </ol>\n  </blockquote>\n</blockquote>\n\n<h3 id=\"defining-default-parameters\">Defining Default parameters</h3>\n\n<p>If we usually want a function to work one way, but occasionally need it to do something else, we can allow people to pass a parameter when they need to but provide a default to make the normal case easier. The example below shows how Python matches values to parameters:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">display</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">a: </span><span class=\"si\">{</span><span class=\"n\">a</span><span class=\"si\">}</span><span class=\"s\">, b: </span><span class=\"si\">{</span><span class=\"n\">b</span><span class=\"si\">}</span><span class=\"s\">, c: </span><span class=\"si\">{</span><span class=\"n\">c</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># no parameters:\n</span><span class=\"nf\">display</span><span class=\"p\">()</span>\n<span class=\"c1\"># one parameter:\n</span><span class=\"nf\">display</span><span class=\"p\">(</span><span class=\"mi\">55</span><span class=\"p\">)</span>\n<span class=\"c1\"># two parameters:\n</span><span class=\"nf\">display</span><span class=\"p\">(</span><span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>As this example shows, parameters are matched up from left to right, and any that haven’t been given a value explicitly get their default value. We can override this behavior by naming the value as we pass it in:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># only setting the value of c\n</span><span class=\"nf\">display</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">=</span><span class=\"mi\">77</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Exercise: Signing a message</question-title>\n  <p>Let’s test out a default argument. Imagine you are printing out a message, and at the bottom it should have a signature.</p>\n\n  <p>Inputs:</p>\n  <ul>\n    <li><code class=\"language-plaintext highlighter-rouge\">message</code>: a variable that is always provided to the function, it has no default.</li>\n    <li><code class=\"language-plaintext highlighter-rouge\">signature</code>: a variable that can be <em>optionally</em> provided, it should have a default like your name.</li>\n  </ul>\n\n  <p>You can accomplish this with <em>three print statements</em>:</p>\n  <ol>\n    <li>Print the message</li>\n    <li>Print nothing (i.e. <code class=\"language-plaintext highlighter-rouge\">print()</code>)</li>\n    <li>Print a signature variable.</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>def myFunction(message, signature=\"Your name\"):\n    print(message)\n    print()\n    print(signature)\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Test things out here!\n</span><span class=\"k\">def</span> <span class=\"nf\">myFunction</span> <span class=\"c1\"># Fix this function!\n</span>\n\n<span class=\"c1\"># Here are some test cases, for you to check if your function works!\n</span><span class=\"nf\">myFunction</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">This is a message</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">myFunction</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">This is a message</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">signature</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">Jane Doe</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n"],"ref_slides":[],"hands_on":true,"slides":false,"mod_date":"2023-02-13 13:04:13 +0000","pub_date":"2022-04-25 11:43:04 +0000","version":12,"api":"https://training.galaxyproject.org/training-material/api/topics/data-science/tutorials/python-functions/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"Foundations of Data Science","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial"}