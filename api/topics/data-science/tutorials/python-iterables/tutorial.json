{"layout":"tutorial_hands_on","title":"Python - Lists & Strings & Dictionaries","level":"Introductory","requirements":[],"follow_up_training":[],"questions":["How can I store multiple values?"],"objectives":["Explain why programs need collections of values.","Write programs that create flat lists, index them, slice them, and modify them through assignment and method calls."],"time_estimation":"1H","key_points":["A list stores many values in a single structure.","Use an item's index to fetch it from a list.","Lists' values can be replaced by assigning to them.","Appending items to a list lengthens it.","Use `del` to remove items from a list entirely.","The empty list contains no values.","Lists may contain values of different types.","Character strings can be indexed like lists.","Character strings are immutable.","Indexing beyond the end of the collection is an error."],"subtopic":"python-modular","contributors":[{"name":"The Carpentries","joined":"2021-09","id":"carpentries","url":"https://training.galaxyproject.org/training-material/api/organisations/carpentries.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/carpentries/"},{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"},{"name":"Donny Vrins","joined":"2021-10","linkedin":"Donny Vrins","email":"D.vrins@live.nl","former_affiliations":["avans-atgm"],"id":"dirowa","url":"https://training.galaxyproject.org/training-material/api/contributors/dirowa.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/dirowa/"},{"name":"Bazante Sanders","joined":"2020-12","affiliations":["avans-atgm"],"id":"bazante1","url":"https://training.galaxyproject.org/training-material/api/contributors/bazante1.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/bazante1/"}],"priority":4,"notebook":{"language":"python","pyolite":true},"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00091","url":"/topics/data-science/tutorials/python-iterables/tutorial.html","topic_name":"data-science","tutorial_name":"python-iterables","dir":"topics/data-science/tutorials/python-iterables","symlink":null,"id":"data-science/python-iterables","ref_tutorials":["<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#lists\" id=\"markdown-toc-lists\">Lists</a>    <ol>\n      <li><a href=\"#indexing\" id=\"markdown-toc-indexing\">Indexing</a></li>\n      <li><a href=\"#replacement\" id=\"markdown-toc-replacement\">Replacement</a></li>\n      <li><a href=\"#appending\" id=\"markdown-toc-appending\">Appending</a></li>\n      <li><a href=\"#list-indices\" id=\"markdown-toc-list-indices\">List Indices</a></li>\n      <li><a href=\"#removing-items\" id=\"markdown-toc-removing-items\">Removing Items.</a></li>\n      <li><a href=\"#empty-lists\" id=\"markdown-toc-empty-lists\">Empty Lists</a></li>\n      <li><a href=\"#heterogeneous-lists\" id=\"markdown-toc-heterogeneous-lists\">Heterogeneous Lists</a></li>\n      <li><a href=\"#strings-are-like-lists\" id=\"markdown-toc-strings-are-like-lists\">Strings are like Lists</a></li>\n      <li><a href=\"#bounds\" id=\"markdown-toc-bounds\">Bounds</a></li>\n      <li><a href=\"#exercises\" id=\"markdown-toc-exercises\">Exercises</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#slicing--dicing\" id=\"markdown-toc-slicing--dicing\">Slicing &amp; Dicing</a>    <ol>\n      <li><a href=\"#stride\" id=\"markdown-toc-stride\">Stride</a></li>\n      <li><a href=\"#sorting\" id=\"markdown-toc-sorting\">Sorting</a></li>\n      <li><a href=\"#type-conversion\" id=\"markdown-toc-type-conversion\">Type Conversion</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#exercise-time\" id=\"markdown-toc-exercise-time\">Exercise Time</a>    <ol>\n      <li><a href=\"#how-large-is-a-slice\" id=\"markdown-toc-how-large-is-a-slice\">How Large is a Slice?</a></li>\n      <li><a href=\"#solution\" id=\"markdown-toc-solution\">Solution</a></li>\n      <li><a href=\"#from-strings-to-lists-and-back\" id=\"markdown-toc-from-strings-to-lists-and-back\">From Strings to Lists and Back</a></li>\n      <li><a href=\"#solution-1\" id=\"markdown-toc-solution-1\">Solution</a></li>\n      <li><a href=\"#working-with-the-end\" id=\"markdown-toc-working-with-the-end\">Working With the End</a></li>\n      <li><a href=\"#solution-2\" id=\"markdown-toc-solution-2\">Solution</a></li>\n      <li><a href=\"#stepping-through-a-list\" id=\"markdown-toc-stepping-through-a-list\">Stepping Through a List</a></li>\n      <li><a href=\"#solution-3\" id=\"markdown-toc-solution-3\">Solution</a></li>\n      <li><a href=\"#slice-bounds\" id=\"markdown-toc-slice-bounds\">Slice Bounds</a></li>\n      <li><a href=\"#solution-4\" id=\"markdown-toc-solution-4\">Solution</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#dictionaries\" id=\"markdown-toc-dictionaries\">Dictionaries</a>    <ol>\n      <li><a href=\"#methods\" id=\"markdown-toc-methods\">Methods</a></li>\n      <li><a href=\"#accessing-values\" id=\"markdown-toc-accessing-values\">Accessing Values</a></li>\n      <li><a href=\"#modifying-dictionaries\" id=\"markdown-toc-modifying-dictionaries\">Modifying Dictionaries</a></li>\n      <li><a href=\"#exercises-1\" id=\"markdown-toc-exercises-1\">Exercises</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#maybe-weve-exterminated-b117-and-b1351-remove-their-numbers\" id=\"markdown-toc-maybe-weve-exterminated-b117-and-b1351-remove-their-numbers\">Maybe we’ve exterminated B.1.1.7 and B.1.351, remove their numbers.</a></li>\n  <li><a href=\"#choosing-the-right-data-type\" id=\"markdown-toc-choosing-the-right-data-type\">Choosing the Right Data Type</a>    <ol>\n      <li><a href=\"#exercises-2\" id=\"markdown-toc-exercises-2\">Exercises</a></li>\n    </ol>\n  </li>\n</ol>\n\n</blockquote>\n\n<h1 id=\"lists\">Lists</h1>\n\n<p>Doing calculations with a hundred variables called <code class=\"language-plaintext highlighter-rouge\">pressure_001</code>, <code class=\"language-plaintext highlighter-rouge\">pressure_002</code>, etc. would be at least as slow as doing them by hand. Using a <em>list</em> to store many values together solves that problems. Lists are surrounded by square brackets: <code class=\"language-plaintext highlighter-rouge\">[</code>, <code class=\"language-plaintext highlighter-rouge\">]</code>, with values separated by commas:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">pressures</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.273</span><span class=\"p\">,</span> <span class=\"mf\">0.275</span><span class=\"p\">,</span> <span class=\"mf\">0.277</span><span class=\"p\">,</span> <span class=\"mf\">0.275</span><span class=\"p\">,</span> <span class=\"mf\">0.276</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">pressures: </span><span class=\"si\">{</span><span class=\"n\">pressures</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">length: </span><span class=\"si\">{</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">pressures</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"indexing\">Indexing</h2>\n\n<p>You can use an item’s index to fetch it from a list.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">zeroth item of pressures: </span><span class=\"si\">{</span><span class=\"n\">pressures</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">fourth item of pressures: </span><span class=\"si\">{</span><span class=\"n\">pressures</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"replacement\">Replacement</h2>\n\n<p>Lists’ values can be changed or replaced by assigning a new value to the position in the list.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">pressures</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.265</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">pressures is now: </span><span class=\"si\">{</span><span class=\"n\">pressures</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Note how the first item has changed from <code class=\"language-plaintext highlighter-rouge\">0.273</code></p>\n\n<h2 id=\"appending\">Appending</h2>\n\n<p>Appending items to a list lengthens it. You can do <code class=\"language-plaintext highlighter-rouge\">list_name.append()</code> to add items to the end of a list.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">primes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">primes is initially: </span><span class=\"si\">{</span><span class=\"n\">primes</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">primes</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">primes has become: </span><span class=\"si\">{</span><span class=\"n\">primes</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">.append()</code> is a <em>method</em> of lists. It’s like a function, but tied to a particular object. You use <code class=\"language-plaintext highlighter-rouge\">object_name.method_name</code> to call methods, which deliberately resembles the way we refer to things in a library.</p>\n\n<p>We will meet other methods of lists as we go along. Use <code class=\"language-plaintext highlighter-rouge\">help(list)</code> for a preview. <code class=\"language-plaintext highlighter-rouge\">extend</code> is similar to <code class=\"language-plaintext highlighter-rouge\">append</code>, but it allows you to combine two lists.  For example:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">teen_primes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">]</span>\n<span class=\"n\">middle_aged_primes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">37</span><span class=\"p\">,</span> <span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"mi\">43</span><span class=\"p\">,</span> <span class=\"mi\">47</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">primes is currently: </span><span class=\"si\">{</span><span class=\"n\">primes</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">primes</span><span class=\"p\">.</span><span class=\"nf\">extend</span><span class=\"p\">(</span><span class=\"n\">teen_primes</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">primes has now become: </span><span class=\"si\">{</span><span class=\"n\">primes</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">primes</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">middle_aged_primes</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">primes has finally become: </span><span class=\"si\">{</span><span class=\"n\">primes</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Note that while <code class=\"language-plaintext highlighter-rouge\">extend</code> maintains the “flat” structure of the list, appending a list to a list makes the result two-dimensional - the last element in <code class=\"language-plaintext highlighter-rouge\">primes</code> is a list, not an integer.</p>\n\n<p>This starts to become a more complicated data structure, and we’ll use more of these later. A list containing both integers and a list can be called a “hetereogenous” list, since it has multiple different data types. This is relatively uncommon, most of the lists you’ll encounter will have a single data type inside of them. Sometimes you’ll see a list of lists, which can be used to store positions, like a chessboard.</p>\n\n<h2 id=\"list-indices\">List Indices</h2>\n\n<p>In computer science and programming we number the positions within a list starting from <code class=\"language-plaintext highlighter-rouge\">0</code>, rather than from <code class=\"language-plaintext highlighter-rouge\">1</code>.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Position  0         1          2            3           4\n</span><span class=\"n\">weekdays</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Monday</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Tuesday</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Wednesday</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Thursday</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Friday</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">weekdays</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">weekdays</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">weekdays</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>But if you try an access a position that is outside of the list, you’ll get an error</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">weekdays</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>returns a <code class=\"language-plaintext highlighter-rouge\">IndexError: list index out of range</code>.</p>\n\n<blockquote class=\"tip\">\n  <tip-title>Reading Error Messages</tip-title>\n  <p>So how do you read this?</p>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1 | ---------------------------------------------------------------------------\n2 | IndexError                                Traceback (most recent call last)\n3 | /tmp/ipykernel_648319/137030145.py in &lt;module&gt;\n4 | ----&gt; 1 print(weekdays[9])\n5 |\n6 | IndexError: list index out of range\n</code></pre></div>  </div>\n\n  <ol>\n    <li>This is just a line of <code class=\"language-plaintext highlighter-rouge\">-</code>s as a separator</li>\n    <li><code class=\"language-plaintext highlighter-rouge\">IndexError</code>, here Jupyter/CoCalc/etc are trying to be helpful and highlight the error for us. This is the important bit of information!</li>\n    <li>This is the path to where the code is, Jupyter/CoCalc/etc create temporary files to execute your code.</li>\n    <li>Here an arrow points to the line number where something has broken. 1 shows that it’s the first line within the cell, and it points to the print statement. Really it’s pointing at the <code class=\"language-plaintext highlighter-rouge\">weekdays[9]</code> within the print statement.</li>\n    <li>Blank</li>\n    <li>This is where we normally look for the <strong>most important part of the Traceback</strong>. The error message. An <code class=\"language-plaintext highlighter-rouge\">IndexError</code>, namely that the list index (9) is out of the range of possible values (the length of the list.)</li>\n  </ol>\n</blockquote>\n\n<p>However, sometimes you want to access the very end of a list! You can either start at the beginning and count along to find the last item or second to last item, or you can use Negative Indices</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Position  0         1          2            3           4\n</span><span class=\"n\">weekdays</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Monday</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Tuesday</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Wednesday</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Thursday</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Friday</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"c1\"># Position  -5        -4         -3           -2          -1\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">weekdays</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">weekdays</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">weekdays</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>If you wanted to find the last value in a list, you could also use <code class=\"language-plaintext highlighter-rouge\">len(elements)</code> and then subtract back to find the index you want</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">elements</span><span class=\"p\">[</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">elements</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>This is essentially how negative indexes work, except you don’t have to use <code class=\"language-plaintext highlighter-rouge\">len(elements)</code>, that’s done for you automatically.</p>\n\n<h2 id=\"removing-items\">Removing Items.</h2>\n\n<p>You can use <code class=\"language-plaintext highlighter-rouge\">del</code> to remove items from a list entirely. We use <code class=\"language-plaintext highlighter-rouge\">del list_name[index]</code> to remove an element from a list (in the example, 9 is not a prime number) and thus shorten it. <code class=\"language-plaintext highlighter-rouge\">del</code> is not a function or a method, but a statement in the language.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">primes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">primes before removing last item: </span><span class=\"si\">{</span><span class=\"n\">primes</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">del</span> <span class=\"n\">primes</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">primes after removing last item: </span><span class=\"si\">{</span><span class=\"n\">primes</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"empty-lists\">Empty Lists</h2>\n\n<p>The empty list contains no values. When you want to make a new list, use <code class=\"language-plaintext highlighter-rouge\">[]</code> on its own to represent a list that doesn’t contain any values. This is helpful as a starting point for collecting values, which we’ll see soon.</p>\n\n<h2 id=\"heterogeneous-lists\">Heterogeneous Lists</h2>\n\n<p>Lists may contain values of different types. A single list may contain numbers, strings, and anything else.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">goals</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Create lists.</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Extract items from lists.</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Modify lists.</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<h2 id=\"strings-are-like-lists\">Strings are like Lists</h2>\n\n<p>Text is often called a “string” in the programming world. Strings of text like <code class=\"language-plaintext highlighter-rouge\">name = \"Helena\"</code> or <code class=\"language-plaintext highlighter-rouge\">patient_id = \"19237zud830\"</code> are very similar conceptually to lists. Except instead of being a list of numbers, they’re a lists of characters.</p>\n\n<p>In a number of older programming languages, strings are indeed arrays of numbers internally. However python hides a lot of that complexity from us, so we can just work with text.</p>\n\n<p>Still, many of the operations you use on lists, can also be used on strings as well! Strings can be indexed like lists so you can get single elements from lists.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">element</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">carbon</span><span class=\"sh\">'</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">zeroth character: </span><span class=\"si\">{</span><span class=\"n\">element</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">third character: </span><span class=\"si\">{</span><span class=\"n\">element</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Strings, however, cannot be modified, you can’t change a single letter in a string. Things that cannot be modified after creation are called <em>immutable</em> or sometimes <em>frozen</em>, compared to things which can be modified which are called <em>mutable</em>.\nPython considers the string to be a single value with parts, not a collection of values.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">element</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span>\n</code></pre></div></div>\n\n<h2 id=\"bounds\">Bounds</h2>\n\n<p>You cannot access values beyond the end of the list, this will result in an error. Python reports an <code class=\"language-plaintext highlighter-rouge\">IndexError</code> if we attempt to access a value that doesn’t exist. This is a kind of <strong>runtime error</strong>, as it cannot be detected as the code is parsed. Imagine if you had a script which let you read in a file, depending on how many lines were in the file, whether index 90 was valid or invalid, would depend on how big your file was.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">99th element of element is: </span><span class=\"si\">{</span><span class=\"n\">element</span><span class=\"p\">[</span><span class=\"mi\">99</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"exercises\">Exercises</h2>\n\n<blockquote class=\"question\">\n  <question-title>Checking suffixes</question-title>\n\n  <ol>\n    <li>How could you check that the extension of a filename is <code class=\"language-plaintext highlighter-rouge\">.csv</code></li>\n    <li>Can you find another way? Maybe check the help page for <code class=\"language-plaintext highlighter-rouge\">str</code></li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <ol>\n      <li><code class=\"language-plaintext highlighter-rouge\">a[-4:] == \"csv\"</code> (Here we use <code class=\"language-plaintext highlighter-rouge\">==</code> for comparing two values)</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">a.endswith('.csv')</code></li>\n    </ol>\n\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Test code here!\n</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">1234.csv</span><span class=\"sh\">\"</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">1273.tsv</span><span class=\"sh\">\"</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">9382.csv</span><span class=\"sh\">\"</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">1239.csv</span><span class=\"sh\">\"</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Say it loud!</question-title>\n\n  <ol>\n    <li>Can you find a method in the <code class=\"language-plaintext highlighter-rouge\">str</code>’s help that converts the string to upper case</li>\n    <li>or lower case?</li>\n    <li>Can you use it to fix mixed case DNA sequence?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <ol>\n      <li><code class=\"language-plaintext highlighter-rouge\">\"shout it out\".upper()</code></li>\n      <li><code class=\"language-plaintext highlighter-rouge\">\"WHISPER THIS\".lower()</code></li>\n      <li><code class=\"language-plaintext highlighter-rouge\">terrible_sequence.upper()</code></li>\n    </ol>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Test answers here!\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">shout it out</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">WHISPER THIS</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Fix this mess to be all capital\n</span><span class=\"n\">terrible_sequence</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">AcTGAGccGGTt</span><span class=\"sh\">\"</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">terrible_sequence</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Splitting</question-title>\n  <ol>\n    <li>We use <code class=\"language-plaintext highlighter-rouge\">.split()</code> to split a string by some character. Here we have a comma separated list of values, try splitting that up by a comma, but we actually wanted it separated by <code class=\"language-plaintext highlighter-rouge\">|</code> characters. Can you split it up, and then re-join it with that new character?</li>\n    <li>Does <code class=\"language-plaintext highlighter-rouge\">help(str)</code> give you another option for replacing a character like that.</li>\n    <li>What happens if you split by another value like <code class=\"language-plaintext highlighter-rouge\">3</code>?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <ol>\n      <li><code class=\"language-plaintext highlighter-rouge\">data.split(\",\")</code></li>\n      <li><code class=\"language-plaintext highlighter-rouge\">data.replace(\",\", \"|\")</code></li>\n      <li>Those characters will disappear! If you want to reconstruct the same string</li>\n    </ol>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Split me\n</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">0,0,1,3,1,2,4,7,8,3,3,3,10,5,7,4,7,7,12,18,6,13,11,11,7,7,4,6,8,8,4,4,5,7,3,4,2,3,0,0</span><span class=\"sh\">\"</span>\n</code></pre></div></div>\n\n<h1 id=\"slicing--dicing\">Slicing &amp; Dicing</h1>\n\n<p>All of the data types we’ve talked about today can be sliced, and this will be a key part of using lists.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">elements</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">H</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">He</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Li</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Be</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">N</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">O</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">F</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"c1\"># Instead of accessing a single element\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">elements</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"c1\"># We'll access a range\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">elements</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>Accessing only a portion of a list is commonly used, say if you have a list of FastQ files from paired end sequencing, perhaps you want two of them at a time. You could access those with <code class=\"language-plaintext highlighter-rouge\">[0:2]</code>.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># You don't need to start at 0\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">elements</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">8</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># But your end should be bigger than your start.\n# What do you think this will return?\n# Make a guess before you run it\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">elements</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>If you don’t supply an end value, Python will default to going to the end of the list. Likewise, if you don’t provide a start value, Python will use <code class=\"language-plaintext highlighter-rouge\">0</code> as the start by default, until whatever end value you provide.</p>\n\n<blockquote class=\"question\">\n  <question-title>Valid and Invalid Slices</question-title>\n  <p>Which of these do you think will be valid? Which are invalid? Predict what they will return:</p>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># 1\nelements = ['H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F']\n# 2\nelements[0:3]\n# 3\nelements[:3]\n# 4\nelements[-3:3]\n# 5\nelements[-8:-3]\n# 6\nelements[:]\n# 7\nelements[0:20]\n# 8\nelements['H':'Li']\n# 9\nelements[1.5:]\n</code></pre></div>  </div>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <p>All of these are valid except the last two.</p>\n    <ol>\n      <li>If you dont’ fill in a position, Python will use the default. 0 for the left hand side of the <code class=\"language-plaintext highlighter-rouge\">:</code>, and <code class=\"language-plaintext highlighter-rouge\">len(elements)</code> for the right hand side.</li>\n      <li>You can request a slice longer than your list (e.g. up to 20), but Python may not give you that many items back.</li>\n      <li>List slicing can only be done with integers, not floats.</li>\n    </ol>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Check your answers here!\n</span></code></pre></div></div>\n\n<h2 id=\"stride\">Stride</h2>\n\n<p>However, list slicing can be more complicated. You can additionally use a ‘stride’ parameter, which is how Python should strep through the list. To take every other element from a list:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"c1\"># every other value\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"c1\"># every other value from the second value\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">[::</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"c1\"># the start and end are optional\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">[::</span><span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"c1\"># every third value in the list.\n</span></code></pre></div></div>\n\n<p>So list slicing together is either <code class=\"language-plaintext highlighter-rouge\">list[low:high]</code> or <code class=\"language-plaintext highlighter-rouge\">list[low:high:stride]</code>, where low and high are optional if you just want to go to the end of the list.</p>\n\n<h2 id=\"sorting\">Sorting</h2>\n\n<p>Lists occasionally need to be sorted. For example, you have a list of students you might want to alphabetise, and here you can use the function <code class=\"language-plaintext highlighter-rouge\">sorted</code> to help you.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">students</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"sh\">'</span><span class=\"s\">Koos Christabella</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">Zackary Habiba</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">Jumana Rostam</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">Sorina Gaia</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">Kalyani Bessarion</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">Enéas Nirmala</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">王奕辰</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">刘依诺</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n<span class=\"n\">students</span> <span class=\"o\">=</span> <span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">students</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">students</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"tip\">\n  <tip-title>Sorting names is hard!</tip-title>\n  <p>Some people have 1 name, some have 4 or more! Some cultures have surnames first, some not. Sorting names is a complex situation, so be sure you consider your data before sorting and assuming it’s correct. Test with multiple values to make sure your code works!</p>\n</blockquote>\n\n<blockquote class=\"tip\">\n  <tip-title>Results can be dependent on analysis order!</tip-title>\n  <p>Some analyses (especially simultaions) can be dependent on data input order or data sorting. This was recently seen in <span class=\"citation\"><a href=\"#Bhandari_Neupane_2019\">Neupane <i>et al.</i> 2019</a></span> where the data files used were sorted one way on Windows, and another on Linux, resulting in different results for the same code and the same datasets! Yikes!</p>\n\n  <p>If you know your analyses are dependent on file ordering, then you can use <code class=\"language-plaintext highlighter-rouge\">sorted()</code> to make sure the data is provided in a uniform way every time.</p>\n\n  <p>If you’re not sure if your results will be dependent, you can try sorting anyway. Or better yet, randomising the list of inputs to make sure your code behaves properly in any scenario.</p>\n</blockquote>\n\n<h2 id=\"type-conversion\">Type Conversion</h2>\n\n<p>Just list with converting <code class=\"language-plaintext highlighter-rouge\">\"1.5\"</code> to an float with the <code class=\"language-plaintext highlighter-rouge\">float()</code> function, or <code class=\"language-plaintext highlighter-rouge\">3.1</code> to a string with <code class=\"language-plaintext highlighter-rouge\">str()</code>, we can do the same with lists using the <code class=\"language-plaintext highlighter-rouge\">list()</code> function, and sets with <code class=\"language-plaintext highlighter-rouge\">set()</code>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Convert text to a list\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">sometext</span><span class=\"sh\">\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>Converting a list back into text is likewise possible, but you need to use the special function <code class=\"language-plaintext highlighter-rouge\">join</code>. Join is a function of a <code class=\"language-plaintext highlighter-rouge\">str</code>, which accepts a list</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">f</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">e</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">-</span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>It takes the string you called it on, and uses that as a separator. Then for the list that you provide, it joins that together with the separator.</p>\n\n<h1 id=\"exercise-time\">Exercise Time</h1>\n\n<blockquote class=\"question\">\n  <question-title>Fill in the Blanks</question-title>\n\n  <p>Fill in the blanks so that the program below produces the output shown.</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>values = ____\nvalues.____(1)\nvalues.____(3)\nvalues.____(5)\nprint(f'first time: {values}')\nvalues = values[____]\nprint(f'second time: {values}')\n</code></pre></div>  </div>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>first time: [1, 3, 5]\nsecond time: [3, 5]\n</code></pre></div>  </div>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>values = []\nvalues.append(1)\nvalues.append(3)\nvalues.append(5)\nprint(f'first time: {values}')\nvalues = values[1:]\nprint(f'second time: {values}')\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Fill in the blanks here!\n</span>\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">____</span>\n<span class=\"n\">values</span><span class=\"p\">.</span><span class=\"nf\">____</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">values</span><span class=\"p\">.</span><span class=\"nf\">____</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">values</span><span class=\"p\">.</span><span class=\"nf\">____</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">first time: </span><span class=\"si\">{</span><span class=\"n\">values</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"c1\"># Should print [1, 3, 5]\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"n\">____</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">second time: </span><span class=\"si\">{</span><span class=\"n\">values</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"c1\"># should print [3, 5]\n</span></code></pre></div></div>\n\n<blockquote class=\"question\">\n  <h2 id=\"how-large-is-a-slice\">How Large is a Slice?</h2>\n\n  <p>If <code class=\"language-plaintext highlighter-rouge\">start</code> and <code class=\"language-plaintext highlighter-rouge\">stop</code> are both non-negative integers,\nhow long is the list <code class=\"language-plaintext highlighter-rouge\">values[start:stop]</code>?</p>\n\n  <blockquote class=\"solution\">\n    <h2 id=\"solution\">Solution</h2>\n    <p>The list <code class=\"language-plaintext highlighter-rouge\">values[start:stop]</code> has up to <code class=\"language-plaintext highlighter-rouge\">stop - start</code> elements.  For example,\n<code class=\"language-plaintext highlighter-rouge\">values[1:4]</code> has the 3 elements <code class=\"language-plaintext highlighter-rouge\">values[1]</code>, <code class=\"language-plaintext highlighter-rouge\">values[2]</code>, and <code class=\"language-plaintext highlighter-rouge\">values[3]</code>.\nWhy ‘up to’?\nIf <code class=\"language-plaintext highlighter-rouge\">stop</code> is greater than the total length of the list <code class=\"language-plaintext highlighter-rouge\">values</code>,\nwe will still get a list back but it will be shorter than expected.</p>\n  </blockquote>\n</blockquote>\n\n<blockquote class=\"question\">\n  <h2 id=\"from-strings-to-lists-and-back\">From Strings to Lists and Back</h2>\n\n  <p>Given this:</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>print(f'string to list: {list('tin')}')\nprint(f'list to string: {''.join(['g', 'o', 'l', 'd'])}')\n</code></pre></div>  </div>\n\n  <ol>\n    <li>What does <code class=\"language-plaintext highlighter-rouge\">list('some string')</code> do?</li>\n    <li>What does <code class=\"language-plaintext highlighter-rouge\">'-'.join(['x', 'y', 'z'])</code> generate?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <h2 id=\"solution-1\">Solution</h2>\n    <ol>\n      <li><a href=\"https://docs.python.org/3/library/stdtypes.html#list\"><code class=\"language-plaintext highlighter-rouge\">list('some string')</code></a> converts a string into a list containing all of its characters.</li>\n      <li><a href=\"https://docs.python.org/3/library/stdtypes.html#str.join\"><code class=\"language-plaintext highlighter-rouge\">join</code></a> returns a string that is the <em>concatenation</em>\nof each string element in the list and adds the separator between each element in the list. This results in\n<code class=\"language-plaintext highlighter-rouge\">x-y-z</code>. The separator between the elements is the string that provides this method.</li>\n    </ol>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Test code here\n</span></code></pre></div></div>\n\n<blockquote class=\"question\">\n  <h2 id=\"working-with-the-end\">Working With the End</h2>\n\n  <p>What does the following program print?</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>element = 'helium'\nprint(element[-1])\n</code></pre></div>  </div>\n\n  <ol>\n    <li>How does Python interpret a negative index?</li>\n    <li>If a list or string has N elements,\nwhat is the most negative index that can safely be used with it,\nand what location does that index represent?</li>\n    <li>If <code class=\"language-plaintext highlighter-rouge\">values</code> is a list, what does <code class=\"language-plaintext highlighter-rouge\">del values[-1]</code> do?</li>\n    <li>How can you display all elements but the last one without changing <code class=\"language-plaintext highlighter-rouge\">values</code>?\n(Hint: you will need to combine slicing and negative indexing.)</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <h2 id=\"solution-2\">Solution</h2>\n    <p>The program prints <code class=\"language-plaintext highlighter-rouge\">m</code>.</p>\n    <ol>\n      <li>Python interprets a negative index as starting from the end (as opposed to\nstarting from the beginning).  The last element is <code class=\"language-plaintext highlighter-rouge\">-1</code>.</li>\n      <li>The last index that can safely be used with a list of N elements is element\n<code class=\"language-plaintext highlighter-rouge\">-N</code>, which represents the first element.</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">del values[-1]</code> removes the last element from the list.</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">values[:-1]</code></li>\n    </ol>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Test code here\n</span></code></pre></div></div>\n\n<blockquote class=\"question\">\n  <h2 id=\"stepping-through-a-list\">Stepping Through a List</h2>\n\n  <p>What does the following program print?</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>element = 'fluorine'\nprint(element[::2])\nprint(element[::-1])\n</code></pre></div>  </div>\n\n  <ol>\n    <li>If we write a slice as <code class=\"language-plaintext highlighter-rouge\">low:high:stride</code>, what does <code class=\"language-plaintext highlighter-rouge\">stride</code> do?</li>\n    <li>What expression would select all of the even-numbered items from a collection?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <h2 id=\"solution-3\">Solution</h2>\n    <p>The program prints</p>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>furn\neniroulf\n</code></pre></div>    </div>\n    <ol>\n      <li><code class=\"language-plaintext highlighter-rouge\">stride</code> is the step size of the slice.</li>\n      <li>The slice <code class=\"language-plaintext highlighter-rouge\">1::2</code> selects all even-numbered items from a collection: it starts\nwith element <code class=\"language-plaintext highlighter-rouge\">1</code> (which is the second element, since indexing starts at <code class=\"language-plaintext highlighter-rouge\">0</code>),\ngoes on until the end (since no <code class=\"language-plaintext highlighter-rouge\">end</code> is given), and uses a step size of <code class=\"language-plaintext highlighter-rouge\">2</code>\n(i.e., selects every second element).</li>\n    </ol>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Test code here\n</span></code></pre></div></div>\n\n<blockquote class=\"question\">\n  <h2 id=\"slice-bounds\">Slice Bounds</h2>\n\n  <p>What does the following program print?</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>element = 'lithium'\nprint(element[0:20])\nprint(element[-1:3])\n</code></pre></div>  </div>\n\n  <blockquote class=\"solution\">\n    <h2 id=\"solution-4\">Solution</h2>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>lithium\n\n</code></pre></div>    </div>\n\n    <p>The first statement prints the whole string, since the slice goes beyond the total length of the string.\nThe second statement returns an empty string, because the slice goes “out of bounds” of the string.</p>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Test code here\n</span></code></pre></div></div>\n\n<h1 id=\"dictionaries\">Dictionaries</h1>\n\n<p>When you think of a Dictionary, you should think of a real life Dictionary, they map some key to a value. Like a term to it’s definition</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">Eichhörnchen</code></td>\n      <td>Squirrel</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">火锅</code></td>\n      <td>Hot Pot</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Or a Country to it’s population</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>South Sudan</td>\n      <td>492,970</td>\n    </tr>\n    <tr>\n      <td>Australia</td>\n      <td>411,667</td>\n    </tr>\n    <tr>\n      <td>Guinea</td>\n      <td>1,660,973</td>\n    </tr>\n    <tr>\n      <td>Morocco</td>\n      <td>573,895</td>\n    </tr>\n    <tr>\n      <td>Maldives</td>\n      <td>221,678</td>\n    </tr>\n    <tr>\n      <td>Wallis and Futuna</td>\n      <td>1,126</td>\n    </tr>\n    <tr>\n      <td>Eswatini</td>\n      <td>94,874</td>\n    </tr>\n    <tr>\n      <td>Namibia</td>\n      <td>325,858</td>\n    </tr>\n    <tr>\n      <td>Turkmenistan</td>\n      <td>1,031,992</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>In Python we create a dictionary with <code class=\"language-plaintext highlighter-rouge\">{}</code> and use <code class=\"language-plaintext highlighter-rouge\">:</code> to separate keys and values. Turning the above list into a Python dictionary, it would look like:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">populations</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"sh\">\"</span><span class=\"s\">South Sudan</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">492970</span><span class=\"p\">,</span>\n  <span class=\"sh\">\"</span><span class=\"s\">Australia</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">411667</span><span class=\"p\">,</span>\n  <span class=\"sh\">\"</span><span class=\"s\">Guinea</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">1660973</span><span class=\"p\">,</span>\n  <span class=\"sh\">\"</span><span class=\"s\">Morocco</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">573895</span><span class=\"p\">,</span>\n  <span class=\"sh\">\"</span><span class=\"s\">Maldives</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">221678</span><span class=\"p\">,</span>\n  <span class=\"sh\">\"</span><span class=\"s\">Wallis and Futuna</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">1126</span><span class=\"p\">,</span>\n  <span class=\"sh\">\"</span><span class=\"s\">Eswatini</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">94874</span><span class=\"p\">,</span>\n  <span class=\"sh\">\"</span><span class=\"s\">Namibia</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">325858</span><span class=\"p\">,</span>\n  <span class=\"sh\">\"</span><span class=\"s\">Turkmenistan</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">1031992</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You can see a string (the country name) being used for the key, and then the number (an integer) as the value. (Would a float make sense? Why or why not?)</p>\n\n<blockquote class=\"tip\">\n  <tip-title>Other Names</tip-title>\n  <p>They’re also sometimes called associative arrays (because they’re an array or list of values that associate a key to a value) or maps (because they map a key to a value), depending on what you’re reading.</p>\n</blockquote>\n\n<h2 id=\"methods\">Methods</h2>\n\n<p>You can access both the keys, and the values</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">populations</span><span class=\"p\">.</span><span class=\"nf\">keys</span><span class=\"p\">())</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">populations</span><span class=\"p\">.</span><span class=\"nf\">values</span><span class=\"p\">())</span>\n</code></pre></div></div>\n\n<p>These will print out two list-like objects. They will become more useful in the future when we talk about looping over dictionaries and processing all of the values within.</p>\n\n<h2 id=\"accessing-values\">Accessing Values</h2>\n\n<p>Just like lists where you access by the position in the list</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">populations</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">Namibia</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>And just like lists, if you try an access a key that isn’t there or an index outside of the range of the list:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">populations</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">Mars</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<blockquote class=\"tip\">\n  <tip-title>Dictionaries are faster than lists for looking up values</tip-title>\n  <p>Just like in real life, searching a dictionary for a specific term is quite fast. Often a lot faster than searching a list for a specific value.</p>\n\n  <p>For those of you old enough to remember the paper version of a dictionary, you knew that As would be at the start and Zs at the end, and probably Ms around the middle. And if you were looking for a word like “Squirrel”, you’d open the dictionary in the middle, maybe decide it was in the second half of the book, randomly choose a page in the second half, and you could keep deciding if it was “before” or “after” the current page, never even bothering to search the first half.</p>\n\n  <p>Conceptually, compared with a list, you can’t make this guess of if the item is in the first or second half. You need to search item by item, it would be like reading page by page until you get to Squirrel in the dictionary.</p>\n</blockquote>\n\n<h2 id=\"modifying-dictionaries\">Modifying Dictionaries</h2>\n\n<p>Adding new values to a dictionary is easy, it’s very similar to replacing a value in a list.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># For lists we did\n</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">x</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">y</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">z</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>For dictionaries, it’s essentially the same, we access the ‘place’ in the dictionary just like we did with a list, and set it to a value</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">populations</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">Mars</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">6</span> <span class=\"c1\"># robots\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">populations</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>And similarly, removing items is the same as it was for lists:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"k\">del</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"c1\"># Removes the first item\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>And with dictionaries you delete by specifying which position/key you want to remove</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">del</span> <span class=\"n\">populations</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Australia</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">populations</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"exercises-1\">Exercises</h2>\n\n<blockquote class=\"question\">\n  <question-title>DNA Complement</question-title>\n\n  <p>DNA is usually in the form of dsDNA, a paired strand, where A maps to T and C maps to G and vice versa.\nBut when we’re working with DNA sequences in bioinformatics, we often only store one strand, because we can calculate the <em>complement</em> on the fly, when we need.</p>\n\n  <p>Write a dictionary that lets you look up the letters A, C, T, and G and find their complements.</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <p>You need to have the complements of every base. If you just defined ‘A’ and ‘C’, how would you look up the complement when you want to translate a ‘T’ or a ‘G’? It’s not easily possible to look up a key by a value, only to search a key and find a value.</p>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>translation = {\n'A': 'T',\n'T': 'A',\n'C': 'G',\n'G': 'C',\n}\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Test code here!\n</span><span class=\"n\">translation</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\n<span class=\"p\">}</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">translation</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Modifying an array</question-title>\n\n  <p>Fill in the blanks to make the execution correct:</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>variants = {\n  'B.1.1.7': 26267,\n  'B.1.351': 439,\n}\nvariants[_____] =  _____\nprint(variants) # Should print {'B.1.1.7': 26267, 'B.1.351': 439, 'P.1': 384}\n__________\nprint(variants) # Should print {'B.1.1.7': 26267, 'B.1.351': 439, 'P.1': 384, 'B.1.617.2': 43486}\n# Maybe we've exterminated B.1.1.7 and B.1.351, remove their numbers.\ndel _______\ndel _______\nprint(variants[______]) # Should print 384\nprint(variants[______]) # Should print 43486\n</code></pre></div>  </div>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p>variants = {\n  ‘B.1.1.7’: 26267,\n  ‘B.1.351’: 439,\n}\nvariants[‘P.1’] = 384\nprint(variants) # Should print {‘B.1.1.7’: 26267, ‘B.1.351’: 439, ‘P.1’: 384}\nvariants[‘B.1.617.2’] = 43486\nprint(variants) # Should print {‘B.1.1.7’: 26267, ‘B.1.351’: 439, ‘P.1’: 384, ‘B.1.617.2’: 43486}</p>\n    <h1 id=\"maybe-weve-exterminated-b117-and-b1351-remove-their-numbers\">Maybe we’ve exterminated B.1.1.7 and B.1.351, remove their numbers.</h1>\n    <p>del variants[‘B.1.1.7’]\ndel variants[‘B.1.351’]\nprint(variants[‘P.1’]) # Should print 384\nprint(variants[‘B.1.617.2’]) # Should print 43486\n```</p>\n\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Test code here!\n</span><span class=\"n\">variants</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"sh\">'</span><span class=\"s\">B.1.1.7</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mi\">26267</span><span class=\"p\">,</span>\n  <span class=\"sh\">'</span><span class=\"s\">B.1.351</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mi\">439</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"n\">variants</span><span class=\"p\">[</span><span class=\"n\">_____</span><span class=\"p\">]</span> <span class=\"o\">=</span>  <span class=\"n\">_____</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">variants</span><span class=\"p\">)</span> <span class=\"c1\"># Should print {'B.1.1.7': 26267, 'B.1.351': 439, 'P.1': 384}\n</span><span class=\"n\">__________</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">variants</span><span class=\"p\">)</span> <span class=\"c1\"># Should print {'B.1.1.7': 26267, 'B.1.351': 439, 'P.1': 384, 'B.1.617.2': 43486}\n# Maybe we've exterminated B.1.1.7 and B.1.351, remove their numbers.\n</span><span class=\"k\">del</span> <span class=\"n\">_______</span>\n<span class=\"k\">del</span> <span class=\"n\">_______</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">variants</span><span class=\"p\">[</span><span class=\"n\">______</span><span class=\"p\">])</span> <span class=\"c1\"># Should print 384\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">variants</span><span class=\"p\">[</span><span class=\"n\">______</span><span class=\"p\">])</span> <span class=\"c1\"># Should print 43486\n</span></code></pre></div></div>\n\n<h1 id=\"choosing-the-right-data-type\">Choosing the Right Data Type</h1>\n\n<p>Choosing the correct data type can sometimes require some thought, and even discussion with colleagues. And don’t be afraid to search the internet for how other people have done it!</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Data type</th>\n      <th>Examples</th>\n      <th>When to use it</th>\n      <th>When <strong>not</strong> to use it</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Boolean (<code class=\"language-plaintext highlighter-rouge\">bool</code>)</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">True</code>, <code class=\"language-plaintext highlighter-rouge\">False</code></td>\n      <td>If there are only two possible states, true or false</td>\n      <td>If your data is not binary</td>\n    </tr>\n    <tr>\n      <td>Integer (<code class=\"language-plaintext highlighter-rouge\">int</code>)</td>\n      <td>1, 0, -1023, 42</td>\n      <td>Countable, singular items. How many patients are there, how many events did you record, how many variants are there in the sequence</td>\n      <td>If doubling or halving the value would not make sense: do not use for e.g. patient IDs, or phone numbers. If these are integers you might accidentally do math on the value.</td>\n    </tr>\n    <tr>\n      <td>Float (<code class=\"language-plaintext highlighter-rouge\">float</code>)</td>\n      <td>123.49, 3.14159, -3.33334</td>\n      <td>If you need more precision or partial values. Recording distance between places, height, mass, etc.</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>Strings (<code class=\"language-plaintext highlighter-rouge\">str</code>)</td>\n      <td>‘patient_12312’, ‘Jane Doe’, ‘火锅’</td>\n      <td>To store free text, identifiers, sequence IDs, etc.</td>\n      <td>If it’s truly a numeric value you can do calculations with, like adding or subtracting or doing statistics.</td>\n    </tr>\n    <tr>\n      <td>List / Array (<code class=\"language-plaintext highlighter-rouge\">list</code>)</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">['A', 1, 3.4, ['Nested']]</code></td>\n      <td>If you need to store a list of items, like sequences from a file. Especially if you’re reading in a table of data from a file.</td>\n      <td>If you want to retrieve individual values, and there are clear identifiers it might be better as a dict.</td>\n    </tr>\n    <tr>\n      <td>Dictionary / Associative Array / map (<code class=\"language-plaintext highlighter-rouge\">dict</code>)</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">{\"weight\": 3.4, \"age\": 12, \"name\": \"Fluffy\"}</code></td>\n      <td>When you have identifiers for your data, and want to look them up by that value. E.g. looking up sequences by an identifier, or data about students based on their name. Counting values.</td>\n      <td>If you just have a list of items without identifiers, it makes more sense to just use a list.</td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 id=\"exercises-2\">Exercises</h2>\n\n<blockquote class=\"question\">\n  <question-title>Which Datatype</question-title>\n\n  <ol>\n    <li>Chromosome Length</li>\n    <li>Name</li>\n    <li>Weight</li>\n    <li>Sex</li>\n    <li>Hair Colour</li>\n    <li>Money/Currency</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <ol>\n      <li>Here you need to use an integer, a fractional or float value would not make sense. You cannot have half an A/C/T/G.</li>\n      <li>Here a string would be a good choice. (And probably just a single <code class=\"language-plaintext highlighter-rouge\">name</code> string, rather than a <code class=\"language-plaintext highlighter-rouge\">first</code> and <code class=\"language-plaintext highlighter-rouge\">last</code> name, as not all humans have two names! And some have more than two.)</li>\n      <li>An integer is good type for storing weight, if you are using a small unit (e.g. grams). Otherwise you might consider a float, but you’d need to be careful to format it properly (e.g. <code class=\"language-plaintext highlighter-rouge\">{value:0.2f}</code>) when printing it out. It depends on the application.</li>\n      <li>This is a case where you should consider carefully the application, but <code class=\"language-plaintext highlighter-rouge\">bool</code> is usally the <em>wrong answer</em>. Are you recording patient data? Is their expressed gender the correct variable or did you need sex? <span class=\"citation\"><a href=\"#Miyagi_2021\">Miyagi <i>et al.</i> 2021</a></span> goes into detail on this multifaceted issue in a medical research context. For example chromosomal sex is also more complicated and cannot be stored with a true/false value, as people with <a href=\"https://en.wikipedia.org/wiki/Klinefelter_syndrome\">Kleinfelters</a> exist. A string can be an ok choice here.</li>\n      <li>There is a limited vocabulary humans use to describe hair colour, so a string can be used, or a data type we haven’t discussed! An <code class=\"language-plaintext highlighter-rouge\">enum</code> is an <code class=\"language-plaintext highlighter-rouge\">enumeration</code>, and when you have a limited set of values that are possible, you can use a <code class=\"language-plaintext highlighter-rouge\">enum</code> to double check that whatever value is being used (or read from a file, or entered by a user) matches one of the “approved” values.</li>\n      <li>A float is a good guess, but with floats come weird rounding issues. Often times people choose to use an integer storing the value in cents (or fractional cents, to whatever the desired precision is).</li>\n    </ol>\n\n  </blockquote>\n</blockquote>\n"],"ref_slides":[],"video_library":{"tutorial":null,"slides":null,"demo":null,"both":null,"session":null},"hands_on":true,"slides":false,"mod_date":"2023-05-17 17:21:19 +0000","pub_date":"2022-04-25 11:43:04 +0000","version":18,"api":"https://training.galaxyproject.org/training-material/api/topics/data-science/tutorials/python-iterables/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"Foundations of Data Science","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial"}