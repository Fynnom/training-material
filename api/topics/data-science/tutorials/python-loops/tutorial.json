{"layout":"tutorial_hands_on","title":"Python - Loops","level":"Introductory","requirements":[{"type":"internal","topic_name":"data-science","tutorials":["python-iterables","python-flow"]}],"follow_up_training":[],"questions":["How can I make a program do many things?"],"objectives":["Explain what for loops are normally used for.","Trace the execution of a simple (unnested) loop and correctly state the values of variables in each iteration.","Write for loops that use the Accumulator pattern to aggregate values."],"time_estimation":"40M","key_points":["A *for loop* executes commands once for each value in a collection.","A `for` loop is made up of a collection, a loop variable, and a body.","The first line of the `for` loop must end with a colon, and the body must be indented.","Indentation is always meaningful in Python.","Loop variables can be called anything (but it is strongly advised to have a meaningful name to the looping variable).","The body of a loop can contain many statements.","Use `range` to iterate over a sequence of numbers.","The Accumulator pattern turns many values into one."],"subtopic":"python-modular","contributors":[{"name":"The Carpentries","joined":"2021-09","id":"carpentries","url":"https://training.galaxyproject.org/training-material/api/organisations/carpentries.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/carpentries/"},{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"},{"name":"Donny Vrins","joined":"2021-10","linkedin":"Donny Vrins","email":"D.vrins@live.nl","former_affiliations":["avans-atgm"],"id":"dirowa","url":"https://training.galaxyproject.org/training-material/api/contributors/dirowa.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/dirowa/"},{"name":"Bazante Sanders","joined":"2020-12","affiliations":["avans-atgm"],"id":"bazante1","url":"https://training.galaxyproject.org/training-material/api/contributors/bazante1.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/bazante1/"}],"priority":6,"notebook":{"language":"python","pyolite":true},"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00093","url":"/topics/data-science/tutorials/python-loops/tutorial.html","topic_name":"data-science","tutorial_name":"python-loops","dir":"topics/data-science/tutorials/python-loops","symlink":null,"id":"data-science/python-loops","ref_tutorials":["<p>A <em>for loop</em> tells Python to execute some statements once for each value in a list, a character string, or some other collection: “for each thing in this group, do these operations”</p>\n\n<blockquote class=\"comment\">\n  <comment-title></comment-title>\n  <p>This tutorial is <strong>significantly</strong> based on <a href=\"https://carpentries.org\">the Carpentries</a> <a href=\"https://swcarpentry.github.io/python-novice-inflammation/\">Programming with Python</a>, <a href=\"https://swcarpentry.github.io/python-novice-inflammation/\">Programming with Python</a>, and <a href=\"https://swcarpentry.github.io/python-novice-gapminder/\">Plotting and Programming in Python</a>, which are licensed CC-BY 4.0.</p>\n\n  <p>Adaptations have been made to make this work better in a GTN/Galaxy environment.</p>\n</blockquote>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#for-loops\" id=\"markdown-toc-for-loops\">For Loops</a>    <ol>\n      <li><a href=\"#structure\" id=\"markdown-toc-structure\">Structure</a></li>\n      <li><a href=\"#a-for-loop-is-made-up-of-a-collection-a-loop-variable-and-a-body\" id=\"markdown-toc-a-for-loop-is-made-up-of-a-collection-a-loop-variable-and-a-body\">A <code class=\"language-plaintext highlighter-rouge\">for</code> loop is made up of a collection, a loop variable, and a body.</a></li>\n      <li><a href=\"#things-you-can-loop-over\" id=\"markdown-toc-things-you-can-loop-over\">Things You Can Loop Over</a></li>\n      <li><a href=\"#indentation\" id=\"markdown-toc-indentation\">Indentation</a></li>\n      <li><a href=\"#variable-naming\" id=\"markdown-toc-variable-naming\">Variable Naming</a></li>\n      <li><a href=\"#range\" id=\"markdown-toc-range\">Range</a></li>\n      <li><a href=\"#accumulation\" id=\"markdown-toc-accumulation\">Accumulation</a></li>\n      <li><a href=\"#exercises\" id=\"markdown-toc-exercises\">Exercises</a></li>\n      <li><a href=\"#cumulative-sum\" id=\"markdown-toc-cumulative-sum\">Cumulative Sum</a></li>\n    </ol>\n  </li>\n</ol>\n\n</blockquote>\n\n<h1 id=\"for-loops\">For Loops</h1>\n\n<p>Which of these would you rather write</p>\n\n<blockquote class=\"code-2col\">\n  <blockquote class=\"code-in\">\n    <code-in-title>Manually</code-in-title>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>print(2)\nprint(3)\nprint(5)\nprint(7)\nprint(11)\n</code></pre></div>    </div>\n  </blockquote>\n\n  <blockquote class=\"code-out\">\n    <code-out-title>With Loops</code-out-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">]:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<p>It may be less clear here, since you just need to do one operation (<code class=\"language-plaintext highlighter-rouge\">print</code>) but if you had to do two operations, three, more?</p>\n\n<h2 id=\"structure\">Structure</h2>\n\n<h2 id=\"a-for-loop-is-made-up-of-a-collection-a-loop-variable-and-a-body\">A <code class=\"language-plaintext highlighter-rouge\">for</code> loop is made up of a collection, a loop variable, and a body.</h2>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]:</span>\n    <span class=\"n\">doubled</span> <span class=\"o\">=</span> <span class=\"n\">number</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">number</span><span class=\"si\">}</span><span class=\"s\"> doubled is </span><span class=\"si\">{</span><span class=\"n\">doubled</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">number</code> - this is the loop variable. It’s a new variable, that’s assigned to the values from the collection. It does not need to be defined before the loop.</li>\n  <li>the collection, <code class=\"language-plaintext highlighter-rouge\">[2, 3, 5]</code> is a <code class=\"language-plaintext highlighter-rouge\">list</code> of numbers which we can tell from the square brackets used: <code class=\"language-plaintext highlighter-rouge\">[</code>, <code class=\"language-plaintext highlighter-rouge\">]</code></li>\n  <li>the loop body, where we double a number and the print out a message. The loop body is what gets executed for every iteration of the loop.</li>\n</ul>\n\n<blockquote class=\"code-2col\">\n  <blockquote class=\"code-in\">\n    <code-in-title>The loop</code-in-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]:</span>\n    <span class=\"n\">doubled</span> <span class=\"o\">=</span> <span class=\"n\">number</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">number</span><span class=\"si\">}</span><span class=\"s\"> doubled is </span><span class=\"si\">{</span><span class=\"n\">doubled</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n  </blockquote>\n\n  <blockquote class=\"code-out\">\n    <code-out-title>What's really happening internally</code-out-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># First iteration, number = 2\n</span><span class=\"n\">doubled</span> <span class=\"o\">=</span> <span class=\"n\">number</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">number</span><span class=\"si\">}</span><span class=\"s\"> doubled is </span><span class=\"si\">{</span><span class=\"n\">doubled</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Second iteration, number = 3\n</span><span class=\"n\">doubled</span> <span class=\"o\">=</span> <span class=\"n\">number</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">number</span><span class=\"si\">}</span><span class=\"s\"> doubled is </span><span class=\"si\">{</span><span class=\"n\">doubled</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Third iteration, number = 5\n</span><span class=\"n\">doubled</span> <span class=\"o\">=</span> <span class=\"n\">number</span> <span class=\"o\">*</span> <span class=\"mi\">5</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">number</span><span class=\"si\">}</span><span class=\"s\"> doubled is </span><span class=\"si\">{</span><span class=\"n\">doubled</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<p>Writing loops saves us time and makes sure our code is accurate, that we don’t accidentally introduce a typo somewhere in the loop body.</p>\n\n<h2 id=\"things-you-can-loop-over\">Things You Can Loop Over</h2>\n\n<p>You can loop over characters in a string</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">dna_string</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">ACTGGTCATCG</span><span class=\"sh\">'</span>\n<span class=\"k\">for</span> <span class=\"n\">base</span> <span class=\"ow\">in</span> <span class=\"n\">dna_string</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>You can loop over lists:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">cast</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Elphaba</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Glinda</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Fiyero</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Nessarose</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"n\">character</span> <span class=\"ow\">in</span> <span class=\"n\">cast</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">character</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"indentation\">Indentation</h2>\n\n<p>The first line of the <code class=\"language-plaintext highlighter-rouge\">for</code> loop must end with a colon, and the body must be indented with <em>four spaces</em>. Many editors do this automatically for you and even convert <kbd>Tab</kbd>s into 4 spaces.</p>\n\n<blockquote class=\"tip\">\n  <tip-title>Blocks in Python</tip-title>\n\n  <p>The colon at the end of the first line signals the start of a <em>block</em> of statements.</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>for x in y:\n    print(x)\n</code></pre></div>  </div>\n\n  <p>or</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>if x &gt; 10:\n    print(x)\n</code></pre></div>  </div>\n\n  <p>or even further nesting is possible:</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>for x in y:\n    if x &gt; 10:\n        print(x)\n</code></pre></div>  </div>\n\n</blockquote>\n\n<p>The indentation is in fact, quite necessary. Notice how this fails:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#Fix me!\n</span><span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]:</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>And, likewise, this:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">patient1</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">z2910</span><span class=\"sh\">\"</span>\n  <span class=\"n\">patient2</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">y9583</span><span class=\"sh\">\"</span>\n</code></pre></div></div>\n\n<h2 id=\"variable-naming\">Variable Naming</h2>\n\n<p>Loop variables can be called anything, <code class=\"language-plaintext highlighter-rouge\">i</code>, <code class=\"language-plaintext highlighter-rouge\">j</code>, and <code class=\"language-plaintext highlighter-rouge\">k</code> are very commong defaults due to their long history of use in other programing languages.\nAs with all variables, loop variables are: Created on demand, and Meaningless; their names can be anything at all.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">kitten</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">kitten</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>But <em>meaningless</em> is bad for variable names, and whenever possible, we should strive to pick useful, accurate variable names that help use remember what’s going on:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>for sequence in sequences:\n    print()\nfor patient in clinic_patients:\n    print()\nfor nucleotide in dna_sequence:\n    print()\n</code></pre></div></div>\n\n<h2 id=\"range\">Range</h2>\n\n<p>You can use <code class=\"language-plaintext highlighter-rouge\">range</code> to iterate over a sequence of numbers. This is a built in function (check <code class=\"language-plaintext highlighter-rouge\">help(range)</code>!) so it’s always available even if you don’t <code class=\"language-plaintext highlighter-rouge\">import</code> anything. The range produced is non-inclusive: <code class=\"language-plaintext highlighter-rouge\">range(N)</code> is the numbers <code class=\"language-plaintext highlighter-rouge\">0</code> to <code class=\"language-plaintext highlighter-rouge\">N-1</code>, so the result will be exactly the length you requested.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"tip\">\n  <tip-title>Iterables can be weird</tip-title>\n  <p>In python <code class=\"language-plaintext highlighter-rouge\">range</code> is a special type of iterable: none of the numbers are created until we need them.</p>\n\n  <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">])</span>\n</code></pre></div>  </div>\n\n  <p>The easiest way to see what numbers are actually in there is to convert it to a <code class=\"language-plaintext highlighter-rouge\">list</code>:</p>\n\n  <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>\n</code></pre></div>  </div>\n</blockquote>\n\n<h2 id=\"accumulation\">Accumulation</h2>\n\n<p>In programming you’ll often want to accumulate some values: counting things (or “accumulating”). The pattern consists of creating a variable to store your result, running a loop over some data, and in that loop, adding to the variable for your result.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Sum the first 10 integers.\n</span><span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">):</span>\n    <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"n\">total</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\"> final: </span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>But how did we get that result? We can add some “debugging” lines to the above code to figure out how we got to that result. Try adding the following line in the above loop</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>print(f'Currently {number}, our total is {total}')\n</code></pre></div></div>\n\n<p>You can add it before you update <code class=\"language-plaintext highlighter-rouge\">total</code>, after it, or both! Compare the outputs to understand what’s happening on each line.</p>\n\n<blockquote class=\"tip\">\n  <tip-title>Controlling your loop!</tip-title>\n\n  <p>There are multiple ways to efficiently control your loop if you need it.\nthese are the inbuilt python functions: continue &amp; break</p>\n\n  <p>when python encounters <em>continue</em> in your loop it will stop working and goes to the next iteration of the loop.</p>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>for letter in 'Galaxy':\n    if letter == 'l':\n        continue\n    print(f'The letters are: {letter}')\n</code></pre></div>  </div>\n  <p>with <em>break</em> python stops the loop and continues with the next part of the code like nothing happened</p>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>for letter in 'Galaxy':\n    if letter == 'l':\n        break\n    print(f'The letters are: {letter}')\nprint('Done')\n</code></pre></div>  </div>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Test break and continue here\n</span></code></pre></div></div>\n\n<h2 id=\"exercises\">Exercises</h2>\n\n<blockquote class=\"question\">\n  <question-title>Tracing Execution</question-title>\n\n  <p>Create a table showing the numbers of the lines that are executed when this program runs,\nand the values of the variables after each line is executed.</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>total = 0\nfor char in \"tin\":\n    total = total + 1\n</code></pre></div>  </div>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <table>\n      <thead>\n        <tr>\n          <th>Line</th>\n          <th>Variables</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>1</td>\n          <td>total = 0</td>\n        </tr>\n        <tr>\n          <td>2</td>\n          <td>total = 0 char = ‘t’</td>\n        </tr>\n        <tr>\n          <td>3</td>\n          <td>total = 1 char = ‘t’</td>\n        </tr>\n        <tr>\n          <td>2</td>\n          <td>total = 1 char = ‘i’</td>\n        </tr>\n        <tr>\n          <td>3</td>\n          <td>total = 2 char = ‘i’</td>\n        </tr>\n        <tr>\n          <td>2</td>\n          <td>total = 2 char = ‘n’</td>\n        </tr>\n        <tr>\n          <td>3</td>\n          <td>total = 3 char = ‘n’</td>\n        </tr>\n      </tbody>\n    </table>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#Test your code here!\n</span></code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Reversing a String</question-title>\n\n  <p>Fill in the blanks in the program below so that it prints “stressed”\n(the reverse of the original character string “desserts”).</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>original = \"stressed\"\nresult = ____\nfor char in original:\n    result = ____\nprint(result)\n</code></pre></div>  </div>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>original = \"stressed\"\nresult = \"\"\nfor char in original:\n    result = char + result\nprint(result)\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Test your code here!\n</span><span class=\"n\">original</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">stressed</span><span class=\"sh\">\"</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">____</span>\n<span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">original</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">____</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Practice Accumulating</question-title>\n\n  <p>Fill in the blanks in each of the programs below\nto produce the indicated result.</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Total length of the strings in the list: [\"red\", \"green\", \"blue\"] =&gt; 12\ntotal = 0\nfor word in [\"red\", \"green\", \"blue\"]:\n    ____ = ____ + len(word)\nprint(total)\n</code></pre></div>  </div>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>total = 0\nfor word in [\"red\", \"green\", \"blue\"]:\n    total = total + len(word)\nprint(total)\n</code></pre></div>    </div>\n  </blockquote>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># List of word lengths: [\"red\", \"green\", \"blue\"] =&gt; [3, 5, 4]\nlengths = ____\nfor word in [\"red\", \"green\", \"blue\"]:\n    lengths.____(____)\nprint(lengths)\n</code></pre></div>  </div>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>lengths = []\nfor word in [\"red\", \"green\", \"blue\"]:\n    lengths.append(len(word))\nprint(lengths)\n</code></pre></div>    </div>\n  </blockquote>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Concatenate all words: [\"red\", \"green\", \"blue\"] =&gt; \"redgreenblue\"\nwords = [\"red\", \"green\", \"blue\"]\nresult = ____\nfor ____ in ____:\n    ____\nprint(result)\n</code></pre></div>  </div>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>words = [\"red\", \"green\", \"blue\"]\nresult = \"\"\nfor word in words:\n    result = result + word\nprint(result)\n</code></pre></div>    </div>\n  </blockquote>\n\n  <p><strong>Create an acronym:</strong> Starting from the list <code class=\"language-plaintext highlighter-rouge\">[\"red\", \"green\", \"blue\"]</code>, create the acronym <code class=\"language-plaintext highlighter-rouge\">\"RGB\"</code> using\na for loop.</p>\n\n  <p><strong>Hint:</strong> You may need to use a string method to properly format the acronym.</p>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>acronym = \"\"\nfor word in [\"red\", \"green\", \"blue\"]:\n    acronym = acronym + word[0].upper()\nprint(acronym)\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#Test your code here!\n</span></code></pre></div></div>\n\n<blockquote class=\"question\">\n  <h2 id=\"cumulative-sum\">Cumulative Sum</h2>\n\n  <p>Reorder and properly indent the lines of code below\nso that they print a list with the cumulative sum of data.\nThe result should be <code class=\"language-plaintext highlighter-rouge\">[1, 3, 5, 10]</code>.</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cumulative.append(total)\nfor number in data:\ncumulative = []\ntotal += number\ntotal = 0\nprint(cumulative)\ndata = [1,2,2,5]\n</code></pre></div>  </div>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>total = 0\ndata = [1,2,2,5]\ncumulative = []\nfor number in data:\n    total += number\n    cumulative.append(total)\nprint(cumulative)\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Test your code here!\n</span></code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>A classic programmer test: Fizz Buzz</question-title>\n  <p><a href=\"https://en.wikipedia.org/wiki/Fizz_buzz\">FizzBuzz</a> is a classic “test” question that is used in some job interviews to remove candidates who really do not understand programming. Your task is this:</p>\n\n  <p>Write a for loop that loops over the numbers 1 to 50.</p>\n\n  <ul>\n    <li>If the number is divisible by 3, write Fizz instead of the number</li>\n    <li>If the number is divisible by 5, write Buzz instead of the number</li>\n    <li>If the number is divisible by 3 and 5 both, write FizzBuzz instead of the number</li>\n    <li>Otherwise, write the number itself.</li>\n  </ul>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">3</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">5</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">FizzBuzz</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">3</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Fizz</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">5</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Buzz</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Do a FizzBuzz\n</span></code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Identifying Item Errors</question-title>\n\n  <ol>\n    <li>Read the code below and try to identify what the errors are\n<strong>without</strong> running it.</li>\n    <li>Run the code, and read the error message. What type of error is it?</li>\n    <li>Fix the error.</li>\n  </ol>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>seasons = ['Spring', 'Summer', 'Fall', 'Winter']\nprint(f'My favorite season is {seasons[4]}')\n</code></pre></div>  </div>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <p>This list has 4 elements and the index to access the last element in the list is <code class=\"language-plaintext highlighter-rouge\">3</code>.</p>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>seasons = ['Spring', 'Summer', 'Fall', 'Winter']\nprint(f'My favorite season is {seasons[3]}')\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Fix me!\n</span><span class=\"n\">seasons</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Spring</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Summer</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Fall</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Winter</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">My favorite season is </span><span class=\"si\">{</span><span class=\"n\">seasons</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Correct the errors</question-title>\n\n  <p>This code is completely missing indentation, it needs to be fixed. Can you make some guesses at how indented each line should be?</p>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>data = [1, 3, 5, 9]\nacc = 0\nfor i in data:\nif i &lt; 4:\nacc = acc + i * 2\nelse:\nacc = acc + i\nprint(f'The value at {i} is {acc}')\nprint(f'The answer is {acc}')\n</code></pre></div>  </div>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"c1\"># There is a : character at the end of this line, so you KNOW the next line\n# must be indented.\n</span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Same here, another :\n</span>    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n        <span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"n\">acc</span> <span class=\"o\">+</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n    <span class=\"c1\"># And again! Another :\n</span>    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"n\">acc</span> <span class=\"o\">+</span> <span class=\"n\">i</span>\n<span class=\"c1\"># But what about these lines?\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">The value at </span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s\"> is </span><span class=\"si\">{</span><span class=\"n\">acc</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">The answer is </span><span class=\"si\">{</span><span class=\"n\">acc</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n\n    <p>Here this code is actually ambiguous, we don’t know how indented the two prints should be. This very synthetic example lacks good context, but there are three places it could be, with three different effects.</p>\n\n    <p>There are two bits of knowledge we can use, however:</p>\n    <ul>\n      <li>the first print uses <code class=\"language-plaintext highlighter-rouge\">i</code>, so it must be within the loop</li>\n      <li>the second print cannot be indented more than the first print (Why? It would require a block like <code class=\"language-plaintext highlighter-rouge\">for ... :</code> or <code class=\"language-plaintext highlighter-rouge\">if .. :</code> to indent further.)</li>\n    </ul>\n\n    <p>The first option, no indentation, prints out the value once per loop, that seems good</p>\n\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">[...]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"n\">acc</span> <span class=\"o\">+</span> <span class=\"n\">i</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">The value at </span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s\"> is </span><span class=\"si\">{</span><span class=\"n\">acc</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n\n    <p>The second, prints out the value only during the else case, not otherwise.</p>\n\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"n\">acc</span> <span class=\"o\">+</span> <span class=\"n\">i</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">The value at </span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s\"> is </span><span class=\"si\">{</span><span class=\"n\">acc</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n\n    <p>So that’s probably wrong, and we should take the first option. That leaves two options for the final print, no indentation, or at the same level as our first print statement. We can guess that we probably want to print out the final result of the loop, and that it should not be indented.</p>\n\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n        <span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"n\">acc</span> <span class=\"o\">+</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"n\">acc</span> <span class=\"o\">+</span> <span class=\"n\">i</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">The value at </span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s\"> is </span><span class=\"si\">{</span><span class=\"n\">acc</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">The answer is </span><span class=\"si\">{</span><span class=\"n\">acc</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># This code accidentally lost it's indentation! Can you fix it?\n</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n<span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n<span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"n\">acc</span> <span class=\"o\">+</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"n\">acc</span> <span class=\"o\">+</span> <span class=\"n\">i</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">The value at </span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s\"> is </span><span class=\"si\">{</span><span class=\"n\">acc</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">The answer is </span><span class=\"si\">{</span><span class=\"n\">acc</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Trimming a FASTQ string</question-title>\n  <p>Given a FASTQ string, and a list with quality scores, use <code class=\"language-plaintext highlighter-rouge\">break</code> to print out just the good bit of DNA and it’s quality score.</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># We've got a Read\nread = \"\"\"\n@SEQ_ID\nGATTTGGGGTTCAAAGCAGTATCGATCAAATAGTAAATCCATTTGTTCAACTCACAGTTT\n+\n55CCF&gt;&gt;&gt;&gt;&gt;&gt;CCCCCCC65!''*((((***+))%%%++)(%%%%).1***-+*''))**\n\"\"\".strip().split('\\n')\n\ndef quality_to_percent(q):\n    return 100 * (1 - (10 ** (q / -10)))\n\nsequence = read[1]\nquality_scores = [ord(x) - 33 for x in read[3]]\n\nfor i in ... # TODO\n</code></pre></div>  </div>\n\n  <blockquote class=\"solution\">\n    <solution-title>Hint: Looping over two variables</solution-title>\n    <p>There are two ways to do this, one you might be able to guess, and one that might be new:</p>\n    <ol>\n      <li>Loop over a <code class=\"language-plaintext highlighter-rouge\">range()</code> using <code class=\"language-plaintext highlighter-rouge\">len(sequence)</code>. Since <code class=\"language-plaintext highlighter-rouge\">len(sequence) == len(quality_scores)</code>, when we access the Nth position of either, they match up.</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">zip(sequence, quality_scores)</code> will loop over both of these lists together. It produces a new list that looks like <code class=\"language-plaintext highlighter-rouge\">[['G', 20], ['A', 20], ['T', 34]]</code>.</li>\n    </ol>\n  </blockquote>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <p>The naïve solution is quite easy and readable:</p>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>for i in range(len(sequence)):\n    if quality_scores[i] &lt; 15:\n        break\n    print(f'Base {i} = {sequence[i]} with {quality_to_percent(quality_scores[i])}% accuracy')\n</code></pre></div>    </div>\n    <p>But we can make this a bit prettier using the <code class=\"language-plaintext highlighter-rouge\">zip()</code> function:</p>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>for base, score in zip(sequence, quality_scores):\n    if score &lt; 15:\n        break\n    print(f'Base = {base} with {quality_to_percent(score)}% accuracy')\n</code></pre></div>    </div>\n    <p>But note that we don’t have the position in the list anymore, so we remove it from the print statement.</p>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># We've got a Read\n</span><span class=\"n\">read</span> <span class=\"o\">=</span> <span class=\"sh\">\"\"\"</span><span class=\"s\">\n@SEQ_ID\nGATTTGGGGTTCAAAGCAGTATCGATCAAATAGTAAATCCATTTGTTCAACTCACAGTTT\n+\n55CCF&gt;&gt;&gt;&gt;&gt;&gt;CCCCCCC65!</span><span class=\"sh\">''</span><span class=\"s\">*((((***+))%%%++)(%%%%).1***-+*</span><span class=\"sh\">''</span><span class=\"s\">))**\n</span><span class=\"sh\">\"\"\"</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">().</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"se\">\\n</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">quality_to_percent</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"o\">**</span> <span class=\"p\">(</span><span class=\"n\">q</span> <span class=\"o\">/</span> <span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># Extract the sequence\n</span><span class=\"n\">sequence</span> <span class=\"o\">=</span> <span class=\"n\">read</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"c1\"># And the quality scores, and map those to the correct values.\n</span><span class=\"n\">quality_scores</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nf\">ord</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">33</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">read</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]]</span>\n\n<span class=\"c1\"># Write something here\n# That loops over BOTH the sequence and Quality Scores.\n# And prints them out\n# If the quality scores are `&lt;15`, then break and quit printing.\n</span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">...</span>\n</code></pre></div></div>\n"],"ref_slides":[],"hands_on":true,"slides":false,"mod_date":"2023-02-13 13:04:13 +0000","pub_date":"2022-04-25 11:43:04 +0000","version":17,"api":"https://training.galaxyproject.org/training-material/api/topics/data-science/tutorials/python-loops/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"Foundations of Data Science","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial"}