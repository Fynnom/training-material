{"layout":"tutorial_hands_on","title":"Versioning your code and data with git","questions":["What is git","How is git different from GitHub?","What is branch?","How to uise git as a time machine"],"objectives":["Get a basic understanding of git and version control"],"time_estimation":"1h","key_points":["No git, no life"],"contributions":{"authorship":["nekrut"]},"priority":7,"subtopic":"gnmx","draft":true,"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00425","url":"/topics/data-science/tutorials/gnmx-lecture7/tutorial.html","topic_name":"data-science","tutorial_name":"gnmx-lecture7","dir":"topics/data-science/tutorials/gnmx-lecture7","symlink":null,"id":"data-science/gnmx-lecture7","ref_tutorials":["<p><a href=\"https://xkcd.com/1597/\"><a href=\"https://imgs.xkcd.com/comics/git.png\" rel=\"noopener noreferrer\"><img src=\"https://imgs.xkcd.com/comics/git.png\" alt=\"XKCD1597. \" loading=\"lazy\" /></a></a></p>\n\n<h1 id=\"setup-and-introduction\">Setup and Introduction</h1>\n\n<h2 id=\"lecture-setup\">Lecture setup</h2>\n\n<ol>\n  <li>Start <a href=\"https://mybinder.org/v2/gh/jupyterlab/jupyterlab-demo/try.jupyter.org?urlpath=lab\">JupyterLab</a></li>\n  <li>Start terminal within JupyterLab instance</li>\n</ol>\n\n<h2 id=\"git-resources\">Git resources</h2>\n\n<ul>\n  <li><a href=\"https://git-scm.com/book/en/v2\">The Git Book</a></li>\n  <li>Troubleshooting <a href=\"https://dangitgit.com/en\">PG13</a> <a href=\"https://ohshitgit.com/\">R</a></li>\n</ul>\n\n<h2 id=\"version-control\">Version control</h2>\n\n<ul>\n  <li>Manages changes over time</li>\n  <li>Enables collaboration</li>\n  <li>Provides complete history</li>\n</ul>\n\n<h2 id=\"git-versus-github\">Git versus GitHub</h2>\n\n<ul>\n  <li>Git - version control system</li>\n  <li>GitHub - hosting service</li>\n</ul>\n\n<h2 id=\"initial-fundamentals\">Initial fundamentals</h2>\n\n<h2 id=\"logic\">Logic</h2>\n\n<p>Why do we need version control? Well … to control versions and avoid mess:</p>\n\n<figure id=\"figure-1\" style=\"max-width: 90%;\"><img src=\"https://i.imgur.com/vVGsuDQ.png\" alt=\"Why version control?\" loading=\"lazy\" /><a target=\"_blank\" href=\"https://i.imgur.com/vVGsuDQ.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 1</strong>:</span> From tutorials by <a href=\"https://www.kylebradbury.org/index.html\">Kyle Bradbury</a></figcaption></figure>\n\n<h2 id=\"main-commands\">Main commands</h2>\n\n<p>Here are some of the most fundamental commands in <code class=\"language-plaintext highlighter-rouge\">git</code> repertoire:</p>\n\n<figure id=\"figure-2\" style=\"max-width: 90%;\"><img src=\"https://i.imgur.com/Xyhswin.png\" alt=\"Main commands. \" loading=\"lazy\" /><a target=\"_blank\" href=\"https://i.imgur.com/Xyhswin.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 2</strong>:</span> From tutorials by <a href=\"https://www.kylebradbury.org/index.html\">Kyle Bradbury</a></figcaption></figure>\n\n<h2 id=\"branches\">Branches</h2>\n\n<p>A repository may have multiple branches:</p>\n\n<figure id=\"figure-3\" style=\"max-width: 90%;\"><img src=\"https://i.imgur.com/vtXzgGO.png\" alt=\"Branch flow. \" loading=\"lazy\" /><a target=\"_blank\" href=\"https://i.imgur.com/vtXzgGO.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 3</strong>:</span> From <a href=\"https://gitbetter.substack.com/p/how-to-work-in-multiple-git-branches\">GitBetter</a></figcaption></figure>\n\n<h1 id=\"lets-do-it\">Let’s do it!</h1>\n\n<h2 id=\"clone-a-repo\">Clone a repo</h2>\n\n<p>Let’s clone a <a href=\"https://github.com/nekrut/git_foo_bar\">sample repo</a> from GitHub</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git clone https://github.com/nekrut/git_foo_bar.git\n</code></pre></div></div>\n\n<h2 id=\"check-history-of-this-repo-using-git-log\">Check history of this repo using <code class=\"language-plaintext highlighter-rouge\">git log</code></h2>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$git</span> log\ncommit ee99d64890f3b1cf0637a14269ab8738357e8dd8 <span class=\"o\">(</span>HEAD -&gt; main, origin/main, origin/HEAD<span class=\"o\">)</span>\nAuthor: Anton Nekrutenko &lt;anekrut@gmail.com&gt;\nDate:   Mon Mar 11 17:38:42 2024 <span class=\"nt\">-0400</span>\n\n    Update README.md\n\ncommit de89f51d8e124665713f6fd94cd46447d172033b\nAuthor: Anton Nekrutenko &lt;anekrut@gmail.com&gt;\nDate:   Tue Feb 21 08:02:50 2023 <span class=\"nt\">-0500</span>\n\n    Create file2.txt\n\ncommit bc3e5c4a9d54203739bb90f29d92e20082b9e5d4\nAuthor: Anton Nekrutenko &lt;anekrut@gmail.com&gt;\nDate:   Tue Feb 21 08:02:25 2023 <span class=\"nt\">-0500</span>\n\n    Create file1.txt\n\ncommit 99dd43783be37b08c1ca80cdc881eae537526396\nAuthor: Anton Nekrutenko &lt;anekrut@gmail.com&gt;\nDate:   Tue Feb 21 08:00:34 2023 <span class=\"nt\">-0500</span>\n\n    Updated readme\n\ncommit 18ebdabfe6f92f33ea626994ce6c9998cbe63522\nAuthor: Anton Nekrutenko &lt;anekrut@gmail.com&gt;\nDate:   Tue Feb 21 07:59:46 2023 <span class=\"nt\">-0500</span>\n\n    Initial commit\n</code></pre></div></div>\n\n<h2 id=\"check-status-of-the-repo\">Check status of the repo</h2>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$git</span> status\nOn branch main\nYour branch is up to <span class=\"nb\">date </span>with <span class=\"s1\">'origin/main'</span><span class=\"nb\">.</span>\n\nnothing to commit, working tree clean\n</code></pre></div></div>\n\n<h2 id=\"lets-change-and-stage-a-file\">Let’s change and stage a file</h2>\n\n<p>Use editor to modify <code class=\"language-plaintext highlighter-rouge\">file1.txt</code>. Once it is saved, we can see what is happening by using <code class=\"language-plaintext highlighter-rouge\">git status</code> again:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$git</span> status\nOn branch main\nYour branch is up to <span class=\"nb\">date </span>with <span class=\"s1\">'origin/main'</span><span class=\"nb\">.</span>\n\nChanges not staged <span class=\"k\">for </span>commit:\n  <span class=\"o\">(</span>use <span class=\"s2\">\"git add &lt;file&gt;...\"</span> to update what will be committed<span class=\"o\">)</span>\n  <span class=\"o\">(</span>use <span class=\"s2\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"k\">in </span>working directory<span class=\"o\">)</span>\n\n        modified:   file1.txt\n\nUntracked files:\n  <span class=\"o\">(</span>use <span class=\"s2\">\"git add &lt;file&gt;...\"</span> to include <span class=\"k\">in </span>what will be committed<span class=\"o\">)</span>\n\n        .ipynb_checkpoints/\n\nno changes added to commit <span class=\"o\">(</span>use <span class=\"s2\">\"git add\"</span> and/or <span class=\"s2\">\"git commit -a\"</span><span class=\"o\">)</span>\n</code></pre></div></div>\n\n<p>You can see, that the file is modified, but it is <em>not staged</em>. To stage it for commit you need to explicitly add it to staging:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git add file1.txt \n</code></pre></div></div>\n\n<p>If you run <code class=\"language-plaintext highlighter-rouge\">git status</code> now you will get:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$git</span> status\nOn branch main\nYour branch is up to <span class=\"nb\">date </span>with <span class=\"s1\">'origin/main'</span><span class=\"nb\">.</span>\n\nChanges to be committed:\n  <span class=\"o\">(</span>use <span class=\"s2\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage<span class=\"o\">)</span>\n\n        modified:   file1.txt\n\nUntracked files:\n  <span class=\"o\">(</span>use <span class=\"s2\">\"git add &lt;file&gt;...\"</span> to include <span class=\"k\">in </span>what will be committed<span class=\"o\">)</span>\n\n        .ipynb_checkpoints/\n</code></pre></div></div>\n\n<h2 id=\"oh--get-reset\">Oh 💩 <code class=\"language-plaintext highlighter-rouge\">get reset</code></h2>\n\n<p>Running <code class=\"language-plaintext highlighter-rouge\">git reset</code> will restore the <em>status quo</em> as it was prior to <code class=\"language-plaintext highlighter-rouge\">git add</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$git</span> reset\nUnstaged changes after reset:\nM       file1.txt\n</code></pre></div></div>\n\n<p>and <code class=\"language-plaintext highlighter-rouge\">git status</code> will look as it did prior to <code class=\"language-plaintext highlighter-rouge\">git add</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git status\nOn branch main\nYour branch is up to <span class=\"nb\">date </span>with <span class=\"s1\">'origin/main'</span><span class=\"nb\">.</span>\n\nChanges not staged <span class=\"k\">for </span>commit:\n  <span class=\"o\">(</span>use <span class=\"s2\">\"git add &lt;file&gt;...\"</span> to update what will be committed<span class=\"o\">)</span>\n  <span class=\"o\">(</span>use <span class=\"s2\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"k\">in </span>working directory<span class=\"o\">)</span>\n\n        modified:   file1.txt\n\nUntracked files:\n  <span class=\"o\">(</span>use <span class=\"s2\">\"git add &lt;file&gt;...\"</span> to include <span class=\"k\">in </span>what will be committed<span class=\"o\">)</span>\n\n        .ipynb_checkpoints/\n\nno changes added to commit <span class=\"o\">(</span>use <span class=\"s2\">\"git add\"</span> and/or <span class=\"s2\">\"git commit -a\"</span><span class=\"o\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"lets-stage-and-commit\">Let’s stage and commit</h2>\n\n<p>If you are indeed ready to go ahead let’s <code class=\"language-plaintext highlighter-rouge\">add</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git add file1.txt\n</code></pre></div></div>\n\n<p>and <code class=\"language-plaintext highlighter-rouge\">commit</code></p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$git</span> commit <span class=\"nt\">-m</span> <span class=\"s1\">'modified file1'</span>\n<span class=\"o\">[</span>main 476adb7] modified file1\n 1 file changed, 1 insertion<span class=\"o\">(</span>+<span class=\"o\">)</span>, 1 deletion<span class=\"o\">(</span>-<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<p>If run <code class=\"language-plaintext highlighter-rouge\">git log</code> you will this addition commit:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$git</span> log\ncommit 476adb7b64a9330199fea13ca2e7523f7fe90189 <span class=\"o\">(</span>HEAD -&gt; main<span class=\"o\">)</span>\nAuthor: nekrut &lt;anekrut@gmail.com&gt;\nDate:   Tue Feb 21 13:23:24 2023 +0000\n\n    modified file1\n\n</code></pre></div></div>\n\n<p>or alternatively you can use <code class=\"language-plaintext highlighter-rouge\">--oneline</code> flag:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$git</span> log <span class=\"nt\">--oneline</span>\n476adb7 <span class=\"o\">(</span>HEAD -&gt; main<span class=\"o\">)</span> modified file1\nde89f51 <span class=\"o\">(</span>origin/main, origin/HEAD<span class=\"o\">)</span> Create file2.txt\nbc3e5c4 Create file1.txt\n99dd437 Updated readme\n18ebdab Initial commit\n</code></pre></div></div>\n\n<h2 id=\"oh--get-revert\">Oh 💩 <code class=\"language-plaintext highlighter-rouge\">get revert</code></h2>\n\n<p>To roll everything back you can do this:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$git</span> revert 476adb7\n<span class=\"o\">[</span>main 1f13d5f] Revert <span class=\"s2\">\"modified file1\"</span>\n 1 file changed, 1 insertion<span class=\"o\">(</span>+<span class=\"o\">)</span>, 1 deletion<span class=\"o\">(</span>-<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<p>This will bring <code class=\"language-plaintext highlighter-rouge\">vim</code> editor with a pre-filled rollback message:</p>\n\n<p><a href=\"https://i.imgur.com/sEZNPN8.png\" rel=\"noopener noreferrer\"><img src=\"https://i.imgur.com/sEZNPN8.png\" alt=\"vim image. \" loading=\"lazy\" /></a></p>\n\n<p>To save this and get out:</p>\n\n<ul>\n  <li>press <kbd>ESC</kbd></li>\n  <li>type <code class=\"language-plaintext highlighter-rouge\">:wq</code></li>\n  <li>hit <kbd>Enter</kbd></li>\n</ul>\n\n<p>Now, let’s look at the log (showing just two lat commits):</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> git log\ncommit 1f13d5fcf38057db9a90066b99aa475a6eeb1bae <span class=\"o\">(</span>HEAD -&gt; main<span class=\"o\">)</span>\nAuthor: nekrut &lt;anekrut@gmail.com&gt;\nDate:   Tue Feb 21 13:31:24 2023 +0000\n\n    Revert <span class=\"s2\">\"modified file1\"</span>\n    \n    This reverts commit 476adb7b64a9330199fea13ca2e7523f7fe90189.\n\ncommit 476adb7b64a9330199fea13ca2e7523f7fe90189\nAuthor: nekrut &lt;anekrut@gmail.com&gt;\nDate:   Tue Feb 21 13:23:24 2023 +0000\n\n    modified file1\n</code></pre></div></div>\n\n<h2 id=\"lets-actually-do-make-changes-and-highlight-them-with-diff\">Let’s actually do make changes and highlight them with diff</h2>\n\n<p>First, let’s modify, say, <code class=\"language-plaintext highlighter-rouge\">file2.txt</code> by adding a line. In this example I modified it from:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>This\nis\nanother\nfile\nI've\nmade\n</code></pre></div></div>\n\n<p>to</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>This\nis\nfile2\nI've\nmade\n</code></pre></div></div>\n\n<p>Now <code class=\"language-plaintext highlighter-rouge\">add</code> and <code class=\"language-plaintext highlighter-rouge\">commit</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git status\nOn branch main\nYour branch is ahead of <span class=\"s1\">'origin/main'</span> by 2 commits.\n  <span class=\"o\">(</span>use <span class=\"s2\">\"git push\"</span> to publish your <span class=\"nb\">local </span>commits<span class=\"o\">)</span>\n\nChanges not staged <span class=\"k\">for </span>commit:\n  <span class=\"o\">(</span>use <span class=\"s2\">\"git add &lt;file&gt;...\"</span> to update what will be committed<span class=\"o\">)</span>\n  <span class=\"o\">(</span>use <span class=\"s2\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"k\">in </span>working directory<span class=\"o\">)</span>\n\n        modified:   file2.txt\n\nUntracked files:\n  <span class=\"o\">(</span>use <span class=\"s2\">\"git add &lt;file&gt;...\"</span> to include <span class=\"k\">in </span>what will be committed<span class=\"o\">)</span>\n\n        .ipynb_checkpoints/\n\nno changes added to commit <span class=\"o\">(</span>use <span class=\"s2\">\"git add\"</span> and/or <span class=\"s2\">\"git commit -a\"</span><span class=\"o\">)</span>\n\n<span class=\"nv\">$ </span>git add file2.txt \n\n<span class=\"nv\">$ </span>git commit <span class=\"nt\">-m</span> <span class=\"s1\">'changed file2'</span>\n<span class=\"o\">[</span>main a947686] changed file2\n 1 file changed, 1 insertion<span class=\"o\">(</span>+<span class=\"o\">)</span>, 2 deletions<span class=\"o\">(</span>-<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<p>Let’s now compare the changes between two commits:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git diff a947686 1f13d5f\ndiff <span class=\"nt\">--git</span> a/file2.txt b/file2.txt\nindex 1f383ac..e13e461 100644\n<span class=\"nt\">---</span> a/file2.txt\n+++ b/file2.txt\n@@ <span class=\"nt\">-1</span>,5 +1,6 @@\n This\n is\n<span class=\"nt\">-file2</span>\n+another\n+file\n I<span class=\"s1\">'ve\n made\n</span></code></pre></div></div>\n\n<p>here:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">a</code> and <code class=\"language-plaintext highlighter-rouge\">b</code> = tags of files being compared</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">---</code> and <code class=\"language-plaintext highlighter-rouge\">+++</code> marked to indiciate differences between <code class=\"language-plaintext highlighter-rouge\">a</code> and <code class=\"language-plaintext highlighter-rouge\">b</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">@@ -1,5 +1,6 @@</code> file chunk header which has the following format:\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">@@ [file a range][file b range] @@</code></li>\n      <li>File ranges are: <code class=\"language-plaintext highlighter-rouge\">&lt;start line&gt;&lt;number of lines&gt;</code></li>\n    </ul>\n  </li>\n</ul>\n\n<h2 id=\"branches-1\">Branches</h2>\n\n<p><a href=\"https://i.imgur.com/cLCQ650.png\" rel=\"noopener noreferrer\"><img src=\"https://i.imgur.com/cLCQ650.png\" alt=\"git branches. \" loading=\"lazy\" /></a></p>\n\n<blockquote>\n  <p>From <a href=\"https://gitbetter.substack.com/p/how-to-work-in-multiple-git-branches\">GitBetter</a></p>\n</blockquote>\n\n<p>To enable collaborations and to give the ability to develop major features without disrupting production (<code class=\"language-plaintext highlighter-rouge\">master</code> or <code class=\"language-plaintext highlighter-rouge\">main</code>) branch Git allows creation of multiple branches.</p>\n\n<h3 id=\"create-a-new-branch-and-switch-to-it\">Create a new branch and switch to it</h3>\n\n<p>Let’s create branch dev:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git branch dev\n</code></pre></div></div>\n\n<p>to see existing branches:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git branch\n  dev\n<span class=\"k\">*</span> main\n</code></pre></div></div>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">main</code> branch is active (tagged with <code class=\"language-plaintext highlighter-rouge\">*</code>). To actually switch branches:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git checkout dev\nSwitched to branch <span class=\"s1\">'dev'</span>\n</code></pre></div></div>\n\n<h3 id=\"make-changes\">Make changes</h3>\n\n<p>Let’s make some changes, say, to <code class=\"language-plaintext highlighter-rouge\">file1.txt</code> from this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>This\nis\na \nfile\n</code></pre></div></div>\n\n<p>to this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>This\nis\na \nfile1\n</code></pre></div></div>\n\n<p>and then get <code class=\"language-plaintext highlighter-rouge\">status</code>, <code class=\"language-plaintext highlighter-rouge\">add</code>, and <code class=\"language-plaintext highlighter-rouge\">commit</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git status\nOn branch dev\nChanges not staged <span class=\"k\">for </span>commit:\n  <span class=\"o\">(</span>use <span class=\"s2\">\"git add &lt;file&gt;...\"</span> to update what will be committed<span class=\"o\">)</span>\n  <span class=\"o\">(</span>use <span class=\"s2\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"k\">in </span>working directory<span class=\"o\">)</span>\n\n        modified:   file1.txt\n\nUntracked files:\n  <span class=\"o\">(</span>use <span class=\"s2\">\"git add &lt;file&gt;...\"</span> to include <span class=\"k\">in </span>what will be committed<span class=\"o\">)</span>\n\n        .ipynb_checkpoints/\n\nno changes added to commit <span class=\"o\">(</span>use <span class=\"s2\">\"git add\"</span> and/or <span class=\"s2\">\"git commit -a\"</span><span class=\"o\">)</span>\n\n<span class=\"nv\">$ </span>git add file1.txt \n\n<span class=\"nv\">$ </span>git commit <span class=\"nt\">-m</span> <span class=\"s1\">'changes to file1.txt'</span>\n<span class=\"o\">[</span>dev 05ce64d] changes to file1.txt\n 1 file changed, 1 insertion<span class=\"o\">(</span>+<span class=\"o\">)</span>, 1 deletion<span class=\"o\">(</span>-<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"switch-to-another-branch-and-look-at-the-modified-file\">Switch to another branch and look at the modified file</h3>\n\n<p>If we switch back to <code class=\"language-plaintext highlighter-rouge\">main</code> and look at the content of <code class=\"language-plaintext highlighter-rouge\">file1.txt</code> we will see the “old” content:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>This\nis\na \nfile\n</code></pre></div></div>\n\n<h3 id=\"merge-branches\">Merge branches</h3>\n\n<p>To incorporate changes from <code class=\"language-plaintext highlighter-rouge\">dev</code> to <code class=\"language-plaintext highlighter-rouge\">master</code> we need to do a merge:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git merge dev main\nUpdating a947686..05ce64d\nFast-forward\n file1.txt | 2 +-\n 1 file changed, 1 insertion<span class=\"o\">(</span>+<span class=\"o\">)</span>, 1 deletion<span class=\"o\">(</span>-<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<p>and if we look at <code class=\"language-plaintext highlighter-rouge\">file1.txt</code> again we will see the change:</p>\n\n<p>$ more file1.txt \nThis\nis\na \nfile1</p>\n\n<p>We can now delete the branch:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git branch <span class=\"nt\">-d</span> dev\nDeleted branch dev <span class=\"o\">(</span>was 05ce64d<span class=\"o\">)</span><span class=\"nb\">.</span>\n</code></pre></div></div>\n\n<h3 id=\"merging-with-conflicts\">Merging with conflicts</h3>\n\n<p>To simulate a merging conflict we need to make different changes to the same line of a file in different branches.</p>\n\n<h4 id=\"modify-file1txt-in-main\">Modify <code class=\"language-plaintext highlighter-rouge\">file1.txt</code> in <code class=\"language-plaintext highlighter-rouge\">main</code></h4>\n\n<p>First, let’s checkout <code class=\"language-plaintext highlighter-rouge\">main</code> and make the following change to <code class=\"language-plaintext highlighter-rouge\">file1.txt</code>, say, from</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>This\nis\na \nfile1\n</code></pre></div></div>\n\n<p>to</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>This\nis\na \nfile1 - the first file we created\n</code></pre></div></div>\n\n<p>now we add and commit:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git add file1.txt \n\n<span class=\"nv\">$ </span>git commit <span class=\"nt\">-m</span> <span class=\"s1\">'main changes to file1'</span>\n<span class=\"o\">[</span>main dfd0598] main changes to file1\n 1 file changed, 1 insertion<span class=\"o\">(</span>+<span class=\"o\">)</span>, 1 deletion<span class=\"o\">(</span>-<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"tip\">\n  <tip-title>Showing differences between branches</tip-title>\n\n  <p>You can use <code class=\"language-plaintext highlighter-rouge\">git diff</code> to see the differences between branches such as, for example:</p>\n\n  <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git diff main dev\ndiff <span class=\"nt\">--git</span> a/file1.txt b/file1.txt\nindex f8e8191..e82ee85 100644\n<span class=\"nt\">---</span> a/file1.txt\n+++ b/file1.txt\n@@ <span class=\"nt\">-1</span>,4 +1,4 @@\n This\n is\n a \n<span class=\"nt\">-file1</span> - the first file we created\n+file1\n</code></pre></div>  </div>\n</blockquote>\n\n<h4 id=\"modify-file1txt-in-dev\">Modify <code class=\"language-plaintext highlighter-rouge\">file1.txt</code> in <code class=\"language-plaintext highlighter-rouge\">dev</code></h4>\n\n<p>Checkout <code class=\"language-plaintext highlighter-rouge\">dev</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git checkout dev\nSwitched to branch <span class=\"s1\">'dev'</span>\n</code></pre></div></div>\n\n<p>Change <code class=\"language-plaintext highlighter-rouge\">file1.txt</code>, say, from:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>This\nis\na \nfile1\n</code></pre></div></div>\n\n<p>to</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>This\nis\na \nfile1 - the first file\n</code></pre></div></div>\n\n<p>now we add and commit:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git add file1.txt \n\n<span class=\"nv\">$ </span>git commit <span class=\"nt\">-m</span> <span class=\"s1\">'dev changes to file1'</span>\n<span class=\"o\">[</span>dev b2b8b9e] dev changes to file1\n 1 file changed, 1 insertion<span class=\"o\">(</span>+<span class=\"o\">)</span>, 1 deletion<span class=\"o\">(</span>-<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<h4 id=\"checkout-main-and-try-to-merge\">Checkout <code class=\"language-plaintext highlighter-rouge\">main</code> and try to <code class=\"language-plaintext highlighter-rouge\">merge</code></h4>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"nv\">$ </span>git merge main dev\n Auto-merging file1.txt\n CONFLICT <span class=\"o\">(</span>content<span class=\"o\">)</span>: Merge conflict <span class=\"k\">in </span>file1.txt\n Automatic merge failed<span class=\"p\">;</span> fix conflicts and <span class=\"k\">then </span>commit the result.\n</code></pre></div></div>\n\n<p>If then actually look at the content of the file, you will see this:</p>\n\n<p><a href=\"https://i.imgur.com/s1zuCN6.png\" rel=\"noopener noreferrer\"><img src=\"https://i.imgur.com/s1zuCN6.png\" alt=\"file1. \" loading=\"lazy\" /></a></p>\n\n<p>so here you need to decide which version you will keep and edit the file correspondingly.  For example, I edited it to this form and saved:</p>\n\n<p><a href=\"https://i.imgur.com/1IbIQmD.png\" rel=\"noopener noreferrer\"><img src=\"https://i.imgur.com/1IbIQmD.png\" alt=\"file1_edited. \" loading=\"lazy\" /></a></p>\n\n<p>Now I need to <code class=\"language-plaintext highlighter-rouge\">add</code> and <code class=\"language-plaintext highlighter-rouge\">commit</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"nv\">$ </span>git add file1.txt\n jovyan@jupyter-jupyterlab-2djupyterlab-2ddemo-2dryet2dsd:~/bmmb554_foo_bar<span class=\"nv\">$ </span>git commit <span class=\"nt\">-m</span> <span class=\"s1\">'merged dev into main'</span>\n</code></pre></div></div>\n\n"],"ref_slides":[],"hands_on":true,"slides":false,"mod_date":"2024-03-12 13:41:38 +0000","pub_date":"2024-03-12 15:01:52 +0000","version":5,"api":"https://training.galaxyproject.org/training-material/api/topics/data-science/tutorials/gnmx-lecture7/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"Foundations of Data Science","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial","tags":["work-in-progress"],"contributors":[{"name":"Anton Nekrutenko","email":"anton@nekrut.org","joined":"2017-09","id":"nekrut","url":"https://training.galaxyproject.org/training-material/api/contributors/nekrut.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/nekrut/"}]}