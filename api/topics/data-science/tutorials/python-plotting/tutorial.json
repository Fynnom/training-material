{"layout":"tutorial_hands_on","title":"Plotting in Python","level":"Intermediate","zenodo_link":"https://zenodo.org/record/3477564","requirements":[{"type":"internal","topic_name":"data-science","tutorials":["python-basics"]}],"follow_up_training":[],"questions":["How can I create plots using Python in Galaxy?"],"objectives":["Use the scientific library matplolib to explore tabular datasets"],"time_estimation":"1H","key_points":["Python has many libraries offering a variety of capabilities, which makes it popular for beginners, as well as, more experienced users","You can use scientific libraries like Matplotlib to perform exploratory data analysis."],"subtopic":"python","contributors":[{"name":"Maria Christina Maniou","joined":"2021-09","elixir_node":"gr","affiliations":["elixir-europe"],"id":"mcmaniou","url":"https://training.galaxyproject.org/training-material/api/contributors/mcmaniou.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/mcmaniou/"},{"name":"Fotis E. Psomopoulos","email":"fpsom@certh.gr","twitter":"fopsom","matrix":"fpsom:matrix.org","orcid":"0000-0002-0222-4273","linkedin":"fpsom","joined":"2019-03","elixir_node":"gr","affiliations":["gallantries","elixir-europe"],"id":"fpsom","url":"https://training.galaxyproject.org/training-material/api/contributors/fpsom.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/fpsom/"},{"name":"The Carpentries","joined":"2021-09","id":"carpentries","url":"https://training.galaxyproject.org/training-material/api/organisations/carpentries.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/carpentries/"},{"name":"Gallantries: Bridging Training Communities in Life Science, Environment and Health","short_name":"Gallantries","start_date":"2020-09-01","end_date":"2023-09-30","joined":"2020-09","avatar":"https://gallantries.github.io/assets/images/gallantries-logo.png","github":false,"funder":true,"url":"https://training.galaxyproject.org/training-material/api/funders/gallantries.json","funder_name":"Erasmus+ Programme","funding_id":"2020-1-NL01-KA203-064717","funding_system":"erasmusplus","funding_statement":"This project (<a href=\"https://erasmus-plus.ec.europa.eu/projects/search/details/2020-1-NL01-KA203-064717\"><code class=\"language-plaintext highlighter-rouge\">2020-1-NL01-KA203-064717</code></a>) is funded with the support of the Erasmus+ programme of the European Union. Their funding has supported a large number of tutorials within the GTN across a wide array of topics.\n<img src=\"https://gallantries.github.io/assets/images/logosbeneficaireserasmusright_en.jpg\" alt=\"eu flag with the text: with the support of the erasmus programme of the european union\" />\n<img src=\"https://www.erasmusplus.nl/assets/images/logo.png\" alt=\"erasmus plus logo\" />","members":["abretaud","bebatut","colineroyaux","fpsom","hexylena","shiltemann","yvanlebras"],"id":"gallantries","page":"https://training.galaxyproject.org/training-material/hall-of-fame/gallantries/"}],"priority":3,"notebook":{"language":"python","pyolite":true},"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00096","url":"/topics/data-science/tutorials/python-plotting/tutorial.html","topic_name":"data-science","tutorial_name":"python-plotting","dir":"topics/data-science/tutorials/python-plotting","symlink":null,"id":"data-science/python-plotting","ref_tutorials":["<p>In this lesson, we will be using Python 3 with some of its most popular scientific libraries. This tutorial assumes that the reader is familiar with the fundamentals of data analysis using the Python programming language, as well as, how to run Python programs using Galaxy. Otherwise, it is advised to follow the “Introduction to Python” and “Advanced Python” tutorials available in the same platform. We will be using JupyterNotebook, a Python interpreter that comes with everything we need for the lesson.</p>\n\n<blockquote class=\"comment\">\n  <comment-title></comment-title>\n  <p>This tutorial is <strong>significantly</strong> based on <a href=\"https://carpentries.org\">the Carpentries</a> <a href=\"https://swcarpentry.github.io/python-novice-inflammation/\">Programming with Python</a> and <a href=\"https://swcarpentry.github.io/python-novice-gapminder/\">Plotting and Programming in Python</a>, which is licensed CC-BY 4.0.</p>\n\n  <p>Adaptations have been made to make this work better in a GTN/Galaxy environment.</p>\n</blockquote>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#plot-data-using-matplotlib\" id=\"markdown-toc-plot-data-using-matplotlib\">Plot data using matplotlib</a>    <ol>\n      <li><a href=\"#more-about-plots\" id=\"markdown-toc-more-about-plots\">More about plots</a></li>\n      <li><a href=\"#making-your-plots-accessible\" id=\"markdown-toc-making-your-plots-accessible\">Making your plots accessible</a></li>\n    </ol>\n  </li>\n</ol>\n\n</blockquote>\n\n<h1 id=\"plot-data-using-matplotlib\">Plot data using matplotlib</h1>\n\n<p>For the purposes of this tutorial, we will use a file with the annotated differentially expressed genes that was produced in the <a href=\"/training-material/topics/transcriptomics/tutorials/ref-based/tutorial.html\">Reference-based RNA-Seq data analysis</a> tutorial.</p>\n\n<p>Firstly, we read the file with the data.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">read_csv</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">https://zenodo.org/record/3477564/files/annotatedDEgenes.tabular</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">sep</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"se\">\\t</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">index_col</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">GeneID</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>We can now use the <code class=\"language-plaintext highlighter-rouge\">DataFrame.info()</code> method to find out more about a dataframe.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p>We learn that this is a DataFrame. It consists of 130 rows and 12 columns. None of the columns contains any missing values. 6 columns contain 64-bit floating point <code class=\"language-plaintext highlighter-rouge\">float64</code> values, 2 contain 64-bit integer <code class=\"language-plaintext highlighter-rouge\">int64</code> values and 4 contain character <code class=\"language-plaintext highlighter-rouge\">object</code> values. It uses 13.2KB of memory.</p>\n\n<p>We now have a basic understanding of the dataset and we can move on to creating a few plots and further explore the data. <code class=\"language-plaintext highlighter-rouge\">matplotlib</code> is the most widely used scientific plotting library in Python, especially the <code class=\"language-plaintext highlighter-rouge\">matplotlib.pyplot</code> module.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n</code></pre></div></div>\n<p>Simple plots are then (fairly) simple to create. You can use the <code class=\"language-plaintext highlighter-rouge\">plot()</code> method and simply specify the data to be displayed in the x and y axis, by passing the data as the first and second argument. In the following example, we select a subset of the dataset and plot the P-value of each gene, using a lineplot.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">subset</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"mi\">121</span><span class=\"p\">:,</span> <span class=\"p\">:]</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">subset</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">P-value</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">subset</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Gene name</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n\n<span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">xlabel</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">P-value</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">ylabel</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Gene name</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p><a href=\"../../images/python-plotting/Figure9_Lineplot.png\" rel=\"noopener noreferrer\"><img src=\"../../images/python-plotting/Figure9_Lineplot.png\" alt=\"A line chart is shown with a y axis of gene name and an x axis of p-value. The specific content of the graph is not important other than that it is produced with the expected x and y labels.\" width=\"432\" height=\"288\" loading=\"lazy\" /></a></p>\n\n<p>We use Jupyter Notebook and so running the cell generates the figure directly below the code. The figure is also included in the Notebook document for future viewing. However, other Python environments like an interactive Python session started from a terminal or a Python script executed via the command line require an additional command to display the figure.</p>\n\n<p>Instruct matplotlib to show a figure:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">show</span><span class=\"p\">()</span>\n</code></pre></div></div>\n<p>This command can also be used within a Notebook - for instance, to display multiple figures if several are created by a single cell.</p>\n\n<p>If you want to save and download the image to your local machine, you can use the <code class=\"language-plaintext highlighter-rouge\">plt.savefig()</code> command with the name of the file (png, pdf etc) as the argument. The file is saved in the Jupyter Notebook session and then you can download it. For example:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">tight_layout</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">savefig</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">foo.png</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">plt.tight_layout()</code> is used to make sure that no part of the image is cut off during saving.</p>\n\n<p>When using dataframes, data is often generated and plotted to screen in one line, and <code class=\"language-plaintext highlighter-rouge\">plt.savefig()</code> seems not to be a possible approach. One possibility to save the figure to file is then to save a reference to the current figure in a local variable (with <code class=\"language-plaintext highlighter-rouge\">plt.gcf()</code>) and then call the savefig class method from that variable. For example, the previous plot:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">subset</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"mi\">121</span><span class=\"p\">:,</span> <span class=\"p\">:]</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">subset</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">P-value</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">subset</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Gene name</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n\n<span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">gcf</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"n\">fig</span><span class=\"p\">.</span><span class=\"nf\">savefig</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">my_figure.png</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"more-about-plots\">More about plots</h2>\n\n<p>You can use the <code class=\"language-plaintext highlighter-rouge\">plot()</code> method directly on a dataframe. You can plot multiple lines in the same plot. Just specify more columns in the x or y axis argument. For example:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">new_subset</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"p\">:]</span>\n<span class=\"n\">new_subset</span><span class=\"p\">.</span><span class=\"n\">loc</span><span class=\"p\">[:,</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">P-value</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">P-adj</span><span class=\"sh\">'</span><span class=\"p\">]].</span><span class=\"nf\">plot</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">xticks</span><span class=\"p\">(</span><span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">new_subset</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">)),</span> <span class=\"n\">new_subset</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Gene name</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"n\">rotation</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">xlabel</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Gene name</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p><a href=\"../../images/python-plotting/Figure10_Multiple_lines_plot.png\" rel=\"noopener noreferrer\"><img src=\"../../images/python-plotting/Figure10_Multiple_lines_plot.png\" alt=\"The graph is similar to the last image, now the x axis is the gene name, and the y axis runs from 0 to 7 with an annotation of 1e-65 above. Now there are two lines, one in red labelled p-adj, and one in blue labelled p-value.\" width=\"432\" height=\"288\" loading=\"lazy\" /></a></p>\n\n<p>In this example, we select a new subset of the dataset, but plot only the two columns <code class=\"language-plaintext highlighter-rouge\">P-value</code> and <code class=\"language-plaintext highlighter-rouge\">P-adj</code>. Then we use the <code class=\"language-plaintext highlighter-rouge\">plt.xticks()</code> method to change the text and the rotation of the x axis.</p>\n\n<p>Another useful plot type is the barplot. In the following example we plot the number of genes that belong to the different chromosomes of the dataset.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">bar_data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">groupby</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Chromosome</span><span class=\"sh\">'</span><span class=\"p\">).</span><span class=\"nf\">size</span><span class=\"p\">()</span>\n<span class=\"n\">bar_data</span><span class=\"p\">.</span><span class=\"nf\">plot</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">bar</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">xticks</span><span class=\"p\">(</span><span class=\"n\">rotation</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">ylabel</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">N</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p><a href=\"../../images/python-plotting/Figure11_Barplot.png\" rel=\"noopener noreferrer\"><img src=\"../../images/python-plotting/Figure11_Barplot.png\" alt=\"It is now a bar plot with chromosome as an X axis and some values of N for the y axis for a few chromosomes.\" width=\"640\" height=\"480\" loading=\"lazy\" /></a></p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">matplotlib</code> supports also different plot styles from ather popular plotting libraries such as ggplot and seaborn. For example, the previous plot in ggplot style.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">style</span><span class=\"p\">.</span><span class=\"nf\">use</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ggplot</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">bar_data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">groupby</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Chromosome</span><span class=\"sh\">'</span><span class=\"p\">).</span><span class=\"nf\">size</span><span class=\"p\">()</span>\n<span class=\"n\">bar_data</span><span class=\"p\">.</span><span class=\"nf\">plot</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">bar</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">xticks</span><span class=\"p\">(</span><span class=\"n\">rotation</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">ylabel</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">N</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p><a href=\"../../images/python-plotting/Figure12_ggplot_Barplot.png\" rel=\"noopener noreferrer\"><img src=\"../../images/python-plotting/Figure12_ggplot_Barplot.png\" alt=\"The same graph as the previous, but with a different aethetic, the background is now light grey instead of white and the bars are red instead of blue to be a bit more like ggplot2 outputs.\" width=\"640\" height=\"480\" loading=\"lazy\" /></a></p>\n\n<p>You can also change different parameters and customize the plot.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">style</span><span class=\"p\">.</span><span class=\"nf\">use</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">default</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">bar_data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">groupby</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Chromosome</span><span class=\"sh\">'</span><span class=\"p\">).</span><span class=\"nf\">size</span><span class=\"p\">()</span>\n<span class=\"n\">bar_data</span><span class=\"p\">.</span><span class=\"nf\">plot</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">bar</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">red</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">edgecolor</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">black</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">xticks</span><span class=\"p\">(</span><span class=\"n\">rotation</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">ylabel</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">N</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p><a href=\"../../images/python-plotting/Figure13_Barplot_2.png\" rel=\"noopener noreferrer\"><img src=\"../../images/python-plotting/Figure13_Barplot_2.png\" alt=\"The same graph again, but now the bars are red with a black border.\" width=\"640\" height=\"480\" loading=\"lazy\" /></a></p>\n\n<p>Another useful type of plot is a scatter plot. In the following example we plot the Base mean of a subset of genes.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">scatter_data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[[</span><span class=\"sh\">'</span><span class=\"s\">Base mean</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Gene name</span><span class=\"sh\">'</span><span class=\"p\">]].</span><span class=\"nf\">head</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">15</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">scatter</span><span class=\"p\">(</span><span class=\"n\">scatter_data</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Gene name</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"n\">scatter_data</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Base mean</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n<span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">xticks</span><span class=\"p\">(</span><span class=\"n\">rotation</span> <span class=\"o\">=</span> <span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">ylabel</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Base mean</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">xlabel</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Gene name</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p><a href=\"../../images/python-plotting/Figure14_Scatterplot.png\" rel=\"noopener noreferrer\"><img src=\"../../images/python-plotting/Figure14_Scatterplot.png\" alt=\"A scatterplot is shown comparing gene name to base mean.\" width=\"640\" height=\"480\" loading=\"lazy\" /></a></p>\n\n<blockquote class=\"question\">\n  <question-title>Plotting</question-title>\n\n  <p>Using the same dataset, create a scatterplot of the average P-value for every chromosome for the “+” and the “-“ strand.</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p>First find the data and save it in a new dataframe. Then create the scatterplot. You can even go one step further and assign different colors for the different strands.Note the use of the <code class=\"language-plaintext highlighter-rouge\">map</code> method that assigns the different colors using a dictionary as an input.</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>exercise_data = data.groupby(['Chromosome', 'Strand']).agg(mean_pvalue = ('P-value', 'mean')).reset_index()\n\ncolors = {'+':'red', '-':'blue'}\nplt.scatter(x = exercise_data['Chromosome'], y = exercise_data['mean_pvalue'], c = exercise_data['Strand'].map(colors))\nplt.ylabel('Average P-value')\nplt.xlabel('Chromosome')\n</code></pre></div>    </div>\n    <p><a href=\"../../images/python-plotting/Figure15_Exercise_plot.png\" rel=\"noopener noreferrer\"><img src=\"../../images/python-plotting/Figure15_Exercise_plot.png\" alt=\"Another scatterplot showing chromosome vs average p-value, but every column has both a blue and red point, presumably showing the values for different strands.\" width=\"640\" height=\"480\" loading=\"lazy\" /></a></p>\n\n  </blockquote>\n</blockquote>\n\n<h2 id=\"making-your-plots-accessible\">Making your plots accessible</h2>\n<p>Whenever you are generating plots to go into a paper or a presentation, there are a few things you can do to make sure that everyone can understand your plots.</p>\n\n<p>Always make sure your text is large enough to read. Use the <code class=\"language-plaintext highlighter-rouge\">fontsize</code> parameter in <code class=\"language-plaintext highlighter-rouge\">xlabel</code>, <code class=\"language-plaintext highlighter-rouge\">ylabel</code>, <code class=\"language-plaintext highlighter-rouge\">title</code>, and <code class=\"language-plaintext highlighter-rouge\">legend</code>, and <code class=\"language-plaintext highlighter-rouge\">tick_params</code> with <code class=\"language-plaintext highlighter-rouge\">labelsize</code> to increase the text size of the numbers on your axes.\nSimilarly, you should make your graph elements easy to see. Use <code class=\"language-plaintext highlighter-rouge\">s</code> to increase the size of your scatterplot markers and <code class=\"language-plaintext highlighter-rouge\">linewidth</code> to increase the sizes of your plot lines.\nUsing <code class=\"language-plaintext highlighter-rouge\">color</code> (and nothing else) to distinguish between different plot elements will make your plots unreadable to anyone who is colorblind, or who happens to have a black-and-white office printer. For lines, the <code class=\"language-plaintext highlighter-rouge\">linestyle</code> parameter lets you use different types of lines. For scatterplots, <code class=\"language-plaintext highlighter-rouge\">marker</code> lets you change the shape of your points.</p>\n"],"ref_slides":[],"video_library":{"tutorial":null,"slides":null,"demo":null,"both":null,"session":null},"hands_on":true,"slides":false,"mod_date":"2023-10-23 09:44:54 +0000","pub_date":"2021-11-08 15:53:26 +0000","version":13,"api":"https://training.galaxyproject.org/training-material/api/topics/data-science/tutorials/python-plotting/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"Foundations of Data Science","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial"}