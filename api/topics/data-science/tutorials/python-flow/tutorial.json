{"layout":"tutorial_hands_on","title":"Python - Flow Control","level":"Introductory","requirements":[],"follow_up_training":[],"questions":["How can my programs do different things based on data values?"],"objectives":["Write conditional statements including `if`, `elif`, and `else` branches.","Correctly evaluate expressions containing `and` and `or`."],"time_estimation":"40M","key_points":["Use `if condition` to start a conditional statement, `elif condition` to provide additional tests, and `else` to provide a default.","The bodies of the branches of conditional statements must be indented.","Use `==` to test for equality.","`X and Y` is only true if both `X` and `Y` are true.","`X or Y` is true if either `X` or `Y`, or both, are true.","Zero, the empty string, and the empty list are considered false; all other numbers, strings, and lists are considered true.","`True` and `False` represent truth values.","`not` can be used to invert the condition"],"subtopic":"python-modular","contributors":[{"name":"The Carpentries","joined":"2021-09","id":"carpentries","url":"https://training.galaxyproject.org/training-material/api/organisations/carpentries.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/carpentries/"},{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"},{"name":"Donny Vrins","joined":"2021-10","linkedin":"Donny Vrins","email":"D.vrins@live.nl","former_affiliations":["avans-atgm"],"id":"dirowa","url":"https://training.galaxyproject.org/training-material/api/contributors/dirowa.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/dirowa/"},{"name":"Bazante Sanders","joined":"2020-12","affiliations":["avans-atgm"],"id":"bazante1","url":"https://training.galaxyproject.org/training-material/api/contributors/bazante1.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/bazante1/"}],"priority":5,"notebook":{"language":"python","pyolite":true},"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00088","url":"/topics/data-science/tutorials/python-flow/tutorial.html","topic_name":"data-science","tutorial_name":"python-flow","dir":"topics/data-science/tutorials/python-flow","symlink":null,"id":"data-science/python-flow","ref_tutorials":["<p>“Flow Control” is how we describe when we change the flow of code’s execution, based on some conditions. Here we’ll learn how to take different actions depending on what data out program sees, or how to run code only if some condition is true.</p>\n\n<blockquote class=\"comment\">\n  <comment-title></comment-title>\n  <p>This tutorial is <strong>significantly</strong> based on <a href=\"https://carpentries.org\">the Carpentries</a> <a href=\"https://swcarpentry.github.io/python-novice-inflammation/\">Programming with Python</a> and <a href=\"https://swcarpentry.github.io/python-novice-gapminder/\">Plotting and Programming in Python</a>, which are licensed CC-BY 4.0.</p>\n\n  <p>Adaptations have been made to make this work better in a GTN/Galaxy environment.</p>\n</blockquote>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#comparators\" id=\"markdown-toc-comparators\">Comparators</a></li>\n  <li><a href=\"#conditionals\" id=\"markdown-toc-conditionals\">Conditionals</a></li>\n  <li><a href=\"#multiple-branches\" id=\"markdown-toc-multiple-branches\">Multiple Branches</a></li>\n  <li><a href=\"#combining-tests\" id=\"markdown-toc-combining-tests\">Combining Tests</a></li>\n  <li><a href=\"#inverting-conditions\" id=\"markdown-toc-inverting-conditions\">Inverting Conditions</a></li>\n  <li><a href=\"#ranges\" id=\"markdown-toc-ranges\">Ranges</a></li>\n  <li><a href=\"#exercises\" id=\"markdown-toc-exercises\">Exercises</a></li>\n</ol>\n\n</blockquote>\n\n<h2 id=\"comparators\">Comparators</h2>\n\n<p>In Python we have the following comparators to do compare two values</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">&gt;</code>: greater than</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;</code>: less than</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">==</code>: equal to</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">!=</code>: does not equal</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&gt;=</code>: greater than or equal to</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;=</code>: less than or equal to</li>\n</ul>\n\n<p>They’re all “binary” comparators, we can only compare two values at a time.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"mi\">37</span> <span class=\"o\">&lt;</span> <span class=\"mi\">38</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"mi\">38</span> <span class=\"o\">&lt;</span> <span class=\"mi\">38</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"mi\">39</span> <span class=\"o\">&lt;</span> <span class=\"mi\">38</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>These print out <code class=\"language-plaintext highlighter-rouge\">True</code> or <code class=\"language-plaintext highlighter-rouge\">False</code>, these are the two possible values of the <a href=\"https://en.wikipedia.org/wiki/Boolean_algebra\"><em>boolean</em></a> datatype in Python.</p>\n\n<p>We can use <code class=\"language-plaintext highlighter-rouge\">&lt;=</code> to check if it’s less than or equal to:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"mi\">19</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"mi\">20</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"mi\">21</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>And we can use <code class=\"language-plaintext highlighter-rouge\">==</code> for comparing numbers in Python</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>print(11 == 11)\nprint(11 != 11)\nprint(22 != 33)\n</code></pre></div></div>\n\n<p>And now that we can compare numbers, we can start doing useful things with them!</p>\n\n<h2 id=\"conditionals\">Conditionals</h2>\n\n<p>We can ask Python to take different actions, depending on a condition, with an <code class=\"language-plaintext highlighter-rouge\">if</code> statement:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">37</span>\n<span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">&gt;</span> <span class=\"mi\">100</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">greater</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">not greater</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">done</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>The second line of this code uses the keyword <code class=\"language-plaintext highlighter-rouge\">if</code> to tell Python that we want to make a choice.\nIf the test that follows the <code class=\"language-plaintext highlighter-rouge\">if</code> statement is true,\nthe body of the <code class=\"language-plaintext highlighter-rouge\">if</code>\n(i.e., the set of lines indented underneath it) is executed, and “greater” is printed.\nIf the test is false,\nthe body of the <code class=\"language-plaintext highlighter-rouge\">else</code> is executed instead, and “not greater” is printed.\nOnly one or the other is ever executed before continuing on with program execution to print “done”:</p>\n\n<p><a href=\"../../images/python-flowchart-conditional.png\" rel=\"noopener noreferrer\"><img src=\"../../images/python-flowchart-conditional.png\" alt=\"A flowchart diagram of the if-else construct that tests if variable num is greater than 100. \" width=\"338\" height=\"268\" loading=\"lazy\" /></a></p>\n\n<p>Conditional statements don’t have to include an <code class=\"language-plaintext highlighter-rouge\">else</code>. If there isn’t one,\nPython simply does nothing if the test is false:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">53</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">before conditional...</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">&gt;</span> <span class=\"mi\">100</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">num</span><span class=\"si\">}</span><span class=\"s\"> is greater than 100</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">...after conditional</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>If behaviour</question-title>\n\n  <p>Try changing the <code class=\"language-plaintext highlighter-rouge\">num</code> value and see what happens for different values.</p>\n\n  <p>What happens if <code class=\"language-plaintext highlighter-rouge\">num</code> is a:</p>\n  <ol>\n    <li>202</li>\n    <li>3.145</li>\n    <li>“test”</li>\n    <li>100.000001</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <ol>\n      <li>Condition is activated!</li>\n      <li>Nothing, but not because it is a float! Because it’s less than 100</li>\n      <li>Traceback, a <code class=\"language-plaintext highlighter-rouge\">TypeError</code>, you cannot compare strings with integers</li>\n      <li>Condition is activated!</li>\n    </ol>\n  </blockquote>\n</blockquote>\n\n<h2 id=\"multiple-branches\">Multiple Branches</h2>\n\n<p>But what if you want more branches? What if you need to handle more cases? <code class=\"language-plaintext highlighter-rouge\">elif</code> to the rescue!</p>\n\n<p>We can chain several tests together using <code class=\"language-plaintext highlighter-rouge\">elif</code>, which is short for “else if”.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>if todays_temperature &gt; 30:\n    print(\"Wear shorts! Remember your sunscreen\")\nelif todays_temperature &gt; 20:\n    print(\"It's nice weather finally! Gasp!\")\nelif todays_temperature &lt; 10:\n    print(\"Time to bundle up!\")\nelse:\n    print(\"Dress normally\")\n</code></pre></div></div>\n\n<blockquote class=\"tip\">\n  <tip-title>If/Elif/Elif/Elif/Else:</tip-title>\n  <p>if/elif/else cases follow these rules:</p>\n\n  <ul>\n    <li>must start with an <code class=\"language-plaintext highlighter-rouge\">if</code></li>\n    <li>can have 0 or more <code class=\"language-plaintext highlighter-rouge\">elif</code> conditions</li>\n    <li>can have 0 or 1 <code class=\"language-plaintext highlighter-rouge\">else</code> condition (if no else condition is supplied, it’s equivalent to <code class=\"language-plaintext highlighter-rouge\">else: &lt;nothing&gt;</code>)</li>\n  </ul>\n</blockquote>\n\n<p>Each of these three sections is a <strong>branch</strong>, the code pauses, and chooses to go down one of the branches based on the conditions.</p>\n\n<p>The following Python code uses <code class=\"language-plaintext highlighter-rouge\">elif</code> to print the sign of a number.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">3</span>\n\n<span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">num</span><span class=\"si\">}</span><span class=\"s\"> is positive</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">num</span><span class=\"si\">}</span><span class=\"s\"> is zero</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">num</span><span class=\"si\">}</span><span class=\"s\"> is negative</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p><strong>NB</strong>: To test for equality we use a double equals sign <code class=\"language-plaintext highlighter-rouge\">==</code>\nrather than a single equals sign <code class=\"language-plaintext highlighter-rouge\">=</code> which is used to assign values.</p>\n\n<h2 id=\"combining-tests\">Combining Tests</h2>\n\n<p>We can also combine tests using <code class=\"language-plaintext highlighter-rouge\">and</code> and <code class=\"language-plaintext highlighter-rouge\">or</code>.\n<code class=\"language-plaintext highlighter-rouge\">and</code> is only true if both parts are true:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"nf\">if </span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">both parts are true</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">at least one part is false</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Predict what happens</question-title>\n  <p>Predict the outcomes of the following values of <code class=\"language-plaintext highlighter-rouge\">a</code> and <code class=\"language-plaintext highlighter-rouge\">b</code> above. Predicting what you think the code will do is a useful skill to practice</p>\n  <ol>\n    <li>a = 0; b = -1</li>\n    <li>a = 0; b = 10</li>\n    <li>a = 4; b = -22</li>\n    <li>a = 99; b = 99</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <ol>\n      <li>at least one part is false</li>\n      <li>at least one part is false</li>\n      <li>both parts are true</li>\n      <li>at least one part is false</li>\n    </ol>\n  </blockquote>\n</blockquote>\n\n<p>while <code class=\"language-plaintext highlighter-rouge\">or</code> is true if at least one part is true:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"nf\">if </span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">at least one test is true</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"tip\">\n  <tip-title>`True` and `False`</tip-title>\n  <p><code class=\"language-plaintext highlighter-rouge\">True</code> and <code class=\"language-plaintext highlighter-rouge\">False</code> are special words in Python called <code class=\"language-plaintext highlighter-rouge\">booleans</code>,\nwhich represent truth values. A statement such as <code class=\"language-plaintext highlighter-rouge\">1 &lt; 0</code> returns\nthe value <code class=\"language-plaintext highlighter-rouge\">False</code>, while <code class=\"language-plaintext highlighter-rouge\">-1 &lt; 0</code> returns the value <code class=\"language-plaintext highlighter-rouge\">True</code>.</p>\n</blockquote>\n\n<p><code class=\"language-plaintext highlighter-rouge\">True</code> and <code class=\"language-plaintext highlighter-rouge\">False</code> booleans are not the only values in Python that are true and false.\nIn fact, <em>any</em> value can be used in an <code class=\"language-plaintext highlighter-rouge\">if</code> or <code class=\"language-plaintext highlighter-rouge\">elif</code>. This is commonly used to\ncheck, for instance, if a string is empty or if some data is provided:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"sh\">''</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">empty string is true</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"sh\">'</span><span class=\"s\">word</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">word is true</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>You can also use it to check if a list is empty or full:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">[]:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">empty list is true</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">non-empty list is true</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"c1\"># The last statement is equivalent to:\n</span><span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">non-empty list is true</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Or you can check if a number is zero, or non-zero:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">zero is true</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">one is true</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"inverting-conditions\">Inverting Conditions</h2>\n\n<p>Sometimes it is useful to check whether some condition is not true.\nThe Boolean operator <code class=\"language-plaintext highlighter-rouge\">not</code> can do this explicitly.\nAfter reading and running the code below,\nwrite some <code class=\"language-plaintext highlighter-rouge\">if</code> statements that use <code class=\"language-plaintext highlighter-rouge\">not</code> to test the rule\nthat you formulated in the previous question.\n<code class=\"language-plaintext highlighter-rouge\">not</code> is a <code class=\"language-plaintext highlighter-rouge\">unary</code> (not <code class=\"language-plaintext highlighter-rouge\">binary</code>) operator: it only takes a single value</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"sh\">''</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">empty string is not true</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"sh\">'</span><span class=\"s\">word</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">word is not true</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"ow\">not</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">not not True is true</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"ranges\">Ranges</h2>\n\n<p>Python makes it super easy to check if a number is within a range.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">quality_score</span> <span class=\"o\">=</span> <span class=\"mi\">32</span> <span class=\"c1\"># Try out different values!\n</span>\n<span class=\"k\">if</span> <span class=\"n\">quality_score</span> <span class=\"o\">&gt;</span> <span class=\"mi\">40</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Your data is a bit sus</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"mi\">20</span> <span class=\"o\">&lt;</span> <span class=\"n\">quality_score</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">40</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Hey that looks ok</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"mi\">4</span> <span class=\"o\">&lt;</span> <span class=\"n\">quality_score</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">20</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Oh you did nanopore sequencing</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">It shouldn</span><span class=\"sh\">'</span><span class=\"s\">t be *that* bad. Try again.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>There are two important points here:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">20 &lt; x &lt; 40</code> is equivalent to <code class=\"language-plaintext highlighter-rouge\">20 &lt; x and x &lt; 40</code>, checking both sides of the condition, to make sure it’s greater than one value and smaller than another</li>\n  <li>Note that we checked in the second case <code class=\"language-plaintext highlighter-rouge\">20 &lt; x</code> and then in the third we had to check <code class=\"language-plaintext highlighter-rouge\">x &lt;= 20</code>. If we had not had a <code class=\"language-plaintext highlighter-rouge\">&lt;=</code> on one side, what would have happened to 20? It would have gone straight to else!</li>\n</ul>\n\n<h2 id=\"exercises\">Exercises</h2>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n  <p><code class=\"language-plaintext highlighter-rouge\">if</code>s, <code class=\"language-plaintext highlighter-rouge\">elif</code>s and <code class=\"language-plaintext highlighter-rouge\">else</code>s get evaluated in blocks. Look at the following code and list the lines that are part of a single block.</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1.  if x:\n2.      # ..\n3.  if y:\n4.      # ..\n5.  elif z:\n6.      # ..\n7.  if q:\n8.      # ..\n9.  else:\n10.     # ..\n11. elif t:\n12.     # ..\n13. else e:\n14.     # ..\n</code></pre></div>  </div>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <p>“Blocks” of if/elif/elses</p>\n    <ul>\n      <li>must start with an <code class=\"language-plaintext highlighter-rouge\">if</code></li>\n      <li>can have 0 or more <code class=\"language-plaintext highlighter-rouge\">elif</code> conditions</li>\n      <li>can have 0 or 1 <code class=\"language-plaintext highlighter-rouge\">else</code> condition (if no else condition is supplied, it’s equivalent to <code class=\"language-plaintext highlighter-rouge\">else: &lt;nothing&gt;</code>)</li>\n    </ul>\n\n    <p>The above blocks are parsed together, you could not insert a <code class=\"language-plaintext highlighter-rouge\">print</code> anywhere within the blocks, but between the blocks it would work.</p>\n\n    <ul>\n      <li>1-2, Just an <code class=\"language-plaintext highlighter-rouge\">if</code> by itself. There’s no elif, or else, so that’s the end of that block</li>\n      <li>3-6, <code class=\"language-plaintext highlighter-rouge\">if</code> and <code class=\"language-plaintext highlighter-rouge\">elif</code> get evaluated, there is no <code class=\"language-plaintext highlighter-rouge\">else</code>, so that’s the end of that block</li>\n      <li>7-10, <code class=\"language-plaintext highlighter-rouge\">if</code> and <code class=\"language-plaintext highlighter-rouge\">else</code> is fine</li>\n      <li>11-14, error! This is missing an <code class=\"language-plaintext highlighter-rouge\">if</code> case, it will fail with a syntaxerror.</li>\n    </ul>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Test code here.\n</span></code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>How Many Paths?</question-title>\n\n  <p>Consider this code:</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>if 4 &gt; 5:\n    print('A')\nelif 4 == 5:\n    print('B')\nelif 4 &lt; 5:\n    print('C')\n</code></pre></div>  </div>\n\n  <p>Which of the following would be printed if you were to run this code?\nWhy did you pick this answer?</p>\n\n  <ol>\n    <li>A</li>\n    <li>B</li>\n    <li>C</li>\n    <li>B and C</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <p>C gets printed because the first two conditions, <code class=\"language-plaintext highlighter-rouge\">4 &gt; 5</code> and <code class=\"language-plaintext highlighter-rouge\">4 == 5</code>, are not true,\nbut <code class=\"language-plaintext highlighter-rouge\">4 &lt; 5</code> is true.</p>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Test code here.\n</span></code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Close Enough</question-title>\n\n  <p>Write some conditions that print <code class=\"language-plaintext highlighter-rouge\">True</code> if the variable <code class=\"language-plaintext highlighter-rouge\">a</code> is within <code class=\"language-plaintext highlighter-rouge\">10</code> of the variable <code class=\"language-plaintext highlighter-rouge\">b</code>\nand <code class=\"language-plaintext highlighter-rouge\">False</code> otherwise.\nCompare your implementation with your partner’s:\ndo you get the same answer for all possible pairs of numbers?</p>\n\n  <blockquote class=\"tip\">\n    <tip-title>abs</tip-title>\n    <p>There is a [built-in function <code class=\"language-plaintext highlighter-rouge\">abs</code>][abs-function] that returns the absolute value of\na number:</p>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">abs</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"p\">))</span>\n</code></pre></div>    </div>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>12\n</code></pre></div>    </div>\n  </blockquote>\n\n  <blockquote class=\"solution\">\n    <solution-title>1</solution-title>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>a = 5\nb = 5.1\n\nif abs(a - b) &lt;= 10:\n    print('True')\nelse:\n    print('False')\n</code></pre></div>    </div>\n  </blockquote>\n\n  <blockquote class=\"solution\">\n    <solution-title>2</solution-title>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>print(abs(a - b) &lt;= 10)\n</code></pre></div>    </div>\n\n    <p>This works because the Booleans <code class=\"language-plaintext highlighter-rouge\">True</code> and <code class=\"language-plaintext highlighter-rouge\">False</code>\nhave string representations which can be printed.</p>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Test code here.\n</span></code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Pitfalls</question-title>\n\n  <p>A <em>integer</em> number between 0 and 100 will be provided to this function. Answer these two questions:</p>\n\n  <ul>\n    <li>Will it always print something? If not, which value(s) fail?</li>\n    <li>Can you find any numbers the programmer explicitly wanted to handle, that aren’t handled as expected?</li>\n  </ul>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>num = 42 # Randomly chosen so the code will execute, try changing it around.\nif num &gt; 90:\n    print(\"great score\")\nelif num &lt; 32:\n    print(\"Very cold\")\nelif num &gt;= 86:\n    print(\"Almost\")\nelif num == 86:\n    print(\"It's exactly this value!\")\nelif 32 &lt; num &lt; 58:\n    print(\"Getting warmer\")\nelif 57 &lt; num &lt;= 86:\n    print(\"Everything else goes here\")\n</code></pre></div>  </div>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <ol>\n      <li>No, it won’t. 32 is the only value there that doesn’t print anything. You can either do <code class=\"language-plaintext highlighter-rouge\">x &lt; 57</code> and later <code class=\"language-plaintext highlighter-rouge\">57 &lt;= x</code> to test the bigger and smaller values, or you can make use <code class=\"language-plaintext highlighter-rouge\">x &lt; 57</code> and <code class=\"language-plaintext highlighter-rouge\">56 &lt; x</code>, which have the same results, but <strong>only with integers</strong>. If your code accepted a float, e.g. <code class=\"language-plaintext highlighter-rouge\">56.5</code>, both of those tests would be true. So <code class=\"language-plaintext highlighter-rouge\">x &lt; 57</code> and later <code class=\"language-plaintext highlighter-rouge\">57 &lt;= x</code> is the preferred way to write that.</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">86</code> is the most obvious solution to this, the programmer added a check specifically to see if the value was 86, but instead it’s caught by the previous case.</li>\n    </ol>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">42</span> <span class=\"c1\"># Randomly chosen so the code will execute, try changing it around.\n</span><span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">&gt;</span> <span class=\"mi\">90</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">great score</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">num</span> <span class=\"o\">&lt;</span> <span class=\"mi\">32</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Very cold</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">num</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">86</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Almost</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"mi\">86</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">It</span><span class=\"sh\">'</span><span class=\"s\">s exactly this value!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"mi\">32</span> <span class=\"o\">&lt;</span> <span class=\"n\">num</span> <span class=\"o\">&lt;</span> <span class=\"mi\">58</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Getting warmer</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"mi\">57</span> <span class=\"o\">&lt;</span> <span class=\"n\">num</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">86</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Everything else goes here</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"tip\">\n  <tip-title>Why a synthetic example like this?</tip-title>\n  <p>Complicated if/elif/else cases are common in code, you need to be able to spot these sort of issues. For example there are large if/else cases in the <a href=\"https://github.com/galaxyproject/galaxy/blob/9143dd7ca46d150ebfb26febbe187979f682da51/tools/stats/grouping.py#L153-L176\">Galaxy codebase</a>, sometimes nested even, and being ale to predict their behaviour is really important to being able to work with the code. <a href=\"https://github.com/galaxyproject/galaxy/blob/9143dd7ca46d150ebfb26febbe187979f682da51/tools/stats/grouping.py#L185-L195\">Missing else cases</a> are sometimes important, sometimes a bug, sometimes just the code hasn’t been implemented yet, which is why we always write good code comments!</p>\n</blockquote>\n"],"ref_slides":[],"hands_on":true,"slides":false,"mod_date":"2023-02-13 13:04:13 +0000","pub_date":"2022-04-25 11:43:04 +0000","version":12,"api":"https://training.galaxyproject.org/training-material/api/topics/data-science/tutorials/python-flow/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"Foundations of Data Science","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial"}