{"layout":"tutorial_hands_on","title":"Python - Basic Types & Type Conversion","level":"Introductory","requirements":[],"follow_up_training":[],"questions":["What kinds of data do programs store?","How can I convert one type to another?"],"objectives":["Explain key differences between integers and floating point numbers.","Explain key differences between numbers and character strings.","Use built-in functions to convert between integers, floating point numbers, and strings."],"time_estimation":"30M","key_points":["Every value has a type.","Use the built-in function `type` to find the type of a value.","Types control what operations can be done on values.","Strings can be added and multiplied.","Strings have a length (but numbers don't).","Must convert numbers to strings or vice versa when operating on them.","Can mix integers and floats freely in operations.","Variables only change value when something is assigned to them."],"subtopic":"python-modular","contributors":[{"name":"The Carpentries","joined":"2021-09","id":"carpentries","url":"https://training.galaxyproject.org/training-material/api/organisations/carpentries.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/carpentries/"},{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"},{"name":"Donny Vrins","joined":"2021-10","linkedin":"Donny Vrins","email":"D.vrins@live.nl","former_affiliations":["avans-atgm"],"id":"dirowa","url":"https://training.galaxyproject.org/training-material/api/contributors/dirowa.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/dirowa/"},{"name":"Bazante Sanders","joined":"2020-12","affiliations":["avans-atgm"],"id":"bazante1","url":"https://training.galaxyproject.org/training-material/api/contributors/bazante1.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/bazante1/"}],"priority":3,"notebook":{"language":"python","pyolite":true},"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00099","url":"/topics/data-science/tutorials/python-types/tutorial.html","topic_name":"data-science","tutorial_name":"python-types","dir":"topics/data-science/tutorials/python-types","symlink":null,"id":"data-science/python-types","ref_tutorials":["<p>Python is a typed language, data has a type, and different types of data cannot always be connected immediately and might need some conversion step before they can be used together. For instance if you add a number to a number, what should happen? If you add a number to a message, what do you expect will happen?</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#types\" id=\"markdown-toc-types\">Types</a></li>\n  <li><a href=\"#can-mix-integers-and-floats-freely-in-operations\" id=\"markdown-toc-can-mix-integers-and-floats-freely-in-operations\">Can mix integers and floats freely in operations.</a></li>\n  <li><a href=\"#variables-only-change-value-when-something-is-assigned-to-them\" id=\"markdown-toc-variables-only-change-value-when-something-is-assigned-to-them\">Variables only change value when something is assigned to them.</a></li>\n</ol>\n\n</blockquote>\n\n<h2 id=\"types\">Types</h2>\n\n<p>Every value in a program has a specific type.</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Python Code</th>\n      <th>Represents</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Integer</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">int</code></td>\n      <td>represents positive or negative whole numbers like 3 or -512.</td>\n    </tr>\n    <tr>\n      <td>Floating point number</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">float</code></td>\n      <td>represents real numbers like 3.14159 or -2.5.</td>\n    </tr>\n    <tr>\n      <td>Character string</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">str</code></td>\n      <td>text, written with either <code class=\"language-plaintext highlighter-rouge\">'</code> or <code class=\"language-plaintext highlighter-rouge\">\"</code> quotes (they must match)</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"checking-the-type\">Checking the Type</h3>\n\n<p>Use the built-in function <code class=\"language-plaintext highlighter-rouge\">type</code> to find out what type a value has. This works on values as well as variables. But remember: the <em>value</em> has the type — the <em>variable</em> is just a label.</p>\n\n<p>Check the type of values with the <a href=\"https://docs.python.org/3.8/library/functions.html#type\"><code class=\"language-plaintext highlighter-rouge\">type()</code></a> function:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"mi\">52</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"mf\">3.14159</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>You can also check the types of variables</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">fitness</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">average</span><span class=\"sh\">'</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">fitness</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<h3 id=\"methods\">Methods</h3>\n\n<p>A value’s type determines what the program can do to it. Some operations may work</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"mi\">5</span> <span class=\"o\">-</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>And some operations may not work:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">hello</span><span class=\"sh\">'</span> <span class=\"o\">-</span> <span class=\"sh\">'</span><span class=\"s\">h</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>For instance, you can use the <code class=\"language-plaintext highlighter-rouge\">+</code> and <code class=\"language-plaintext highlighter-rouge\">*</code> operators on strings.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">full_name</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">Ahmed</span><span class=\"sh\">'</span> <span class=\"o\">+</span> <span class=\"sh\">'</span><span class=\"s\"> </span><span class=\"sh\">'</span> <span class=\"o\">+</span> <span class=\"sh\">'</span><span class=\"s\">Walsh</span><span class=\"sh\">'</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">full_name</span><span class=\"p\">)</span>\n<span class=\"n\">separator</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">=</span><span class=\"sh\">'</span> <span class=\"o\">*</span> <span class=\"mi\">10</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">separator</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Some methods only accept specific types, or only work on specific types.</p>\n\n<p>The built-in function <code class=\"language-plaintext highlighter-rouge\">len</code> returns the length of your data. Which of the following would you expect to work? <code class=\"language-plaintext highlighter-rouge\">len(string)</code>? <code class=\"language-plaintext highlighter-rouge\">len(int)</code>?</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">full_name</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"mi\">52</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<h3 id=\"matching-types\">Matching Types</h3>\n\n<p>Not all types support all operations, adding an integer to a string doesn’t make much sense:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"sh\">'</span><span class=\"s\">2</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>This does not work because it’s ambiguous: should <code class=\"language-plaintext highlighter-rouge\">1 + '2'</code> be <code class=\"language-plaintext highlighter-rouge\">3</code> (a number) or <code class=\"language-plaintext highlighter-rouge\">'12'</code> (a string)? Some types can be converted to other types by using the type name as a function.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">2</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"sh\">'</span><span class=\"s\">2</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"operation-support\">Operation Support</h3>\n\n<p>Here is a quick chart showing which operations are allowed for each pair:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Left\\Right</th>\n      <th><code class=\"language-plaintext highlighter-rouge\">int</code></th>\n      <th><code class=\"language-plaintext highlighter-rouge\">float</code></th>\n      <th><code class=\"language-plaintext highlighter-rouge\">str</code></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">int</code></td>\n      <td><code class=\"language-plaintext highlighter-rouge\">+-*/</code></td>\n      <td><code class=\"language-plaintext highlighter-rouge\">+-*/</code></td>\n      <td><code class=\"language-plaintext highlighter-rouge\">*</code></td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">float</code></td>\n      <td><code class=\"language-plaintext highlighter-rouge\">+-*/</code></td>\n      <td><code class=\"language-plaintext highlighter-rouge\">+-*/</code></td>\n      <td>``</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">str</code></td>\n      <td><code class=\"language-plaintext highlighter-rouge\">*</code></td>\n      <td>``</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">+</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<p>As you can see you can do <code class=\"language-plaintext highlighter-rouge\">3 * \"test\"</code> and <code class=\"language-plaintext highlighter-rouge\">\"test\" * 3</code>, but it doesn’t work with floats.</p>\n\n<h2 id=\"can-mix-integers-and-floats-freely-in-operations\">Can mix integers and floats freely in operations.</h2>\n\n<p>Integers and floating-point numbers can be mixed in arithmetic. Python 3 (which we use) automatically converts integers to floats as needed.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">half is </span><span class=\"si\">{</span><span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"mf\">2.0</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">three squared is </span><span class=\"si\">{</span><span class=\"mf\">3.0</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"variables-only-change-value-when-something-is-assigned-to-them\">Variables only change value when something is assigned to them.</h2>\n\n<p>If we make one cell in a spreadsheet depend on another, and update the latter,\nthe former updates automatically. However, this does <strong>not</strong> happen in programming languages.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">variable_one</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">variable_two</span> <span class=\"o\">=</span> <span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"n\">variable_one</span>\n<span class=\"n\">variable_one</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">first is </span><span class=\"si\">{</span><span class=\"n\">variable_one</span><span class=\"si\">}</span><span class=\"s\"> and second is </span><span class=\"si\">{</span><span class=\"n\">variable_two</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>The computer reads the value of <code class=\"language-plaintext highlighter-rouge\">first</code> when doing the multiplication, creates\na new value, and assigns it to <code class=\"language-plaintext highlighter-rouge\">second</code>. After that, <code class=\"language-plaintext highlighter-rouge\">second</code> does not remember\nwhere it came from. Every computation happens line-by-line.</p>\n\n<blockquote class=\"question\">\n  <question-title>Fractions</question-title>\n\n  <p>What type of value is 3.14159?\nHow can you find out?</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p>It is a floating-point number (often abbreviated “float”).\nIt is possible to find out by using the built-in function <code class=\"language-plaintext highlighter-rouge\">type()</code>.</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>print(type(3.14159))\n&lt;class 'float'&gt;\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Test out solutions here!\n</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Automatic Type Conversion</question-title>\n\n  <p>What type of value is the result of (3.25 + 4)?</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p>It is a float:\nintegers are automatically converted to floats as necessary.</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>result = 3.25 + 4\nprint(f'result is {type(result)}')\n</code></pre></div>    </div>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>7.25 is &lt;class 'float'&gt;\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Test out solutions here!\n</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Choose a Type</question-title>\n\n  <p>What type of value (integer, floating point number, or character string)\nwould you use to represent each of the following?  Try to come up with more than one good answer for each problem.  For example, in  # 1, when would counting days with a floating point variable make more sense than using an integer?</p>\n\n  <ol>\n    <li>Number of days since the start of the year.</li>\n    <li>Time elapsed from the start of the year until now in days.</li>\n    <li>Serial number of a piece of lab equipment.</li>\n    <li>A lab specimen’s age</li>\n    <li>Current population of a city.</li>\n    <li>Average population of a city over time.</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p>The answers to the questions are:</p>\n    <ol>\n      <li>Integer, since the number of days would lie between 1 and 365.</li>\n      <li>Floating point, since fractional days are required</li>\n      <li>Character string if serial number contains letters and numbers, otherwise integer if the serial number consists only of numerals</li>\n      <li>This will vary! How do you define a specimen’s age? whole days since collection (integer)? date and time (string)?</li>\n      <li>Choose floating point to represent population as large aggregates (eg millions), or integer to represent population in units of individuals.</li>\n      <li>Floating point number, since an average is likely to have a fractional part.</li>\n    </ol>\n  </blockquote>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title>Division Types</question-title>\n\n  <p>In Python 3, the <code class=\"language-plaintext highlighter-rouge\">//</code> operator performs integer (whole-number) floor division, the <code class=\"language-plaintext highlighter-rouge\">/</code> operator performs floating-point\ndivision, and the <code class=\"language-plaintext highlighter-rouge\">%</code> (or <em>modulo</em>) operator calculates and returns the remainder from integer division:</p>\n\n  <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">5 // 3: </span><span class=\"si\">{</span><span class=\"mi\">5</span> <span class=\"o\">//</span> <span class=\"mi\">3</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">5 / 3: </span><span class=\"si\">{</span><span class=\"mi\">5</span> <span class=\"o\">/</span> <span class=\"mi\">3</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">5 % 3: </span><span class=\"si\">{</span><span class=\"mi\">5</span> <span class=\"o\">%</span> <span class=\"mi\">3</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div>  </div>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>5 // 3: 1\n5 / 3: 1.6666666666666667\n5 % 3: 2\n</code></pre></div>  </div>\n\n  <p>If <code class=\"language-plaintext highlighter-rouge\">num_subjects</code> is the number of subjects taking part in a study,\nand <code class=\"language-plaintext highlighter-rouge\">num_per_survey</code> is the number that can take part in a single survey,\nwrite an expression that calculates the number of surveys needed\nto reach everyone once.</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <p>We want the minimum number of surveys that reaches everyone once, which is\nthe rounded up value of <code class=\"language-plaintext highlighter-rouge\">num_subjects/ num_per_survey</code>. This is\nequivalent to performing a floor division with <code class=\"language-plaintext highlighter-rouge\">//</code> and adding 1. Before\nthe division we need to subtract 1 from the number of subjects to deal with\nthe case where <code class=\"language-plaintext highlighter-rouge\">num_subjects</code> is evenly divisible by <code class=\"language-plaintext highlighter-rouge\">num_per_survey</code>.</p>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>num_subjects = 600\nnum_per_survey = 42\nnum_surveys = (num_subjects - 1) // num_per_survey + 1\n\nprint(num_subjects, 'subjects,', num_per_survey, 'per survey:', num_surveys)\n</code></pre></div>    </div>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>600 subjects, 42 per survey: 15\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Test out solutions here!\n</span></code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Strings to Numbers</question-title>\n\n  <p>Where reasonable, <code class=\"language-plaintext highlighter-rouge\">float()</code> will convert a string to a floating point number,\nand <code class=\"language-plaintext highlighter-rouge\">int()</code> will convert a floating point number to an integer:</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>print(\"string to float:\", float(\"3.4\"))\nprint(\"float to int:\", int(3.4))\n</code></pre></div>  </div>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>string to float: 3.4\nfloat to int: 3\n</code></pre></div>  </div>\n\n  <p>If the conversion doesn’t make sense, however, an error message will occur.</p>\n\n  <blockquote class=\"code-in\">\n    <code-in-title>Python</code-in-title>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>print(\"string to float:\", float(\"Hello world!\"))\n</code></pre></div>    </div>\n  </blockquote>\n\n  <blockquote class=\"code-out\">\n    <code-out-title></code-out-title>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: could not convert string to float: 'Hello world!'\n</code></pre></div>    </div>\n  </blockquote>\n\n  <p>Given this information, what do you expect the following program to do?</p>\n\n  <p>What does it actually do?</p>\n\n  <p>Why do you think it does that?</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>print(\"fractional string to int:\", int(\"3.4\"))\n</code></pre></div>  </div>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <p>What do you expect this program to do? It would not be so unreasonable to expect the Python 3 <code class=\"language-plaintext highlighter-rouge\">int</code> command to\nconvert the string “3.4” to 3.4 and an additional type conversion to 3. After all, Python 3 performs a lot of other\nmagic - isn’t that part of its charm?</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>int(\"3.4\")\n</code></pre></div>    </div>\n    <p>However, Python 3 throws an error.</p>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: invalid literal for int() with base 10: '3.4'\n</code></pre></div>    </div>\n\n    <p>Why? To be consistent, possibly. If you ask Python to perform two consecutive\ntypecasts, you must convert it explicitly in code.</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>int(float(\"3.4\"))\n</code></pre></div>    </div>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>3\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Test out solutions here!\n</span></code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Arithmetic with Different Types</question-title>\n\n  <p>Which of the following will return the floating point number <code class=\"language-plaintext highlighter-rouge\">2.0</code>?\nNote: there may be more than one right answer.</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>first = 1.0\nsecond = \"1\"\nthird = \"1.1\"\n</code></pre></div>  </div>\n\n  <ol>\n    <li><code class=\"language-plaintext highlighter-rouge\">first + float(second)</code></li>\n    <li><code class=\"language-plaintext highlighter-rouge\">float(second) + float(third)</code></li>\n    <li><code class=\"language-plaintext highlighter-rouge\">first + int(third)</code></li>\n    <li><code class=\"language-plaintext highlighter-rouge\">first + int(float(third))</code></li>\n    <li><code class=\"language-plaintext highlighter-rouge\">int(first) + int(float(third))</code></li>\n    <li><code class=\"language-plaintext highlighter-rouge\">2.0 * second</code></li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p>Answer: 1 and 4 give exactly 2.0.\nAnswer 5 gives the value <code class=\"language-plaintext highlighter-rouge\">2</code> which may be considered equivalent, but is not returning a float specifically.</p>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Test out solutions here!\n</span></code></pre></div></div>\n"],"ref_slides":[],"video_library":{"tutorial":null,"slides":null,"demo":null,"both":null,"session":null},"hands_on":true,"slides":false,"mod_date":"2023-02-13 13:04:13 +0000","pub_date":"2022-04-25 11:43:04 +0000","version":13,"api":"https://training.galaxyproject.org/training-material/api/topics/data-science/tutorials/python-types/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"Foundations of Data Science","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial"}