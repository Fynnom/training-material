{"layout":"tutorial_hands_on","title":"Introduction to Python","level":"Introductory","requirements":[],"follow_up_training":[{"type":"internal","topic_name":"data-science","tutorials":["python-plotting","python-advanced-np-pd"]}],"questions":["How can I run Python programs?"],"objectives":["Learn the fundamentals of programming in Python"],"time_estimation":"5H","key_points":["Python is a fairly easy programming language to learn and use, but be mindful of the indexing.","Python has many libraries offering a variety of capabilities, which makes it popular for beginners, as well as, more experienced users"],"subtopic":"python","contributors":[{"name":"Maria Christina Maniou","joined":"2021-09","elixir_node":"gr","affiliations":["elixir-europe"],"id":"mcmaniou","url":"https://training.galaxyproject.org/training-material/api/contributors/mcmaniou.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/mcmaniou/"},{"name":"Fotis E. Psomopoulos","email":"fpsom@certh.gr","twitter":"fopsom","matrix":"fpsom:matrix.org","orcid":"0000-0002-0222-4273","linkedin":"fpsom","joined":"2019-03","elixir_node":"gr","affiliations":["gallantries","elixir-europe"],"id":"fpsom","url":"https://training.galaxyproject.org/training-material/api/contributors/fpsom.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/fpsom/"},{"name":"The Carpentries","joined":"2021-09","id":"carpentries","url":"https://training.galaxyproject.org/training-material/api/organisations/carpentries.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/carpentries/"},{"name":"Gallantries: Bridging Training Communities in Life Science, Environment and Health","short_name":"Gallantries","start_date":"2020-09-01","end_date":"2023-09-30","joined":"2020-09","avatar":"https://gallantries.github.io/assets/images/gallantries-logo.png","github":false,"funder":true,"url":"https://training.galaxyproject.org/training-material/api/funders/gallantries.json","funder_name":"Erasmus+ Programme","funding_id":"2020-1-NL01-KA203-064717","funding_system":"erasmusplus","funding_statement":"This project (<a href=\"https://erasmus-plus.ec.europa.eu/projects/search/details/2020-1-NL01-KA203-064717\"><code class=\"language-plaintext highlighter-rouge\">2020-1-NL01-KA203-064717</code></a>) is funded with the support of the Erasmus+ programme of the European Union. Their funding has supported a large number of tutorials within the GTN across a wide array of topics.\n<img src=\"https://gallantries.github.io/assets/images/logosbeneficaireserasmusright_en.jpg\" alt=\"eu flag with the text: with the support of the erasmus programme of the european union\" />\n<img src=\"https://www.erasmusplus.nl/assets/images/logo.png\" alt=\"erasmus plus logo\" />","members":["abretaud","bebatut","colineroyaux","fpsom","hexylena","shiltemann","yvanlebras"],"id":"gallantries","page":"https://training.galaxyproject.org/training-material/hall-of-fame/gallantries/"}],"priority":1,"notebook":{"language":"python","pyolite":true},"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00083","url":"/topics/data-science/tutorials/python-basics/tutorial.html","topic_name":"data-science","tutorial_name":"python-basics","dir":"topics/data-science/tutorials/python-basics","symlink":null,"id":"data-science/python-basics","ref_tutorials":["<p>In this lesson, we will be using Python 3 with some of its most popular scientific libraries. We will be using JupyterNotebook, a Python interpreter that comes with everything we need for the lesson.</p>\n\n<blockquote class=\"comment\">\n  <comment-title></comment-title>\n  <p>This tutorial is <strong>significantly</strong> based on <a href=\"https://carpentries.org\">the Carpentries</a> <a href=\"https://swcarpentry.github.io/python-novice-inflammation/\">Programming with Python</a> and <a href=\"https://swcarpentry.github.io/python-novice-gapminder/\">Plotting and Programming in Python</a>, which is licensed CC-BY 4.0.</p>\n\n  <p>Adaptations have been made to make this work better in a GTN/Galaxy environment.</p>\n</blockquote>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#overview\" id=\"markdown-toc-overview\">Overview</a></li>\n  <li><a href=\"#python-fundamentals\" id=\"markdown-toc-python-fundamentals\">Python Fundamentals</a>    <ol>\n      <li><a href=\"#variables\" id=\"markdown-toc-variables\">Variables</a></li>\n      <li><a href=\"#lists\" id=\"markdown-toc-lists\">Lists</a></li>\n      <li><a href=\"#strings\" id=\"markdown-toc-strings\">Strings</a></li>\n      <li><a href=\"#type-conversion\" id=\"markdown-toc-type-conversion\">Type conversion</a></li>\n      <li><a href=\"#built-in-python-functions\" id=\"markdown-toc-built-in-python-functions\">Built-in Python functions</a></li>\n      <li><a href=\"#conditionals\" id=\"markdown-toc-conditionals\">Conditionals</a></li>\n      <li><a href=\"#for-loops\" id=\"markdown-toc-for-loops\">For loops</a></li>\n      <li><a href=\"#while-loops\" id=\"markdown-toc-while-loops\">While loops</a></li>\n      <li><a href=\"#create-functions\" id=\"markdown-toc-create-functions\">Create Functions</a></li>\n      <li><a href=\"#libraries\" id=\"markdown-toc-libraries\">Libraries</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#programming-style\" id=\"markdown-toc-programming-style\">Programming style</a></li>\n  <li><a href=\"#python-community\" id=\"markdown-toc-python-community\">Python community</a></li>\n</ol>\n\n</blockquote>\n\n<h1 id=\"overview\">Overview</h1>\n\n<p>Python was developed by Guido van Rossum. Guido van Rossum started implementing Python in 1989. Python is a very simple programming language so even if you are new to programming, you can learn python without facing any issues.</p>\n\n<p>Features of Python language:</p>\n<ol>\n  <li>\n    <p><strong>Readable</strong>: Python is a very readable language.</p>\n  </li>\n  <li>\n    <p><strong>Easy to Learn</strong>: Learning python is easy as this is a expressive and high level programming language, which means it is easy to understand the language and thus easy to learn.</p>\n  </li>\n  <li>\n    <p><strong>Cross platform</strong>: Python is available and can run on various operating systems such as Mac, Windows, Linux, Unix etc. This makes it a cross platform and portable language.</p>\n  </li>\n  <li>\n    <p><strong>Open Source</strong>: Python is a open source programming language.</p>\n  </li>\n  <li>\n    <p><strong>Large standard library</strong>: Python comes with a large standard library that has some handy codes and functions which we can use while writing code in Python.</p>\n  </li>\n  <li>\n    <p><strong>Free</strong>: Python is free to download and use. This means you can download it for free and use it in your application.</p>\n  </li>\n  <li>\n    <p><strong>Supports exception handling</strong>: Python supports exception handling which means we can write less error prone code and can test various scenarios that can cause an exception later on.</p>\n  </li>\n  <li>\n    <p><strong>Automatic memory management</strong>: Python supports automatic memory management which means the memory is cleared and freed automatically. You do not have to bother clearing the memory.</p>\n  </li>\n</ol>\n\n<blockquote class=\"tip\">\n  <tip-title>Why Jupyter?</tip-title>\n\n  <p>JupyterLab is a User Interface including notebooks. A user can open several notebooks or files as tabs in the same window, like an IDE. JupyterNotebook is a web-based interactive computational environment for creating Jupyter notebook documents. It supports several languages like Python (IPython), Julia, R etc. and is largely used for data analysis, data visualization and further interactive, exploratory computing.</p>\n\n  <p>JupyterNotebook has several advantages:</p>\n\n  <ul>\n    <li>You can easily type, edit, and copy and paste blocks of code.</li>\n    <li>Tab complete allows you to easily access the names of things you are using and learn more about them.</li>\n    <li>It allows you to annotate your code with links, different sized text, bullets, etc. to make it more accessible to you and your collaborators.</li>\n    <li>It allows you to display figures next to the code that produces them to tell a complete story of the analysis.</li>\n  </ul>\n\n  <p>Each notebook contains one or more cells that contain code, text, or images. Each notebook can be exported (File, Export as, Executable script) as Python script that can be run from the command line.</p>\n\n  <p>We will be using JupyterNotebook in Galaxy and as a result you need to frequently save the notebook in the workspace. This is both for good practice and to protect you in case you accidentally close the browser. Your environment will still run, so it will contain the last saved notebook you have.  Furthermore, you need to download a notebook, before you delete or close a notebook in your history or you will lose it.</p>\n</blockquote>\n\n<h1 id=\"python-fundamentals\">Python Fundamentals</h1>\n\n<h2 id=\"variables\">Variables</h2>\n\n<p>Any Python interpreter can be used as a calculator:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"mi\">4</span>\n</code></pre></div></div>\n\n<p>This is great but not very interesting. To do anything useful with data, we need to assign its value to a variable. In Python, we can assign a value to a variable, using the equals sign <code class=\"language-plaintext highlighter-rouge\">=</code>. For example, we can track the weight of a patient who weighs 60 kilograms by assigning the value 60 to a variable <code class=\"language-plaintext highlighter-rouge\">weight_kg</code>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">weight_kg</span> <span class=\"o\">=</span> <span class=\"mi\">60</span>\n</code></pre></div></div>\n\n<p>From now on, whenever we use <code class=\"language-plaintext highlighter-rouge\">weight_kg</code>, Python will substitute the value we assigned to it.</p>\n\n<p>In Python, variable names:</p>\n\n<ul>\n  <li>can include letters, digits, and underscores</li>\n  <li>cannot start with a digit</li>\n  <li>are case sensitive</li>\n</ul>\n\n<p>This means that, for example:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">weight0</code> is a valid variable name, whereas <code class=\"language-plaintext highlighter-rouge\">0weight</code> is not</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">weight</code> and <code class=\"language-plaintext highlighter-rouge\">Weight</code> are different variables</li>\n</ul>\n\n<h3 id=\"types-of-data\">Types of data</h3>\n\n<p>Python knows various types of data. Three common ones are:</p>\n\n<ul>\n  <li>integer numbers</li>\n  <li>floating point numbers, and</li>\n  <li>strings.</li>\n</ul>\n\n<p>In the example above, variable <code class=\"language-plaintext highlighter-rouge\">weight_kg</code> has an integer value of <code class=\"language-plaintext highlighter-rouge\">60</code>. If we want to more precisely track the weight of our patient, we can use a floating point value by executing:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">weight_kg</span> <span class=\"o\">=</span> <span class=\"mf\">60.3</span>\n</code></pre></div></div>\n\n<p>To create a string, we add single or double quotes around some text. To identify and track a patient throughout our study, we can assign each person a unique identifier by storing it in a string:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">patient_id</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">001</span><span class=\"sh\">'</span>\n</code></pre></div></div>\n\n<h3 id=\"using-variables-in-python\">Using Variables in Python</h3>\n\n<p>Once we have data stored with variable names, we can make use of it in calculations. We may want to store our patient’s weight in pounds as well as kilograms:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">weight_lb</span> <span class=\"o\">=</span> <span class=\"mf\">2.2</span> <span class=\"o\">*</span> <span class=\"n\">weight_kg</span>\n</code></pre></div></div>\n\n<p>We might decide to add a prefix to our patient identifier:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">patient_id</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">inflam_</span><span class=\"sh\">'</span> <span class=\"o\">+</span> <span class=\"n\">patient_id</span>\n</code></pre></div></div>\n\n<h3 id=\"variables-persist-between-cells\">Variables Persist Between Cells</h3>\n<p>Be aware that it is the order of execution of cells that is important in a Jupyter notebook, not the order in which they appear. Python will remember all the code that was run previously, including any variables you have defined, irrespective of the order in the notebook. Therefore if you define variables lower down the notebook and then (re)run cells further up, those defined further down will still be present. As an example, create two cells with the following content, in this order:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">myval</span><span class=\"p\">)</span>\n<span class=\"n\">myval</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n</code></pre></div></div>\n<p>If you execute this in order, the first cell will give an error. However, if you run the first cell after the second cell, it will print out 1. To prevent confusion, it can be helpful to use the Kernel -&gt; Restart &amp; Run All option which clears the interpreter and runs everything from a clean slate going top to bottom.</p>\n\n<blockquote class=\"question\">\n  <question-title>Variables and values</question-title>\n\n  <p>What values do the variables <code class=\"language-plaintext highlighter-rouge\">mass</code> and <code class=\"language-plaintext highlighter-rouge\">age</code> have after each of the following statements? Test your answer by executing the lines.</p>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mass = 47.5\nage = 122\nmass = mass * 2.0\nage = age - 20\n</code></pre></div>  </div>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p><code class=\"language-plaintext highlighter-rouge\">mass</code> holds a value of 47.5, <code class=\"language-plaintext highlighter-rouge\">age</code> does not exist\n<code class=\"language-plaintext highlighter-rouge\">mass</code> still holds a value of 47.5, <code class=\"language-plaintext highlighter-rouge\">age</code> holds a value of 122\n<code class=\"language-plaintext highlighter-rouge\">mass</code> now has a value of 95.0, <code class=\"language-plaintext highlighter-rouge\">age</code>’s value is still 122\n<code class=\"language-plaintext highlighter-rouge\">mass</code> still has a value of 95.0, <code class=\"language-plaintext highlighter-rouge\">age</code> now holds 102</p>\n\n  </blockquote>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title>Variables</question-title>\n\n  <p>Python allows you to assign multiple values to multiple variables in one line by separating the variables and values with commas. What does the following program print out?</p>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>first, second = 'Grace', 'Hopper'\nthird, fourth = second, first\nprint(third, fourth)\n</code></pre></div>  </div>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p>Hopper Grace</p>\n\n  </blockquote>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title>Variables and data types</question-title>\n\n  <p>What are the data types of the following variables?</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>planet = 'Earth'\napples = 5\ndistance = 10.5\n</code></pre></div>  </div>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>type(planet)\ntype(apples)\ntype(distance)\n</code></pre></div>    </div>\n\n  </blockquote>\n</blockquote>\n\n<h2 id=\"lists\">Lists</h2>\n\n<p>Lists are built into the language so we do not have to load a library to use them. We create a list by putting values inside square brackets and separating the values with commas:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">odds</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">odds are:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">odds</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>We can access elements of a list using indices – numbered positions of elements in the list. These positions are numbered starting at 0, so the first element has an index of 0.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">first element:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">odds</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">last element:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">odds</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'\"</span><span class=\"s\">-1</span><span class=\"sh\">\"</span><span class=\"s\"> element:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">odds</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>Yes, we can use negative numbers as indices in Python. When we do so, the index <code class=\"language-plaintext highlighter-rouge\">-1</code> gives us the last element in the list, <code class=\"language-plaintext highlighter-rouge\">-2</code> the second to last, and so on. Because of this, <code class=\"language-plaintext highlighter-rouge\">odds[3]</code> and <code class=\"language-plaintext highlighter-rouge\">odds[-1]</code> point to the same element here.</p>\n\n<p>There is one important difference between lists and strings: we can change the values in a list, but we cannot change individual characters in a string. For example:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Curie</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Darwing</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Turing</span><span class=\"sh\">'</span><span class=\"p\">]</span>  <span class=\"c1\"># typo in Darwin's name\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">names is originally:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"p\">)</span>\n<span class=\"n\">names</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">Darwin</span><span class=\"sh\">'</span>  <span class=\"c1\"># correct the name\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">final value of names:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>works, but the following does not:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">Darwin</span><span class=\"sh\">'</span>\n<span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span>\n</code></pre></div></div>\n\n<p>Lists in Python can contain elements of different types. Example:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">sample_ages</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mf\">12.5</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Unknown</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>There are many ways to change the contents of lists besides assigning new values to individual elements:</p>\n\n<p>We can append new elements to a list</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">odds</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">odds after adding a value:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">odds</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>We can pop an element off the end of a list</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">removed_element</span> <span class=\"o\">=</span> <span class=\"n\">odds</span><span class=\"p\">.</span><span class=\"nf\">pop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">odds after removing the first element:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">odds</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">removed_element:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">removed_element</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Or we can reverse the list</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">odds</span><span class=\"p\">.</span><span class=\"nf\">reverse</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">odds after reversing:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">odds</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"mutable-vs-immutable-data\">Mutable vs Immutable data</h3>\n<p>Data which can be modified in place is called mutable, while data which cannot be modified is called immutable. Strings and numbers are immutable. This does not mean that variables with string or number values are constants, but when we want to change the value of a string or number variable, we can only replace the old value with a completely new value.</p>\n\n<p>Lists and arrays, on the other hand, are mutable: we can modify them after they have been created. We can change individual elements, append new elements, or reorder the whole list. For some operations, like sorting, we can choose whether to use a function that modifies the data in-place or a function that returns a modified copy and leaves the original unchanged.</p>\n\n<p>Be careful when modifying data in-place. If two variables refer to the same list, and you modify the list value, it will change for both variables!</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">salsa</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">peppers</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">onions</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">cilantro</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">tomatoes</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"n\">my_salsa</span> <span class=\"o\">=</span> <span class=\"n\">salsa</span>        <span class=\"c1\"># &lt;-- my_salsa and salsa point to the *same* list data in memory\n</span><span class=\"n\">salsa</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">hot peppers</span><span class=\"sh\">'</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Ingredients in my salsa:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">my_salsa</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>If you want variables with mutable values to be independent, you must make a copy of the value when you assign it.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">salsa</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">peppers</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">onions</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">cilantro</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">tomatoes</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"n\">my_salsa</span> <span class=\"o\">=</span> <span class=\"n\">salsa</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">()</span>        <span class=\"c1\"># &lt;-- makes a *copy* of the list\n</span><span class=\"n\">salsa</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">hot peppers</span><span class=\"sh\">'</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Ingredients in my salsa:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">my_salsa</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Because of pitfalls like this, code which modifies data in place can be more difficult to understand. However, it is often far more efficient to modify a large data structure in place than to create a modified copy for every small change. You should consider both of these aspects when writing your code.</p>\n\n<h3 id=\"nested-lists\">Nested lists</h3>\n<p>Since a list can contain any Python variables, it can even contain other lists.</p>\n\n<p>For example, we could represent the products in the shelves of a small grocery shop:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"sh\">'</span><span class=\"s\">pepper</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">zucchini</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">onion</span><span class=\"sh\">'</span><span class=\"p\">],</span>\n   <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">cabbage</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">lettuce</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">garlic</span><span class=\"sh\">'</span><span class=\"p\">],</span>\n   <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">apple</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">pear</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">banana</span><span class=\"sh\">'</span><span class=\"p\">]]</span>\n</code></pre></div></div>\n\n<p>Here is an example of how indexing a list of lists <code class=\"language-plaintext highlighter-rouge\">x</code> works:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<h3 id=\"slicing\">Slicing</h3>\n<p>Subsets of lists can be accessed by specifying ranges of values in brackets. This is commonly referred to as “slicing” the list.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">chromosomes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">X</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Y</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">2</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">3</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">4</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"n\">autosomes</span> <span class=\"o\">=</span> <span class=\"n\">chromosomes</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">autosomes:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">autosomes</span><span class=\"p\">)</span>\n<span class=\"n\">last</span> <span class=\"o\">=</span> <span class=\"n\">chromosomes</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">last:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">last</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Negative indices</question-title>\n\n  <p>Use slicing to access only the last four characters of a string or entries of a list.</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>string_for_slicing = 'Observation date: 02-Feb-2013'\nlist_for_slicing = [['fluorine', 'F'], ['chlorine', 'Cl'], ['bromine', 'Br'], ['iodine', 'I'], ['astatine', 'At']]\n</code></pre></div>  </div>\n  <p>Your output should be:\n‘2013’\n[[‘chlorine’, ‘Cl’], [‘bromine’, ‘Br’], [‘iodine’, ‘I’], [‘astatine’, ‘At’]]</p>\n\n  <p>Would your solution work regardless of whether you knew beforehand the length of the string or list (e.g. if you wanted to apply the solution to a set of lists of different lengths)? If not, try to change your approach to make it more robust.\nHint: Remember that indices can be negative as well as positive.</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p>Use negative indices to count elements from the end of a container (such as list or string):</p>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>string_for_slicing[-4:]\nlist_for_slicing[-4:]\n</code></pre></div>    </div>\n\n  </blockquote>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title>Slicing</question-title>\n\n  <p>So far we’ve seen how to use slicing to take single blocks of successive entries from a sequence. But what if we want to take a subset of entries that aren’t next to each other in the sequence?</p>\n\n  <p>You can achieve this by providing a third argument to the range within the brackets, called the step size. The example below shows how you can take every third entry in a list:</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\nsubset = primes[0:12:3]\nprint('subset', subset)\n</code></pre></div>  </div>\n\n  <p>Notice that the slice taken begins with the first entry in the range, followed by entries taken at equally-spaced intervals (the steps) thereafter. What if you wanted to begin the subset with the third entry? Use the previous example to write your solution that gives the following output.</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p>You would need to specify that as the starting point of the sliced range:</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>subset = primes[2:12:3]\nprint('subset', subset)\n</code></pre></div>    </div>\n\n  </blockquote>\n</blockquote>\n\n<h2 id=\"strings\">Strings</h2>\n\n<h3 id=\"use-an-index-to-get-a-single-character-from-a-string\">Use an index to get a single character from a string.</h3>\n\n<p>The characters (individual letters, numbers,and so on) in a string are ordered. For example, the string ‘AB’ is not the same as ‘BA’. Because of this ordering, we can treat the string as a list of characters. Each position in the string (first, second, etc.) is given a number. This number is called an index or sometimes a subscript. Indices are numbered from 0.You can use the position’s index in square brackets to get the character at that position.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">atom_name</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">helium</span><span class=\"sh\">'</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">atom_name</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<h3 id=\"use-a-slice-to-get-a-substring\">Use a slice to get a substring.</h3>\n<p>A part of a string is called a substring. A substring can be as short as a single character. An item in a list is called an element. Whenever we treat a string as if it were a list, the string’s elements are its individual characters. A slice is a part of a string (or, more generally, any list-like thing). We take a slice by using [start:stop], where start is replaced with the index of the first element we want and stop is replaced with the index of the element just after the last element we want. Mathematically, you might say that a slice selects [start:stop). The difference between stop and start is the slice’s length. Taking a slice does not change the contents of the original string. Instead, the slice is a copy of part of the original string.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">atom_name</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">sodium</span><span class=\"sh\">'</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">atom_name</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>You can use the built-in function <code class=\"language-plaintext highlighter-rouge\">len</code> to find the length of a string.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">helium</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>Nested functions are evaluated from the inside out, like in mathematics.</p>\n\n<blockquote class=\"question\">\n  <question-title>Slicing</question-title>\n\n  <p>Use what you have learnt in this tutorial to answer the following questions:\na. What does the following program print?</p>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>atom_name = 'carbon'\nprint('atom_name[1:3] is:', atom_name[1:3])\n</code></pre></div>  </div>\n  <p>b. What does <code class=\"language-plaintext highlighter-rouge\">thing[low:high]</code> do?\nc. What does <code class=\"language-plaintext highlighter-rouge\">thing[low:]</code> (without a value after the colon) do?\nd. What does <code class=\"language-plaintext highlighter-rouge\">thing[:high]</code> (without a value before the colon) do?\ne. What does <code class=\"language-plaintext highlighter-rouge\">thing[:]</code> (just a colon) do?\nf. What does <code class=\"language-plaintext highlighter-rouge\">thing[number:some-negative-number]</code> do?\ng. What happens when you choose a high value which is out of range? (i.e., try <code class=\"language-plaintext highlighter-rouge\">atom_name[0:15]</code>)</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p>a. <code class=\"language-plaintext highlighter-rouge\">atom_name[1:3] is: ar</code>\nb. <code class=\"language-plaintext highlighter-rouge\">thing[low:high]</code> returns a slice from low to the value before high\nc. <code class=\"language-plaintext highlighter-rouge\">thing[low:]</code> returns a slice from low all the way to the end of thing\nd. <code class=\"language-plaintext highlighter-rouge\">thing[:high]</code> returns a slice from the beginning of thing to the value before high\ne. <code class=\"language-plaintext highlighter-rouge\">thing[:]</code> returns all of thing\nf. <code class=\"language-plaintext highlighter-rouge\">thing[number:some-negative-number]</code> returns a slice from number to some-negative-number values from the end of thing\ng. If a part of the slice is out of range, the operation does not fail. <code class=\"language-plaintext highlighter-rouge\">atom_name[0:15]</code> gives the same result as <code class=\"language-plaintext highlighter-rouge\">atom_name[0:]</code>.</p>\n\n  </blockquote>\n</blockquote>\n\n<h3 id=\"you-can-use-the--and--operators-on-stringslists\">You can use the “+” and “*” operators on strings/lists.</h3>\n\n<p>“Adding” character strings concatenates them.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">full_name</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">Ahmed</span><span class=\"sh\">'</span> <span class=\"o\">+</span> <span class=\"sh\">'</span><span class=\"s\"> </span><span class=\"sh\">'</span> <span class=\"o\">+</span> <span class=\"sh\">'</span><span class=\"s\">Walsh</span><span class=\"sh\">'</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">full_name</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Multiplying a character string by an integer “N” creates a new string that consists of that character string repeated N times.</p>\n\n<p>Since multiplication is repeated addition.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">separator</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">=</span><span class=\"sh\">'</span> <span class=\"o\">*</span> <span class=\"mi\">10</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">separator</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>The same rules apply for lists. Consider the following example:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">counts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]</span>\n<span class=\"n\">repeats</span> <span class=\"o\">=</span> <span class=\"n\">counts</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">repeats</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>It’s equivalent to:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">counts</span> <span class=\"o\">+</span> <span class=\"n\">counts</span>\n</code></pre></div></div>\n\n<p>Strings have a length (but numbers don’t).The built-in function <code class=\"language-plaintext highlighter-rouge\">len</code> counts the number of characters in a string.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">full_name</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>But numbers don’t have a length (not even zero). For example, the following command returns an error message.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"mi\">52</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<h2 id=\"type-conversion\">Type conversion</h2>\n\n<p>Python converts automatically integers to floats, when needed, but you must convert numbers to strings or vice versa when operating on them.\nIt is not allowed to add numbers and strings. For example <code class=\"language-plaintext highlighter-rouge\">print(1 + '2')</code> is ambiguous: should <code class=\"language-plaintext highlighter-rouge\">1 + '2'</code> be <code class=\"language-plaintext highlighter-rouge\">3</code> or <code class=\"language-plaintext highlighter-rouge\">'12'</code>?</p>\n\n<p>Some types can be converted to other types by using the type name as a function.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">2</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"sh\">'</span><span class=\"s\">2</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Data types</question-title>\n\n  <p>What type of value is 3.25 + 4?</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p>It is a float: integers are automatically converted to floats as necessary.</p>\n  </blockquote>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title>Division</question-title>\n\n  <p>In Python 3, the <code class=\"language-plaintext highlighter-rouge\">//</code> operator performs integer (whole-number) floor division, the <code class=\"language-plaintext highlighter-rouge\">/</code> operator performs floating-point division, and the <code class=\"language-plaintext highlighter-rouge\">%</code> (or <em>modulo</em>) operator calculates and returns the remainder from integer division:</p>\n\n  <blockquote class=\"code-in\">\n    <code-in-title>Python</code-in-title>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>print('5 // 3:', 5 // 3)\nprint('5 / 3:', 5 / 3)\nprint('5 % 3:', 5 % 3)\n</code></pre></div>    </div>\n  </blockquote>\n\n  <blockquote class=\"code-out\">\n    <code-out-title></code-out-title>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>5 // 3: 1\n5 / 3: 1.6666666666666667\n5 % 3: 2\n</code></pre></div>    </div>\n  </blockquote>\n\n  <p>If <code class=\"language-plaintext highlighter-rouge\">num_subjects</code> is the number of subjects taking part in a study, and <code class=\"language-plaintext highlighter-rouge\">num_per_survey</code> is the number that can take part in a single survey, write an expression that calculates the number of surveys needed to reach everyone once.</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p>We want the minimum number of surveys that reaches everyone once, which is the rounded up value of <code class=\"language-plaintext highlighter-rouge\">num_subjects/ num_per_survey</code>. This is equivalent to performing a floor division with <code class=\"language-plaintext highlighter-rouge\">//</code> and adding 1. Before the division we need to subtract 1 from the number of subjects to deal with the case where <code class=\"language-plaintext highlighter-rouge\">num_subjects</code> is evenly divisible by <code class=\"language-plaintext highlighter-rouge\">num_per_survey</code>.</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>num_subjects = 600\nnum_per_survey = 42\nnum_surveys = (num_subjects - 1) // num_per_survey + 1\n\nprint(num_subjects, 'subjects,', num_per_survey, 'per survey:', num_surveys)\n</code></pre></div>    </div>\n\n  </blockquote>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title>Typecasting</question-title>\n\n  <p>Where reasonable, <code class=\"language-plaintext highlighter-rouge\">float()</code> will convert a string to a floating point number, and <code class=\"language-plaintext highlighter-rouge\">int()</code> will convert a floating point number to an integer:</p>\n\n  <blockquote class=\"code-in\">\n    <code-in-title>Python</code-in-title>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>print(\"string to float:\", float(\"3.4\"))\nprint(\"float to int:\", int(3.4))\n</code></pre></div>    </div>\n  </blockquote>\n\n  <blockquote class=\"code-out\">\n    <code-out-title></code-out-title>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>string to float: 3.4\nfloat to int: 3\n</code></pre></div>    </div>\n  </blockquote>\n\n  <p>If the conversion doesn’t make sense, however, an error message will occur.\nGiven this information, what do you expect the following program to do? What does it actually do? Why do you think it does that?</p>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>print(\"fractional string to int:\", int(\"3.4\"))\n</code></pre></div>  </div>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p>Python 3 throws an error. If you ask Python to perform two consecutive typecasts, you must convert it explicitly in code.</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>int(float(\"3.4\"))\n</code></pre></div>    </div>\n\n  </blockquote>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title>Typecasting</question-title>\n\n  <p>Which of the following will return the floating point number <code class=\"language-plaintext highlighter-rouge\">2.0</code>? Note: there may be more than one right answer.</p>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>first = 1.0\nsecond = \"1\"\nthird = \"1.1\"\n</code></pre></div>  </div>\n\n  <ol>\n    <li><code class=\"language-plaintext highlighter-rouge\">first + float(second)</code></li>\n    <li><code class=\"language-plaintext highlighter-rouge\">float(second) + float(third)</code></li>\n    <li><code class=\"language-plaintext highlighter-rouge\">first + int(third)</code></li>\n    <li><code class=\"language-plaintext highlighter-rouge\">first + int(float(third))</code></li>\n    <li><code class=\"language-plaintext highlighter-rouge\">int(first) + int(float(third))</code></li>\n    <li><code class=\"language-plaintext highlighter-rouge\">2.0 * second</code></li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p>Answer: 1 and 4</p>\n  </blockquote>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title>Imaginary numbers</question-title>\n\n  <p>Python provides complex numbers, which are written as <code class=\"language-plaintext highlighter-rouge\">1.0+2.0j</code>. If <code class=\"language-plaintext highlighter-rouge\">val</code> is a complex number, its real and imaginary parts can be accessed using dot notation as <code class=\"language-plaintext highlighter-rouge\">val.real</code> and <code class=\"language-plaintext highlighter-rouge\">val.imag</code>.</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>complex = 6 + 2j\nprint(complex.real)\nprint(complex.imag)\n</code></pre></div>  </div>\n\n  <p>Output:\n6.0\n2.0</p>\n\n  <ol>\n    <li>Why do you think Python uses <code class=\"language-plaintext highlighter-rouge\">j</code> instead of i for the imaginary part?</li>\n    <li>What do you expect <code class=\"language-plaintext highlighter-rouge\">1+2j + 3</code> to produce?</li>\n    <li>What do you expect <code class=\"language-plaintext highlighter-rouge\">4j</code> to be? What about <code class=\"language-plaintext highlighter-rouge\">4 j</code> or <code class=\"language-plaintext highlighter-rouge\">4 + j</code>?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <ol>\n      <li>Standard mathematics treatments typically use i to denote an imaginary number. However, from media reports it was an early convention established from electrical engineering that now presents a technically expensive area to change.</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">(4+2j)</code></li>\n      <li><code class=\"language-plaintext highlighter-rouge\">4j</code> and Syntax Error: invalid syntax. In the latter cases, <code class=\"language-plaintext highlighter-rouge\">j</code> is considered a variable and the statement depends on if <code class=\"language-plaintext highlighter-rouge\">j</code> is defined and if so, its assigned value.</li>\n    </ol>\n\n  </blockquote>\n</blockquote>\n\n<h2 id=\"built-in-python-functions\">Built-in Python functions</h2>\n\n<p>To carry out common tasks with data and variables in Python, the language provides us with several built-in functions. To display information to the screen, we use the <code class=\"language-plaintext highlighter-rouge\">print</code> function:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">weight_lb</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">patient_id</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>When we want to make use of a function, referred to as calling the function, we follow its name by parentheses. The parentheses are important: if you leave them off, the function doesn’t actually run! Sometimes you will include values or variables inside the parentheses for the function to use. In the case of <code class=\"language-plaintext highlighter-rouge\">print</code>, we use the parentheses to tell the function what value we want to display. <code class=\"language-plaintext highlighter-rouge\">print</code> automatically puts a single space between outputs to separate them and wraps around to a new line at the end.</p>\n\n<p>We can display multiple things at once using only one <code class=\"language-plaintext highlighter-rouge\">print</code> call:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">patient_id</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">weight in kilograms:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">weight_kg</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>We can also call a function inside of another function call. For example, Python has a built-in function called <code class=\"language-plaintext highlighter-rouge\">type</code> that tells you a value’s data type:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"mf\">60.3</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">patient_id</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>Moreover, we can do arithmetic with variables right inside the <code class=\"language-plaintext highlighter-rouge\">print</code> function:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">weight in pounds:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mf\">2.2</span> <span class=\"o\">*</span> <span class=\"n\">weight_kg</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>The above command, however, did not change the value of <code class=\"language-plaintext highlighter-rouge\">weight_kg</code>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">weight_kg</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>To change the value of the <code class=\"language-plaintext highlighter-rouge\">weight_kg</code> variable, we have to assign <code class=\"language-plaintext highlighter-rouge\">weight_kg</code> a new value using the equals <code class=\"language-plaintext highlighter-rouge\">=</code> sign:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">weight_kg</span> <span class=\"o\">=</span> <span class=\"mf\">65.0</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">weight in kilograms is now:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">weight_kg</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>A function may take zero or more arguments.  An <em>argument</em> is a value passed into a function. You must always use parentheses, even if they’re empty, so that Python knows a function is being called.</p>\n\n<p>Every function call produces some result. If the function doesn’t have a useful result to return, it usually returns the special value <code class=\"language-plaintext highlighter-rouge\">None</code>. <code class=\"language-plaintext highlighter-rouge\">None</code> is a Python object that stands in anytime there is no value.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">example</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">result of print is</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Commonly-used built-in functions include <code class=\"language-plaintext highlighter-rouge\">max</code>, <code class=\"language-plaintext highlighter-rouge\">min</code>, and <code class=\"language-plaintext highlighter-rouge\">round</code>. <code class=\"language-plaintext highlighter-rouge\">max</code> and <code class=\"language-plaintext highlighter-rouge\">min</code> work on character strings as well as numbers. From “larger” and “smaller”, they use the order: (0-9, A-Z, a-z) to compare letters.</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">min</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">0</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>Functions may have default values for some arguments. <code class=\"language-plaintext highlighter-rouge\">round</code> will round off a floating-point number. By default, it rounds to zero decimal places.</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">round</span><span class=\"p\">(</span><span class=\"mf\">3.712</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>We can specify the number of decimal places we want.</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">round</span><span class=\"p\">(</span><span class=\"mf\">3.712</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"functions-attached-to-objects-are-called-methods\">Functions attached to objects are called methods</h3>\n\n<p>Methods have parentheses like functions, but come after the variable. Some methods are used for internal Python operations, and are marked with double underlines.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">my_string</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">Hello world!</span><span class=\"sh\">'</span>  <span class=\"c1\"># creation of a string object\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">my_string</span><span class=\"p\">))</span>       <span class=\"c1\"># the len function takes a string as an argument and returns the length of the string\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">my_string</span><span class=\"p\">.</span><span class=\"nf\">swapcase</span><span class=\"p\">())</span> <span class=\"c1\"># calling the swapcase method on the my_string object\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">my_string</span><span class=\"p\">.</span><span class=\"nf\">__len__</span><span class=\"p\">())</span>  <span class=\"c1\"># calling the internal __len__ method on the my_string object, used by len(my_string)\n</span></code></pre></div></div>\n\n<p>You might even see them chained together. They operate left to right.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">my_string</span><span class=\"p\">.</span><span class=\"nf\">isupper</span><span class=\"p\">())</span>          <span class=\"c1\"># Not all the letters are uppercase\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">my_string</span><span class=\"p\">.</span><span class=\"nf\">upper</span><span class=\"p\">())</span>            <span class=\"c1\"># This capitalizes all the letters\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">my_string</span><span class=\"p\">.</span><span class=\"nf\">upper</span><span class=\"p\">().</span><span class=\"nf\">isupper</span><span class=\"p\">())</span>  <span class=\"c1\"># Now all the letters are uppercase\n</span></code></pre></div></div>\n\n<h3 id=\"use-the-built-in-function-help-to-get-help-for-a-function\">Use the built-in function <code class=\"language-plaintext highlighter-rouge\">help</code> to get help for a function.</h3>\n\n<p>Every built-in function has online documentation.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">help</span><span class=\"p\">(</span><span class=\"nb\">round</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"conditionals\">Conditionals</h2>\n\n<p>An if statement (more properly called a conditional statement) controls whether some block of code is executed or not.\nThe first line opens with if and ends with a colon and the block of code to be executed is indented. An example is showed below.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">37</span>\n<span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">&gt;</span> <span class=\"mi\">100</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">greater</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">not greater</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">done</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>If the expression that follows the if statement is true, the body of the <code class=\"language-plaintext highlighter-rouge\">if</code> (i.e., the set of lines indented underneath it) is executed, and <code class=\"language-plaintext highlighter-rouge\">“greater”</code> is printed. If it is false, the body of the <code class=\"language-plaintext highlighter-rouge\">else</code> is executed instead, and <code class=\"language-plaintext highlighter-rouge\">“not greater”</code> is printed. Only one or the other is ever executed before continuing on with program execution to print <code class=\"language-plaintext highlighter-rouge\">“done”</code>:</p>\n\n<p><a href=\"../../images/python-basics/Figure5_Conditionals.png\" rel=\"noopener noreferrer\"><img src=\"../../images/python-basics/Figure5_Conditionals.png\" alt=\"A flow chart diagram is shown with a decision box of number &gt; 100. For true it branches to print 'greater'. For false it branches to print 'not greater'. Both branches re-connect to print done.\" width=\"338\" height=\"268\" loading=\"lazy\" /></a></p>\n\n<p>Conditional statements don’t have to include an <code class=\"language-plaintext highlighter-rouge\">else</code>.  If there isn’t one, Python simply does nothing if the expression is false:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">53</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">before conditional...</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">&gt;</span> <span class=\"mi\">100</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">is greater than 100</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">...after conditional</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>We can also chain several expressions together using <code class=\"language-plaintext highlighter-rouge\">elif</code>, which is short for “else if”. The following Python code uses <code class=\"language-plaintext highlighter-rouge\">elif</code> to print the sign of a number.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">3</span>\n\n<span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">is positive</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">is zero</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">is negative</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"comparison-operators-in-python\">Comparison operators in Python</h3>\n<p>The operators used for comparing values in conditionals are the following:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">&gt;</code> : greater than</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;</code> : less than</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">==</code> : equal to</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">!=</code> : does not equal</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&gt;=</code> : greater than or equal to</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;=</code> : less than or equal to</li>\n</ul>\n\n<h3 id=\"logical-operators-in-python\">Logical operators in Python</h3>\n<p>We can also combine expressions using <code class=\"language-plaintext highlighter-rouge\">and</code> and <code class=\"language-plaintext highlighter-rouge\">or</code>. <code class=\"language-plaintext highlighter-rouge\">and</code> is only true if both parts are true:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">if </span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">both parts are true</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">at least one part is false</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>while <code class=\"language-plaintext highlighter-rouge\">or</code> is true if at least one part is true:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">if </span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">at least one test is true</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"true-and-false\">True and False</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">True</code> and <code class=\"language-plaintext highlighter-rouge\">False</code> are special words in Python called booleans, which represent truth values. A statement such as <code class=\"language-plaintext highlighter-rouge\">1 &lt; 0</code> returns the value <code class=\"language-plaintext highlighter-rouge\">False</code>, while <code class=\"language-plaintext highlighter-rouge\">-1 &lt; 0</code> returns the value <code class=\"language-plaintext highlighter-rouge\">True</code>.</p>\n\n<blockquote class=\"question\">\n  <question-title>Conditionals</question-title>\n\n  <p>What does this program print?</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pressure = 71.9\nif pressure &gt; 50.0:\n    pressure = 25.0\nelif pressure &lt;= 50.0:\n    pressure = 0.0\nprint(pressure)\n</code></pre></div>  </div>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p>25</p>\n  </blockquote>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title>Conditionals</question-title>\n\n  <p>Write some conditions that print <code class=\"language-plaintext highlighter-rouge\">True</code> if the variable <code class=\"language-plaintext highlighter-rouge\">a</code> is within 10% of the variable <code class=\"language-plaintext highlighter-rouge\">b</code> and <code class=\"language-plaintext highlighter-rouge\">False</code> otherwise. Compare your implementation with your partner’s: do you get the same answer for all possible pairs of numbers?\nHint: There is a built-in function <code class=\"language-plaintext highlighter-rouge\">abs()</code> that returns the absolute value of a number.</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>a = 5\nb = 5.1\nif abs(a - b) &lt;= 0.1 * abs(b):\n   print('True')\nelse:\n   print('False')\n</code></pre></div>    </div>\n\n  </blockquote>\n</blockquote>\n\n<h2 id=\"for-loops\">For loops</h2>\n\n<p>Doing calculations on the values in a list one by one is very time consuming.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">odds</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">odds</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">odds</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">odds</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">odds</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">odds</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">odds</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">])</span>\n\n</code></pre></div></div>\n\n<p>A for loop tells Python to execute some statements once for each value in a list, a character string, or some other collection.\n“for each thing in this group, do these operations”. The for loop equivalent to the previous code is:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"n\">odds</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>The improved version uses a for loop to repeat an operation — in this case, printing — once for each thing in a sequence. The general form of a loop is:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">variable</span> <span class=\"ow\">in</span> <span class=\"n\">collection</span><span class=\"p\">:</span>\n    <span class=\"c1\"># do things using variable, such as print\n</span></code></pre></div></div>\n\n<p>Using the odds example above, the loop might look like this:\n<a href=\"../../images/python-basics/Figure6_For_loop.png\" rel=\"noopener noreferrer\"><img src=\"../../images/python-basics/Figure6_For_loop.png\" alt=\"A cartoon schematic shows a  small array named odds with the odd numbers from 1 to 11. A for loop is written &quot;for num in odds&quot; and for each of these items in the array print(num) happens, and the output is shown below, the odd numbers printed out.\" width=\"480\" height=\"642\" loading=\"lazy\" /></a></p>\n\n<p>where each number (<code class=\"language-plaintext highlighter-rouge\">num</code>) in the variable odds is looped through and printed one number after another. The other numbers in the diagram denote which loop cycle the number was printed in (1 being the first loop cycle, and 6 being the final loop cycle).</p>\n\n<p>We can call the loop variable anything we like, but there must be a colon at the end of the line starting the loop, and we must indent anything we want to run inside the loop. Unlike many other languages, there is no command to signify the end of the loop body (e.g. end for); what is indented after the for statement belongs to the loop. Python uses indentation to show nesting. Any consistent indentation is legal, but almost everyone uses four spaces.</p>\n\n<p>When looping through a list, the position index and corresponding value can be retrieved at the same time using the <code class=\"language-plaintext highlighter-rouge\">enumerate()</code> function.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">tic</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">tac</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">toe</span><span class=\"sh\">'</span><span class=\"p\">]):</span>\n<span class=\"p\">...</span> <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>To loop over two or more lists at the same time, the entries can be paired with the <code class=\"language-plaintext highlighter-rouge\">zip()</code> function.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">questions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">quest</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">favorite color</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"n\">answers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">lancelot</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">the holy grail</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">blue</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"nf\">zip</span><span class=\"p\">(</span><span class=\"n\">questions</span><span class=\"p\">,</span> <span class=\"n\">answers</span><span class=\"p\">):</span>\n   <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">What is your {0}?  It is {1}.</span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>We can choose any name we want for variables. It is a good idea to choose variable names that are meaningful, otherwise it would be more difficult to understand what the loop is doing.</p>\n\n<p>Here’s another loop that repeatedly updates a variable:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Curie</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Darwin</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Turing</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">names</span><span class=\"p\">:</span>\n    <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">length</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">There are</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">names in the list.</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">After the loop, name is</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>It is worth tracing the execution of this little program step by step. Since there are three names in <code class=\"language-plaintext highlighter-rouge\">names</code>, the statement on line 4 will be executed three times. The first time around, <code class=\"language-plaintext highlighter-rouge\">length</code> is <code class=\"language-plaintext highlighter-rouge\">0</code> (the value assigned to it on line 1) and <code class=\"language-plaintext highlighter-rouge\">value</code> is <code class=\"language-plaintext highlighter-rouge\">Curie</code>. The statement adds 1 to the old value of <code class=\"language-plaintext highlighter-rouge\">length</code>, producing 1, and updates <code class=\"language-plaintext highlighter-rouge\">length</code> to refer to that new value. The next time around, <code class=\"language-plaintext highlighter-rouge\">value</code> is <code class=\"language-plaintext highlighter-rouge\">Darwin</code> and <code class=\"language-plaintext highlighter-rouge\">length</code> is <code class=\"language-plaintext highlighter-rouge\">1</code>, so <code class=\"language-plaintext highlighter-rouge\">length</code> is updated to be <code class=\"language-plaintext highlighter-rouge\">2</code>. After one more update, <code class=\"language-plaintext highlighter-rouge\">length</code> is <code class=\"language-plaintext highlighter-rouge\">3</code>; since there is nothing left in <code class=\"language-plaintext highlighter-rouge\">names</code> for Python to process, the loop finishes and the print function on line 5 tells us our final answer.</p>\n\n<p>Note that a loop variable is a variable that is being used to record progress in a loop. It still exists after the loop is over, stores the value assigned to it last, and we can re-use variables previously defined as loop variables as well.</p>\n\n<blockquote class=\"question\">\n  <question-title>range of numbers</question-title>\n\n  <p>Python has a built-in function called <code class=\"language-plaintext highlighter-rouge\">range()</code> that generates a sequence of numbers. <code class=\"language-plaintext highlighter-rouge\">range</code> can accept 1, 2, or 3 parameters.\nIf one parameter is given, <code class=\"language-plaintext highlighter-rouge\">range</code> generates a sequence of that length, starting at zero and incrementing by 1. For example, <code class=\"language-plaintext highlighter-rouge\">range(3)</code> produces the numbers <code class=\"language-plaintext highlighter-rouge\">0, 1, 2</code>.\nIf two parameters are given, <code class=\"language-plaintext highlighter-rouge\">range</code> starts at the first and ends just before the second, incrementing by one. For example, <code class=\"language-plaintext highlighter-rouge\">range(2, 5)</code> produces <code class=\"language-plaintext highlighter-rouge\">2, 3, 4</code>.\nIf <code class=\"language-plaintext highlighter-rouge\">range</code> is given 3 parameters, it starts at the first one, ends just before the second one, and increments by the third one. For example, <code class=\"language-plaintext highlighter-rouge\">range(3, 10, 2)</code> produces <code class=\"language-plaintext highlighter-rouge\">3, 5, 7, 9</code>.\nUsing <code class=\"language-plaintext highlighter-rouge\">range</code>, write a loop that uses <code class=\"language-plaintext highlighter-rouge\">range</code> to print the first 3 natural numbers:</p>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1\n2\n3\n</code></pre></div>  </div>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> for i in range(1, 4):\n    print(i)\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title>Number of iterations</question-title>\n\n  <p>Given the following loop:</p>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>word = 'oxygen'\nfor char in word:\n   print(char)\n</code></pre></div>  </div>\n  <p>How many times is the for loop executed?</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p>The body of the loop is executed 6 times.</p>\n  </blockquote>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title>Exponentiation</question-title>\n\n  <p>Exponentiation is built into Python:</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>print(5 ** 3)\n</code></pre></div>  </div>\n\n  <p>Output:\n125</p>\n\n  <p>Write a loop that calculates the same result as <code class=\"language-plaintext highlighter-rouge\">5 ** 3</code> using multiplication (and without exponentiation).</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>result = 1\nfor number in range(0, 3):\n    result = result * 5\nprint(result)\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title>Iterations over a list</question-title>\n\n  <p>Write a loop that calculates the sum of elements in a list by adding each element and printing the final value, so <code class=\"language-plaintext highlighter-rouge\">[124, 402, 36]</code> prints <code class=\"language-plaintext highlighter-rouge\">562</code></p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>numbers = [124, 402, 36]\nsummed = 0\nfor num in numbers:\n    summed = summed + num\nprint(summed)\n</code></pre></div>    </div>\n\n  </blockquote>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title>Polynomial</question-title>\n\n  <p>Suppose you have encoded a polynomial as a list of coefficients in the following way: the first element is the constant term, the second element is the coefficient of the linear term, the third is the coefficient of the quadratic term, etc.</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>x = 5\ncoefs = [2, 4, 3]\ny = coefs[0] * x**0 + coefs[1] * x**1 + coefs[2] * x**2\nprint(y)\n</code></pre></div>  </div>\n\n  <p>Output:\n97</p>\n\n  <p>Write a loop using <code class=\"language-plaintext highlighter-rouge\">enumerate(coefs)</code> which computes the value <code class=\"language-plaintext highlighter-rouge\">y</code> of any polynomial, given <code class=\"language-plaintext highlighter-rouge\">x</code> and <code class=\"language-plaintext highlighter-rouge\">coefs</code>.</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>y = 0\nfor idx, coef in enumerate(coefs):\n    y = y + coef * x**idx\n</code></pre></div>    </div>\n\n  </blockquote>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title>For loops and conditionals</question-title>\n\n  <p>Fill in the blanks so that this program creates a new list containing zeroes where the original list’s values were negative and ones where the original list’s values were positive.</p>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>original = [-1.5, 0.2, 0.4, 0.0, -1.3, 0.4]\nresult = ____\nfor value in original:\n    if ____:\n        result.append(0)\n    else:\n        ____\n    print(result)\n</code></pre></div>  </div>\n\n  <p>Output:\n[0, 1, 1, 1, 0, 1]</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>original = [-1.5, 0.2, 0.4, 0.0, -1.3, 0.4]\nresult = []\nfor value in original:\n    if value &lt; 0:\n        result.append(0)\n    else:\n        result.append(1)\n    print(result)\n</code></pre></div>    </div>\n\n  </blockquote>\n</blockquote>\n\n<h2 id=\"while-loops\">While loops</h2>\n<p>With the while loop we can execute a set of statements as long as an expression is true. The following example prints <code class=\"language-plaintext highlighter-rouge\">i</code> as long as <code class=\"language-plaintext highlighter-rouge\">i</code> is less than 6:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">odds</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">]</span>\n<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">while</span> <span class=\"n\">odds</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"mi\">6</span><span class=\"p\">:</span>\n  <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">odds</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n  <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n</code></pre></div></div>\n\n<p>Remember to increment <code class=\"language-plaintext highlighter-rouge\">i</code>, or else the loop will continue forever. The while loop requires relevant variables to be ready, in this example we need to define an indexing variable, <code class=\"language-plaintext highlighter-rouge\">i</code>, which we set to 0.</p>\n\n<p>With the <code class=\"language-plaintext highlighter-rouge\">break</code> statement we can stop the loop even if the while condition is true:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">odds</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">]</span>\n<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">while</span> <span class=\"n\">odds</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"mi\">6</span><span class=\"p\">:</span>\n  <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">odds</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n  <span class=\"k\">if</span> <span class=\"n\">odds</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n    <span class=\"k\">break</span>\n  <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n</code></pre></div></div>\n\n<p>With the <code class=\"language-plaintext highlighter-rouge\">continue</code> statement we can stop the current iteration, and continue with the next:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">odds</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">]</span>\n<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">while</span> <span class=\"n\">odds</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"mi\">6</span><span class=\"p\">:</span>\n  <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">if</span> <span class=\"n\">odds</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n    <span class=\"k\">continue</span>\n  <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">odds</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n\n</code></pre></div></div>\n\n<p>With the <code class=\"language-plaintext highlighter-rouge\">else</code> statement we can run a block of code once when the condition no longer is true:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">odds</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">]</span>\n<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">while</span> <span class=\"n\">odds</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"mi\">6</span><span class=\"p\">:</span>\n  <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">odds</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n  <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n  <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">condition is no longer True</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"create-functions\">Create Functions</h2>\n<p>Human beings can only keep a few items in working memory at a time. Breaking down larger/more complicated pieces of code in functions helps in understanding and using it. A function can be re-used. Write one time, use many times.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">fahr_to_celsius</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">):</span>\n    <span class=\"nf\">return </span><span class=\"p\">((</span><span class=\"n\">temp</span> <span class=\"o\">-</span> <span class=\"mi\">32</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"o\">/</span><span class=\"mi\">9</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p><a href=\"../../images/python-basics/Figure7_Functions.png\" rel=\"noopener noreferrer\"><img src=\"../../images/python-basics/Figure7_Functions.png\" alt=\"The above function fahr to celsius is shown except annotated. def is labelled &quot;def statement&quot;, fahr_to_celsius is noted as the function name. Inside parentheses is temp and an arrow shows it is called parameter names. The next line which is indented is annotated as the function body which has a return statement and the calculation from above.\" width=\"340\" height=\"130\" loading=\"lazy\" /></a></p>\n\n<p>The function definition opens with the keyword <code class=\"language-plaintext highlighter-rouge\">def</code> followed by the name of the function <code class=\"language-plaintext highlighter-rouge\">fahr_to_celsius</code> and a parenthesized list of parameter names <code class=\"language-plaintext highlighter-rouge\">temp</code>. The body of the function — the statements that are executed when it runs — is indented below the definition line. The body concludes with a <code class=\"language-plaintext highlighter-rouge\">return</code> keyword followed by the return value.</p>\n\n<p>When we call the function, the values we pass to it are assigned to those variables so that we can use them inside the function. Inside the function, we use a return statement to send a result back to whoever asked for it.</p>\n\n<p>Let’s try running our function.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">fahr_to_celsius</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">freezing point of water:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nf\">fahr_to_celsius</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">),</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">boiling point of water:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nf\">fahr_to_celsius</span><span class=\"p\">(</span><span class=\"mi\">212</span><span class=\"p\">),</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>We’ve successfully called the function that we defined, and we have access to the value that we returned.</p>\n\n<p>Now that we’ve seen how to turn Fahrenheit into Celsius, we can also write the function to turn Celsius into Kelvin:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">celsius_to_kelvin</span><span class=\"p\">(</span><span class=\"n\">temp_c</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">temp_c</span> <span class=\"o\">+</span> <span class=\"mf\">273.15</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">freezing point of water in Kelvin:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nf\">celsius_to_kelvin</span><span class=\"p\">(</span><span class=\"mf\">0.</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>What about converting Fahrenheit to Kelvin? We could write out the formula, but we don’t need to. Instead, we can compose the two functions we have already created:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">fahr_to_kelvin</span><span class=\"p\">(</span><span class=\"n\">temp_f</span><span class=\"p\">):</span>\n    <span class=\"n\">temp_c</span> <span class=\"o\">=</span> <span class=\"nf\">fahr_to_celsius</span><span class=\"p\">(</span><span class=\"n\">temp_f</span><span class=\"p\">)</span>\n    <span class=\"n\">temp_k</span> <span class=\"o\">=</span> <span class=\"nf\">celsius_to_kelvin</span><span class=\"p\">(</span><span class=\"n\">temp_c</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">temp_k</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">boiling point of water in Kelvin:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nf\">fahr_to_kelvin</span><span class=\"p\">(</span><span class=\"mf\">212.0</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>This is our first taste of how larger programs are built: we define basic operations, then combine them in ever-larger chunks to get the effect we want. Real-life functions will usually be larger than the ones shown here — typically half a dozen to a few dozen lines — but they shouldn’t ever be much longer than that, or the next person who reads it won’t be able to understand what’s going on.</p>\n\n<h3 id=\"variable-scope\">Variable Scope</h3>\n<p>In composing our temperature conversion functions, we created variables inside of those functions, <code class=\"language-plaintext highlighter-rouge\">temp</code>, <code class=\"language-plaintext highlighter-rouge\">temp_c</code>, <code class=\"language-plaintext highlighter-rouge\">temp_f</code>, and <code class=\"language-plaintext highlighter-rouge\">temp_k</code>. We refer to these variables as local variables because they no longer exist once the function is done executing. If we try to access their values outside of the function, we will encounter an error:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Again, temperature in Kelvin was:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">temp_k</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>If you want to reuse the temperature in Kelvin after you have calculated it with fahr_to_kelvin, you can store the result of the function call in a variable:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">temp_kelvin</span> <span class=\"o\">=</span> <span class=\"nf\">fahr_to_kelvin</span><span class=\"p\">(</span><span class=\"mf\">212.0</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">temperature in Kelvin was:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">temp_kelvin</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"defining-default-parameters\">Defining Default parameters</h3>\n<p>If we usually want a function to work one way, but occasionally need it to do something else, we can allow people to pass a parameter when they need to but provide a default to make the normal case easier. The example below shows how Python matches values to parameters:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">display</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">a:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">no parameters:</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">display</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">one parameter:</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">display</span><span class=\"p\">(</span><span class=\"mi\">55</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">two parameters:</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">display</span><span class=\"p\">(</span><span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>As this example shows, parameters are matched up from left to right, and any that haven’t been given a value explicitly get their default value. We can override this behavior by naming the value as we pass it in:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">only setting the value of c</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">display</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">=</span><span class=\"mi\">77</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Variable scope</question-title>\n\n  <p>What does the following piece of code display when run — and why?</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>f = 0\nk = 0\n\ndef f2k(f):\n    k = ((f - 32) * (5.0 / 9.0)) + 273.15\n    return k\n\nprint(f2k(8))\nprint(f2k(41))\nprint(f2k(32))\nprint(k)\n</code></pre></div>  </div>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p>Output:\n259.81666666666666\n278.15\n273.15\n0</p>\n\n    <p><code class=\"language-plaintext highlighter-rouge\">k</code> is 0 because the <code class=\"language-plaintext highlighter-rouge\">k</code> inside the function <code class=\"language-plaintext highlighter-rouge\">f2k</code> doesn’t know about the <code class=\"language-plaintext highlighter-rouge\">k</code> defined outside the function. When the <code class=\"language-plaintext highlighter-rouge\">f2k</code> function is called, it creates a local variable <code class=\"language-plaintext highlighter-rouge\">k</code>. The function does not return any values and does not alter <code class=\"language-plaintext highlighter-rouge\">k</code> outside of its local copy. Therefore the original value of <code class=\"language-plaintext highlighter-rouge\">k</code> remains unchanged.</p>\n\n  </blockquote>\n</blockquote>\n\n<h2 id=\"libraries\">Libraries</h2>\n\n<p>A library is a collection of files (called modules) that contains functions for use by other programs. It may also contain data values (e.g., numerical constants) and other things. A library’s contents are supposed to be related, but there’s no way to enforce that. The Python standard library is an extensive suite of modules that comes with Python itself. Many additional libraries are available from PyPI (the Python Package Index).</p>\n\n<h3 id=\"libraries-and-modules\">Libraries and modules</h3>\n<p>A library is a collection of modules, but the terms are often used interchangeably, especially since many libraries only consist of a single module, so don’t worry if you mix them.</p>\n\n<h3 id=\"a-program-must-import-a-library-module-before-using-it\">A program must import a library module before using it.</h3>\n<p>You can use <code class=\"language-plaintext highlighter-rouge\">import</code> to load a library module into a program’s memory, then refer to things from the <code class=\"language-plaintext highlighter-rouge\">module as module_name.thing_name</code>. Python uses <code class=\"language-plaintext highlighter-rouge\">.</code> to mean “part of”. For example, using <code class=\"language-plaintext highlighter-rouge\">math</code>, one of the modules in the standard library:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">math</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">pi is</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"n\">pi</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">cos(pi) is</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">cos</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"p\">.</span><span class=\"n\">pi</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>You can use <code class=\"language-plaintext highlighter-rouge\">help</code> to learn about the contents of a library module. it works just like help for a function.</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">help</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>You can import specific items from a library module to shorten programs. You can use <code class=\"language-plaintext highlighter-rouge\">from ... import ...</code> to load only specific items from a library module. Then refer to them directly without library name as prefix.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">math</span> <span class=\"kn\">import</span> <span class=\"n\">cos</span><span class=\"p\">,</span> <span class=\"n\">pi</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">cos(pi) is</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nf\">cos</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>You can create an alias for a library module when importing it to shorten programs. Use <code class=\"language-plaintext highlighter-rouge\">import ... as ...</code> to give a library a short alias while importing it. Then refer to items in the library using that shortened name.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">math</span> <span class=\"k\">as</span> <span class=\"n\">m</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">cos(pi) is</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">.</span><span class=\"nf\">cos</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">pi</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<h1 id=\"programming-style\">Programming style</h1>\n<p>A consistent coding style helps others (including our future selves) read and understand code more easily. Code is read much more often than it is written, and as the <a href=\"https://www.python.org/dev/peps/pep-0020/\">Zen of Python</a> states, “Readability counts”. Python proposed a standard style through one of its first Python Enhancement Proposals (PEP), <a href=\"https://www.python.org/dev/peps/pep-0008/\">PEP8</a>.</p>\n\n<p>Some points worth highlighting:</p>\n\n<ul>\n  <li>document your code and ensure that assumptions, internal algorithms, expected inputs, expected outputs, etc., are clear</li>\n  <li>use clear, semantically meaningful variable names</li>\n  <li>use white-space, not tabs, to indent lines (tabs can cause problems across different text editors, operating systems, and version control systems)</li>\n</ul>\n\n<h1 id=\"python-community\">Python community</h1>\n\n<p>Python supports a large and diverse community across academia and industry.</p>\n\n<ul>\n  <li>The <a href=\"https://docs.python.org/3/\">Python 3 documentation</a> covers the core language and the standard library.</li>\n  <li><a href=\"https://pycon.org/\">PyCon</a> is the largest annual conference for the Python community.</li>\n  <li><a href=\"https://scipy.org/\">SciPy</a> is a rich collection of scientific utilities. It is also the name of <a href=\"https://conference.scipy.org/\">a series of annual conferences</a>.</li>\n  <li><a href=\"https://jupyter.org/\">Jupyter</a> is the home of Project Jupyter.</li>\n  <li><a href=\"https://pandas.pydata.org/\">Pandas</a> is the home of the Pandas data library.</li>\n  <li><a href=\"https://stackoverflow.com/questions/tagged/python?tab=Votes\">Stack Overflow’s</a> general Python section can be helpful, as well as the sections on <a href=\"https://stackoverflow.com/questions/tagged/numpy?tab=Votes\">NumPy</a>, <a href=\"https://stackoverflow.com/questions/tagged/scipy?tab=Votes\">SciPy</a>, and <a href=\"https://stackoverflow.com/questions/tagged/pandas?tab=Votes\">Pandas</a>.</li>\n</ul>\n"],"ref_slides":[],"hands_on":true,"slides":false,"mod_date":"2024-02-15 14:49:45 +0000","pub_date":"2021-11-08 15:53:26 +0000","version":12,"api":"https://training.galaxyproject.org/training-material/api/topics/data-science/tutorials/python-basics/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"Foundations of Data Science","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial"}