{"layout":"tutorial_hands_on","title":"Python - Argparse","level":"Intermediate","requirements":[],"follow_up_training":[],"questions":["How do I make a proper command line script","How do I use argparse?","What problems does it solve?"],"objectives":["Learn how sys.argv works","Write a simple command line program that sums some numbers","Use argparse to make it nicer."],"time_estimation":"30M","key_points":["If you are writing a command line script, no matter how small, use argparse.","`--help` is even written for us, without us writing any special code to handle that case","It handles a lot of cases and input validation for you","It produces a nice `--help` text that can help you if you've forgotten what your tool does","It's nice for users of your scripts! They don't have to read the code to know how it behaves if you document it well."],"subtopic":"python-modular","contributions":{"authorship":["hexylena"],"editing":["bazante1"],"testing":["dirowa"],"funding":["avans-atgm"]},"priority":10,"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00082","url":"/topics/data-science/tutorials/python-argparse/tutorial.html","topic_name":"data-science","tutorial_name":"python-argparse","dir":"topics/data-science/tutorials/python-argparse","symlink":null,"id":"data-science/python-argparse","ref_tutorials":["<p><a href=\"https://docs.python.org/3/library/argparse.html\"><code class=\"language-plaintext highlighter-rouge\">argparse</code></a> is an argument parsing library for Python that’s part of the stdlib. It lets you make command line tools significantly nicer to work with.</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#sysargv\" id=\"markdown-toc-sysargv\"><code class=\"language-plaintext highlighter-rouge\">sys.argv</code></a></li>\n  <li><a href=\"#simple-tasks\" id=\"markdown-toc-simple-tasks\">Simple tasks</a></li>\n  <li><a href=\"#argparse\" id=\"markdown-toc-argparse\">Argparse</a></li>\n  <li><a href=\"#using-argparse\" id=\"markdown-toc-using-argparse\">Using argparse</a></li>\n  <li><a href=\"#why-argparse\" id=\"markdown-toc-why-argparse\">Why Argparse?</a></li>\n</ol>\n\n</blockquote>\n\n<p>Unlike previous modules, this lesson won’t use a Jupyter/CoCalc notebook, and that’s because we’ll be parsing command lines! You’ll need to open a code editor on your platform of choice (<code class=\"language-plaintext highlighter-rouge\">nano</code>, <code class=\"language-plaintext highlighter-rouge\">vim</code>, <code class=\"language-plaintext highlighter-rouge\">emacs</code>, VSCode are all options) and use the following blocks of code to construct your command line tool.</p>\n\n<h2 id=\"sysargv\"><code class=\"language-plaintext highlighter-rouge\">sys.argv</code></h2>\n\n<p>In the coding world, whenever you run a Python script on the command line, it has a special variable available to it named <code class=\"language-plaintext highlighter-rouge\">argv</code>. This is a list of all of the arguments used when you run a command line program.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Print out argv</hands-on-title>\n\n  <ol>\n    <li>Create / open the file <code class=\"language-plaintext highlighter-rouge\">run.py</code> in your text editor of choice</li>\n    <li>There we’ll create a simple Python script that:</li>\n    <li>imports <code class=\"language-plaintext highlighter-rouge\">sys</code>, the system module needed to access argv.</li>\n    <li>Prints out <code class=\"language-plaintext highlighter-rouge\">sys.argv</code></li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">sys</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n  </blockquote>\n\n  <ol>\n    <li>\n      <p>Run this with different command line arguments:</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>python run.py\npython run.py 1 2 3 4\npython run.py --help\n</code></pre></div>      </div>\n    </li>\n  </ol>\n\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n  <p>What did you notice about the output? There are two main points.</p>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <ol>\n      <li>The name of the script (<code class=\"language-plaintext highlighter-rouge\">run.py</code>) is included as the first value every time.</li>\n      <li>All of the arguments are passed as strings, no numbers.</li>\n    </ol>\n  </blockquote>\n</blockquote>\n\n<h2 id=\"simple-tasks\">Simple tasks</h2>\n\n<p>Let’s sum up all of the numbers passed on the command line. We’ll do this by hand, and then we’ll replace it with <code class=\"language-plaintext highlighter-rouge\">argparse</code> to see how much effort that saves us.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title></hands-on-title>\n  <p>Update your script to sum up every number passed to it on the command line.</p>\n\n  <p>It should handle:</p>\n  <ul>\n    <li>1 or more numbers</li>\n    <li>nothing (and maybe print out a message?)</li>\n    <li>invalid values (print out an error message that the value couldn’t be processed.)</li>\n  </ul>\n\n  <p>Hints:</p>\n  <ul>\n    <li>Skip the program name</li>\n    <li>Use <code class=\"language-plaintext highlighter-rouge\">try</code> and <code class=\"language-plaintext highlighter-rouge\">except</code> to try converting the string to a number.</li>\n  </ul>\n\n  <blockquote class=\"question\">\n    <question-title></question-title>\n\n    <p>How does your updated script look?</p>\n\n    <blockquote class=\"solution\">\n      <solution-title></solution-title>\n\n      <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">sys</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">no arguments were supplied</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span> <span class=\"o\">+=</span> <span class=\"nf\">float</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Could not parse </span><span class=\"si\">{</span><span class=\"n\">arg</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</code></pre></div>      </div>\n    </blockquote>\n  </blockquote>\n</blockquote>\n\n<h2 id=\"argparse\">Argparse</h2>\n\n<p>Argparse saves us a lot of work, because it can handle a number of things for us!</p>\n\n<ul>\n  <li>Ensures that the correct number of arguments are provided (and provide a nice error message otherwise)</li>\n  <li>Ensure that the correct types of arguments are provided (no strings for a number field)</li>\n  <li>Provide a help message describing your program</li>\n</ul>\n\n<p>Argparse is used as follows. First we need to import it</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">argparse</span>\n</code></pre></div></div>\n\n<p>And then we can define a ‘parser’ which will parse our command line. Additionally we can provide a description field which tells people what our tool does:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"p\">.</span><span class=\"nc\">ArgumentParser</span><span class=\"p\">(</span><span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">Process some integers.</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>And finally we can define some arguments that are available. Just like we have arguments to functions, we have arguments to command lines. These come in two flavours:</p>\n\n<ul>\n  <li>required (without a <code class=\"language-plaintext highlighter-rouge\">--</code>)</li>\n  <li>optional “flags” (prefixed with <code class=\"language-plaintext highlighter-rouge\">--</code>)</li>\n</ul>\n\n<p>Here we have an argument named ‘integers’, which validates that all input values are of the type <code class=\"language-plaintext highlighter-rouge\">int</code>. <code class=\"language-plaintext highlighter-rouge\">nargs</code> is the number of arguments, <code class=\"language-plaintext highlighter-rouge\">+</code> means ‘1 or more’. And we have some help text as well:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"nf\">add_argument</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">integer</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">an integer parameter</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"nf\">add_argument</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">many_integers</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">nargs</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">+</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">an integer parameter</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>We can also define an optional flag, here it’s called <code class=\"language-plaintext highlighter-rouge\">--sum</code>. We use <code class=\"language-plaintext highlighter-rouge\">store_true</code> which will set it as true if the flag is used , otherwise false.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"nf\">add_argument</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">--sum</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">store_true</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">Should we sum up the integers?</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Finally we parse the arguments, which reads <code class=\"language-plaintext highlighter-rouge\">sys.argv</code> and processes it according to the above rules. The output is stored in <code class=\"language-plaintext highlighter-rouge\">args</code>.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"nf\">parse_args</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p>We have two main variables we can use now:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>args.integer # A single integer\nargs.many_integers # A list of ints\nargs.sum # A boolean, True or False.\n</code></pre></div></div>\n\n<h2 id=\"using-argparse\">Using argparse</h2>\n\n<p>Let’s go back to our script, and replace <code class=\"language-plaintext highlighter-rouge\">sys</code> with argparse.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Replacing argv.</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Given the following script, replace the use of <code class=\"language-plaintext highlighter-rouge\">argv</code> with argparse.</p>\n\n      <div class=\"language-python hands_on highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">sys</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">no arguments were supplied</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span> <span class=\"o\">+=</span> <span class=\"nf\">float</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Could not parse </span><span class=\"si\">{</span><span class=\"n\">arg</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</code></pre></div>      </div>\n\n      <p>You should have one argument: numbers (type=float)</p>\n\n      <p>And print out the sum of those numbers.</p>\n\n      <blockquote class=\"question\">\n        <question-title></question-title>\n        <p>How does your final script look?</p>\n        <blockquote class=\"solution\">\n          <solution-title></solution-title>\n          <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">argparse</span>\n\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"p\">.</span><span class=\"nc\">ArgumentParser</span><span class=\"p\">(</span><span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">Sum some numbers</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"nf\">add_argument</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">integers</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">nargs</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">+</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n                    <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">a number to sum up.</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"nf\">parse_args</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">integers</span><span class=\"p\">))</span>\n</code></pre></div>          </div>\n        </blockquote>\n      </blockquote>\n    </li>\n    <li>\n      <p>Try running the script with various values</p>\n\n      <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>python run.py\npython run.py 1 3 5\npython run.py 2 4 O\npython run.py <span class=\"nt\">--help</span>\n</code></pre></div>      </div>\n    </li>\n  </ol>\n</blockquote>\n\n<p>Wow that’s a lot simpler! We have to learn how <code class=\"language-plaintext highlighter-rouge\">argparse</code> is invoked but it handles a lot of cases for us:</p>\n\n<ul>\n  <li>No arguments provided</li>\n  <li>Responding to <code class=\"language-plaintext highlighter-rouge\">--help</code></li>\n  <li>Raising an error for invalid values</li>\n</ul>\n\n<p><code class=\"language-plaintext highlighter-rouge\">--help</code> is even written for us, without us writing any special code to handle that case! This is why you need to use <code class=\"language-plaintext highlighter-rouge\">argparse</code>:</p>\n<ul>\n  <li>It handles a lot of cases and input validation for you</li>\n  <li>It produces a nice <code class=\"language-plaintext highlighter-rouge\">--help</code> text that can help you if you’ve forgotten what your tool does</li>\n  <li>It’s nice for users of your scripts! They don’t have to read the code to know how it behaves if you document it well.</li>\n</ul>\n\n<p>There is a lot of documentation in the <a href=\"https://docs.python.org/3/library/argparse.html\"><code class=\"language-plaintext highlighter-rouge\">argparse</code></a> module for all sorts of use cases!</p>\n\n<h2 id=\"why-argparse\">Why Argparse?</h2>\n\n<p>Using argparse can be a big change to your tool but there are some benefits to using it!</p>\n\n<ol>\n  <li>Standardised interface to your tool that’s familiar to everyone who uses command line tools</li>\n  <li>Automatic Help page</li>\n  <li>Automatic Galaxy Tools?</li>\n</ol>\n\n<h3 id=\"generating-automatic-galaxy-tools-optional\">Generating Automatic Galaxy Tools (Optional)</h3>\n\n<p>With the <code class=\"language-plaintext highlighter-rouge\">argparse2tool</code> project, and eventually <code class=\"language-plaintext highlighter-rouge\">pyGalGen</code> which will be merged into <code class=\"language-plaintext highlighter-rouge\">planemo</code>, you can generate Galaxy tools automatically from <code class=\"language-plaintext highlighter-rouge\">argparse</code> based Python scripts.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Generate a Galaxy tool wrapper from your script</hands-on-title>\n  <ol>\n    <li>\n      <p>Write out the python script to a file named <code class=\"language-plaintext highlighter-rouge\">main.py</code></p>\n\n      <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">argparse</span>\n\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"p\">.</span><span class=\"nc\">ArgumentParser</span><span class=\"p\">(</span><span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">Sum some numbers</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"nf\">add_argument</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">integers</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">nargs</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">+</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n                    <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">a number to sum up.</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"nf\">parse_args</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">integers</span><span class=\"p\">))</span>\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Create a virtual environment, just in case: ``</p>\n\n      <div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"go\">python -m venv .venv\n. .venv/bin/activate\n</span></code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Install <code class=\"language-plaintext highlighter-rouge\">argparse2tool</code> via pip:</p>\n\n      <div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"go\">pip install argparse2tool\n</span></code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Generate the tool interface:</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Command</code-in-title>\n        <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>PYTHONPATH=$(argparse2tool) python main.py --generate_galaxy_xml\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"code-out\">\n        <code-out-title>Galaxy XML</code-out-title>\n        <div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;tool</span> <span class=\"na\">name=</span><span class=\"s\">\"main.py\"</span> <span class=\"na\">id=</span><span class=\"s\">\"main.py\"</span> <span class=\"na\">version=</span><span class=\"s\">\"1.0\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;description&gt;</span>Sum some numbers<span class=\"nt\">&lt;/description&gt;</span>\n  <span class=\"nt\">&lt;stdio&gt;</span>\n    <span class=\"nt\">&lt;exit_code</span> <span class=\"na\">range=</span><span class=\"s\">\"1:\"</span> <span class=\"na\">level=</span><span class=\"s\">\"fatal\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/stdio&gt;</span>\n  <span class=\"nt\">&lt;version_command&gt;</span><span class=\"cp\">&lt;![CDATA[python main.py --version]]&gt;</span><span class=\"nt\">&lt;/version_command&gt;</span>\n  <span class=\"nt\">&lt;command&gt;</span><span class=\"cp\">&lt;![CDATA[python main.py\n#set repeat_var_1 = '\" \"'.join([ str($var.integers) for $var in $repeat_1 ])\n\"$repeat_var_1\"\n\n&gt;</span> $default]]&gt;<span class=\"nt\">&lt;/command&gt;</span>\n  <span class=\"nt\">&lt;inputs&gt;</span>\n    <span class=\"nt\">&lt;repeat</span> <span class=\"na\">title=</span><span class=\"s\">\"repeat_title\"</span> <span class=\"na\">min=</span><span class=\"s\">\"1\"</span> <span class=\"na\">name=</span><span class=\"s\">\"repeat_1\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;param</span> <span class=\"na\">label=</span><span class=\"s\">\"a number to sum up.\"</span> <span class=\"na\">value=</span><span class=\"s\">\"0\"</span> <span class=\"na\">type=</span><span class=\"s\">\"float\"</span> <span class=\"na\">name=</span><span class=\"s\">\"integers\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/repeat&gt;</span>\n  <span class=\"nt\">&lt;/inputs&gt;</span>\n  <span class=\"nt\">&lt;outputs&gt;</span>\n    <span class=\"nt\">&lt;data</span> <span class=\"na\">name=</span><span class=\"s\">\"default\"</span> <span class=\"na\">format=</span><span class=\"s\">\"txt\"</span> <span class=\"na\">hidden=</span><span class=\"s\">\"false\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/outputs&gt;</span>\n  <span class=\"nt\">&lt;help&gt;</span><span class=\"cp\">&lt;![CDATA[TODO: Write help]]&gt;</span><span class=\"nt\">&lt;/help&gt;</span>\n<span class=\"nt\">&lt;/tool&gt;</span>\n\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n"],"ref_slides":[],"hands_on":true,"slides":false,"mod_date":"2023-01-23 14:28:11 +0000","pub_date":"2022-04-25 11:43:04 +0000","version":10,"api":"https://training.galaxyproject.org/training-material/api/topics/data-science/tutorials/python-argparse/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"Foundations of Data Science","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial","contributors":[{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"},{"name":"Bazante Sanders","joined":"2020-12","affiliations":["avans-atgm"],"id":"bazante1","url":"https://training.galaxyproject.org/training-material/api/contributors/bazante1.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/bazante1/"},{"name":"Donny Vrins","joined":"2021-10","linkedin":"Donny Vrins","email":"D.vrins@live.nl","former_affiliations":["avans-atgm"],"id":"dirowa","url":"https://training.galaxyproject.org/training-material/api/contributors/dirowa.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/dirowa/"},{"name":"Avans Hogeschool","joined":"2020-11","url":"https://training.galaxyproject.org/training-material/api/organisations/avans-atgm.json","avatar":"/training-material/shared/images/logo-avans.png","members":["bazante1"],"former_members":["dirowa","hexylena"],"id":"avans-atgm","page":"https://training.galaxyproject.org/training-material/hall-of-fame/avans-atgm/"}]}