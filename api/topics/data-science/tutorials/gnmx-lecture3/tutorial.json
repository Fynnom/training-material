{"layout":"tutorial_hands_on","title":"Introduction to sequencing with Python (part two)","questions":["What is FASTQ format","How do I parse FASTQ format with Python","How do I decide whether my data is good or not?"],"objectives":["Understand manipulation of FASTQ data in Python","Understand quality metrics"],"time_estimation":"1h","key_points":["Python can be used to parse FASTQ easily","One can readily visualize quality values"],"contributions":{"authorship":["nekrut"]},"priority":3,"subtopic":"gnmx","draft":true,"notebook":{"language":"python","pyolite":true},"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00398","url":"/topics/data-science/tutorials/gnmx-lecture3/tutorial.html","topic_name":"data-science","tutorial_name":"gnmx-lecture3","dir":"topics/data-science/tutorials/gnmx-lecture3","symlink":null,"id":"data-science/gnmx-lecture3","ref_tutorials":["<p><a href=\"https://xkcd.com/353/\"><a href=\"https://imgs.xkcd.com/comics/python.png\" rel=\"noopener noreferrer\"><img src=\"https://imgs.xkcd.com/comics/python.png\" alt=\"XKCD353. \" loading=\"lazy\" /></a></a></p>\n\n<p>Preclass prep: Chapters <a href=\"https://greenteapress.com/thinkpython2/html/thinkpython2009.html\">8</a> and <a href=\"https://greenteapress.com/thinkpython2/html/thinkpython2011.html\">10</a> from “Think Python”</p>\n\n<blockquote class=\"quote\" cite=\"https://langmead-lab.org/teaching-materials\">\n  <p>This material uses examples from notebooks developed by <a href=\"https://langmead-lab.org/teaching-materials/\">Ben Langmead</a></p>\n</blockquote>\n\n<h1 id=\"prep\">Prep</h1>\n\n<ol>\n  <li>Start <a href=\"https://mybinder.org/v2/gh/jupyterlab/jupyterlab-demo/try.jupyter.org?urlpath=lab\">JupyterLab</a></li>\n  <li>Within JupyterLab start a new Python3 notebook</li>\n  <li>Open <a href=\"http://cs1110.cs.cornell.edu/tutor/#mode=edit\">this page</a> in a new browser tab</li>\n</ol>\n\n<h1 id=\"strings-in-python\">Strings in Python</h1>\n\n<p>In Python, strings are sequences of characters enclosed in quotation marks (either single or double quotes). They can be assigned to a variable and manipulated using various string methods. For example:</p>\n\n<p>string1 = “Hello World!”\nstring2 = ‘Hello World!’</p>\n\n<p>print(string1)  # Output: Hello World!\nprint(string2)  # Output: Hello World!</p>\n\n<p>You can also use the + operator to concatenate strings, and the * operator to repeat a string a certain number of times:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">string3</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Hello </span><span class=\"sh\">\"</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">World!</span><span class=\"sh\">\"</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string3</span><span class=\"p\">)</span>  <span class=\"c1\"># Output: Hello World!\n</span>\n<span class=\"n\">string4</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Hello </span><span class=\"sh\">\"</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string4</span><span class=\"p\">)</span>  <span class=\"c1\"># Output: Hello Hello Hello\n</span></code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Hello World!\nHello Hello Hello \n</code></pre></div></div>\n\n<p>There are also many built-in string methods such as <code class=\"language-plaintext highlighter-rouge\">upper()</code>, <code class=\"language-plaintext highlighter-rouge\">lower()</code>, <code class=\"language-plaintext highlighter-rouge\">replace()</code>, <code class=\"language-plaintext highlighter-rouge\">split()</code>, <code class=\"language-plaintext highlighter-rouge\">find()</code>, <code class=\"language-plaintext highlighter-rouge\">len()</code>, etc. These can be used to manipulate and extract information from strings:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">string5</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Hello World!</span><span class=\"sh\">\"</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string5</span><span class=\"p\">.</span><span class=\"nf\">upper</span><span class=\"p\">())</span>   <span class=\"c1\"># Output: HELLO WORLD!\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string5</span><span class=\"p\">.</span><span class=\"nf\">lower</span><span class=\"p\">())</span>   <span class=\"c1\"># Output: hello world!\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string5</span><span class=\"p\">.</span><span class=\"nf\">replace</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">H</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">J</span><span class=\"sh\">\"</span><span class=\"p\">))</span>  <span class=\"c1\"># Output: Jello World!\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string5</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\"> </span><span class=\"sh\">\"</span><span class=\"p\">))</span>  <span class=\"c1\"># Output: ['Hello', 'World!']\n</span></code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>HELLO WORLD!\nhello world!\nJello World!\n['Hello', 'World!']\n</code></pre></div></div>\n\n<p>You can also use indexing, slicing and string formatting to access or manipulate substrings or insert dynamic data into a string.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">John</span><span class=\"sh\">\"</span>\n<span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">My name is {} and I am {} years old.</span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>My name is John and I am 30 years old.\n</code></pre></div></div>\n\n<p>You can also use f-strings, or formatted string literals, to embed expressions inside string literals.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">John</span><span class=\"sh\">\"</span>\n<span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">My name is </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\"> and I am </span><span class=\"si\">{</span><span class=\"n\">age</span><span class=\"si\">}</span><span class=\"s\"> years old.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>My name is John and I am 30 years old.\n</code></pre></div></div>\n\n<h2 id=\"string-indexing\">String indexing</h2>\n\n<p>In Python, strings are sequences of characters, and each character has a corresponding index, starting from 0.\nThis means that we can access individual characters in a string using their index. This is called “string indexing”.</p>\n\n<p>Here is an example:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Hello World!</span><span class=\"sh\">\"</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>  <span class=\"c1\"># Output: H\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>  <span class=\"c1\"># Output: e\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>  <span class=\"c1\"># Output: !\n</span></code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>H\ne\n!\n</code></pre></div></div>\n\n<p>You can also use negative indexing to access characters from the end of the string, with -1 being the last character, -2 the second to last and so on.</p>\n\n<p>You can also use slicing to extract a substring from a string. The syntax is <code class=\"language-plaintext highlighter-rouge\">string[start:end:step]</code>, where <code class=\"language-plaintext highlighter-rouge\">start</code> is the starting index, <code class=\"language-plaintext highlighter-rouge\">end</code> is the ending index (not included), and step is the number of characters to skip between each index.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Hello World!</span><span class=\"sh\">\"</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">])</span>  <span class=\"c1\"># Output: Hello\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">11</span><span class=\"p\">])</span>  <span class=\"c1\"># Output: World\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">[::</span><span class=\"mi\">2</span><span class=\"p\">])</span>  <span class=\"c1\"># Output: HloWrd\n</span></code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Hello\nWorld\nHloWrd\n</code></pre></div></div>\n\n<p>You can also use the string formatting method to get the string at the specific index.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Hello World!</span><span class=\"sh\">\"</span>\n<span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">The character at index </span><span class=\"si\">{</span><span class=\"n\">index</span><span class=\"si\">}</span><span class=\"s\"> is: </span><span class=\"si\">{</span><span class=\"n\">string</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>The character at index 3 is: l\n</code></pre></div></div>\n\n<h2 id=\"string-functions\">String functions</h2>\n\n<p>In Python, many built-in string methods can be used to manipulate and extract information from strings. Here are some of the most commonly used ones:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">upper()</code>: Converts the string to uppercase</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">lower()</code>: Converts the string to lowercase</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">replace(old, new)</code>: Replaces all occurrences of the old substring with the new substring</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">split(separator)</code>: Splits the string into a list of substrings using the specified separator</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">find(substring)</code>: Returns the index of the first occurrence of the substring, or -1 if the substring is not found</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">index(substring)</code>: Returns the index of the first occurrence of the substring or raises a ValueError if the substring is not found</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">count(substring)</code>: Returns the number of occurrences of the substring</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">join(iterable)</code>: Concatenates the elements of an iterable (such as a list or tuple) with the string as the separator</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">strip()</code>: Removes leading and trailing whitespaces from the string</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">lstrip()</code>: Removes leading whitespaces from the string</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">rstrip()</code>: Removes trailing whitespaces from the string</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">startswith(substring)</code>: Returns True if the string starts with the specified substring, False otherwise</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">endswith(substring)</code>: Returns True if the string ends with the specified substring, False otherwise</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">isalpha()</code>: Returns True if the string contains only alphabetic characters, False otherwise</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">isdigit()</code>: Returns True if the string contains only digits, False otherwise</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">isalnum()</code>: Returns True if the string contains only alphanumeric characters, False otherwise</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">format()</code>: Formats the string by replacing placeholders with specified values</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">len()</code>: Returns the length of the string</li>\n</ul>\n\n<p>Here is an example of some of these methods:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Hello World!</span><span class=\"sh\">\"</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"nf\">upper</span><span class=\"p\">())</span>  <span class=\"c1\"># Output: HELLO WORLD!\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"nf\">lower</span><span class=\"p\">())</span>  <span class=\"c1\"># Output: hello world!\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"nf\">replace</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">H</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">J</span><span class=\"sh\">\"</span><span class=\"p\">))</span>  <span class=\"c1\"># Output: Jello World!\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\"> </span><span class=\"sh\">\"</span><span class=\"p\">))</span>  <span class=\"c1\"># Output: ['Hello', 'World!']\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">World</span><span class=\"sh\">\"</span><span class=\"p\">))</span>  <span class=\"c1\"># Output: 6\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">l</span><span class=\"sh\">\"</span><span class=\"p\">))</span>  <span class=\"c1\"># Output: 3\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">())</span>  <span class=\"c1\"># Output: \"Hello World!\"\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"nf\">startswith</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Hello</span><span class=\"sh\">\"</span><span class=\"p\">))</span>  <span class=\"c1\"># Output: True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"nf\">endswith</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">World!</span><span class=\"sh\">\"</span><span class=\"p\">))</span>  <span class=\"c1\"># Output: True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"nf\">isalpha</span><span class=\"p\">())</span>  <span class=\"c1\"># Output: False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"nf\">isalnum</span><span class=\"p\">())</span>  <span class=\"c1\"># Output: False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"nf\">format</span><span class=\"p\">())</span>  <span class=\"c1\"># Output: Hello World!\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">))</span>  <span class=\"c1\"># Output: 12\n</span></code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>HELLO WORLD!\nhello world!\nJello World!\n['Hello', 'World!']\n6\n3\nHello World!\nTrue\nTrue\nFalse\nFalse\nHello World!\n12\n</code></pre></div></div>\n\n<h2 id=\"playing-with-strings\">Playing with strings</h2>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">st</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">ACGT</span><span class=\"sh\">'</span>\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">st</span><span class=\"p\">)</span> <span class=\"c1\"># getting the length of a string\n</span></code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>4\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"sh\">''</span> <span class=\"c1\"># empty string (epsilon)\n</span></code></pre></div></div>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>''\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"sh\">''</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>0\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">random</span>\n<span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">choice</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ACGT</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"c1\"># generating a random nucleotide\n</span></code></pre></div></div>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'G'\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># now I'll make a random nucleotide string by concatenating random nucleotides\n</span><span class=\"n\">st</span> <span class=\"o\">=</span> <span class=\"sh\">''</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">([</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">choice</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ACGT</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">)])</span>\n<span class=\"n\">st</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'GCTATATCAATGTTATCCGTTTTCTGATGTCGCGAGGACA'\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"c1\"># substring, starting at position 1 and extending up to but not including position 3\n# note that the first position is numbered 0\n</span></code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'CT'\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">st</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"c1\"># prefix of length 3\n</span></code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'GCT'\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">st</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"c1\"># another way of getting the prefix of length 3\n</span></code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'GCT'\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">st</span><span class=\"p\">[</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">st</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">st</span><span class=\"p\">)]</span> <span class=\"c1\"># suffix of length 3\n</span></code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'ACA'\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">st</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">:]</span> <span class=\"c1\"># another way of getting the suffix of length 3\n</span></code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'ACA'\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">st1</span><span class=\"p\">,</span> <span class=\"n\">st2</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">CAT</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">ATAC</span><span class=\"sh\">'</span>\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">st1</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'CAT'\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">st2</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'ATAC'\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">st1</span> <span class=\"o\">+</span> <span class=\"n\">st2</span> <span class=\"c1\"># concatenation of 2 strings\n</span></code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'CATATAC'\n</code></pre></div></div>\n\n<h1 id=\"fastq\">FASTQ</h1>\n\n<p>This notebook explores [FASTQ], the most common format for storing sequencing reads.</p>\n\n<p>FASTA and FASTQ are rather similar, but FASTQ is almost always used for storing <em>sequencing reads</em> (with associated quality values), whereas FASTA is used for storing all kinds of DNA,\nRNA or protein sequences (without associated quality values).</p>\n\n<h2 id=\"basic-format\">Basic format</h2>\n<p>Here’s a single sequencing read in FASTQ format:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>@ERR294379.100739024 HS24_09441:8:2203:17450:94030#42/1\nAGGGAGTCCACAGCACAGTCCAGACTCCCACCAGTTCTGACGAAATGATGAGAGCTCAGAAGTAACAGTTGCTTTCAGTCCCATAAAAACAGTCCTACAA\n+\nBDDEEF?FGFFFHGFFHHGHGGHCH@GHHHGFAHEGFEHGEFGHCCGGGFEGFGFFDFFHBGDGFHGEFGHFGHGFGFFFEHGGFGGDGHGFEEHFFHGE\n</code></pre></div></div>\n\n<p>It’s spread across four lines.  The four lines are:</p>\n\n<ol>\n  <li>”<code class=\"language-plaintext highlighter-rouge\">@</code>” followed by a read name</li>\n  <li>Nucleotide sequence</li>\n  <li>”<code class=\"language-plaintext highlighter-rouge\">+</code>”, possibly followed by some info, but ignored by virtually all tools</li>\n  <li>Quality sequence (explained below)</li>\n</ol>\n\n<h2 id=\"reading-fastq-with-python\">Reading FASTQ with python</h2>\n\n<p>Download a sample small fastq file:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>!wget https://zenodo.org/records/10602772/files/fastq_single_end_short.fq\n</code></pre></div></div>\n\n<p>Now we will use a very simple Python function to read this file and load fastq data into a list:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">parse_fastq</span><span class=\"p\">(</span><span class=\"n\">fh</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\"> Parse reads from a FASTQ filehandle.  For each read, we\n        return a name, nucleotide-string, quality-string triple. </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">reads</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">first_line</span> <span class=\"o\">=</span> <span class=\"n\">fh</span><span class=\"p\">.</span><span class=\"nf\">readline</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">first_line</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span>  <span class=\"c1\"># end of file\n</span>        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">first_line</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:].</span><span class=\"nf\">rstrip</span><span class=\"p\">()</span>\n        <span class=\"n\">seq</span> <span class=\"o\">=</span> <span class=\"n\">fh</span><span class=\"p\">.</span><span class=\"nf\">readline</span><span class=\"p\">().</span><span class=\"nf\">rstrip</span><span class=\"p\">()</span>\n        <span class=\"n\">fh</span><span class=\"p\">.</span><span class=\"nf\">readline</span><span class=\"p\">()</span>  <span class=\"c1\"># ignore line starting with +\n</span>        <span class=\"n\">qual</span> <span class=\"o\">=</span> <span class=\"n\">fh</span><span class=\"p\">.</span><span class=\"nf\">readline</span><span class=\"p\">().</span><span class=\"nf\">rstrip</span><span class=\"p\">()</span>\n        <span class=\"n\">reads</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">((</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">seq</span><span class=\"p\">,</span> <span class=\"n\">qual</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">reads</span>\n\n<span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">fastq_single_end_short.fq</span><span class=\"sh\">'</span><span class=\"p\">,</span><span class=\"sh\">'</span><span class=\"s\">r</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fq</span><span class=\"p\">:</span>\n    <span class=\"n\">reads</span> <span class=\"o\">=</span> <span class=\"nf\">parse_fastq</span><span class=\"p\">(</span><span class=\"n\">fq</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">read</span> <span class=\"ow\">in</span> <span class=\"n\">reads</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">read</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>('ERR294379.100739024 HS24_09441:8:2203:17450:94030#42/1', 'AGGGAGTCCACAGCACAGTCCAGACTCCCACCAGTTCTGACGAAATGATG', 'BDDEEF?FGFFFHGFFHHGHGGHCH@GHHHGFAHEGFEHGEFGHCCGGGF')\n('ERR294379.136275489 HS24_09441:8:2311:1917:99340#42/1',  'CTTAAGTATTTTGAAAGTTAACATAAGTTATTCTCAGAGAGACTGCTTTT', '@@AHFF?EEDEAF?FEEGEFD?GGFEFGECGE?9H?EEABFAG9@CDGGF')\n('ERR294379.97291341 HS24_09441:8:2201:10397:52549#42/1',  'GGCTGCCATCAGTGAGCAAGTAAGAATTTGCAGAAATTTATTAGCACACT', 'CDAF&lt;FFDEHEFDDFEEFDGDFCHD=GHG&lt;GEDHDGJFHEFFGEFEE@GH')\n</code></pre></div></div>\n\n<p>The nucleotide string can sometimes contain the character “<code class=\"language-plaintext highlighter-rouge\">N</code>”.  <code class=\"language-plaintext highlighter-rouge\">N</code> essentially means “no confidence.” The sequencer knows there’s a nucleotide there but doesn’t know whether it’s an A, C, G or T.</p>\n\n<blockquote class=\"comment\">\n  <comment-title>A note on <tt>while True</tt></comment-title>\n\n  <p>In Python, the while loop is used to repeatedly execute a block of code as long as a certain condition is true. The while True statement is a special case where the loop will run indefinitely until a break statement is encountered inside the loop.</p>\n\n  <p>Here is an example of a while True loop:</p>\n\n  <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n   <span class=\"n\">user_input</span> <span class=\"o\">=</span> <span class=\"nf\">input</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Enter </span><span class=\"sh\">'</span><span class=\"s\">q</span><span class=\"sh\">'</span><span class=\"s\"> to quit: </span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n   <span class=\"k\">if</span> <span class=\"n\">user_input</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">q</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n       <span class=\"k\">break</span>\n   <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">You entered:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">user_input</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Exited the loop</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div>  </div>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Enter 'q' to quit:  q\nExited the loop\n</code></pre></div>  </div>\n\n  <p>In this example, the loop will keep asking for user input until the user enters the ‘q’ character, which triggers the break statement, and the loop is exited.</p>\n\n  <p>It is important to be careful when using while True loops, as they will run indefinitely if a break statement is not included. This can cause the program to crash or hang, if not handled properly.</p>\n\n  <p>Also, It is recommended to use <code class=\"language-plaintext highlighter-rouge\">while True</code> loop with a <code class=\"language-plaintext highlighter-rouge\">break</code> statement, in case you want to execute the loop until some specific condition is met, otherwise, it’s not a good practice to use <code class=\"language-plaintext highlighter-rouge\">while True</code>.</p>\n\n  <p>It’s a good practice to include a way for the user to exit the loop, such as the break statement in the example above, or a counter variable to keep track of the number of iterations.</p>\n</blockquote>\n\n<h2 id=\"read-name\">Read name</h2>\n\n<p>Read names often contain information about:</p>\n\n<ol>\n  <li>The scientific study for which the read was sequenced.  E.g. the string <code class=\"language-plaintext highlighter-rouge\">ERR294379</code> (an <a href=\"http://www.ebi.ac.uk/ena/about/sra_format\">SRA accession number</a>) in the read names correspond to <a href=\"http://www.ncbi.nlm.nih.gov/sra/?term=ERR294379\">this study</a>.</li>\n  <li>The sequencing instrument, and the exact <em>part</em> of the sequencing instrument, where the DNA was sequenced.  See the <a href=\"http://en.wikipedia.org/wiki/FASTQ_format#Illumina_sequence_identifiers\">FASTQ format</a> Wikipedia article for specifics on how the Illumina software encodes this information.</li>\n  <li>Whether the read is part of a <em>paired-end read</em> and, if so, which end it is.  Paired-end reads will be discussed further below.  The <code class=\"language-plaintext highlighter-rouge\">/1</code> you see at the end of the read names above indicates the read is the first end from a paired-end read.</li>\n</ol>\n\n<h2 id=\"quality-values\">Quality values</h2>\n\n<p>Quality values are probabilities.  Each nucleotide in each sequencing read has an associated quality value.  A nucleotide quality value encodes the probability that the nucleotide was <em>incorrectly called</em> by the sequencing instrument and its software.  If the nucleotide is <code class=\"language-plaintext highlighter-rouge\">A</code>, the corresponding quality value encodes the probability that the nucleotide at that position is actually <em>not</em> an <code class=\"language-plaintext highlighter-rouge\">A</code>.</p>\n\n<p>Quality values are encoded in two senses: first, the relevant probabilities are re-scaled using the Phread scale, which is a negative log scale.\nIn other words if <em>p</em> is the probability that the nucleotide was incorrectly called, we encode this as <em>Q</em> where <em>Q</em> = -10 * log10(<em>p</em>).</p>\n\n<p>For example, if <em>Q</em> = 30, then <em>p</em> = 0.001, a 1-in-1000 chance that the nucleotide is wrong.  If <em>Q</em> = 20, then <em>p</em> = 0.01, a 1-in-100 chance.  If <em>Q</em> = 10, then <em>p</em> = 0.1, a 1-in-10 chance.  And so on.</p>\n\n<p>Second, scaled quality values are <em>rounded</em> to the nearest integer and encoded using <a href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\">ASCII printable characters</a>.  For example, using the Phred33 encoding (which is by far the most common), a <em>Q</em> of 30 is encoded as the ASCII character with code 33 + 30 = 63, which is “<code class=\"language-plaintext highlighter-rouge\">?</code>”.  A <em>Q</em> of 20 is encoded as the ASCII character with code 33 + 20 = 53, which is “<code class=\"language-plaintext highlighter-rouge\">5</code>”.  And so on.</p>\n\n<p>Let’s define some relevant Python functions:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">phred33_to_q</span><span class=\"p\">(</span><span class=\"n\">qual</span><span class=\"p\">):</span>\n  <span class=\"sh\">\"\"\"</span><span class=\"s\"> Turn Phred+33 ASCII-encoded quality into Phred-scaled integer </span><span class=\"sh\">\"\"\"</span>\n  <span class=\"k\">return</span> <span class=\"nf\">ord</span><span class=\"p\">(</span><span class=\"n\">qual</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">33</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">q_to_phred33</span><span class=\"p\">(</span><span class=\"n\">Q</span><span class=\"p\">):</span>\n  <span class=\"sh\">\"\"\"</span><span class=\"s\"> Turn Phred-scaled integer into Phred+33 ASCII-encoded quality </span><span class=\"sh\">\"\"\"</span>\n  <span class=\"k\">return</span> <span class=\"nf\">chr</span><span class=\"p\">(</span><span class=\"n\">Q</span> <span class=\"o\">+</span> <span class=\"mi\">33</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">q_to_p</span><span class=\"p\">(</span><span class=\"n\">Q</span><span class=\"p\">):</span>\n  <span class=\"sh\">\"\"\"</span><span class=\"s\"> Turn Phred-scaled integer into error probability </span><span class=\"sh\">\"\"\"</span>\n  <span class=\"k\">return</span> <span class=\"mf\">10.0</span> <span class=\"o\">**</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.1</span> <span class=\"o\">*</span> <span class=\"n\">Q</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">p_to_q</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">):</span>\n  <span class=\"sh\">\"\"\"</span><span class=\"s\"> Turn error probability into Phred-scaled integer </span><span class=\"sh\">\"\"\"</span>\n  <span class=\"kn\">import</span> <span class=\"n\">math</span>\n  <span class=\"k\">return</span> <span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"nf\">round</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">10.0</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">log10</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)))</span>\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Here are the examples I discussed above\n</span>\n<span class=\"c1\"># Convert Qs into ps\n</span><span class=\"nf\">q_to_p</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">),</span> <span class=\"nf\">q_to_p</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">),</span> <span class=\"nf\">q_to_p</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(0.001, 0.01, 0.1)\n</code></pre></div></div>\n\n<pre><code class=\"language-python=\">p_to_q(0.00011) # note that the result is rounded\n</code></pre>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>40\n</code></pre></div></div>\n\n<pre><code class=\"language-python=\">q_to_phred33(30), q_to_phred33(20)\n</code></pre>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>('?', '5')\n</code></pre></div></div>\n\n<p>To convert an entire string Phred33-encoded quality values into the corresponding <em>Q</em> or <em>p</em> values, I can do the following:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Take the first read from the small example above\n</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">seq</span><span class=\"p\">,</span> <span class=\"n\">qual</span> <span class=\"o\">=</span> <span class=\"nf\">parse_fastq</span><span class=\"p\">(</span><span class=\"nc\">StringIO</span><span class=\"p\">(</span><span class=\"n\">fastq_string</span><span class=\"p\">))[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">q_string</span> <span class=\"o\">=</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"n\">phred33_to_q</span><span class=\"p\">,</span> <span class=\"n\">qual</span><span class=\"p\">))</span>\n<span class=\"n\">p_string</span> <span class=\"o\">=</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"n\">q_to_p</span><span class=\"p\">,</span> <span class=\"n\">q_string</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">q_string</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">p_string</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[33, 35, 35, 36, 36, 37, 30, 37, 38, 37, 37, 37, 39, 38, 37, 37, 39, 39, 38, 39, 38, 38, 39, 34, 39, 31, 38, 39, 39, 39, 38, 37, 32, 39, 36, 38, 37, 36, 39, 38, 36, 37, 38, 39, 34, 34, 38, 38, 38, 37]\n[0.000501187233627272, 0.00031622776601683794, 0.00031622776601683794, 0.00025118864315095795, 0.00025118864315095795, 0.00019952623149688788, 0.001, 0.00019952623149688788, 0.00015848931924611126, 0.00019952623149688788, 0.00019952623149688788, 0.00019952623149688788, 0.0001258925411794166, 0.00015848931924611126, 0.00019952623149688788, 0.00019952623149688788, 0.0001258925411794166, 0.0001258925411794166, 0.00015848931924611126, 0.0001258925411794166, 0.00015848931924611126, 0.00015848931924611126, 0.0001258925411794166, 0.0003981071705534969, 0.0001258925411794166, 0.0007943282347242813, 0.00015848931924611126, 0.0001258925411794166, 0.0001258925411794166, 0.0001258925411794166, 0.00015848931924611126, 0.00019952623149688788, 0.000630957344480193, 0.0001258925411794166, 0.00025118864315095795, 0.00015848931924611126, 0.00019952623149688788, 0.00025118864315095795, 0.0001258925411794166, 0.00015848931924611126, 0.00025118864315095795, 0.00019952623149688788, 0.00015848931924611126, 0.0001258925411794166, 0.0003981071705534969, 0.0003981071705534969, 0.00015848931924611126, 0.00015848931924611126, 0.00015848931924611126, 0.00019952623149688788]\n</code></pre></div></div>\n\n<p>You might wonder how the sequencer and its software can <em>know</em> the probability that a nucleotide is incorrectly called.  It can’t; this number is just an estimate.  To describe exactly how it’s estimated is beyond the scope of this notebook; if you’re interested, search for academic papers with “base calling” in the title.  Here’s a helpful <a href=\"http://www.youtube.com/watch?v=eXkjlopwIH4\">video by Rafa Irizarry</a>.</p>\n\n<p>A final note: other ways of encoding quality values were proposed and used in the past.  For example, Phred64 uses an ASCII offset of 64 instead of 33, and Solexa64 uses “odds” instead of the probability <em>p</em>.  But Phred33 is by far the most common today and you will likely never have to worry about this.</p>\n\n<blockquote class=\"comment\">\n  <comment-title>A note in <tt>map()</tt></comment-title>\n\n  <p>In Python, the <code class=\"language-plaintext highlighter-rouge\">map()</code> function is used to apply a given function to all elements of an iterable (such as a list, tuple, or string) and return an iterator (an object that can be iterated, e.g. in a <code class=\"language-plaintext highlighter-rouge\">for</code>-loop) that yields the results.</p>\n\n  <p>The <code class=\"language-plaintext highlighter-rouge\">map()</code> function takes two arguments:</p>\n\n  <p>A function that is to be applied to each element of the iterable\nAn iterable on which the function is to be applied</p>\n\n  <p>Here is an example:</p>\n\n  <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Using a function to square each element of a list\n</span><span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">squared_numbers</span> <span class=\"o\">=</span> <span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">numbers</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">squared_numbers</span><span class=\"p\">))</span>  <span class=\"c1\"># Output: [1, 4, 9, 16, 25]\n</span></code></pre></div>  </div>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[1, 4, 9, 16, 25]\n</code></pre></div>  </div>\n\n  <p>In the example above, the <code class=\"language-plaintext highlighter-rouge\">map()</code> function applies the lambda function <code class=\"language-plaintext highlighter-rouge\">lambda x: x**2</code> to each element of the numbers list, and returns an iterator of the squared numbers. The <code class=\"language-plaintext highlighter-rouge\">list()</code> function is used to convert the iterator to a list, so that the result can be printed.</p>\n\n  <p>Another example is,</p>\n\n  <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Using the map() function to convert a list of strings to uppercase\n</span><span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">hello</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">world</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n<span class=\"n\">uppercase_words</span> <span class=\"o\">=</span> <span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">word</span><span class=\"p\">:</span> <span class=\"n\">word</span><span class=\"p\">.</span><span class=\"nf\">upper</span><span class=\"p\">(),</span> <span class=\"n\">words</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">uppercase_words</span><span class=\"p\">))</span>  <span class=\"c1\"># Output: ['HELLO', 'WORLD']\n</span></code></pre></div>  </div>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>['HELLO', 'WORLD']\n</code></pre></div>  </div>\n\n  <p>It’s important to note that the <code class=\"language-plaintext highlighter-rouge\">map()</code> function returns an iterator, which can be used in a for loop, but is not a list, tuple, or any other iterable. If you want to create a list, tuple, or other iterable from the result of the <code class=\"language-plaintext highlighter-rouge\">map()</code> function, you can use the <code class=\"language-plaintext highlighter-rouge\">list()</code>, <code class=\"language-plaintext highlighter-rouge\">tuple()</code>, or any other built-in function that creates an iterable.</p>\n\n  <p>In Python 3, the <code class=\"language-plaintext highlighter-rouge\">map()</code> function returns an iterator, which can be used in a for loop, but it’s not iterable. If you want to create a list, tuple, or other iterable from the result of the <code class=\"language-plaintext highlighter-rouge\">map()</code> function, you can use the <code class=\"language-plaintext highlighter-rouge\">list()</code>, <code class=\"language-plaintext highlighter-rouge\">tuple()</code>, or any other built-in function that creates an iterable.</p>\n\n  <p>In Python 2, <code class=\"language-plaintext highlighter-rouge\">map()</code> function returns a list, which can be used in a for loop, and it’s iterable.</p>\n\n  <p>In python 3.x, there is an alternative way to use map() function is <code class=\"language-plaintext highlighter-rouge\">list(map(...))</code> or <code class=\"language-plaintext highlighter-rouge\">tuple(map(...))</code> etc.</p>\n</blockquote>\n\n<h2 id=\"paired-end-reads\">Paired-end reads</h2>\n\n<p>Sequencing reads can come in <em>pairs</em>.  Basically instead of reporting a single snippet of nucleotides from the genome, the sequencer might report a <em>pair</em> of\nsnippets that appear <em>close to each other</em> in the genome.  To accomplish this, the sequencer sequences <em>both ends</em> of a longer <em>fragment</em> of DNA.</p>\n\n<p>Here is simple Python code that mimics how the sequencer obtains one paired-end read:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Let's just make a random genome of length 1K\n</span><span class=\"kn\">import</span> <span class=\"n\">random</span>\n<span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">seed</span><span class=\"p\">(</span><span class=\"mi\">637485</span><span class=\"p\">)</span>\n<span class=\"n\">genome</span> <span class=\"o\">=</span> <span class=\"sh\">''</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">([</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">choice</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ACGT</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)])</span>\n<span class=\"n\">genome</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'AGTACGTCATACCGTTATGATCTAGGTGGGATCGCGGATTGGTCGTGCAGAATACAGCCTTGGAGAGTGGTTAACACGATAAGGCCGATAATATGTCTGGATAAGCTCAGGCTCTGCTCCGAGGCGCTAAGGTACATGTTATTGATTTGGAGCTCAAAAATTGCCATAGCATGCAATACGCCCGTTGATAGACCACTTGCCTTCAGGGGAGCGTCGCATGTATTGATTGTGTTACATAAACCCTCCCCCCCTACACGTGCTTGTCGACGCGGCACTGGACACTGATACGAGGAGGCACTTCGCTAGAAACGGCTTACTGCAGGTGATAAAATCAACAGATGGCACGCTCGCAACAGAAGCATAATATGCTTCCAACCAGGACCGGCATTTAACTCAATATATTAGCTCTCGAGGACAACGCACTACGTTTTCCAATTCAGCGGACTGGCGCCATTACAGTAAGTTGATTGTGCAGTGGTCTTTGACAGACAGCAGTTCGCTCCTTACTGACAATACCTGATACTTATAGTATGGCAGCGAGTCGTTGTCTAGGTTAGCCACCTCAGTCTACAGCAGGTAATGAAGCATTCCCACAAAGGCTGGTCCATACACCCGACTGCTACGATTCATGCTTCGCTCGAGAACTGCCCCTGCCTTAGATTCCCCCTCGTCTCCAATGAATACCCATTTTTTTAGATTGCTGAAAACCTTTCGTAAGACGCTTTCCAGTGATTACATGCCCTAACTGGGTACAGTTTGCCCAGGAGCTTTTTGGATGGAGGAGTATTAGTAGCGACCAAAACTCTTCCTCGACTGTTACTGTGTAGAGTCCCAAACGCTAAAGCGGTCCCAGAAAAACGGAACGGCCTACAGATTAAATTGCTCCGTGTTGCAGTTAAGGCGTACAAACCCCTCTGTGTATTAGTTTAAGTCTCTGAGTCTTCTTTGCTATGACGGATTGATGGGTGCCGGTTTGTAGTTCAAGAACCGTGAGTGAACC'\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># The sequencer draws a fragment from the genome of length, say, 250\n</span><span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">genome</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"n\">fragment</span> <span class=\"o\">=</span> <span class=\"n\">genome</span><span class=\"p\">[</span><span class=\"n\">offset</span><span class=\"p\">:</span><span class=\"n\">offset</span><span class=\"o\">+</span><span class=\"mi\">250</span><span class=\"p\">]</span>\n<span class=\"n\">fragment</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'GTATTGATTGTGTTACATAAACCCTCCCCCCCTACACGTGCTTGTCGACGCGGCACTGGACACTGATACGAGGAGGCACTTCGCTAGAAACGGCTTACTGCAGGTGATAAAATCAACAGATGGCACGCTCGCAACAGAAGCATAATATGCTTCCAACCAGGACCGGCATTTAACTCAATATATTAGCTCTCGAGGACAACGCACTACGTTTTCCAATTCAGCGGACTGGCGCCATTACAGTAAGTTGATT'\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Then it reads sequences from either end of the fragment\n</span><span class=\"n\">end1</span><span class=\"p\">,</span> <span class=\"n\">end2</span> <span class=\"o\">=</span> <span class=\"n\">fragment</span><span class=\"p\">[:</span><span class=\"mi\">75</span><span class=\"p\">],</span> <span class=\"n\">fragment</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">75</span><span class=\"p\">:]</span>\n<span class=\"n\">end1</span><span class=\"p\">,</span> <span class=\"n\">end2</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>('GTATTGATTGTGTTACATAAACCCTCCCCCCCTACACGTGCTTGTCGACGCGGCACTGGACACTGATACGAGGAG',\n 'CAATATATTAGCTCTCGAGGACAACGCACTACGTTTTCCAATTCAGCGGACTGGCGCCATTACAGTAAGTTGATT')\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># And because of how Illumina sequencing works, the\n# second end is always from the opposite strand from the first\n# (this is not the case for 454 and SOLiD data)\n</span>\n<span class=\"kn\">import</span> <span class=\"n\">string</span>\n\n<span class=\"c1\"># function for reverse-complementing\n</span><span class=\"n\">revcomp_trans</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">.</span><span class=\"nf\">maketrans</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">ACGTacgt</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">TGCAtgca</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">reverse_complement</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nf\">translate</span><span class=\"p\">(</span><span class=\"n\">revcomp_trans</span><span class=\"p\">)</span>\n\n<span class=\"n\">end2</span> <span class=\"o\">=</span> <span class=\"nf\">reverse_complement</span><span class=\"p\">(</span><span class=\"n\">end2</span><span class=\"p\">)</span>\n<span class=\"n\">end1</span><span class=\"p\">,</span> <span class=\"n\">end2</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>('GTATTGATTGTGTTACATAAACCCTCCCCCCCTACACGTGCTTGTCGACGCGGCACTGGACACTGATACGAGGAG',\n 'AATCAACTTACTGTAATGGCGCCAGTCCGCTGAATTGGAAAACGTAGTGCGTTGTCCTCGAGAGCTAATATATTG')\n</code></pre></div></div>\n\n<p>FASTQ can be used to store paired-end reads.  Say we have 1000 paired-end reads.  We should store them in a <em>pair</em> of FASTQ files.  The first FASTQ file (say, <code class=\"language-plaintext highlighter-rouge\">reads_1.fq</code>) would contain all of the first ends and the second FASTQ file (say, <code class=\"language-plaintext highlighter-rouge\">reads_2.fq</code>) would contain all of the second ends.  In both files, the ends would appear in corresponding order.  That is, the first entry in <code class=\"language-plaintext highlighter-rouge\">reads_1.fq</code> is paired with the first entry in <code class=\"language-plaintext highlighter-rouge\">reads_2.fq</code> and so on.</p>\n\n<p>Here is a Python function that parses a pair of files containing paired-end reads.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">parse_paired_fastq</span><span class=\"p\">(</span><span class=\"n\">fh1</span><span class=\"p\">,</span> <span class=\"n\">fh2</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\"> Parse paired-end reads from a pair of FASTQ filehandles\n        For each pair, we return a name, the nucleotide string\n        for the first end, the quality string for the first end,\n        the nucleotide string for the second end, and the\n        quality string for the second end. </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">reads</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">first_line_1</span><span class=\"p\">,</span> <span class=\"n\">first_line_2</span> <span class=\"o\">=</span> <span class=\"n\">fh1</span><span class=\"p\">.</span><span class=\"nf\">readline</span><span class=\"p\">(),</span> <span class=\"n\">fh2</span><span class=\"p\">.</span><span class=\"nf\">readline</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">first_line_1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span>  <span class=\"c1\"># end of file\n</span>        <span class=\"n\">name_1</span><span class=\"p\">,</span> <span class=\"n\">name_2</span> <span class=\"o\">=</span> <span class=\"n\">first_line_1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:].</span><span class=\"nf\">rstrip</span><span class=\"p\">(),</span> <span class=\"n\">first_line_2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:].</span><span class=\"nf\">rstrip</span><span class=\"p\">()</span>\n        <span class=\"n\">seq_1</span><span class=\"p\">,</span> <span class=\"n\">seq_2</span> <span class=\"o\">=</span> <span class=\"n\">fh1</span><span class=\"p\">.</span><span class=\"nf\">readline</span><span class=\"p\">().</span><span class=\"nf\">rstrip</span><span class=\"p\">(),</span> <span class=\"n\">fh2</span><span class=\"p\">.</span><span class=\"nf\">readline</span><span class=\"p\">().</span><span class=\"nf\">rstrip</span><span class=\"p\">()</span>\n        <span class=\"n\">fh1</span><span class=\"p\">.</span><span class=\"nf\">readline</span><span class=\"p\">()</span>  <span class=\"c1\"># ignore line starting with +\n</span>        <span class=\"n\">fh2</span><span class=\"p\">.</span><span class=\"nf\">readline</span><span class=\"p\">()</span>  <span class=\"c1\"># ignore line starting with +\n</span>        <span class=\"n\">qual_1</span><span class=\"p\">,</span> <span class=\"n\">qual_2</span> <span class=\"o\">=</span> <span class=\"n\">fh1</span><span class=\"p\">.</span><span class=\"nf\">readline</span><span class=\"p\">().</span><span class=\"nf\">rstrip</span><span class=\"p\">(),</span> <span class=\"n\">fh2</span><span class=\"p\">.</span><span class=\"nf\">readline</span><span class=\"p\">().</span><span class=\"nf\">rstrip</span><span class=\"p\">()</span>\n        <span class=\"n\">reads</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(((</span><span class=\"n\">name_1</span><span class=\"p\">,</span> <span class=\"n\">seq_1</span><span class=\"p\">,</span> <span class=\"n\">qual_1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">name_2</span><span class=\"p\">,</span> <span class=\"n\">seq_2</span><span class=\"p\">,</span> <span class=\"n\">qual_2</span><span class=\"p\">)))</span>\n    <span class=\"k\">return</span> <span class=\"n\">reads</span>\n\n<span class=\"n\">fastq_string1</span> <span class=\"o\">=</span> <span class=\"sh\">'''</span><span class=\"s\">@509.6.64.20524.149722/1\nAGCTCTGGTGACCCATGGGCAGCTGCTAGGGAGCCTTCTCTCCACCCTGA\n+\nHHHHHHHGHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHIIHHIHFHHF\n@509.4.62.19231.2763/1\nGTTGATAAGCAAGCATCTCATTTTGTGCATATACCTGGTCTTTCGTATTC\n+\nHHHHHHHHHHHHHHEHHHHHHHHHHHHHHHHHHHHHHHDHHHHHHGHGHH</span><span class=\"sh\">'''</span>\n\n<span class=\"n\">fastq_string2</span> <span class=\"o\">=</span> <span class=\"sh\">'''</span><span class=\"s\">@509.6.64.20524.149722/2\nTAAGTCAGGATACTTTCCCATATCCCAGCCCTGCTCCNTCTTTAAATAAT\n+\nHHHHHHHHHHHHHHHHHHHH@HHFHHHEFHHHHHHFF#FFFFFFFHHHHH\n@509.4.62.19231.2763/2\nCTCTGCTGGTATGGTTGACGCCGGATTTGAGAATCAANAAGAGCTTACTA\n+\nHHHHHHHHHHHHHHHHHHEHEHHHFHGHHHHHHHH&gt;@#@=44465HHHHH</span><span class=\"sh\">'''</span>\n\n<span class=\"nf\">parse_paired_fastq</span><span class=\"p\">(</span><span class=\"nc\">StringIO</span><span class=\"p\">(</span><span class=\"n\">fastq_string1</span><span class=\"p\">),</span> <span class=\"nc\">StringIO</span><span class=\"p\">(</span><span class=\"n\">fastq_string2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[(('509.6.64.20524.149722/1',\n   'AGCTCTGGTGACCCATGGGCAGCTGCTAGGGAGCCTTCTCTCCACCCTGA',\n   'HHHHHHHGHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHIIHHIHFHHF'),\n  ('509.6.64.20524.149722/2',\n   'TAAGTCAGGATACTTTCCCATATCCCAGCCCTGCTCCNTCTTTAAATAAT',\n   'HHHHHHHHHHHHHHHHHHHH@HHFHHHEFHHHHHHFF#FFFFFFFHHHHH')),\n (('509.4.62.19231.2763/1',\n   'GTTGATAAGCAAGCATCTCATTTTGTGCATATACCTGGTCTTTCGTATTC',\n   'HHHHHHHHHHHHHHEHHHHHHHHHHHHHHHHHHHHHHHDHHHHHHGHGHH'),\n  ('509.4.62.19231.2763/2',\n   'CTCTGCTGGTATGGTTGACGCCGGATTTGAGAATCAANAAGAGCTTACTA',\n   'HHHHHHHHHHHHHHHHHHEHEHHHFHGHHHHHHHH&gt;@#@=44465HHHHH'))]\n</code></pre></div></div>\n\n<blockquote class=\"comment\">\n  <comment-title>A note on triple quotes</comment-title>\n\n  <p>In Python, triple quotes (either single or double) are used to create multi-line strings. They can also be used to create doc-strings, which are used to document a function, class, or module.</p>\n\n  <p>For example:</p>\n\n  <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">string1</span> <span class=\"o\">=</span> <span class=\"sh\">\"\"\"</span><span class=\"s\">This is a\nmultiline string</span><span class=\"sh\">\"\"\"</span>\n\n<span class=\"n\">string2</span> <span class=\"o\">=</span> <span class=\"sh\">'''</span><span class=\"s\">This is also\na multiline string</span><span class=\"sh\">'''</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string1</span><span class=\"p\">)</span>\n<span class=\"c1\"># Output:\n# This is a\n# multiline string\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">string2</span><span class=\"p\">)</span>\n<span class=\"c1\"># Output:\n# This is also\n# a multiline string\n</span></code></pre></div>  </div>\n\n  <p>This is a\n   multiline string\n   This is also\n   a multiline string</p>\n\n  <p>Triple quotes can also be used to create docstrings, which are used to document a function, class, or module. The first line of a docstring is a brief summary of what the function, class, or module does, and the following lines provide more detailed information.</p>\n\n  <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">my_function</span><span class=\"p\">():</span>\n   <span class=\"sh\">\"\"\"</span><span class=\"s\">\n   This is a docstring for the my_function.\n   This function does not perform any operation.\n   </span><span class=\"sh\">\"\"\"</span>\n   <span class=\"k\">pass</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">my_function</span><span class=\"p\">.</span><span class=\"n\">__doc__</span><span class=\"p\">)</span>\n<span class=\"c1\"># Output:\n# This is a docstring for the my_function.\n# This function does not perform any operation.\n</span></code></pre></div>  </div>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>   This is a docstring for the my_function.\n   This function does not perform any operation.\n</code></pre></div>  </div>\n\n</blockquote>\n\n<h2 id=\"how-good-are-my-reads\">How good are my reads?</h2>\n\n<p>Let’s reuse the <code class=\"language-plaintext highlighter-rouge\">parse_fastq</code> function from above:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Read the file into a list\n</span><span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">fastq_single_end_short.fq</span><span class=\"sh\">'</span><span class=\"p\">,</span><span class=\"sh\">'</span><span class=\"s\">r</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fq</span><span class=\"p\">:</span>\n    <span class=\"n\">reads</span> <span class=\"o\">=</span> <span class=\"nf\">parse_fastq</span><span class=\"p\">(</span><span class=\"n\">fq</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>☝️ This will load data into a list called <code class=\"language-plaintext highlighter-rouge\">reads</code> containing individual reads (name, nucleotides, and quality values) represented as a <a href=\"https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences\">tuple</a>.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Extract qualities and convert them into numerical values\n</span><span class=\"n\">run_qualities</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">read</span> <span class=\"ow\">in</span> <span class=\"n\">reads</span><span class=\"p\">:</span>\n    <span class=\"n\">read_qualities</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">quality</span> <span class=\"ow\">in</span> <span class=\"n\">read</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span>\n        <span class=\"n\">read_qualities</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"nf\">phred33_to_q</span><span class=\"p\">(</span><span class=\"n\">quality</span><span class=\"p\">))</span>\n    <span class=\"n\">run_qualities</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">read_qualities</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>☝️ This will take quality string only for each read from <code class=\"language-plaintext highlighter-rouge\">reads</code> and convert it into a list of values. The end result, a list of lists called <code class=\"language-plaintext highlighter-rouge\">run_qualities</code>, will contain as many elements as there as reads, where each element (also a list) contains all quality values for a read. We need to <a href=\"https://en.wikipedia.org/wiki/Transpose\">transpose</a> this list, so that instead of representing every reads as a list of quality values we represent every position as a list of quality values for all reads at that position. This can be easily done with <a href=\"https://numpy.org/\">numpy</a>’s <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.ndarray.T.html\"><code class=\"language-plaintext highlighter-rouge\">T</code></a>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Transpose the quality values matrix\n</span>\n<span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n<span class=\"n\">base_qualities</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">(</span><span class=\"n\">run_qualities</span><span class=\"p\">).</span><span class=\"n\">T</span>\n</code></pre></div></div>\n\n<p>Now we need to extract some key per-position statistics from the <code class=\"language-plaintext highlighter-rouge\">base_qualities</code> list generated above. We, again, use numpy for this:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Prep data for plotting\n</span><span class=\"n\">plotting_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"sh\">'</span><span class=\"s\">base</span><span class=\"sh\">'</span><span class=\"p\">:[],</span>\n    <span class=\"sh\">'</span><span class=\"s\">mean</span><span class=\"sh\">'</span><span class=\"p\">:[],</span>\n    <span class=\"sh\">'</span><span class=\"s\">median</span><span class=\"sh\">'</span><span class=\"p\">:[],</span>\n    <span class=\"sh\">'</span><span class=\"s\">q25</span><span class=\"sh\">'</span><span class=\"p\">:[],</span>\n    <span class=\"sh\">'</span><span class=\"s\">q75</span><span class=\"sh\">'</span><span class=\"p\">:[],</span>\n    <span class=\"sh\">'</span><span class=\"s\">min</span><span class=\"sh\">'</span><span class=\"p\">:[],</span>\n    <span class=\"sh\">'</span><span class=\"s\">max</span><span class=\"sh\">'</span><span class=\"p\">:[]</span>\n<span class=\"p\">}</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">base</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">base_qualities</span><span class=\"p\">):</span>\n    <span class=\"n\">plotting_data</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">base</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"n\">plotting_data</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">mean</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">mean</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">))</span>\n    <span class=\"n\">plotting_data</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">median</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">median</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">))</span>\n    <span class=\"n\">plotting_data</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">q25</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">quantile</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,.</span><span class=\"mi\">25</span><span class=\"p\">))</span>\n    <span class=\"n\">plotting_data</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">q75</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">quantile</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,.</span><span class=\"mi\">75</span><span class=\"p\">))</span>\n    <span class=\"n\">plotting_data</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">min</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">min</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">))</span>\n    <span class=\"n\">plotting_data</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">max</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>☝️ The result of this, a dictionary called <code class=\"language-plaintext highlighter-rouge\">plotting_data</code>, contains statistics types as <em>keys</em> and corresponding values as <em>lists</em>. Now we load these into Pandas:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Load into Pandas\n</span><span class=\"kn\">import</span> <span class=\"n\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n<span class=\"n\">plotting_data_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">plotting_data</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>And plot:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Plot!\n</span><span class=\"kn\">import</span> <span class=\"n\">altair</span> <span class=\"k\">as</span> <span class=\"n\">alt</span>\n\n<span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">alt</span><span class=\"p\">.</span><span class=\"nc\">Chart</span><span class=\"p\">(</span><span class=\"n\">plotting_data_df</span><span class=\"p\">).</span><span class=\"nf\">encode</span><span class=\"p\">(</span>\n    <span class=\"n\">alt</span><span class=\"p\">.</span><span class=\"nc\">X</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">base:Q</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Position in the read</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">).</span><span class=\"nf\">properties</span><span class=\"p\">(</span>\n    <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">800</span><span class=\"p\">,</span>\n    <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n\n<span class=\"n\">median</span> <span class=\"o\">=</span> <span class=\"n\">base</span><span class=\"p\">.</span><span class=\"nf\">mark_tick</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">red</span><span class=\"sh\">'</span><span class=\"p\">,</span><span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">horizontal</span><span class=\"sh\">'</span><span class=\"p\">).</span><span class=\"nf\">encode</span><span class=\"p\">(</span>\n    <span class=\"n\">alt</span><span class=\"p\">.</span><span class=\"nc\">Y</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">median:Q</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Phred quality score</span><span class=\"sh\">\"</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">base</span><span class=\"p\">.</span><span class=\"nf\">mark_rule</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">green</span><span class=\"sh\">'</span><span class=\"p\">,</span><span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"n\">strokeWidth</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">).</span><span class=\"nf\">encode</span><span class=\"p\">(</span>\n    <span class=\"n\">alt</span><span class=\"p\">.</span><span class=\"nc\">Y</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">q25:Q</span><span class=\"sh\">'</span><span class=\"p\">),</span>\n    <span class=\"n\">alt</span><span class=\"p\">.</span><span class=\"nc\">Y2</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">q75:Q</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">min_max</span> <span class=\"o\">=</span> <span class=\"n\">base</span><span class=\"p\">.</span><span class=\"nf\">mark_rule</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">black</span><span class=\"sh\">'</span><span class=\"p\">).</span><span class=\"nf\">encode</span><span class=\"p\">(</span>\n        <span class=\"n\">alt</span><span class=\"p\">.</span><span class=\"nc\">Y</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">min:Q</span><span class=\"sh\">'</span><span class=\"p\">),</span>\n        <span class=\"n\">alt</span><span class=\"p\">.</span><span class=\"nc\">Y2</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">max:Q</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">median</span> <span class=\"o\">+</span> <span class=\"n\">q</span> <span class=\"o\">+</span> <span class=\"n\">min_max</span>\n</code></pre></div></div>\n\n<p>Below is the same thing as just one code blob:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Read the file into a list\n</span><span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">fastq_single_end_short.fq</span><span class=\"sh\">'</span><span class=\"p\">,</span><span class=\"sh\">'</span><span class=\"s\">r</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fq</span><span class=\"p\">:</span>\n    <span class=\"n\">reads</span> <span class=\"o\">=</span> <span class=\"nf\">parse_fastq</span><span class=\"p\">(</span><span class=\"n\">fq</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Extract qualities and convert them into numerical values\n</span><span class=\"n\">run_qualities</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">read</span> <span class=\"ow\">in</span> <span class=\"n\">reads</span><span class=\"p\">:</span>\n    <span class=\"n\">read_qualities</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">quality</span> <span class=\"ow\">in</span> <span class=\"n\">read</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span>\n        <span class=\"n\">read_qualities</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"nf\">phred33_to_q</span><span class=\"p\">(</span><span class=\"n\">quality</span><span class=\"p\">))</span>\n    <span class=\"n\">run_qualities</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">read_qualities</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Transpose the quality values matrix\n</span>\n<span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n<span class=\"n\">base_qualities</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">(</span><span class=\"n\">run_qualities</span><span class=\"p\">).</span><span class=\"n\">T</span>\n\n<span class=\"c1\"># Prep data for plotting\n</span><span class=\"n\">plotting_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"sh\">'</span><span class=\"s\">base</span><span class=\"sh\">'</span><span class=\"p\">:[],</span>\n    <span class=\"sh\">'</span><span class=\"s\">mean</span><span class=\"sh\">'</span><span class=\"p\">:[],</span>\n    <span class=\"sh\">'</span><span class=\"s\">median</span><span class=\"sh\">'</span><span class=\"p\">:[],</span>\n    <span class=\"sh\">'</span><span class=\"s\">q25</span><span class=\"sh\">'</span><span class=\"p\">:[],</span>\n    <span class=\"sh\">'</span><span class=\"s\">q75</span><span class=\"sh\">'</span><span class=\"p\">:[],</span>\n    <span class=\"sh\">'</span><span class=\"s\">min</span><span class=\"sh\">'</span><span class=\"p\">:[],</span>\n    <span class=\"sh\">'</span><span class=\"s\">max</span><span class=\"sh\">'</span><span class=\"p\">:[]</span>\n<span class=\"p\">}</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">base</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">base_qualities</span><span class=\"p\">):</span>\n    <span class=\"n\">plotting_data</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">base</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"n\">plotting_data</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">mean</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">mean</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">))</span>\n    <span class=\"n\">plotting_data</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">median</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">median</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">))</span>\n    <span class=\"n\">plotting_data</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">q25</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">quantile</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,.</span><span class=\"mi\">25</span><span class=\"p\">))</span>\n    <span class=\"n\">plotting_data</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">q75</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">quantile</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,.</span><span class=\"mi\">75</span><span class=\"p\">))</span>\n    <span class=\"n\">plotting_data</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">min</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">min</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">))</span>\n    <span class=\"n\">plotting_data</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">max</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Load into Pandas\n</span><span class=\"kn\">import</span> <span class=\"n\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n<span class=\"n\">plotting_data_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">plotting_data</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Plot!\n</span><span class=\"kn\">import</span> <span class=\"n\">altair</span> <span class=\"k\">as</span> <span class=\"n\">alt</span>\n\n<span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">alt</span><span class=\"p\">.</span><span class=\"nc\">Chart</span><span class=\"p\">(</span><span class=\"n\">plotting_data_df</span><span class=\"p\">).</span><span class=\"nf\">encode</span><span class=\"p\">(</span>\n    <span class=\"n\">alt</span><span class=\"p\">.</span><span class=\"nc\">X</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">base:Q</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Position in the read</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">).</span><span class=\"nf\">properties</span><span class=\"p\">(</span>\n    <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">800</span><span class=\"p\">,</span>\n    <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n\n<span class=\"n\">median</span> <span class=\"o\">=</span> <span class=\"n\">base</span><span class=\"p\">.</span><span class=\"nf\">mark_tick</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">red</span><span class=\"sh\">'</span><span class=\"p\">,</span><span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">horizontal</span><span class=\"sh\">'</span><span class=\"p\">).</span><span class=\"nf\">encode</span><span class=\"p\">(</span>\n    <span class=\"n\">alt</span><span class=\"p\">.</span><span class=\"nc\">Y</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">median:Q</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Phred quality score</span><span class=\"sh\">\"</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">base</span><span class=\"p\">.</span><span class=\"nf\">mark_rule</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">green</span><span class=\"sh\">'</span><span class=\"p\">,</span><span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"n\">strokeWidth</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">).</span><span class=\"nf\">encode</span><span class=\"p\">(</span>\n    <span class=\"n\">alt</span><span class=\"p\">.</span><span class=\"nc\">Y</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">q25:Q</span><span class=\"sh\">'</span><span class=\"p\">),</span>\n    <span class=\"n\">alt</span><span class=\"p\">.</span><span class=\"nc\">Y2</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">q75:Q</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">min_max</span> <span class=\"o\">=</span> <span class=\"n\">base</span><span class=\"p\">.</span><span class=\"nf\">mark_rule</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">black</span><span class=\"sh\">'</span><span class=\"p\">).</span><span class=\"nf\">encode</span><span class=\"p\">(</span>\n        <span class=\"n\">alt</span><span class=\"p\">.</span><span class=\"nc\">Y</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">min:Q</span><span class=\"sh\">'</span><span class=\"p\">),</span>\n        <span class=\"n\">alt</span><span class=\"p\">.</span><span class=\"nc\">Y2</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">max:Q</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">median</span> <span class=\"o\">+</span> <span class=\"n\">q</span> <span class=\"o\">+</span> <span class=\"n\">min_max</span>\n</code></pre></div></div>\n\n<figure id=\"figure-1\" style=\"max-width: 90%;\"><div style=\"overflow-x: auto\"><object data=\"./images/qualities.svg\" type=\"image/svg+xml\" alt=\"Qualities. \">Qualities.</object></div><a target=\"_blank\" href=\"./images/qualities.svg\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 1</strong>:</span> Box plot of quality values across read positions</figcaption></figure>\n\n<h2 id=\"other-comments\">Other comments</h2>\n\n<p>In all the examples above, the reads in the FASTQ file are all the same length.  This is not necessarily the case though it is usually true for datasets generated by sequencing-by-synthesis instruments.  FASTQ files can contain reads of various lengths.</p>\n\n<p>FASTQ files often have the extension <code class=\"language-plaintext highlighter-rouge\">.fastq</code> or <code class=\"language-plaintext highlighter-rouge\">.fq</code>.</p>\n\n<h2 id=\"other-resources\">Other resources</h2>\n\n<ul>\n  <li><a href=\"http://biopython.org/wiki/Main_Page\">BioPython</a></li>\n  <li><a href=\"http://biopython.org/wiki/SeqIO\">SeqIO</a></li>\n  <li><a href=\"http://samtools.sourceforge.net/\">SAMtools</a></li>\n  <li><a href=\"http://hannonlab.cshl.edu/fastx_toolkit/\">FASTX</a></li>\n  <li><a href=\"http://www.bioinformatics.babraham.ac.uk/projects/fastqc/\">FASTQC</a></li>\n  <li><a href=\"https://github.com/lh3/seqtk\">seqtk</a></li>\n</ul>\n\n"],"ref_slides":[],"video_library":{"tutorial":null,"slides":null,"demo":null,"both":null,"session":null},"hands_on":true,"slides":false,"mod_date":"2024-02-19 19:03:29 +0000","pub_date":"2024-01-23 22:01:44 +0000","version":6,"api":"https://training.galaxyproject.org/training-material/api/topics/data-science/tutorials/gnmx-lecture3/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"Foundations of Data Science","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial","tags":["work-in-progress"],"contributors":[{"name":"Anton Nekrutenko","email":"anton@nekrut.org","joined":"2017-09","id":"nekrut","url":"https://training.galaxyproject.org/training-material/api/contributors/nekrut.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/nekrut/"}]}