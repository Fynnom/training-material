{"layout":"tutorial_hands_on","title":"Data Manipulation Olympics - SQL","zenodo_link":"https://zenodo.org/record/6803028","tags":["cyoa","sql","jupyter-notebook"],"questions":["How can I do basic data manipulation in SQL?","Which functions are available to convert, reformat, filter, sort etc my data stored in a database?"],"objectives":["Familiarize yourself with data manipulation in SQL","Perform basic SQL query tasks in Galaxy","Reason about the expected outcome of tools"],"time_estimation":"1h","key_points":["Basic data manipulation is often needed between steps in a larger scientific analysis in order to connect outputs from one tool to input of another.","There are often multiple ways/tools to achieve the same end result","Having a basic understanding of data manipulation tools will make it easier to do exploratory data analysis","Always read the help text of the tool before using it to get a full understanding of its workings","Always try to formulate the output you are expecting from a tool. This will make it easier to spot mistakes as soon as possible."],"contributions":{"authorship":["shiltemann","hexylena"],"funding":["gallantries"]},"level":"Introductory","notebook":{"language":"sql"},"abbreviations":{"SQL":"Structured Query Language"},"priority":3,"subtopic":"next-steps","js_requirements":{"mathjax":28620,"mermaid":false},"short_id":"T00078","url":"/topics/data-science/tutorials/data-manipulation-olympics-sql/tutorial.html","topic_name":"data-science","tutorial_name":"data-manipulation-olympics-sql","dir":"topics/data-science/tutorials/data-manipulation-olympics-sql","symlink":null,"id":"data-science/data-manipulation-olympics-sql","ref_tutorials":["<p>Scientific analyses often consist of a number of tools that run one after the other, in order to go from the raw data to scientific insight. Between these specialized tools, simple data manipulation steps are often needed as a kind of “glue” between tools. For example, the output of tool A may produce a file that contains all the information needed as input for tool B, but tool B expects the columns in a different order. Or in genomic data analysis, some tools expect chromosome X to be listed as <code class=\"language-plaintext highlighter-rouge\">chrX</code>, while others simply expect <code class=\"language-plaintext highlighter-rouge\">X</code>. In these situations, extra data manipulation steps are needed to prepare files for input to analysis tools.</p>\n\n<!--\nNote to contributors: feel free to add sections here to include additional data manipulation options.\nMake sure each section is independent of each other, i.e. each section should start with the olympics.tsv file.\nAlso make sure to include many exercises (with answers) for your section!\n-->\n\n<p>Galaxy has a large collection of tools to perform such basic data manipulation tasks, and becoming familiar with these operations will allow to perform your analysis more easily in Galaxy (and outside).</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#cheatsheet\" id=\"markdown-toc-cheatsheet\">Cheatsheet</a></li>\n  <li><a href=\"#background\" id=\"markdown-toc-background\">Background</a></li>\n  <li><a href=\"#preamble\" id=\"markdown-toc-preamble\">Preamble</a></li>\n  <li><a href=\"#download-data\" id=\"markdown-toc-download-data\">Download Data</a>    <ol>\n      <li><a href=\"#about-this-dataset\" id=\"markdown-toc-about-this-dataset\">About this dataset</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#choose-your-adventure\" id=\"markdown-toc-choose-your-adventure\">Choose your adventure!</a></li>\n  <li><a href=\"#sorting\" id=\"markdown-toc-sorting\">Sorting</a>    <ol>\n      <li><a href=\"#sort-on-multiple-columns-at-once\" id=\"markdown-toc-sort-on-multiple-columns-at-once\">Sort on multiple columns at once</a></li>\n      <li><a href=\"#exercises\" id=\"markdown-toc-exercises\">Exercises</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#filtering\" id=\"markdown-toc-filtering\">Filtering</a>    <ol>\n      <li><a href=\"#exercises-1\" id=\"markdown-toc-exercises-1\">Exercises</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#counting\" id=\"markdown-toc-counting\">Counting</a>    <ol>\n      <li><a href=\"#exercises-2\" id=\"markdown-toc-exercises-2\">Exercises</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#grouping\" id=\"markdown-toc-grouping\">Grouping</a>    <ol>\n      <li><a href=\"#grouping-on-multiple-columns\" id=\"markdown-toc-grouping-on-multiple-columns\">Grouping on multiple columns</a></li>\n      <li><a href=\"#exercises-3\" id=\"markdown-toc-exercises-3\">Exercises</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#computing\" id=\"markdown-toc-computing\">Computing</a>    <ol>\n      <li><a href=\"#exercises-4\" id=\"markdown-toc-exercises-4\">Exercises</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#find-and-replace\" id=\"markdown-toc-find-and-replace\">Find and Replace</a>    <ol>\n      <li><a href=\"#exercises-5\" id=\"markdown-toc-exercises-5\">Exercises</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#removing-columns\" id=\"markdown-toc-removing-columns\">Removing Columns</a></li>\n  <li><a href=\"#unique\" id=\"markdown-toc-unique\">Unique</a></li>\n  <li><a href=\"#joining-datasets\" id=\"markdown-toc-joining-datasets\">Joining Datasets</a></li>\n  <li><a href=\"#concatenating\" id=\"markdown-toc-concatenating\">Concatenating</a></li>\n  <li><a href=\"#conclusion\" id=\"markdown-toc-conclusion\">Conclusion</a></li>\n  <li><a href=\"#exercises-putting-it-all-together\" id=\"markdown-toc-exercises-putting-it-all-together\">Exercises: Putting it all together!</a></li>\n</ol>\n\n</blockquote>\n\n<h1 id=\"cheatsheet\">Cheatsheet</h1>\n\n<p>Here is an overview table of the different data manipulations in this tutorial, with links to the tools in Galaxy.</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Operation</th>\n      <th>Description</th>\n      <th>Galaxy Tool</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Compute on rows</td>\n      <td>to derive new column values from existing ones</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">SELECT x * 2 FROM y</code></td>\n    </tr>\n    <tr>\n      <td>Concatenate datasets</td>\n      <td>one after the other</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">SELECT * FROM x; union all; SELECT * FROM y</code></td>\n    </tr>\n    <tr>\n      <td>Counting</td>\n      <td>Count occurrences of values in a column</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">SELECT count(x) FROM y where x = 'value'</code></td>\n    </tr>\n    <tr>\n      <td>Cut Columns</td>\n      <td>By header name</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">SELECT x, y, z FROM a</code></td>\n    </tr>\n    <tr>\n      <td>Filter</td>\n      <td>Remove rows based on values in one or more columns</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">... WHERE x = 'value'</code></td>\n    </tr>\n    <tr>\n      <td>Find and Replace</td>\n      <td>in a specific column</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">REPLACE()</code>, <code class=\"language-plaintext highlighter-rouge\">regexp_replace</code> in postgresql</td>\n    </tr>\n    <tr>\n      <td>Group on a column</td>\n      <td>And perform simple operations (count, mean, min, max etc)</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">... GROUP BY x ...</code></td>\n    </tr>\n    <tr>\n      <td>Join two Datasets</td>\n      <td>side by side on a specified field</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">SELECT * FROM x, y JOIN x.id = y.id</code></td>\n    </tr>\n    <tr>\n      <td>Select First lines</td>\n      <td>Good for finding top 10s or saving header lines</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">... LIMIT 10</code></td>\n    </tr>\n    <tr>\n      <td>Sort on a column</td>\n      <td>Change the order of the rows based on values in one or more columns</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">... ORDER BY x ASC</code></td>\n    </tr>\n    <tr>\n      <td>Unique</td>\n      <td>Remove duplicate rows</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">SELECT DISTINCT x FROM y</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<p>In this tutorial, these functions are explained in more detail, and we provide some exercises for you to practice.</p>\n\n<h1 id=\"background\">Background</h1>\n\n<p>In this tutorial, we will use as our dataset a table with results from the Olympics, from the games in Athens in 1896 until Tokyo in 2020. The objective is to familiarize you with a large number of the most important data manipulation tools in Galaxy. Much like the Olympics, there are many different disciplines (types of operations), and for each operation there are often multiple techniques (tools) available to athletes (data analysts, you) that are great for achieving the goal.</p>\n\n<p><a href=\"/training-material/topics/introduction/tutorials/data-manipulation-olympics/images/cover.jpg\" rel=\"noopener noreferrer\"><img src=\"/training-material/topics/introduction/tutorials/data-manipulation-olympics/images/cover.jpg\" alt=\"image of olympic rings, logo and two athletes around the words &quot;Data Analysis Olympics&quot;. \" width=\"320\" height=\"180\" loading=\"lazy\" /></a></p>\n\n<p>We will show you many of these commonly needed data manipulation operations, and some examples of how to perform them in Galaxy. We also provide many exercises so that you can train your skills and become a data manipulation Olympian!</p>\n\n<h1 id=\"preamble\">Preamble</h1>\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">#</span> <span class=\"n\">This</span> <span class=\"n\">preamble</span> <span class=\"k\">sets</span> <span class=\"n\">up</span> <span class=\"n\">the</span> <span class=\"k\">sql</span> <span class=\"nv\">\"magic\"</span> <span class=\"k\">for</span> <span class=\"n\">jupyter</span><span class=\"p\">.</span> <span class=\"n\">Use</span> <span class=\"o\">%%</span><span class=\"k\">sql</span> <span class=\"k\">in</span> <span class=\"n\">your</span> <span class=\"n\">cells</span> <span class=\"k\">to</span> <span class=\"k\">write</span> <span class=\"k\">sql</span><span class=\"o\">!</span>\n<span class=\"o\">!</span><span class=\"n\">python3</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">ipython</span><span class=\"o\">-</span><span class=\"k\">sql</span> <span class=\"n\">sqlalchemy</span>\n<span class=\"o\">!</span><span class=\"n\">wget</span> <span class=\"o\">-</span><span class=\"k\">c</span> <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">zenodo</span><span class=\"p\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">record</span><span class=\"o\">/</span><span class=\"mi\">6803028</span><span class=\"o\">/</span><span class=\"n\">files</span><span class=\"o\">/</span><span class=\"n\">olympics</span><span class=\"p\">.</span><span class=\"n\">db</span>\n<span class=\"n\">import</span> <span class=\"n\">sqlalchemy</span>\n<span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">sqlalchemy</span><span class=\"p\">.</span><span class=\"n\">create_engine</span><span class=\"p\">(</span><span class=\"nv\">\"sqlite:///olympics.db\"</span><span class=\"p\">)</span>\n<span class=\"o\">%</span><span class=\"n\">load_ext</span> <span class=\"k\">sql</span>\n<span class=\"o\">%</span><span class=\"k\">sql</span> <span class=\"n\">sqlite</span><span class=\"p\">:</span><span class=\"o\">///</span><span class=\"n\">olympics</span><span class=\"p\">.</span><span class=\"n\">db</span>\n<span class=\"o\">%</span><span class=\"n\">config</span> <span class=\"n\">SqlMagic</span><span class=\"p\">.</span><span class=\"n\">displaycon</span><span class=\"o\">=</span><span class=\"k\">False</span>\n</code></pre></div></div>\n\n<h1 id=\"download-data\">Download Data</h1>\n\n<p>Before we can do any manipulation, we will need some data. Let’s download our table with Olympics results now.</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">olympics</span> <span class=\"k\">LIMIT</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>And now we can start querying the database:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span>\n    <span class=\"n\">name</span>\n<span class=\"k\">FROM</span>\n    <span class=\"n\">sqlite_schema</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <ol>\n    <li>What tables are available?</li>\n    <li>How are they structured?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <ol>\n      <li><code class=\"language-plaintext highlighter-rouge\">countries</code>, <code class=\"language-plaintext highlighter-rouge\">olympics</code>, <code class=\"language-plaintext highlighter-rouge\">olympics_2022</code></li>\n      <li>Each are tables with 10 or more columns.</li>\n    </ol>\n  </blockquote>\n</blockquote>\n\n<h2 id=\"about-this-dataset\">About this dataset</h2>\n\n<p>The data was <a href=\"https://github.com/UOSCS/Olympic_Athletes\">obtained</a> from <a href=\"https://www.olympedia.org/\">Olympedia</a>. The <code class=\"language-plaintext highlighter-rouge\">olympics</code> table contains\n234,522 rows and 17 columns. Each row corresponds to an individual athlete competing in an individual Olympic event. The columns are:</p>\n\n<ul>\n  <li><strong>athlete_id</strong> - Unique number for each athlete</li>\n  <li><strong>name</strong> - Athlete’s name</li>\n  <li><strong>sex</strong> - M or F</li>\n  <li><strong>birth_year</strong> - 4-digit number</li>\n  <li><strong>birth_day</strong> - e.g. 24 July</li>\n  <li><strong>birth_place</strong> - town and/or country</li>\n  <li><strong>height</strong> - In centimeters (or <code class=\"language-plaintext highlighter-rouge\">NA</code> if data not known)</li>\n  <li><strong>weight</strong> - In kilograms (or <code class=\"language-plaintext highlighter-rouge\">NA</code> if data not known)</li>\n  <li><strong>team</strong> - Team name</li>\n  <li><strong>noc</strong> - National Olympic Committee 3-letter code</li>\n  <li><strong>games</strong> - Year and season</li>\n  <li><strong>year</strong> - Integer</li>\n  <li><strong>season</strong> - Summer or Winter</li>\n  <li><strong>city</strong> - Host city</li>\n  <li><strong>sport</strong> - Sport</li>\n  <li><strong>event</strong> - Event</li>\n  <li><strong>medal</strong> - Gold, Silver, Bronze (or <code class=\"language-plaintext highlighter-rouge\">NA</code> if no medal was won)</li>\n</ul>\n\n<p>We will use this dataset to practice our data manipulation skills in Galaxy.</p>\n\n<h1 id=\"choose-your-adventure\">Choose your adventure!</h1>\n\n<p>This tutorial is structured a bit differently than most. <strong>You do not have to do the steps in the order they are presented below.</strong> Every section in this tutorial uses the dataset you just uploaded (the <code class=\"language-plaintext highlighter-rouge\">olympics.db</code> file) as input, so you can jump to any section in this tutorial right now if you have a particular data manipulation operation in mind you want to learn more about.</p>\n\n<h1 id=\"sorting\">Sorting</h1>\n\n<p>We have a lot of data in this file, but it is ordered by the athlete ID number, which is a somewhat arbitrary and meaningless number. But we can sort the rows in this file to something more convenient, for example alphabetically by name of the athlete, or chronologically by year of the Olympics.</p>\n\n<p>In <code class=\"language-plaintext highlighter-rouge\">SQL</code> we can use the <code class=\"language-plaintext highlighter-rouge\">ORDER BY</code> clause. We’ll start by limiting our results, as every table in this dataset is quite large.</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"n\">NOC</span><span class=\"p\">,</span> <span class=\"nv\">`CLDR display name`</span> <span class=\"k\">FROM</span> <span class=\"n\">countries</span> <span class=\"k\">LIMIT</span> <span class=\"mi\">30</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>You can use <code class=\"language-plaintext highlighter-rouge\">ORDER BY column-name ASC</code> or <code class=\"language-plaintext highlighter-rouge\">ORDER BY column-name DESC</code> to sort the data ascending or descending.</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"n\">NOC</span><span class=\"p\">,</span> <span class=\"nv\">`CLDR display name`</span> <span class=\"k\">FROM</span> <span class=\"n\">countries</span> <span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"n\">NOC</span> <span class=\"k\">ASC</span> <span class=\"k\">LIMIT</span> <span class=\"mi\">30</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"n\">NOC</span><span class=\"p\">,</span> <span class=\"nv\">`CLDR display name`</span> <span class=\"k\">FROM</span> <span class=\"n\">countries</span> <span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"n\">NOC</span> <span class=\"k\">DESC</span> <span class=\"k\">LIMIT</span> <span class=\"mi\">30</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>So let’s sort our file in chronological order, based on the year of the Olympic games:</p>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <ol>\n    <li>Which column contains the year?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <ol>\n      <li><code class=\"language-plaintext highlighter-rouge\">year</code></li>\n    </ol>\n\n  </blockquote>\n</blockquote>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">olympics</span> <span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"nb\">year</span> <span class=\"k\">LIMIT</span> <span class=\"mi\">30</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>If we wanted to do it in reverse, we could just use <code class=\"language-plaintext highlighter-rouge\">order by year desc</code></p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">olympics</span> <span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"nb\">year</span> <span class=\"k\">DESC</span> <span class=\"k\">LIMIT</span> <span class=\"mi\">30</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <ol>\n    <li>Write a query to access only the first entry.</li>\n    <li>Which athlete is listed at the top of the file now?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <ol>\n      <li>We can use <code class=\"language-plaintext highlighter-rouge\">LIMIT</code> for this.\n        <div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span> <span class=\"k\">order</span> <span class=\"k\">by</span> <span class=\"nb\">year</span> <span class=\"k\">limit</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n</code></pre></div>        </div>\n      </li>\n      <li>J. Defert. Who competed in a Tennis event 1896 Summer Olympics in Athens.</li>\n    </ol>\n\n  </blockquote>\n</blockquote>\n\n<p>This is great, but maybe it would make more sense to sort alphabetically by athlete name <em>within each year</em>.</p>\n\n<h2 id=\"sort-on-multiple-columns-at-once\">Sort on multiple columns at once</h2>\n\n<p>So we want to sort twice, first by year, an then within each year, we sort again alphabetically by name.</p>\n\n<p>We will sort the file in chronological order based on the year of the Olympic games</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">olympics</span> <span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"nb\">year</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"k\">LIMIT</span> <span class=\"mi\">30</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <p>Which athlete is listed at the top now? Which discipline (sport) did they compete in?</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <ol>\n      <li>A. Grigoriadis. He competed in the 500 meters freestyle swimming event.</li>\n    </ol>\n\n  </blockquote>\n</blockquote>\n\n<h2 id=\"exercises\">Exercises</h2>\n\n<p>Ok, time to train! Let’s see if you can use the sort tool to answer the following questions:</p>\n\n<blockquote class=\"question\">\n  <div class=\"box-title question-title\" id=\"question-exercise-reverse-the-sort\"><i class=\"far fa-question-circle\" aria-hidden=\"true\"></i> Exercise: Reverse the sort</div>\n\n  <p>Which athlete comes <em>last by alphabet</em>, in the <em>most recent</em> Olympics?</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p><code class=\"language-plaintext highlighter-rouge\">Žolt Peto</code> who competed in table tennis at the 2020 Summer Olympics in Tokyo.</p>\n\n    <p>We do this by repeating the previous sort (on year and then name), but changing the order to <em>descending</em> for both, to get the answer to the top of the file.</p>\n\n  </blockquote>\n</blockquote>\n\n<blockquote class=\"question\">\n  <div class=\"box-title question-title\" id=\"question-exercise-sort-by-height\"><i class=\"far fa-question-circle\" aria-hidden=\"true\"></i> Exercise: sort by height</div>\n\n  <ol>\n    <li>What is the height of the tallest competing athlete? Which athlete(s) are of this height?</li>\n    <li>What is the shortest?</li>\n    <li>Who was the tallest athlete from the most recent Olympics? How tall were they?</li>\n  </ol>\n\n  <blockquote class=\"tip\">\n    <tip-title>Removing null values</tip-title>\n    <p>This will be covered more during the Filtering section, but for now simply use this filter:</p>\n    <div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span> <span class=\"k\">where</span> <span class=\"n\">height</span> <span class=\"k\">is</span> <span class=\"k\">not</span> <span class=\"k\">null</span> <span class=\"p\">...</span> <span class=\"p\">;</span>\n</code></pre></div>    </div>\n  </blockquote>\n\n  <blockquote class=\"solution\">\n    <div class=\"box-title solution-title\" id=\"solution-hints\"><button class=\"gtn-boxify-button solution\" type=\"button\" aria-controls=\"solution-hints\" aria-expanded=\"true\"><i class=\"far fa-eye\" aria-hidden=\"true\"></i> <span>Hints</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>\n\n    <ol>\n      <li>We can use <code class=\"language-plaintext highlighter-rouge\">.height</code>, and because we want the tallest on top, we will need to sort in <em>descending</em> (decreasing) order. Unfortunately you might discover there are null values.</li>\n      <li>Rerun the same query as step 1, but change the order to <em>ascending</em></li>\n      <li>First sort by year (descending), then by height (descending)</li>\n    </ol>\n\n  </blockquote>\n\n  <blockquote class=\"solution\">\n    <div class=\"box-title solution-title\" id=\"solution-answers\"><button class=\"gtn-boxify-button solution\" type=\"button\" aria-controls=\"solution-answers\" aria-expanded=\"true\"><i class=\"far fa-eye\" aria-hidden=\"true\"></i> <span>Answers</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>\n\n    <ol>\n      <li>Adam Sandurski from Poland is the tallest athlete in the file, at 214 cm tall.</li>\n      <li>Lyton Mphande from Seol is the shortest at 127 cm.</li>\n      <li>Gennaro Di Mauro, 210 cm. (2020 Summer Olympics in Tokyo)</li>\n    </ol>\n\n  </blockquote>\n\n  <blockquote class=\"solution\">\n    <div class=\"box-title solution-title\" id=\"solution-full-solutions\"><button class=\"gtn-boxify-button solution\" type=\"button\" aria-controls=\"solution-full-solutions\" aria-expanded=\"true\"><i class=\"far fa-eye\" aria-hidden=\"true\"></i> <span>Full Solutions</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>\n    <ol>\n      <li><code class=\"language-plaintext highlighter-rouge\">select * from olympics  where height is not null order by height desc limit 1;</code></li>\n      <li><code class=\"language-plaintext highlighter-rouge\">select * from olympics  where height is not null order by height asc limit 1</code></li>\n      <li><code class=\"language-plaintext highlighter-rouge\">select * from olympics  where height is not null order by year desc, height desc limit 1</code></li>\n    </ol>\n  </blockquote>\n\n</blockquote>\n\n<h1 id=\"filtering\">Filtering</h1>\n\n<p>This file contains a lot of data, but we may only be interested in a subset of this data. For example, we may only want to look at one particular Olympics, or one particular sport. In such cases we can filter the dataset. This will create a new dataset, removing any rows that are not of interest to us (i.e. that don’t meet the criteria we provide).</p>\n\n<p>We will filter the file to show only winter Olympics\nLook at the <code class=\"language-plaintext highlighter-rouge\">olympics</code> table and answer the following questions</p>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <ol>\n    <li>Which key contains this information?</li>\n    <li>Which values can this column have? (make sure to notice capitalisation, ‘Winter’ is not the same as ‘winter’ to these tools)</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <ol>\n      <li><code class=\"language-plaintext highlighter-rouge\">season</code></li>\n      <li>The values can be <code class=\"language-plaintext highlighter-rouge\">Summer</code> or <code class=\"language-plaintext highlighter-rouge\">Winter</code> (<code class=\"language-plaintext highlighter-rouge\">select distinct season from olympics</code>)</li>\n    </ol>\n\n  </blockquote>\n</blockquote>\n\n<p>We’ll be using the <code class=\"language-plaintext highlighter-rouge\">WHERE</code> filter to select entries matching specific conditions:</p>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <ol>\n    <li>How would you write the expressions for the following conditions:\n      <ol>\n        <li><code class=\"language-plaintext highlighter-rouge\">enrolled</code> must be ‘Yes’</li>\n        <li><code class=\"language-plaintext highlighter-rouge\">age</code> must be smaller than 75</li>\n        <li><code class=\"language-plaintext highlighter-rouge\">height</code> cannot be null</li>\n        <li><code class=\"language-plaintext highlighter-rouge\">birthplace</code> cannot be empty</li>\n      </ol>\n    </li>\n    <li>It is also possible to combine multiple conditions, using <code class=\"language-plaintext highlighter-rouge\">and</code>, <code class=\"language-plaintext highlighter-rouge\">or</code>, <code class=\"language-plaintext highlighter-rouge\">not</code> and parentheses\nHow would you write expressions for the following filtering conditions:\n      <ol>\n        <li><code class=\"language-plaintext highlighter-rouge\">height</code> is larger than 200 or smaller than 160</li>\n        <li><code class=\"language-plaintext highlighter-rouge\">height</code> is larger than 200 and smaller than 210</li>\n      </ol>\n    </li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <ol>\n      <li>The answers are:\n        <ol>\n          <li><code class=\"language-plaintext highlighter-rouge\">select * from olympics where enrolled = 'Yes'</code></li>\n          <li><code class=\"language-plaintext highlighter-rouge\">select * from olympics where age &lt; 75</code></li>\n          <li><code class=\"language-plaintext highlighter-rouge\">select * from olympics where height is not null</code>`</li>\n          <li><code class=\"language-plaintext highlighter-rouge\">select * from olympics where birthplace != \"\"</code></li>\n        </ol>\n      </li>\n      <li>The answers are:\n        <ol>\n          <li><code class=\"language-plaintext highlighter-rouge\">select * from olympics where height &gt; 200 or height &lt; 160</code></li>\n          <li><code class=\"language-plaintext highlighter-rouge\">select * from olympics where height &gt; 200 and height &lt; 210</code></li>\n        </ol>\n      </li>\n    </ol>\n\n  </blockquote>\n</blockquote>\n\n<p>Ok, great, now that you’ve got the hang of writing expressions for this tool, let’s create a file with only Winter Olympics. Make sure it is contained in an array, in case we want to do further sorting.</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">winter</span> <span class=\"k\">AS</span> <span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">olympics</span> <span class=\"k\">WHERE</span> <span class=\"n\">season</span> <span class=\"o\">=</span> <span class=\"s1\">'Winter'</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <p>How many entries are in this file? (Hint: use <code class=\"language-plaintext highlighter-rouge\">count(*)</code>)</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p>44,680</p>\n\n  </blockquote>\n</blockquote>\n\n<p><strong>Repeat</strong> the step for the Summer Olympics</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">summer</span> <span class=\"k\">AS</span> <span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">olympics</span> <span class=\"k\">WHERE</span> <span class=\"n\">season</span> <span class=\"o\">=</span> <span class=\"s1\">'Summer'</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <ol>\n    <li>How many lines do you expect in the this file?</li>\n    <li>How many lines are in this file? Were you right?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <div class=\"box-title solution-title\" id=\"solution-hints-1\"><button class=\"gtn-boxify-button solution\" type=\"button\" aria-controls=\"solution-hints-1\" aria-expanded=\"true\"><i class=\"far fa-eye\" aria-hidden=\"true\"></i> <span>Hints</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>\n\n    <ol>\n      <li>Use the <code class=\"language-plaintext highlighter-rouge\">count(*)</code> select</li>\n      <li>Be careful to consider whether these counts include the header line of the file or not</li>\n    </ol>\n\n  </blockquote>\n\n  <blockquote class=\"solution\">\n    <div class=\"box-title solution-title\" id=\"solution-answers-1\"><button class=\"gtn-boxify-button solution\" type=\"button\" aria-controls=\"solution-answers-1\" aria-expanded=\"true\"><i class=\"far fa-eye\" aria-hidden=\"true\"></i> <span>Answers</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>\n\n    <ol>\n      <li>The original file has 234,522 entries, and the Winter Olympics had 44,680 entries. So we would expect 234,522 - 44,680 = 189,842 rows of data.\nIt is always useful to take a moment to think about the expected outcome, this makes it easier to spot mistakes and will save you time in the long run.</li>\n    </ol>\n\n  </blockquote>\n</blockquote>\n\n<h2 id=\"exercises-1\">Exercises</h2>\n\n<p>Ok, time to train! let’s see if you can use the <code class=\"language-plaintext highlighter-rouge\">select</code> filter to answer the following questions:</p>\n\n<blockquote class=\"question\">\n  <div class=\"box-title question-title\" id=\"question-exercise-medal-winners\"><i class=\"far fa-question-circle\" aria-hidden=\"true\"></i> Exercise: Medal winners</div>\n\n  <ol>\n    <li>How many gold medals were handed out?</li>\n    <li>How many total medals?</li>\n    <li>How many medals were handed out during the 2018 Olympics?</li>\n    <li>How many medals were won by individuals with a height between 170 and 180 cm? (inclusive)</li>\n    <li>How many gold medals were won by individuals shorter than 160cm or taller than 190?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <div class=\"box-title solution-title\" id=\"solution-hints-2\"><button class=\"gtn-boxify-button solution\" type=\"button\" aria-controls=\"solution-hints-2\" aria-expanded=\"true\"><i class=\"far fa-eye\" aria-hidden=\"true\"></i> <span>Hints</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>\n\n    <ul>\n      <li>Column 17 contains information about medals</li>\n      <li>The possible values are <code class=\"language-plaintext highlighter-rouge\">Gold</code>, <code class=\"language-plaintext highlighter-rouge\">Silver</code>, <code class=\"language-plaintext highlighter-rouge\">Bronze</code>, and `` (empty).</li>\n      <li>Don’t forget that the output (and line count) may include the header line</li>\n      <li>Do not use quotes on number columns (e.g. year)</li>\n      <li>You may need parentheses for complex conditions</li>\n    </ul>\n\n  </blockquote>\n\n  <blockquote class=\"solution\">\n    <div class=\"box-title solution-title\" id=\"solution-answers-2\"><button class=\"gtn-boxify-button solution\" type=\"button\" aria-controls=\"solution-answers-2\" aria-expanded=\"true\"><i class=\"far fa-eye\" aria-hidden=\"true\"></i> <span>Answers</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>\n\n    <ol>\n      <li>8,110   (Expression: <code class=\"language-plaintext highlighter-rouge\">SELECT count(*) FROM olympics WHERE medal == \"Gold\"</code>)</li>\n      <li>24,633  (Expression: <code class=\"language-plaintext highlighter-rouge\">SELECT count(*) FROM olympics WHERE medal == \"Gold\" or medal == \"Silver\" or medal == \"Bronze\")</code>, or <code class=\"language-plaintext highlighter-rouge\">medal != null</code>)</li>\n      <li>131     (Expression: <code class=\"language-plaintext highlighter-rouge\">SELECT count(*) FROM olympics WHERE medal == \"Gold\" and year == 2018</code> (note: do not use quotes around <code class=\"language-plaintext highlighter-rouge\">2018</code>, as it is a numerical value))</li>\n      <li>8,086   (Expression: <code class=\"language-plaintext highlighter-rouge\">SELECT count(*) FROM olympics WHERE medal is not null and height &gt;= 170 and height &lt;=180</code>)</li>\n      <li>2,333   (Expression: <code class=\"language-plaintext highlighter-rouge\">SELECT count(*) FROM olympics WHERE medal is not null and (height &lt; 160 or height &gt; 190)</code> (note: parentheses are important here))</li>\n    </ol>\n\n    <p>Note: these numbers are found by determining the number of lines in the file after each filtering step, and subtracting 1 for the header line.</p>\n\n  </blockquote>\n</blockquote>\n\n<h1 id=\"counting\">Counting</h1>\n\n<p>A common operation we might want to perform on tables of data, is simple counting. How many times does a certain value appear? For our dataset for instance, we might want to know how many countries participated in each Olympics, how many women, etc; any column that has categorical data that we can count.</p>\n\n<p>Let’s start by simply counting how many different Olympic Games we have in our dataset, and how many times it appears (so how many participations there were each year)</p>\n\n<p>We’ll need to use the <code class=\"language-plaintext highlighter-rouge\">group by</code> syntax which takes a key, and then groups by those values.</p>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <ol>\n    <li>How many different Olympic games are in our file?</li>\n    <li>Which Olympic games had the most participations? (Tip: use order by)</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <ol>\n      <li>\n        <p>52 games (<code class=\"language-plaintext highlighter-rouge\">select count(*), games from olympics group by games</code>)</p>\n\n        <p>The resulting file looks something like:</p>\n\n        <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> 615\t1896 Summer Olympics\n 2503\t1900 Summer Olympics\n 2643\t1904 Summer Olympics\n 3213\t1908 Summer Olympics\n 4610\t1912 Summer Olympics\n 3448\t1920 Summer Olympics\n 5242\t1924 Summer Olympics\n 358\t1924 Winter Olympics\n 4493\t1928 Summer Olympics\n ...\n</code></pre></div>        </div>\n      </li>\n      <li>\n        <p>1996 Summer Olympics. (10501 participations)</p>\n      </li>\n    </ol>\n\n  </blockquote>\n</blockquote>\n\n<p>You may have guessed that like <code class=\"language-plaintext highlighter-rouge\">order by</code>, that we could have selected multiple columns in the <code class=\"language-plaintext highlighter-rouge\">group by</code> step. This lets us count on combinations of columns.</p>\n\n<p>Let’s try counting the number of men and women in each olympic games.</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">select</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">),</span> <span class=\"n\">games</span><span class=\"p\">,</span> <span class=\"n\">sex</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span> <span class=\"k\">group</span> <span class=\"k\">by</span> <span class=\"n\">games</span><span class=\"p\">,</span> <span class=\"n\">sex</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <p>You see the resulting file has a line for every combination of the two columns (games and sex), providing the count for each.</p>\n\n  <ol>\n    <li>\n      <p>How many women were in the first Olympic games?</p>\n    </li>\n    <li>\n      <p>Which Olympic games had the most women participants?</p>\n    </li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <ol>\n      <li>2 women participated in the 1896 Olympics. (note that we cannot be sure if this is two different women, or 1 woman participating twice, in this query. Do you know any way we could query that? Try it out!)\nThe results looks something like this:\n        <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>2\tF\t1896 Summer Olympics\n43\tF\t1900 Summer Olympics\n17\tF\t1904 Summer Olympics\n55\tF\t1908 Summer Olympics\n97\tF\t1912 Summer Olympics\n132\tF\t1920 Summer Olympics\n269\tF\t1924 Summer Olympics\n</code></pre></div>        </div>\n      </li>\n      <li>2020 Summer Olympics (4652)</li>\n    </ol>\n\n  </blockquote>\n</blockquote>\n\n<p>Let’s say we wanted to know how many different sports there were in each Olympics. If we used the counting query above, we would get resultsfor each combination of sport and olympics, with the number of lines (participations) of each. But we don’t really care about the number of lines that have this combination, just the total number of unique sports in each games.</p>\n\n<p>We can use the <code class=\"language-plaintext highlighter-rouge\">distinct</code> filter in our pipeline to discover this. First let’s do our group by and iterate over each resulting group:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">select</span> <span class=\"n\">games</span><span class=\"p\">,</span> <span class=\"n\">sport</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span> <span class=\"k\">group</span> <span class=\"k\">by</span> <span class=\"n\">games</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>And let’s count all of their appearances</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">select</span> <span class=\"n\">games</span><span class=\"p\">,</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"n\">sport</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">sports</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span> <span class=\"k\">group</span> <span class=\"k\">by</span> <span class=\"n\">games</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>But those results still aren’t distinct, those numbers are far too high. So let’s use distinct:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">select</span> <span class=\"n\">games</span><span class=\"p\">,</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"k\">distinct</span> <span class=\"n\">sport</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">sports</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span> <span class=\"k\">group</span> <span class=\"k\">by</span> <span class=\"n\">games</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>We’re almost there! Let’s sort this</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">select</span> <span class=\"n\">games</span><span class=\"p\">,</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"k\">distinct</span> <span class=\"n\">sport</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">sports</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span> <span class=\"k\">group</span> <span class=\"k\">by</span> <span class=\"n\">games</span> <span class=\"k\">order</span> <span class=\"k\">by</span> <span class=\"n\">sports</span> <span class=\"k\">asc</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <ol>\n    <li>How many sport were in the first Olympics? How many in the latest?</li>\n    <li>Which Olympics had the most different sports?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <ol>\n      <li>10 and 38.</li>\n      <li>The 2020 Summer Olympics had the most different sports (38)</li>\n    </ol>\n\n  </blockquote>\n</blockquote>\n\n<p>Save the output as something descriptive.</p>\n\n<h2 id=\"exercises-2\">Exercises</h2>\n\n<p>Ok, let’s practice!</p>\n\n<blockquote class=\"question\">\n  <div class=\"box-title question-title\" id=\"question-exercise-number-of-participations-per-country\"><i class=\"far fa-question-circle\" aria-hidden=\"true\"></i> Exercise: Number of participations per country</div>\n\n  <ol>\n    <li>Which country has had the most participations in the Olympics?</li>\n    <li>How many countries participated in the first Olympics? How many in the last?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <div class=\"box-title solution-title\" id=\"solution-hints-3\"><button class=\"gtn-boxify-button solution\" type=\"button\" aria-controls=\"solution-hints-3\" aria-expanded=\"true\"><i class=\"far fa-eye\" aria-hidden=\"true\"></i> <span>Hints</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>\n\n    <ol>\n      <li>Since we are counting instances of a key, we can use <code class=\"language-plaintext highlighter-rouge\">group by team</code> and then loop over that to print out the length, and the team name of each of those items.</li>\n      <li>This is basically the same question as “how many women” participated, try modifying that query.</li>\n    </ol>\n\n  </blockquote>\n\n  <blockquote class=\"solution\">\n    <div class=\"box-title solution-title\" id=\"solution-answers-3\"><button class=\"gtn-boxify-button solution\" type=\"button\" aria-controls=\"solution-answers-3\" aria-expanded=\"true\"><i class=\"far fa-eye\" aria-hidden=\"true\"></i> <span>Answers</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>\n\n    <ol>\n      <li>The United States with 17,286 participations (<code class=\"language-plaintext highlighter-rouge\">select team, count(team) as count from olympics group by team order by count desc;</code>)</li>\n      <li>15 and 250. (<code class=\"language-plaintext highlighter-rouge\">select games, count(distinct team) as teams from olympics group by games;</code>)</li>\n    </ol>\n\n  </blockquote>\n</blockquote>\n\n<h1 id=\"grouping\">Grouping</h1>\n\n<p>Often we may want to group rows based on a value in a column, and perform some operation on the resulting rows. For example we would like to group the olympics data by one value (e.g. year, country, sport), and determine some value for each group (e.g. number of medals won, average age of athletes, etc).</p>\n\n<p>In the <a href=\"#counting\">counting</a> section of this tutorial we show how to get answers that require a count (e.g. number of medals won), but sometimes we want to do something more complex, like calculating the average height of athletes in a group, say per country or per sport. This section will show some example of these types of questions.</p>\n\n<p>We can use continue to use group by for this, but now we’ll need the max and min aggregate operations. Essentially every time we use <code class=\"language-plaintext highlighter-rouge\">group by</code> we need to use an aggregation like finding the maximum, minimum, or counting the number of results.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Tallest athlete per sport</hands-on-title>\n\n  <p>We would like to answer the following question: <em>How tall was the tallest athlete of each sport?</em></p>\n\n  <blockquote class=\"question\">\n    <question-title></question-title>\n\n    <ol>\n      <li>How tall was the tallest athlete in basketball? And what about karate?</li>\n      <li>Why do some sports have null values?</li>\n    </ol>\n\n    <blockquote class=\"solution\">\n      <solution-title></solution-title>\n      <div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">select</span> <span class=\"k\">max</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">),</span> <span class=\"k\">min</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">),</span><span class=\"n\">sport</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span> <span class=\"k\">group</span> <span class=\"k\">by</span> <span class=\"n\">sport</span>\n</code></pre></div>      </div>\n\n      <ol>\n        <li>Basketball’s tallest athlete was 192cm. For Karate it is 163.</li>\n        <li>Our dataset had quite a number of <code class=\"language-plaintext highlighter-rouge\">null</code> (unknown) values in the height column, especially for the earlier Olympics. These are preserved in the outputs.</li>\n      </ol>\n    </blockquote>\n  </blockquote>\n</blockquote>\n\n<h2 id=\"grouping-on-multiple-columns\">Grouping on multiple columns</h2>\n\n<p>You may have noticed that we could also provide multiple columns to group on. If we do this, we can compute values for combinations of groups, such as sex and sport, to find e.g. the tallest woman in basketball or the shortest man per Olympics. There are also many more options for the computation we perform, so perhaps we are more interested not in the tallest athlete, but the average height. Let’s perform some of these slightly more advanced queries now.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Average height of men and women per sport</hands-on-title>\n\n  <p>The question we would like to answer here, is what is the average height for men and women per sport?</p>\n\n  <div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">select</span> <span class=\"k\">avg</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">),</span> <span class=\"n\">sex</span><span class=\"p\">,</span> <span class=\"n\">sport</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span> <span class=\"k\">group</span> <span class=\"k\">by</span> <span class=\"n\">sex</span><span class=\"p\">,</span> <span class=\"n\">sport</span><span class=\"p\">;</span>\n</code></pre></div>  </div>\n\n  <p>See if you can answer the following questions based on the output file.</p>\n\n  <blockquote class=\"question\">\n    <question-title></question-title>\n\n    <ol>\n      <li>What is the average height of women participating in archery?</li>\n      <li>What is the average height of men participating in <a href=\"https://en.wikipedia.org/wiki/Ballooning_at_the_1900_Summer_Olympics\">ballooning</a>?</li>\n      <li>Why do some values have <code class=\"language-plaintext highlighter-rouge\">null</code> instead of a height?</li>\n      <li>Why do some sports not have a value for one of the sexes?</li>\n      <li>Can you find a sport where women were taller than the men? (Hint: it starts with the letter A)</li>\n    </ol>\n\n    <blockquote class=\"solution\">\n      <solution-title></solution-title>\n\n      <ol>\n        <li>167.25677031093 cm</li>\n        <li>170 cm</li>\n        <li>If none of the rows in the group had height data available, it will output <code class=\"language-plaintext highlighter-rouge\">nan</code> (not a number) instead. This is most common for sports that were only featured a few times in the early years of the Olympics.</li>\n        <li>Sports such as artistic swimming only exist for women, so no M appears in the data for that group, so there simply is no row for the mean height of men doing artistic swimming in our output.</li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Art_competitions_at_the_Summer_Olympics\">Art Competitions</a></li>\n      </ol>\n\n      <p>If all went well, your output file should look something like:</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>GroupBy(sport)\t     GroupBy(sex)  mean(height)\nAeronautics         M             nan\nAlpine Skiing       F             167.38324708926\nAlpine Skiing       M             178.18747142204\nAlpinism            M             nan\nArchery             F             167.25677031093\nArchery             M             178.5865470852\nArt Competitions    F             175.33333333333\nArt Competitions    M             173.97260273973\nArtistic Gymnastics F             156.15316901408\n</code></pre></div>      </div>\n    </blockquote>\n  </blockquote>\n\n</blockquote>\n\n<h2 id=\"exercises-3\">Exercises</h2>\n\n<blockquote class=\"question\">\n  <div class=\"box-title question-title\" id=\"question-exercise-grouping-and-computing\"><i class=\"far fa-question-circle\" aria-hidden=\"true\"></i> Exercise: Grouping and computing</div>\n\n  <ol>\n    <li>How tall is the shortest woman Badminton player to win a gold medal?</li>\n    <li>What is the average height of athletes from team Denmark in the 1964 Olympics? (Note: 1964 has summer and winter olympics)</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <div class=\"box-title solution-title\" id=\"solution-hints-4\"><button class=\"gtn-boxify-button solution\" type=\"button\" aria-controls=\"solution-hints-4\" aria-expanded=\"true\"><i class=\"far fa-eye\" aria-hidden=\"true\"></i> <span>Hints</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>\n\n    <ol>\n      <li>We need to group on 3 columns: medal, sport and sex, and then select the <code class=\"language-plaintext highlighter-rouge\">min</code>.</li>\n      <li>We need to group on 2 columns: country (team) and year, then compute the average over height.</li>\n    </ol>\n  </blockquote>\n\n  <blockquote class=\"solution\">\n    <div class=\"box-title solution-title\" id=\"solution-answers-4\"><button class=\"gtn-boxify-button solution\" type=\"button\" aria-controls=\"solution-answers-4\" aria-expanded=\"true\"><i class=\"far fa-eye\" aria-hidden=\"true\"></i> <span>Answers</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>\n\n    <ol>\n      <li>161 cm.</li>\n      <li>mean height: 175.91304347826, standard deviation: 7.0335410308672`</li>\n    </ol>\n  </blockquote>\n\n  <blockquote class=\"solution\">\n    <div class=\"box-title solution-title\" id=\"solution-full-solutions-1\"><button class=\"gtn-boxify-button solution\" type=\"button\" aria-controls=\"solution-full-solutions-1\" aria-expanded=\"true\"><i class=\"far fa-eye\" aria-hidden=\"true\"></i> <span>Full Solutions</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>\n    <div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">select</span> <span class=\"k\">min</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">),</span> <span class=\"n\">medal</span><span class=\"p\">,</span> <span class=\"n\">sport</span><span class=\"p\">,</span> <span class=\"n\">sex</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span> <span class=\"k\">group</span> <span class=\"k\">by</span> <span class=\"n\">medal</span><span class=\"p\">,</span> <span class=\"n\">sport</span><span class=\"p\">,</span> <span class=\"n\">sex</span><span class=\"p\">;</span>\n<span class=\"k\">select</span> <span class=\"k\">avg</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">),</span> <span class=\"n\">team</span><span class=\"p\">,</span> <span class=\"n\">games</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span> <span class=\"k\">where</span> <span class=\"n\">team</span> <span class=\"o\">=</span> <span class=\"nv\">\"Denmark\"</span> <span class=\"k\">group</span> <span class=\"k\">by</span> <span class=\"n\">team</span><span class=\"p\">,</span> <span class=\"n\">games</span><span class=\"p\">;</span>\n</code></pre></div>    </div>\n\n  </blockquote>\n\n</blockquote>\n\n<h1 id=\"computing\">Computing</h1>\n\n<p>Sometimes we want to use the data in our column to compute a new value, and add that to the table. For instance, for our dataset we could caluclate athtletes BMI (using height and weight columns), or their age at time of participation (from year of birth and year of the Olymics). By adding these computed values as a new colum to our datset, we can more easily query the dataset for these values. We can do these types of operations on the fly, and then if we like, store them as (temporary) tables.</p>\n\n<p>As an example, let’s calculate the age of each athlete at the time of participation, and add this as a new column to our dataset.</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">select</span> <span class=\"nb\">year</span> <span class=\"o\">-</span> <span class=\"n\">birth_year</span> <span class=\"k\">as</span> <span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">games</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span> <span class=\"k\">LIMIT</span> <span class=\"mi\">30</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>If we want to save that result to make it easier to query, then we have a couple options.</p>\n\n<ol>\n  <li>\n    <p>Don’t store it, calculate on demand. Very storage efficient.</p>\n\n    <div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">select</span> <span class=\"n\">noc</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"p\">...,</span> <span class=\"nb\">year</span> <span class=\"o\">-</span> <span class=\"n\">birth_year</span> <span class=\"k\">as</span> <span class=\"n\">age</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>Create a temporary table with this data, great if we only need it temporarily</p>\n\n    <div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">create</span> <span class=\"k\">temporary</span> <span class=\"k\">table</span> <span class=\"n\">olympics_ages</span> <span class=\"k\">as</span> <span class=\"k\">select</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"nb\">year</span> <span class=\"o\">-</span> <span class=\"n\">birth_year</span> <span class=\"k\">as</span> <span class=\"n\">age</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>Create a new permanent table with this data</p>\n\n    <div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">create</span> <span class=\"k\">table</span> <span class=\"n\">olympics_ages</span> <span class=\"k\">as</span> <span class=\"k\">select</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"nb\">year</span> <span class=\"o\">-</span> <span class=\"n\">birth_year</span> <span class=\"k\">as</span> <span class=\"n\">age</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>Update the existing table by adding it as a new column</p>\n\n    <div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">alter</span> <span class=\"k\">table</span> <span class=\"n\">olympics</span> <span class=\"k\">add</span> <span class=\"k\">column</span> <span class=\"n\">age</span> <span class=\"nb\">int</span><span class=\"p\">;</span>\n<span class=\"k\">update</span> <span class=\"n\">olympics</span> <span class=\"k\">set</span> <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"nb\">year</span> <span class=\"o\">-</span> <span class=\"n\">birth_year</span><span class=\"p\">;</span>\n</code></pre></div>    </div>\n  </li>\n</ol>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <ol>\n    <li>How old was Arnaud Boetsch during his Olympic tennis participation?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <ol>\n      <li>Arnaud Boetsch is listed on the first two lines, who turned 27 the year of their Olympics.</li>\n    </ol>\n\n  </blockquote>\n</blockquote>\n\n<p>This was a simple computation, but much more complex mathematical expressions can be computed with this tool. In the exercise below, we will compute the BMI for each athlete as an example.</p>\n\n<h2 id=\"exercises-4\">Exercises</h2>\n\n<p>BMI stands for Body Mass Index, is a metric to provide a very crude measure of how healthy your weight is. The formula to compute BMI is:</p>\n\n\\[BMI = weight / (height^2)\\]\n\n<p>(with weight in kilograms and height in meters).</p>\n\n<blockquote class=\"tip\">\n  <tip-title>BMI is problematic</tip-title>\n  <p><a href=\"https://en.wikipedia.org/wiki/Adolphe_Quetelet\">Adolphe Quetelet</a>, who invented <a href=\"https://en.wikipedia.org/wiki/Body_mass_index\">BMI</a>, was not a doctor of medicine, instead he was a Belgian astronomer, mathematician, statistician, and sociologist. His data consisted probably entirely of cisgender, white, european men and women <span class=\"citation\"><a href=\"#Eknoyan_2007\">Eknoyan 2007</a></span>.\nIn his defense, he did argue it should not be used at individual levels, however it came to be used as such due to simplicity. (See <a href=\"https://en.wikipedia.org/wiki/Body_mass_index#History\">Wikipedia’s History section</a>). BMI is a poor measure of health, especially for populations with high muscle content, and cannot be simply re-used as-is with anyone other than Anglo Saxons <span class=\"citation\"><a href=\"#Caleyachetty_2021\">Caleyachetty <i>et al.</i> 2021</a></span>, <a href=\"https://en.wikipedia.org/wiki/Body_mass_index#Limitations\">Wikipedia:Limitations</a>.</p>\n\n  <p>However as it is an easy to calculate metric, we include the calculation here.</p>\n</blockquote>\n\n<p>Let’s compute this data for all athletes and add it as a new column!</p>\n\n<blockquote class=\"question\">\n  <div class=\"box-title question-title\" id=\"question-exercise-calculating-bmi\"><i class=\"far fa-question-circle\" aria-hidden=\"true\"></i> Exercise: Calculating BMI</div>\n\n  <ol>\n    <li>How would you express this calculation in SQL?\n      <ul>\n        <li>Remember that our height is in cm, and the formula expects height in meters</li>\n        <li>And that we have null values, but we can ignore those as they will make the final calculation null as well</li>\n      </ul>\n    </li>\n    <li>What is the BMI for Arnaud Boetsch?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <div class=\"box-title solution-title\" id=\"solution-hints-5\"><button class=\"gtn-boxify-button solution\" type=\"button\" aria-controls=\"solution-hints-5\" aria-expanded=\"true\"><i class=\"far fa-eye\" aria-hidden=\"true\"></i> <span>Hints</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>\n\n    <ul>\n      <li>division is <code class=\"language-plaintext highlighter-rouge\">/</code> and multiplication is ` * ` .</li>\n      <li>Generally we cannot use <code class=\"language-plaintext highlighter-rouge\">^</code></li>\n      <li>Parentheses may be required.</li>\n      <li>use <code class=\"language-plaintext highlighter-rouge\">select(.value != null)</code> to remove nulls.</li>\n      <li>If that isn’t eough, you can check that the type is a number with <code class=\"language-plaintext highlighter-rouge\">(.value|type) == \"number\"</code> to ensure it really is a number and not e.g. a string.</li>\n      <li>remember to wrap everything in <code class=\"language-plaintext highlighter-rouge\">[...]</code> to retain the data shape</li>\n    </ul>\n\n  </blockquote>\n\n  <blockquote class=\"solution\">\n    <div class=\"box-title solution-title\" id=\"solution-answers-5\"><button class=\"gtn-boxify-button solution\" type=\"button\" aria-controls=\"solution-answers-5\" aria-expanded=\"true\"><i class=\"far fa-eye\" aria-hidden=\"true\"></i> <span>Answers</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>\n    <ol>\n      <li>\n        <p>other variations are possible:</p>\n\n        <div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">create</span> <span class=\"k\">temporary</span> <span class=\"k\">table</span> <span class=\"n\">olympics_bmi</span> <span class=\"k\">as</span> <span class=\"k\">select</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">weight</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">height</span> <span class=\"o\">/</span> <span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"n\">height</span> <span class=\"o\">/</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">bmi</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span><span class=\"p\">;</span>\n</code></pre></div>        </div>\n      </li>\n      <li>\n        <p>22.69</p>\n\n        <div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">olympics_bmi</span> <span class=\"k\">where</span> <span class=\"n\">name</span> <span class=\"k\">like</span> <span class=\"s1\">'Arnaud Boetsch'</span><span class=\"p\">;</span>\n</code></pre></div>        </div>\n      </li>\n    </ol>\n  </blockquote>\n</blockquote>\n\n<h1 id=\"find-and-replace\">Find and Replace</h1>\n\n<p>Often you may need to change the contents of a file a bit to fit the expectations of an analysis tool. For instance, our database uses <code class=\"language-plaintext highlighter-rouge\">null</code> for missing values, but other conventions included leaving the cell empty instead. Or, when working with chromosomal data, you may need to add or remove the <code class=\"language-plaintext highlighter-rouge\">chr</code> prefix from a column before using it as input to a certain tool. In such situations, we can find all occurrences of a certain pattern in our file, and replace it with another value.</p>\n\n<p>If we want to perform such a replacement on a single column in our data, we can use an update statement.</p>\n\n<p>A few of the basics of regular expression, plus some links to further resources are given in the box below:</p>\n\n<!--SNIPPET-->\n<blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-regular-expressions-101\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-regular-expressions-101\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Regular Expressions 101</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <p>Regular expressions are a standardized way of describing patterns in textual data. They can be extremely useful for tasks such as finding and replacing data. They can be a bit tricky to master, but learning even just a few of the basics can help you get the most out of Galaxy.</p>   <p><strong>Finding</strong></p>   <p>Below are just a few examples of basic expressions:</p>   <table>   <thead>     <tr>       <th>Regular expression</th>       <th>Matches</th>     </tr>   </thead>   <tbody>     <tr>       <td><code class=\"language-plaintext highlighter-rouge\">abc</code></td>       <td>an occurrence of <code class=\"language-plaintext highlighter-rouge\">abc</code> within your data</td>     </tr>     <tr>       <td><code class=\"language-plaintext highlighter-rouge\">(abc|def)</code></td>       <td><code class=\"language-plaintext highlighter-rouge\">abc</code> <em>or</em> <code class=\"language-plaintext highlighter-rouge\">def</code></td>     </tr>     <tr>       <td><code class=\"language-plaintext highlighter-rouge\">[abc]</code></td>       <td>a single character which is either <code class=\"language-plaintext highlighter-rouge\">a</code>, <code class=\"language-plaintext highlighter-rouge\">b</code>, or <code class=\"language-plaintext highlighter-rouge\">c</code></td>     </tr>     <tr>       <td><code class=\"language-plaintext highlighter-rouge\">[^abc]</code></td>       <td>a character that is NOT <code class=\"language-plaintext highlighter-rouge\">a</code>, <code class=\"language-plaintext highlighter-rouge\">b</code>, nor <code class=\"language-plaintext highlighter-rouge\">c</code></td>     </tr>     <tr>       <td><code class=\"language-plaintext highlighter-rouge\">[a-z]</code></td>       <td>any lowercase letter</td>     </tr>     <tr>       <td><code class=\"language-plaintext highlighter-rouge\">[a-zA-Z]</code></td>       <td>any letter (upper or lower case)</td>     </tr>     <tr>       <td><code class=\"language-plaintext highlighter-rouge\">[0-9]</code></td>       <td>numbers 0-9</td>     </tr>     <tr>       <td><code class=\"language-plaintext highlighter-rouge\">\\d</code></td>       <td>any digit (same as <code class=\"language-plaintext highlighter-rouge\">[0-9]</code>)</td>     </tr>     <tr>       <td><code class=\"language-plaintext highlighter-rouge\">\\D</code></td>       <td>any non-digit character</td>     </tr>     <tr>       <td><code class=\"language-plaintext highlighter-rouge\">\\w</code></td>       <td>any alphanumeric character</td>     </tr>     <tr>       <td><code class=\"language-plaintext highlighter-rouge\">\\W</code></td>       <td>any non-alphanumeric character</td>     </tr>     <tr>       <td><code class=\"language-plaintext highlighter-rouge\">\\s</code></td>       <td>any whitespace</td>     </tr>     <tr>       <td><code class=\"language-plaintext highlighter-rouge\">\\S</code></td>       <td>any non-whitespace character</td>     </tr>     <tr>       <td><code class=\"language-plaintext highlighter-rouge\">.</code></td>       <td><em>any</em> character</td>     </tr>     <tr>       <td><code class=\"language-plaintext highlighter-rouge\">\\.</code></td>       <td> </td>     </tr>     <tr>       <td><code class=\"language-plaintext highlighter-rouge\">{x,y}</code></td>       <td>between <em>x</em> and <em>y</em> repetitions</td>     </tr>     <tr>       <td><code class=\"language-plaintext highlighter-rouge\">^</code></td>       <td>the beginning of the line</td>     </tr>     <tr>       <td><code class=\"language-plaintext highlighter-rouge\">$</code></td>       <td>the end of the line</td>     </tr>   </tbody> </table>   <p><strong>Note:</strong> you see that characters such as <code class=\"language-plaintext highlighter-rouge\">*</code>, <code class=\"language-plaintext highlighter-rouge\">?</code>, <code class=\"language-plaintext highlighter-rouge\">.</code>, <code class=\"language-plaintext highlighter-rouge\">+</code> etc have a special meaning in a regular expression. If you want to match on those characters, you can escape them with a backslash. So <code class=\"language-plaintext highlighter-rouge\">\\?</code> matches the question mark character exactly.</p>   <p><strong>Examples</strong></p>   <table>   <thead>     <tr>       <th>Regular expression</th>       <th>matches</th>     </tr>   </thead>   <tbody>     <tr>       <td><code class=\"language-plaintext highlighter-rouge\">\\d{4}</code></td>       <td>4 digits (e.g. a year)</td>     </tr>     <tr>       <td><code class=\"language-plaintext highlighter-rouge\">chr\\d{1,2}</code></td>       <td><code class=\"language-plaintext highlighter-rouge\">chr</code> followed by 1 or 2 digits</td>     </tr>     <tr>       <td><code class=\"language-plaintext highlighter-rouge\">.*abc$</code></td>       <td>anything with <code class=\"language-plaintext highlighter-rouge\">abc</code> at the end of the line</td>     </tr>     <tr>       <td><code class=\"language-plaintext highlighter-rouge\">^$</code></td>       <td>empty line</td>     </tr>   </tbody> </table>   <p><strong>Replacing</strong></p>   <p>Sometimes you need to capture the exact value you matched on, in order to use it in your replacement, we do this using capture groups <code class=\"language-plaintext highlighter-rouge\">(...)</code>, which we can refer to using <code class=\"language-plaintext highlighter-rouge\">\\1</code>, <code class=\"language-plaintext highlighter-rouge\">\\2</code> etc for the first and second captured values.</p>   <table>   <thead>     <tr>       <th>Regular expression</th>       <th>Input</th>       <th>Captures</th>     </tr>   </thead>   <tbody>     <tr>       <td><code class=\"language-plaintext highlighter-rouge\">chr(\\d{1,2})</code></td>       <td><code class=\"language-plaintext highlighter-rouge\">chr14</code></td>       <td><code class=\"language-plaintext highlighter-rouge\">\\1 = 14</code></td>     </tr>     <tr>       <td><code class=\"language-plaintext highlighter-rouge\">(\\d{2}) July (\\d{4})</code></td>       <td>24 July 1984</td>       <td><code class=\"language-plaintext highlighter-rouge\">\\1 = 24</code>, <code class=\"language-plaintext highlighter-rouge\">\\2 = 1984</code></td>     </tr>   </tbody> </table>   <p>An expression like <code class=\"language-plaintext highlighter-rouge\">s/find/replacement/g</code> indicates a replacement expression, this will search (<code class=\"language-plaintext highlighter-rouge\">s</code>) for any occurrence of <code class=\"language-plaintext highlighter-rouge\">find</code>, and replace it with <code class=\"language-plaintext highlighter-rouge\">replacement</code>. It will do this globally (<code class=\"language-plaintext highlighter-rouge\">g</code>) which means it doesn’t stop after the first match.</p>   <p>Example: <code class=\"language-plaintext highlighter-rouge\">s/chr(\\d{1,2})/CHR\\1/g</code> will replace <code class=\"language-plaintext highlighter-rouge\">chr14</code> with <code class=\"language-plaintext highlighter-rouge\">CHR14</code> etc.</p>   <p>Note: In Galaxy, you are often asked to provide the find and replacement expressions separately, so you don’t have to use the <code class=\"language-plaintext highlighter-rouge\">s/../../g</code> structure.</p>   <p>There is a lot more you can do with regular expressions, and there are a few different flavours in different tools/programming languages, but these are the most important basics that will already allow you to do many of the tasks you might need in your analysis.</p>   <p><strong>Tip:</strong> <a href=\"https://regexone.com/\">RegexOne</a> is a nice interactive tutorial to learn the basics of regular expressions.</p>   <p><strong>Tip:</strong> <a href=\"https://regex101.com/\">Regex101.com</a> is a great resource for interactively testing and constructing your regular expressions, it even provides an explanation of a regular expression if you provide one.</p>   <p><strong>Tip:</strong> <a href=\"https://extendsclass.com/regex-tester.html\">Cyrilex</a> is a visual regular expression tester.</p> </blockquote>\n<p><!--END_SNIPPET--></p>\n\n<p>Let’s start with a simple example:\nOur file uses a mix of <code class=\"language-plaintext highlighter-rouge\">Athina</code> and <code class=\"language-plaintext highlighter-rouge\">Athens</code> to indicate the Capital City of Greece in the <code class=\"language-plaintext highlighter-rouge\">city</code> column.\nLet’s standardize this by replacing occurrences of <code class=\"language-plaintext highlighter-rouge\">Athina</code> with <code class=\"language-plaintext highlighter-rouge\">Athens</code>.</p>\n\n<p>Let’s start by filtering out the old spelling:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span> <span class=\"k\">where</span> <span class=\"n\">city</span> <span class=\"o\">=</span> <span class=\"s1\">'Athina'</span> <span class=\"k\">limit</span> <span class=\"mi\">30</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>Let’s try replacing it:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">update</span> <span class=\"n\">olympics</span>\n<span class=\"k\">set</span> <span class=\"n\">city</span> <span class=\"o\">=</span> <span class=\"s1\">'Athens'</span>\n<span class=\"k\">where</span> <span class=\"n\">city</span> <span class=\"o\">=</span> <span class=\"s1\">'Athina'</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>Look at the file before and after. Athlete 7 (Patrick Chila) near the top of the <code class=\"language-plaintext highlighter-rouge\">olympics.tsv</code> file, had a value of Athina in the city column. Verify that it has been changed to Athens.</p>\n\n<p>This was rather simple example, so let’s try a few more examples with slightly more complex expressions.</p>\n\n<h2 id=\"exercises-5\">Exercises</h2>\n\n<p>You may have noticed that our file has a lot of missing data. Especially for the earlier years, things like height, weight and birthday of athletes was not registered, or simply not known. In some columns you see these missing values have been replaced with an <code class=\"language-plaintext highlighter-rouge\">NA</code> (not available) value. In other columns (for example birth place), the cells have simply been left empty.</p>\n\n<p>Different tools may expect different ways of handling missing data. So you may have to change your missing data from empty to <code class=\"language-plaintext highlighter-rouge\">NA</code>, <code class=\"language-plaintext highlighter-rouge\">NaN</code>, or something else, between analysis steps</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Fill empty cells</hands-on-title>\n\n  <p>We will now replace empty cells in the <code class=\"language-plaintext highlighter-rouge\">birth_place</code> column, to use <code class=\"language-plaintext highlighter-rouge\">null</code> instead.</p>\n\n  <blockquote class=\"solution\">\n    <div class=\"box-title solution-title\" id=\"solution-hints-6\"><button class=\"gtn-boxify-button solution\" type=\"button\" aria-controls=\"solution-hints-6\" aria-expanded=\"true\"><i class=\"far fa-eye\" aria-hidden=\"true\"></i> <span>Hints</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>\n    <p>Remember that comparison to nulls is done with <code class=\"language-plaintext highlighter-rouge\">is</code> instead of <code class=\"language-plaintext highlighter-rouge\">=</code></p>\n  </blockquote>\n\n  <blockquote class=\"solution\">\n    <div class=\"box-title solution-title\" id=\"solution-answers-6\"><button class=\"gtn-boxify-button solution\" type=\"button\" aria-controls=\"solution-answers-6\" aria-expanded=\"true\"><i class=\"far fa-eye\" aria-hidden=\"true\"></i> <span>Answers</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>\n    <p>other variations are possible:</p>\n    <div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">update</span> <span class=\"n\">olympics</span> <span class=\"k\">set</span> <span class=\"n\">birth_place</span> <span class=\"o\">=</span> <span class=\"k\">null</span> <span class=\"k\">where</span> <span class=\"n\">birth_place</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">;</span>\n</code></pre></div>    </div>\n  </blockquote>\n\n</blockquote>\n\n<p>Let’s do another example, this one splitting and re-constructing strings.</p>\n\n<p>Look at the <code class=\"language-plaintext highlighter-rouge\">birth_day</code> column. It has values in a format like <code class=\"language-plaintext highlighter-rouge\">12 December</code>. Suppose we have a tool that expects this data to be in the reverse format, <code class=\"language-plaintext highlighter-rouge\">December 12</code>. We would not want to do this manually, but with sql we can make this replacement easily</p>\n\n<p>We will now change the format in birthday column from <code class=\"language-plaintext highlighter-rouge\">day month</code> to <code class=\"language-plaintext highlighter-rouge\">month day</code>, as our boss is American and requested the silly format.</p>\n\n<p>First we need to understand that sqlite does not ship a regex engine, thus we cannot use familiar regular expressions. Instead we can make use of <code class=\"language-plaintext highlighter-rouge\">instr(string, search)</code> to find the location of a substring like ` <code class=\"language-plaintext highlighter-rouge\">, identifying where the day stops and the month starts. Then we can use </code>substr(string, start)<code class=\"language-plaintext highlighter-rouge\"> and </code>substr(string, start, end)` to chop up our date string.</p>\n\n<p>In SQL, concatenation is done with <code class=\"language-plaintext highlighter-rouge\">||</code>.</p>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <ol>\n    <li>How do we captures both the day and the month?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <div class=\"box-title solution-title\" id=\"solution-hints-7\"><button class=\"gtn-boxify-button solution\" type=\"button\" aria-controls=\"solution-hints-7\" aria-expanded=\"true\"><i class=\"far fa-eye\" aria-hidden=\"true\"></i> <span>Hints</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>\n\n    <ol>\n      <li>We should use something like <code class=\"language-plaintext highlighter-rouge\">substr(birth_day, instr(birth_day, ' '))</code></li>\n    </ol>\n\n  </blockquote>\n\n  <blockquote class=\"solution\">\n    <div class=\"box-title solution-title\" id=\"solution-answers-7\"><button class=\"gtn-boxify-button solution\" type=\"button\" aria-controls=\"solution-answers-7\" aria-expanded=\"true\"><i class=\"far fa-eye\" aria-hidden=\"true\"></i> <span>Answers</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>\n\n    <div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">select</span>\n  <span class=\"n\">birth_day</span><span class=\"p\">,</span>\n  <span class=\"n\">instr</span><span class=\"p\">(</span><span class=\"n\">birth_day</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">idx</span><span class=\"p\">,</span>\n  <span class=\"n\">substr</span><span class=\"p\">(</span><span class=\"n\">birth_day</span><span class=\"p\">,</span> <span class=\"n\">instr</span><span class=\"p\">(</span><span class=\"n\">birth_day</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"k\">month</span><span class=\"p\">,</span>\n  <span class=\"n\">substr</span><span class=\"p\">(</span><span class=\"n\">birth_day</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">instr</span><span class=\"p\">(</span><span class=\"n\">birth_day</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"k\">day</span>\n<span class=\"k\">from</span> <span class=\"n\">olympics</span>\n<span class=\"k\">limit</span> <span class=\"mi\">10</span>\n</code></pre></div>    </div>\n\n    <p>We can make our final query:</p>\n\n    <div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">select</span>\n  <span class=\"n\">substr</span><span class=\"p\">(</span><span class=\"n\">birth_day</span><span class=\"p\">,</span> <span class=\"n\">instr</span><span class=\"p\">(</span><span class=\"n\">birth_day</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">))</span> <span class=\"o\">||</span> <span class=\"n\">substr</span><span class=\"p\">(</span><span class=\"n\">birth_day</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">instr</span><span class=\"p\">(</span><span class=\"n\">birth_day</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">birth_day_new</span>\n<span class=\"k\">from</span> <span class=\"n\">olympics</span>\n<span class=\"k\">limit</span> <span class=\"mi\">10</span>\n</code></pre></div>    </div>\n    <p>And then store this as a new column (using <code class=\"language-plaintext highlighter-rouge\">update</code>) or as a new table (using <code class=\"language-plaintext highlighter-rouge\">create [temporary] table</code>)</p>\n\n  </blockquote>\n</blockquote>\n\n<h1 id=\"removing-columns\">Removing Columns</h1>\n\n<p>In sqlite you cannot remove columns, it is not supported. Proper databases like Postgres and MySQL support this operation.\nInstead for sqlite you could select the columns you want to keep, create a new table from that, and then delete the original table.</p>\n\n<p>Other databases:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>alter table delete column NAME from olympics\n</code></pre></div></div>\n\n<h1 id=\"unique\">Unique</h1>\n\n<p>Sometimes, in the course of our data manipulations, we may end up with a file that has duplicate values. In order to filter these out, we can use the <code class=\"language-plaintext highlighter-rouge\">distinct</code> filter.</p>\n\n<p>Let’s say we would like to create a list of all unique athletes (id and name).</p>\n\n<p>First we will just select the <code class=\"language-plaintext highlighter-rouge\">athlete_id</code> and <code class=\"language-plaintext highlighter-rouge\">name</code> columns from our dataset</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">select</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">athlete_id</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span> <span class=\"k\">LIMIT</span> <span class=\"mi\">30</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <ol>\n    <li>Do you see duplication? Why is that?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <ol>\n      <li>Yes. For all athletes who participated more than once, the row will be identical.</li>\n    </ol>\n\n  </blockquote>\n</blockquote>\n\n<p>Now let’s remove those duplicates.</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">select</span> <span class=\"k\">distinct</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">athlete_id</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span> <span class=\"k\">limit</span> <span class=\"mi\">30</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <p>How many unique athletes do we have? Note that you cannot count multiple columns, so choose one that is correct.</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <p>94,733</p>\n\n    <div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">select</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"k\">distinct</span> <span class=\"n\">athlete_id</span><span class=\"p\">)</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span><span class=\"p\">;</span>\n</code></pre></div>    </div>\n\n  </blockquote>\n</blockquote>\n\n<h1 id=\"joining-datasets\">Joining Datasets</h1>\n\n<p>This database contains a lot of information, but we may want to add more information. For example if we had a file with information about each country (population, capital city, etc), we could join that information with our Olympics data, to get a single result with all information in every row.</p>\n\n<p>For example, if we would like to be able to group by continent, to e.g. count athletes, medals etc per continent, we will have to add a <code class=\"language-plaintext highlighter-rouge\">continent</code> column to our file. To do this we would need a second file that maps each country to the corresponding continent. This is what we will do in the next hands-on section.</p>\n\n<p>We obtained country information data from <a href=\"https://datahub.io/core/country-codes\">DataHub</a>. More information about this file can be found in the description there. It has 56 columns with a wide variety of data about each country (from country codes, to capital city, languages spoken, etc)</p>\n\n<p>It is available in the countries table.</p>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <ol>\n    <li>Which keys(s) in this file are the same as in the <code class=\"language-plaintext highlighter-rouge\">olympics.tsv</code> file?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <ol>\n      <li>Both files have a <code class=\"language-plaintext highlighter-rouge\">NOC</code> column with the 3-letter country code (<code class=\"language-plaintext highlighter-rouge\">NOC</code> stands for National Olympic Committee). However, one is lowercase.</li>\n    </ol>\n  </blockquote>\n</blockquote>\n\n<p>We would now like to take our Olympics dataset as the basis, and add columns to every row of this file with some information about the country. In order to join, we will need to have one column that is shared between the two files, on which we can match. The <code class=\"language-plaintext highlighter-rouge\">NOC</code> column is perfect for this because it is a defined standard. Both files also contain a column with the country name in it, which is also a possible candidate to use for joining, but because it is less standardised, it is safer to use the NOC column. For example, if one file uses “Netherlands”, while the other uses “The Netherlands” to indicate the same country, the joining will fail for these rows. So always make sure the columns you join on are compatible!</p>\n\n<p>We can use the join commands.</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span> <span class=\"k\">left</span> <span class=\"k\">join</span> <span class=\"n\">countries</span> <span class=\"k\">on</span> <span class=\"n\">olympics</span><span class=\"p\">.</span><span class=\"n\">noc</span> <span class=\"o\">=</span> <span class=\"n\">countries</span><span class=\"p\">.</span><span class=\"n\">NOC</span> <span class=\"k\">LIMIT</span> <span class=\"mi\">30</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <ol>\n    <li>What do you expect the output to look like? Were you right?</li>\n    <li>How many columns are in the resulting file? What about the NOC column?</li>\n    <li>What is a possible downside to this approach?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <ol>\n      <li>All the columns from the country information file are added to the end of each row of our olympics dataset</li>\n      <li>Our olympics datset had 17 columns, the country information file has 56 columns. Therefore we have 17+56=73 columns columns in our resulting file. This also means the NOC column\nwe joined on appears twice in our output.</li>\n      <li>There is a lot of data duplication in the output now. The exact same country information is added to every line of every athlete from a certain country.\nThis means much larger response size.\nIf you do not need all these columns, it could save you a lot of space to select only specific columns that you require.</li>\n    </ol>\n\n  </blockquote>\n</blockquote>\n\n<h1 id=\"concatenating\">Concatenating</h1>\n\n<p>Concatenation of two files simple means putting the contents of the two files together, one after the other. Our dataset was created in 2021, but since then we’ve had another Olympic event, the 2022 Winter Olympics in Beijing. If we have the same data for this latest Olympics, we could simply add the rows from the 2022 games to our current file with data, in order to create a single file with all data from 1896 to 2022.</p>\n\n<p>View the table <code class=\"language-plaintext highlighter-rouge\">olympics_2022</code>, does it have the same structure as our original <code class=\"language-plaintext highlighter-rouge\">olympics</code> table?</p>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <ol>\n    <li>Does the new table have the same structure?</li>\n    <li>Can we simply add the lines of the new table to the end of our existing olympics dataset?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <ol>\n      <li>Yes, this file has all the same columns, in the same order, so concatenation should be relatively straightforward.</li>\n      <li>Yes.</li>\n    </ol>\n\n  </blockquote>\n</blockquote>\n\n<p>Since this new dataset has the exact same structure (number and order of columns), we can simple add the lines from this file to the end of our existing <code class=\"language-plaintext highlighter-rouge\">olympic</code> table.\nFor this, we’ll need to use the <code class=\"language-plaintext highlighter-rouge\">union all</code> which takes two separate sql queries and unifies the results.</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span>\n<span class=\"k\">union</span> <span class=\"k\">all</span>\n<span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">olympics_2022</span>\n<span class=\"k\">LIMIT</span> <span class=\"mi\">30</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>(Note: We are limiting the outputs to ensure your browser does not crash loading all of the data.)</p>\n\n<p>Now this only works so simply because our two datasets had the same structure. If your data comes from different sources, you may have to do some additional data manipulation before you can union, e.g. to make sure the columns match, or how each file deals with missing data (empty cells, <code class=\"language-plaintext highlighter-rouge\">NA</code>, <code class=\"language-plaintext highlighter-rouge\">NaN</code> or something else).</p>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>These operations covered in the tutorial are just a few examples of some of the most common operations. There are many more available. We encourage you to look around the documentation of sqlite or your database. The more comfortable you are performing these kinds of steps, the more you can get out of SQL!</p>\n\n<h1 id=\"exercises-putting-it-all-together\">Exercises: Putting it all together!</h1>\n\n<p>This section provides a number of exercises that require you to combine two or more of the techniques you learned in this tutorial. This is a great way to practice your data manipulation skills. Full solutions are provided for every exercise (i.e. all tools and settings), but for many of these exercises there will be multiple solutions, so if you obtained the same results in a different way, that is correct too!</p>\n\n<blockquote class=\"question\">\n  <div class=\"box-title question-title\" id=\"question-exercise-1-finding-shortest-lightest-athlete\"><i class=\"far fa-question-circle\" aria-hidden=\"true\"></i> Exercise 1: Finding shortest/lightest athlete</div>\n\n  <p>If you have done exercises in the <a href=\"#sorting\">sorting</a> section, you noticed that finding the shortest athlete ever to compete was not easy,\nbecause all the rows with missing height data (<code class=\"language-plaintext highlighter-rouge\">NA</code>) in the column were sorted to the top. We need to filter out these values first, then\nperform our sort, so that our answer is on top.</p>\n\n  <ol>\n    <li>Find the shortest athlete ever to compete in the Olympics</li>\n    <li>Find the shortest athlete of the Winter Olympics</li>\n    <li>Find the lightest athlete of the <em>most recent</em> Summer Olympics</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <div class=\"box-title solution-title\" id=\"solution-hints-8\"><button class=\"gtn-boxify-button solution\" type=\"button\" aria-controls=\"solution-hints-8\" aria-expanded=\"true\"><i class=\"far fa-eye\" aria-hidden=\"true\"></i> <span>Hints</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>\n\n    <ol>\n      <li>You will need to filter out the columns with (<code class=\"language-plaintext highlighter-rouge\">NA</code>) in the height column first</li>\n      <li>You will need to filter by season as well</li>\n      <li>You will need to filter out missing data in the weight column, filter out Summer Olympics, then sort (by 2 columns)</li>\n    </ol>\n\n  </blockquote>\n\n  <blockquote class=\"solution\">\n    <div class=\"box-title solution-title\" id=\"solution-answers-8\"><button class=\"gtn-boxify-button solution\" type=\"button\" aria-controls=\"solution-answers-8\" aria-expanded=\"true\"><i class=\"far fa-eye\" aria-hidden=\"true\"></i> <span>Answers</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>\n\n    <ol>\n      <li>Lyton Mphande and  Rosario Briones were both 127 cm tall, competing in boxing and gymnastics respectively</li>\n      <li>Carolyn Krau was a 137 cm tall figure skater.</li>\n      <li>Flávia Saraiva was the lightest athlete (31kg), she was a Artistic Gymnast from Brazil.</li>\n    </ol>\n\n  </blockquote>\n\n  <blockquote class=\"solution\">\n    <div class=\"box-title solution-title\" id=\"solution-full-solution\"><button class=\"gtn-boxify-button solution\" type=\"button\" aria-controls=\"solution-full-solution\" aria-expanded=\"true\"><i class=\"far fa-eye\" aria-hidden=\"true\"></i> <span>Full solution</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>\n\n    <ol>\n      <li>\n        <p>First we filter out the NA values from the height column:</p>\n\n        <div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span> <span class=\"k\">where</span> <span class=\"n\">height</span> <span class=\"k\">is</span> <span class=\"k\">not</span> <span class=\"k\">null</span>\n</code></pre></div>        </div>\n\n        <p>Then we can sort by height, in ascending order to get the shortest athletes on top:</p>\n\n        <div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span> <span class=\"k\">where</span> <span class=\"n\">height</span> <span class=\"k\">is</span> <span class=\"k\">not</span> <span class=\"k\">null</span> <span class=\"k\">order</span> <span class=\"k\">by</span> <span class=\"n\">height</span> <span class=\"k\">desc</span> <span class=\"k\">limit</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n</code></pre></div>        </div>\n      </li>\n      <li>\n        <p>We can take the output from the first exercise, and filter for only Winter Olympics:</p>\n\n        <div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span> <span class=\"k\">where</span> <span class=\"n\">height</span> <span class=\"k\">is</span> <span class=\"k\">not</span> <span class=\"k\">null</span> <span class=\"k\">and</span> <span class=\"n\">season</span> <span class=\"o\">=</span> <span class=\"s1\">'Winter'</span> <span class=\"k\">order</span> <span class=\"k\">by</span> <span class=\"n\">height</span> <span class=\"k\">desc</span> <span class=\"k\">limit</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n</code></pre></div>        </div>\n      </li>\n      <li>\n        <p>First we filter out the NA values from the weight column:</p>\n\n        <div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">olympics</span> <span class=\"k\">where</span> <span class=\"n\">weight</span> <span class=\"k\">is</span> <span class=\"k\">not</span> <span class=\"k\">null</span> <span class=\"k\">and</span> <span class=\"n\">games</span> <span class=\"o\">=</span> <span class=\"s1\">'2020 Summer Olympics'</span> <span class=\"k\">order</span> <span class=\"k\">by</span> <span class=\"n\">weight</span> <span class=\"k\">asc</span> <span class=\"k\">limit</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n</code></pre></div>        </div>\n      </li>\n    </ol>\n\n  </blockquote>\n\n</blockquote>\n\n<p>Congratulations! You have now mastered the basics of data manipulation! There are a lot more data manipulation operations available that you may need. Please explore the tools for yourself, and check back with this tutorial often, we plan to add more sections and exercises over time!</p>\n"],"ref_slides":[],"hands_on":true,"slides":false,"mod_date":"2024-05-03 12:23:06 +0000","pub_date":"2023-06-16 10:00:11 +0000","version":9,"api":"https://training.galaxyproject.org/training-material/api/topics/data-science/tutorials/data-manipulation-olympics-sql/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"Foundations of Data Science","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial","contributors":[{"name":"Saskia Hiltemann","maintainer_contact":"gitter","email":"saskia.hiltemann@gmail.com","fediverse":"https://mstdn.science/@shiltemann","fediverse_flavor":"mastodon","bluesky":"shiltemann.bsky.social","linkedin":"shiltemann","matrix":"shiltemann:matrix.org","orcid":"0000-0003-3803-468X","joined":"2017-09","bio":"Researcher at Erasmus Medical Center","elixir_node":"nl","contact_for_training":true,"affiliations":["CINECA-Project","gallantries","erasmusmc","elixir-europe","uni-freiburg"],"location":{"country":"NL","lat":51.912,"lon":4.462},"id":"shiltemann","url":"https://training.galaxyproject.org/training-material/api/contributors/shiltemann.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/shiltemann/"},{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"},{"name":"Gallantries: Bridging Training Communities in Life Science, Environment and Health","short_name":"Gallantries","start_date":"2020-09-01","end_date":"2023-09-30","joined":"2020-09","avatar":"https://gallantries.github.io/assets/images/gallantries-logo.png","github":false,"funder":true,"url":"https://training.galaxyproject.org/training-material/api/funders/gallantries.json","funder_name":"Erasmus+ Programme","funding_id":"2020-1-NL01-KA203-064717","funding_system":"erasmusplus","funding_statement":"This project (<a href=\"https://erasmus-plus.ec.europa.eu/projects/search/details/2020-1-NL01-KA203-064717\"><code class=\"language-plaintext highlighter-rouge\">2020-1-NL01-KA203-064717</code></a>) is funded with the support of the Erasmus+ programme of the European Union. Their funding has supported a large number of tutorials within the GTN across a wide array of topics.\n<img src=\"https://gallantries.github.io/assets/images/logosbeneficaireserasmusright_en.jpg\" alt=\"eu flag with the text: with the support of the erasmus programme of the european union\" />\n<img src=\"https://www.erasmusplus.nl/assets/images/logo.png\" alt=\"erasmus plus logo\" />","members":["abretaud","bebatut","colineroyaux","fpsom","hexylena","shiltemann","yvanlebras"],"id":"gallantries","page":"https://training.galaxyproject.org/training-material/hall-of-fame/gallantries/"}]}