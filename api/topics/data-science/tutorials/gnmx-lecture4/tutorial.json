{"layout":"tutorial_hands_on","title":"Introduction to sequencing with Python (part three)","questions":["Understanding Python lists","Understanding Python dictionaries","Learnig about dynamic programming"],"objectives":["Understanding of lists and dictionaries","Learning about dynamic programming","Learning about how to translate DNA in Python"],"time_estimation":"1h","key_points":["Lists and dictionaries are key data structures in Python"],"contributions":{"authorship":["nekrut"]},"priority":4,"subtopic":"gnmx","draft":true,"notebook":{"language":"python","pyolite":true},"js_requirements":{"mathjax":997,"mermaid":false},"short_id":"T00404","url":"/topics/data-science/tutorials/gnmx-lecture4/tutorial.html","topic_name":"data-science","tutorial_name":"gnmx-lecture4","dir":"topics/data-science/tutorials/gnmx-lecture4","symlink":null,"id":"data-science/gnmx-lecture4","ref_tutorials":["<p><a href=\"https://xkcd.com/2483\"><a href=\"https://imgs.xkcd.com/comics/seven.png\" rel=\"noopener noreferrer\"><img src=\"https://imgs.xkcd.com/comics/seven.png\" alt=\"XKCD 2483. \" loading=\"lazy\" /></a></a></p>\n\n<p>Preclass prep: Chapters <a href=\"https://greenteapress.com/thinkpython2/html/thinkpython2009.html\">5</a> and <a href=\"https://greenteapress.com/thinkpython2/html/thinkpython2011.html\">7</a> from “Think Python”</p>\n\n<blockquote class=\"quote\" cite=\"https://langmead-lab.org/teaching-materials\">\n  <p>This material uses examples from notebooks developed by <a href=\"https://langmead-lab.org/teaching-materials/\">Ben Langmead</a></p>\n</blockquote>\n\n<h1 id=\"prep\">Prep</h1>\n\n<ol>\n  <li>Start <a href=\"https://mybinder.org/v2/gh/jupyterlab/jupyterlab-demo/try.jupyter.org?urlpath=lab\">JupyterLab</a></li>\n  <li>Within JupyterLab start a new Python3 notebook</li>\n  <li>Open <a href=\"http://cs1110.cs.cornell.edu/tutor/#mode=edit\">this page</a> in a new browser tab</li>\n</ol>\n\n<h1 id=\"lists-dynamic-programming-in-sequence-alignment\">Lists: Dynamic programming in sequence alignment</h1>\n\n<h2 id=\"dynamic-programming-matrix-as-a-2d-list\">Dynamic programming matrix as a 2D list</h2>\n\n<p>An excellent way to illustrate the utility of lists is to implement a dynamic programming algorithm for sequence alignment. Suppose we have two sequences that deliberately have different lengths:</p>\n\n\\[\\texttt{G C T A T A C}$\\]\n\n<p>and</p>\n\n\\[\\texttt{G C G T A T G C}$\\]\n\n<p>Let’s represent them as the following matrix where the first character \\(\\epsilon\\) represents an empty string:</p>\n\n\\[\\begin{array}{ c | c | c | c | c | c | c}\n&amp; \\epsilon &amp; G &amp; C &amp; T &amp; A &amp; T &amp; A &amp; C\\\\\n\\hline\n\\epsilon \\\\\n\\hline\nG\\\\\n\\hline\n C\\\\\n \\hline\nG\\\\\n\\hline\nT\\\\\n\\hline\nA\\\\\n \\hline\nT\\\\\n\\hline\nG\\\\\n\\hline\nC\n\\end{array}\n\\\\\n\\textbf{Note}: sequence\\ \\texttt{X}\\ is\\ vertical\\ and\\ sequence\\ \\texttt{Y}\\ is\\ horizontal.\\]\n\n<p>In this matrix, the cells are addressed as shown below. They filled in using the following logic:</p>\n\n\\[D[i,j] = min\\begin{cases} \n          \\color{green}{D[i-1,j] + 1} &amp; \\\\\n          \\color{blue}{D[i,j-1] + 1} &amp; \\\\\n          \\color{red}{D[i-1,j-1] + \\delta(x[i-1],y[j-1])}\n             \\end{cases}\\]\n\n<p>where \\(\\color{green}{green}\\) is <em>upper</em> cell, \\(\\color{blue}{blue}\\) is <em>left</em> cell, and \\(\\color{red}{red}\\) is <em>upper-left</em> cell:</p>\n\n\\[\\begin{array}{ c | c | c | c | c | c | c}\n&amp; \\epsilon &amp; G &amp; C &amp; T &amp; A &amp; T &amp; A &amp; C\\\\\n            \\hline\n          \\epsilon &amp;  &amp;  &amp;  &amp;  &amp;  &amp;  &amp;  &amp; \\\\\n          \\hline\n          G &amp; \\\\\n          \\hline\n          C &amp;  &amp; &amp; \\color{red}{D[2,2]} &amp; \\color{green}{D[2,3]}\\\\\n          \\hline\n          G &amp;  &amp; &amp; \\color{blue}{D[3,2]} &amp; D[3,3]\\\\\n          \\hline\n          T &amp; \\\\\n          \\hline\n          A &amp; \\\\\n          \\hline\n          T &amp; \\\\\n          \\hline\n          G &amp; \\\\\n          \\hline\n          C &amp; \n\\end{array}\n\\\\\n\\textbf{Note}: sequence\\ \\texttt{X}\\ is\\ vertical\\ and\\ sequence\\ \\texttt{Y}\\ is\\ horizontal.\\]\n\n<h2 id=\"initializing-the-matrix\">Initializing the matrix</h2>\n\n<p>Let’s initialize the first column and first row of the matrix. Because the distance between a string and an empty string is equal to the length of the\nstring (e.g., a distance between, say, string \\(\\texttt{TCG}\\) and an empty string is 3) this resulting matrix will look like this:</p>\n\n\\[\\begin{array}{ c | c | c | c | c | c | c}\n&amp; \\epsilon &amp; G &amp; C &amp; T &amp; A &amp; T &amp; A &amp; C\\\\\n            \\hline\n          \\epsilon &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7\\\\\n          \\hline\n          G &amp; 1\\\\\n          \\hline\n          C &amp; 2\\\\\n          \\hline\n          G &amp; 3\\\\\n          \\hline\n          T &amp; 4\\\\\n          \\hline\n          A &amp; 5\\\\\n          \\hline\n          T &amp; 6\\\\\n          \\hline\n          G &amp; 7\\\\\n          \\hline\n          C &amp; 8\n\\end{array}\n\\\\\n\\textbf{Note}: sequence\\ \\texttt{X}\\ is\\ vertical\\ and\\ sequence\\ \\texttt{Y}\\ is\\ horizontal.\\]\n\n<p>This can be achieved with the following code:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">D</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">zeros</span><span class=\"p\">((</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"n\">D</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">D</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:,</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"filling-the-matrix\">Filling the matrix</h2>\n\n<p>Now we can fill the entire matrix by using two nested loops: one iterating over \\(i\\) coordinate (sequence \\(x\\)) and the other iterating over \\(j\\) coordinate (sequence \\(y\\)):</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">delt</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n        <span class=\"n\">D</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">min</span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">delt</span><span class=\"p\">,</span> <span class=\"n\">D</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">D</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Let’s start with the cell between \\(\\texttt{G}\\) and \\(\\texttt{G}\\). Recall that:</p>\n\n\\[D[i,j] = min\\begin{cases} \n          \\color{green}{D[i-1,j] + 1} &amp; \\\\\n          \\color{blue}{D[i,j-1] + 1} &amp; \\\\\n          \\color{red}{D[i-1,j-1] + \\delta(x[i-1],y[j-1])}\n             \\end{cases}\\]\n\n<p>where \\(\\delta(x[i-1],y[j-1]) = 0\\) if \\(x[i-1] = y[j-1]\\) and \\(1\\) otherwise. And now let’s color each of the cells corresponding to each part of the above expression:</p>\n\n\\[\\begin{array}{ c | c | c | c | c | c | c}\n&amp; \\epsilon &amp; G &amp; C &amp; T &amp; A &amp; T &amp; A &amp; C\\\\\n\\hline\n\\epsilon &amp; \\color{red}0 &amp; \\color{green}1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7\\\\\n\\hline\nG &amp; \\color{blue}1\\\\\n          \\hline\n          C &amp; 2\\\\\n          \\hline\n          G &amp; 3\\\\\n          \\hline\n          T &amp; 4\\\\\n          \\hline\n          A &amp; 5\\\\\n          \\hline\n          T &amp; 6\\\\\n          \\hline\n          G &amp; 7\\\\\n          \\hline\n          C &amp; 8\n\\end{array}\n\\\\\n\\textbf{Note}: sequence\\ \\texttt{X}\\ is\\ vertical\\ and\\ sequence\\ \\texttt{Y}\\ is\\ horizontal.\\]\n\n<p>In this specific case:</p>\n\n\\[D[i,j] = min\\begin{cases} \n          \\color{green}{D[i-1,j] + 1}\\ or\\ 0+0=0 &amp; \\\\\n          \\color{blue}{D[i,j-1] + 1}\\ or\\ 1+1=2 &amp; \\\\\n          \\color{red}{D[i-1,j-1] + \\delta(x[i-1],y[j-1])}\\ or\\ 1+1=2\n             \\end{cases}\\]\n\n<p>The minimum of 0, 2, and 2 will be 0, so we are putting zero into that cell:</p>\n\n\\[\\begin{array}{ c | c | c | c | c | c | c}\n&amp; \\epsilon &amp; G &amp; C &amp; T &amp; A &amp; T &amp; A &amp; C\\\\\n\\hline\n\\epsilon &amp; \\color{red}0 &amp; \\color{green}1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7\\\\\n\\hline\nG &amp; \\color{blue}1 &amp; \\color{red}0\\\\\n          \\hline\n          C &amp; 2\\\\\n          \\hline\n          G &amp; 3\\\\\n          \\hline\n          T &amp; 4\\\\\n          \\hline\n          A &amp; 5\\\\\n          \\hline\n          T &amp; 6\\\\\n          \\hline\n          G &amp; 7\\\\\n          \\hline\n          C &amp; 8\n\\end{array}\n\\\\\n\\textbf{Note}: sequence\\ \\texttt{X}\\ is\\ vertical\\ and\\ sequence\\ \\texttt{Y}\\ is\\ horizontal.\\]\n\n<p>Using this logic we can fill the entire matrix like this:</p>\n\n\\[\\begin{array}{ c | c | c | c | c | c | c}\n&amp; \\epsilon &amp; G &amp; C &amp; T &amp; A &amp; T &amp; A &amp; C\\\\\n\\hline\n\\epsilon &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7\\\\\n\\hline\n                 G &amp; 1 &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6\\\\\n          \\hline\n                 C &amp; 2 &amp; 1 &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5\\\\\n          \\hline\n                 G &amp; 3 &amp; 2 &amp; 1 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5\\\\\n          \\hline\n                 T &amp; 4 &amp; 3 &amp; 2 &amp; 1 &amp; 2 &amp; 2 &amp; 3 &amp; 4\\\\\n          \\hline\n                 A &amp; 5 &amp; 4 &amp; 3 &amp; 2 &amp; 1 &amp; 2 &amp; 2 &amp; 3\\\\\n          \\hline\n                 T &amp; 6 &amp; 5 &amp; 4 &amp; 3 &amp; 2 &amp; 1 &amp; 2 &amp; 3\\\\\n          \\hline\n                 G &amp; 7 &amp; 6 &amp; 5 &amp; 4 &amp; 3 &amp; 2 &amp; 2 &amp; 3\\\\\n          \\hline\n                 C &amp; 8 &amp; 7 &amp; 6 &amp; 5 &amp; 4 &amp; 3 &amp; 3 &amp; \\color{red}2\n\\end{array}\n\\\\\n\\textbf{Note}: sequence\\ \\texttt{X}\\ is\\ vertical\\ and\\ sequence\\ \\texttt{Y}\\ is\\ horizontal.\\]\n\n<p>The lower rightmost cell highlighted in red is special. It contains the value for the edit distance between the two strings.\nThe following Python script implements this idea. You can see that it is essentially instantaneous:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">edDistDp</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\"> Calculate edit distance between sequences x and y using\n        matrix dynamic programming.  Return matrix and distance. </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">D</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">zeros</span><span class=\"p\">((</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n    <span class=\"n\">D</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">D</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:,</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"n\">delt</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n            <span class=\"n\">D</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">min</span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">delt</span><span class=\"p\">,</span> <span class=\"n\">D</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">D</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">D</span><span class=\"p\">,</span><span class=\"n\">D</span><span class=\"p\">[</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)]</span>\n</code></pre></div></div>\n<p>A graphical representation of the matrix between <code class=\"language-plaintext highlighter-rouge\">GCGTATGCACGC</code> and <code class=\"language-plaintext highlighter-rouge\">GCTATGCCACGC</code> looks like this:</p>\n\n<p><a href=\"https://i.imgur.com/veMfPFt.png\" rel=\"noopener noreferrer\"><img src=\"https://i.imgur.com/veMfPFt.png\" alt=\"A DP matrix with Seaborn. \" loading=\"lazy\" /></a></p>\n\n<p>This image is generated using <a href=\"https://seaborn.pydata.org/index.html\">Seaborn</a> package using matrix directly:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">sns</span><span class=\"p\">.</span><span class=\"nf\">heatmap</span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"p\">,</span><span class=\"n\">annot</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span><span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">crest</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<hr />\n\n<h1 id=\"dictionaries-translating-sequences\">Dictionaries: Translating sequences</h1>\n\n<p>Perhaps the best way to demonstrate the utility of dictionaries is by using DNA-to-Protein translation as an example.</p>\n\n<h2 id=\"using-dictionaries-to-translate-dna\">Using dictionaries to translate DNA</h2>\n\n<p>The following dictionary maps codons to corresponding amino acid translations. In this case, codon is the <em>key</em> and amino acid is the <em>value</em>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"sh\">'</span><span class=\"s\">ATA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">I</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">ATC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">I</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">ATT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">I</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">ATG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">M</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">ACA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">T</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">ACC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">T</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">ACG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">T</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">ACT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">T</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">AAC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">N</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">AAT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">N</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">AAA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">K</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">AAG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">K</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">AGC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">S</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">AGT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">S</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">AGA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">R</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">AGG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">R</span><span class=\"sh\">'</span><span class=\"p\">,</span>                \n        <span class=\"sh\">'</span><span class=\"s\">CTA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">L</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CTC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">L</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CTG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">L</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CTT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">L</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">CCA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">P</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CCC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">P</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CCG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">P</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CCT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">P</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">CAC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">H</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CAT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">H</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CAA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Q</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CAG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Q</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">CGA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">R</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CGC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">R</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CGG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">R</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CGT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">R</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">GTA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">V</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GTC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">V</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GTG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">V</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GTT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">V</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">GCA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GCC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GCG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GCT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">GAC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GAT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GAA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GAG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">GGA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">G</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GGC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">G</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GGG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">G</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GGT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">G</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">TCA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">S</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TCC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">S</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TCG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">S</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TCT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">S</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">TTC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">F</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TTT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">F</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TTA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">L</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TTG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">L</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">TAC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Y</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TAT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Y</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TAA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">_</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TAG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">_</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">TGC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TGT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TGA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">_</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TGG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">W</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Let’s generate a random DNA sequence:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">random</span>\n<span class=\"n\">seq</span> <span class=\"o\">=</span> <span class=\"sh\">\"\"</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">([</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">choice</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">atcg</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)])</span>\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">seq</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'agaccgtagcccaagtgcgtttgaatgtggctacttgggaggatttcattgcggtctgtctccgtacttgttattggtcttctttctgcattatgacgca'\n</code></pre></div></div>\n\n<p>To translate this sequence we write a code that uses a <code class=\"language-plaintext highlighter-rouge\">for</code> loop that iterates over the DNA sequence in steps of 3, creating a codon at each iteration. If the codon is less than 3 letters long, the loop is broken. The resulting amino acid is then added to the <code class=\"language-plaintext highlighter-rouge\">translation</code> string:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">translation</span> <span class=\"o\">=</span> <span class=\"sh\">\"\"</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">seq</span><span class=\"p\">),</span> <span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"n\">codon</span> <span class=\"o\">=</span> <span class=\"n\">seq</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"nf\">upper</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">codon</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"k\">break</span>\n    <span class=\"k\">if</span> <span class=\"n\">codon</span> <span class=\"ow\">in</span> <span class=\"n\">table</span><span class=\"p\">:</span>\n        <span class=\"n\">translation</span> <span class=\"o\">+=</span> <span class=\"n\">table</span><span class=\"p\">[</span><span class=\"n\">codon</span><span class=\"p\">]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">translation</span> <span class=\"o\">+=</span> <span class=\"sh\">\"</span><span class=\"s\">X</span><span class=\"sh\">\"</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Translation:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">translation</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Translation: RP_PKCV_MWLLGRISLRSVSVLVIGLLSAL_R\n</code></pre></div></div>\n\n<p>Note that the code uses the <code class=\"language-plaintext highlighter-rouge\">upper()</code> method to ensure the codon is in uppercase since the table dictionary is case-sensitive. Additionally, the code checks if the codon is in the table dictionary and if not, it adds the letter “X” to the translation. This is a common way to represent unknown or stop codons in a protein sequence.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">translation</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'RP_PKCV_MWLLGRISLRSVSVLVIGLLSAL_R'\n</code></pre></div></div>\n\n<p>Now we define a function that would perform translation so that we can reuse it later:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">translate</span><span class=\"p\">(</span><span class=\"n\">seq</span><span class=\"p\">):</span>\n    <span class=\"n\">translation</span> <span class=\"o\">=</span> <span class=\"sh\">''</span>\n    <span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"sh\">'</span><span class=\"s\">ATA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">I</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">ATC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">I</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">ATT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">I</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">ATG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">M</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">ACA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">T</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">ACC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">T</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">ACG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">T</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">ACT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">T</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">AAC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">N</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">AAT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">N</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">AAA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">K</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">AAG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">K</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">AGC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">S</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">AGT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">S</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">AGA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">R</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">AGG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">R</span><span class=\"sh\">'</span><span class=\"p\">,</span>                \n        <span class=\"sh\">'</span><span class=\"s\">CTA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">L</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CTC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">L</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CTG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">L</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CTT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">L</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">CCA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">P</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CCC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">P</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CCG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">P</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CCT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">P</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">CAC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">H</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CAT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">H</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CAA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Q</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CAG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Q</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">CGA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">R</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CGC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">R</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CGG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">R</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CGT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">R</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">GTA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">V</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GTC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">V</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GTG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">V</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GTT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">V</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">GCA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GCC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GCG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GCT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">GAC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GAT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GAA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GAG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">GGA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">G</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GGC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">G</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GGG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">G</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GGT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">G</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">TCA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">S</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TCC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">S</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TCG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">S</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TCT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">S</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">TTC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">F</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TTT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">F</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TTA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">L</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TTG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">L</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">TAC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Y</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TAT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Y</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TAA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">_</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TAG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">_</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">TGC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TGT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TGA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">_</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TGG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">W</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">seq</span><span class=\"p\">),</span> <span class=\"mi\">3</span><span class=\"p\">):</span>\n        <span class=\"n\">codon</span> <span class=\"o\">=</span> <span class=\"n\">seq</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"nf\">upper</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">codon</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"k\">break</span>\n        <span class=\"k\">if</span> <span class=\"n\">codon</span> <span class=\"ow\">in</span> <span class=\"n\">table</span><span class=\"p\">:</span>\n            <span class=\"n\">translation</span> <span class=\"o\">+=</span> <span class=\"n\">table</span><span class=\"p\">[</span><span class=\"n\">codon</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">translation</span> <span class=\"o\">+=</span> <span class=\"sh\">\"</span><span class=\"s\">X</span><span class=\"sh\">\"</span>\n    <span class=\"nf\">return</span><span class=\"p\">(</span><span class=\"n\">translation</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">translate</span><span class=\"p\">(</span><span class=\"n\">seq</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'RP_PKCV_MWLLGRISLRSVSVLVIGLLSAL_R'\n</code></pre></div></div>\n\n<h2 id=\"expanding-to-multiple-phases-frames\">Expanding to multiple phases (frames)</h2>\n\n<p>We can further modify the function by adding a <code class=\"language-plaintext highlighter-rouge\">phase</code> parameter that would allow translating in any of the three phases:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">translate_phase</span><span class=\"p\">(</span><span class=\"n\">seq</span><span class=\"p\">,</span><span class=\"n\">phase</span><span class=\"p\">):</span>\n    <span class=\"n\">translation</span> <span class=\"o\">=</span> <span class=\"sh\">''</span>\n    <span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"sh\">'</span><span class=\"s\">ATA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">I</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">ATC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">I</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">ATT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">I</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">ATG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">M</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">ACA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">T</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">ACC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">T</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">ACG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">T</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">ACT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">T</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">AAC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">N</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">AAT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">N</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">AAA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">K</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">AAG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">K</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">AGC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">S</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">AGT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">S</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">AGA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">R</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">AGG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">R</span><span class=\"sh\">'</span><span class=\"p\">,</span>                \n        <span class=\"sh\">'</span><span class=\"s\">CTA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">L</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CTC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">L</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CTG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">L</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CTT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">L</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">CCA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">P</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CCC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">P</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CCG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">P</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CCT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">P</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">CAC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">H</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CAT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">H</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CAA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Q</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CAG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Q</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">CGA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">R</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CGC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">R</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CGG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">R</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CGT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">R</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">GTA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">V</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GTC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">V</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GTG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">V</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GTT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">V</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">GCA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GCC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GCG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GCT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">GAC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GAT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GAA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GAG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">GGA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">G</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GGC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">G</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GGG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">G</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GGT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">G</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">TCA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">S</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TCC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">S</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TCG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">S</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TCT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">S</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">TTC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">F</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TTT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">F</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TTA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">L</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TTG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">L</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">TAC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Y</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TAT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Y</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TAA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">_</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TAG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">_</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">TGC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TGT</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TGA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">_</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TGG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">W</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">assert</span> <span class=\"n\">phase</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">phase</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Phase parameter can only be set to 0, 1, or 2! You specified {}</span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"n\">phase</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">phase</span><span class=\"p\">,</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">seq</span><span class=\"p\">),</span> <span class=\"mi\">3</span><span class=\"p\">):</span>\n        <span class=\"n\">codon</span> <span class=\"o\">=</span> <span class=\"n\">seq</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"nf\">upper</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">codon</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"k\">break</span>\n        <span class=\"k\">if</span> <span class=\"n\">codon</span> <span class=\"ow\">in</span> <span class=\"n\">table</span><span class=\"p\">:</span>\n            <span class=\"n\">translation</span> <span class=\"o\">+=</span> <span class=\"n\">table</span><span class=\"p\">[</span><span class=\"n\">codon</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">translation</span> <span class=\"o\">+=</span> <span class=\"sh\">\"</span><span class=\"s\">X</span><span class=\"sh\">\"</span>\n    <span class=\"nf\">return</span><span class=\"p\">(</span><span class=\"n\">translation</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">translate_phase</span><span class=\"p\">(</span><span class=\"n\">seq</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'TVAQVRLNVATWEDFIAVCLRTCYWSSFCIMT'\n</code></pre></div></div>\n\n<p>To translate in all six reading frames (three of the “+” strand and three of the “-“ strand) we need to be able to create a reverse complement of the sequence. Let’s write a simple function for that.\nThe cell below implements a function <code class=\"language-plaintext highlighter-rouge\">revcomp</code> that takes a DNA sequence as input and returns its reverse complement. It works by first reversing the sequence using the slice\nnotation <code class=\"language-plaintext highlighter-rouge\">seq[::-1]</code>, which returns the sequence in reverse order. Then, the <code class=\"language-plaintext highlighter-rouge\">translate</code> method is used with the <code class=\"language-plaintext highlighter-rouge\">str.maketrans</code> function to replace each occurrence\nof ‘a’, ‘t’, ‘g’, ‘c’, ‘A’, ‘T’, ‘G’, and ‘C’ in the reversed sequence with ‘t’, ‘a’, ‘c’, ‘g’, ‘T’, ‘A’, ‘C’, and ‘G’, respectively:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">string</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">revcomp</span><span class=\"p\">(</span><span class=\"n\">seq</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">seq</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nf\">translate</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">.</span><span class=\"nf\">maketrans</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">atgcATCG</span><span class=\"sh\">'</span><span class=\"p\">,</span><span class=\"sh\">'</span><span class=\"s\">tagcTACG</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>Now let’s use this function to create translation in all six reading frames. The cell below uses a <code class=\"language-plaintext highlighter-rouge\">for</code> loop that iterates over the range <code class=\"language-plaintext highlighter-rouge\">(0, 3)</code>, representing the different phases\n(or starting positions) of the translation. At each iteration, the <code class=\"language-plaintext highlighter-rouge\">translate_phase</code> function is called with the DNA sequence and the current phase, and the resulting protein sequence\nis appended to the <code class=\"language-plaintext highlighter-rouge\">translations</code> list along with the <code class=\"language-plaintext highlighter-rouge\">phase</code> and the <code class=\"language-plaintext highlighter-rouge\">strand</code> orientation (+ or -):</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">translations</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"n\">translations</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">((</span><span class=\"nf\">translate_phase</span><span class=\"p\">(</span><span class=\"n\">seq</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">),</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">),</span><span class=\"sh\">'</span><span class=\"s\">+</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n    <span class=\"n\">translations</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">((</span><span class=\"nf\">translate_phase</span><span class=\"p\">(</span><span class=\"nf\">revcomp</span><span class=\"p\">(</span><span class=\"n\">seq</span><span class=\"p\">),</span><span class=\"n\">i</span><span class=\"p\">),</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">),</span><span class=\"sh\">'</span><span class=\"s\">-</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">translations</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[('RP_PKCV_MWLLGRISLRSVSVLVIGLLSAL_R', '0', '+'),\n ('SLIIDKQQE_ELATDRRIKWWELRRLKASSRSL', '0', '-'),\n ('DRSPSAFECGYLGGFHCGLSPYLLLVFFLHYDA', '1', '+'),\n ('R__STNNRNKN_PQTGESNGGNYGD_KRVPVAC', '1', '-'),\n ('TVAQVRLNVATWEDFIAVCLRTCYWSSFCIMT', '2', '+'),\n ('ADNRQTTGIRTSHRQANQMVGTTEIESEFP_P', '2', '-')]\n</code></pre></div></div>\n\n<h2 id=\"finding-coordinates-of-continuous-translations\">Finding coordinates of continuous translations</h2>\n\n<p>The translation we’ve generated above contains stops (e.g., <code class=\"language-plaintext highlighter-rouge\">_</code> symbols). The actual biologically relevant protein sequences are between stops.\nWe now need to split translation strings into meaningful peptide sequences and compute their coordinates. Let’s begin by splitting a string on <code class=\"language-plaintext highlighter-rouge\">_</code> and computing the start and end positions of each peptide:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">aadsds_dsds_dsds</span><span class=\"sh\">\"</span>\n\n<span class=\"n\">split_indices</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">_</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"n\">split_indices</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">split_indices</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[6, 11]\n</code></pre></div></div>\n\n<p>The code above generates a list of split indices for a string. The list contains the indices of the characters in the string that match a specified character (in this case, the underscore <code class=\"language-plaintext highlighter-rouge\">_</code> character).</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">enumerate</code> function is used to loop over the characters in the string, and at each iteration, the current index and character are stored in the variables <code class=\"language-plaintext highlighter-rouge\">i</code> and <code class=\"language-plaintext highlighter-rouge\">char</code>, respectively.\nIf the current character matches the specified character, the index <code class=\"language-plaintext highlighter-rouge\">i</code> is appended to the <code class=\"language-plaintext highlighter-rouge\">split_indices</code> list.</p>\n\n<p>After the loop, the <code class=\"language-plaintext highlighter-rouge\">split_indices</code> list is printed to the console. For the input string <code class=\"language-plaintext highlighter-rouge\">\"aadsds_dsds_dsds\"</code>, the output would be <code class=\"language-plaintext highlighter-rouge\">[6, 11]</code>, indicating that the dashes are located at indices 6 and 11.</p>\n\n<p>But we actually need coordinates of peptides bound by <code class=\"language-plaintext highlighter-rouge\">_</code> characters. To get to this let’s first modify <code class=\"language-plaintext highlighter-rouge\">split_indices</code> by adding the beginning and end:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">aadsds_dsds_dsds</span><span class=\"sh\">\"</span>\n\n<span class=\"n\">split_indices</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">_</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"n\">split_indices</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        \n<span class=\"n\">split_indices</span><span class=\"p\">.</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">split_indices</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">split_indices</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[-1, 6, 11, 16]\n</code></pre></div></div>\n\n<p>Now, let’s convert these to ranges and also stick the peptide sequence in:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">aadsds_dsds_dsds</span><span class=\"sh\">\"</span>\n\n<span class=\"n\">split_indices</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">_</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"n\">split_indices</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        \n<span class=\"n\">split_indices</span><span class=\"p\">.</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">split_indices</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">))</span>\n\n<span class=\"n\">orfs</span> <span class=\"o\">=</span> <span class=\"n\">string</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">_</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">split_indices</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"n\">parts</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">((</span><span class=\"n\">orfs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span><span class=\"n\">split_indices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">split_indices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[('aadsds', 0, 6), ('dsds', 7, 11), ('dsds', 12, 16)]\n</code></pre></div></div>\n\n<p>Now let’s convert this to function:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">extract_coords</span><span class=\"p\">(</span><span class=\"n\">translation</span><span class=\"p\">):</span>\n    <span class=\"n\">split_indices</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">translation</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">_</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n            <span class=\"n\">split_indices</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        \n    <span class=\"n\">split_indices</span><span class=\"p\">.</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">split_indices</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">translation</span><span class=\"p\">))</span>\n\n    <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">split_indices</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">parts</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">((</span><span class=\"n\">translation</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">_</span><span class=\"sh\">'</span><span class=\"p\">)[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">split_indices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">split_indices</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n\n    <span class=\"nf\">return</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">extract_coords</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[('aadsds', 0, 6), ('dsds', 7, 11), ('dsds', 12, 16)]\n</code></pre></div></div>\n\n<p>And specify the right parameters to make it truly generic:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">extract_coords_with_annotation</span><span class=\"p\">(</span><span class=\"n\">separator</span><span class=\"p\">,</span><span class=\"n\">translation</span><span class=\"p\">,</span><span class=\"n\">phase</span><span class=\"p\">,</span><span class=\"n\">strand</span><span class=\"p\">):</span>\n    <span class=\"n\">split_indices</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">translation</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"n\">separator</span><span class=\"p\">:</span>\n            <span class=\"n\">split_indices</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        \n    <span class=\"n\">split_indices</span><span class=\"p\">.</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">split_indices</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">translation</span><span class=\"p\">))</span>\n\n    <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">split_indices</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">parts</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">((</span><span class=\"n\">translation</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"n\">separator</span><span class=\"p\">)[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">phase</span><span class=\"p\">,</span> <span class=\"n\">strand</span><span class=\"p\">,</span> <span class=\"n\">split_indices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">split_indices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n\n    <span class=\"nf\">return</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">extract_coords_with_annotation</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">_</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">0</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">+</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[('aadsds', '0', '+', 0, 6),\n ('dsds', '0', '+', 7, 11),\n ('dsds', '0', '+', 12, 16)]\n</code></pre></div></div>\n\n<h2 id=\"analyzing-all-translations-of-a-given-sequence\">Analyzing all translations of a given sequence</h2>\n\n<p>We begin by parsing the <code class=\"language-plaintext highlighter-rouge\">translations</code> list we defined above:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">all_translations</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">translations</span><span class=\"p\">:</span>\n    <span class=\"n\">all_translations</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"nf\">extract_coords_with_annotation</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">_</span><span class=\"sh\">'</span><span class=\"p\">,</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">all_translations</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[[('RP', '0', '+', 0, 2),\n  ('PKCV', '0', '+', 3, 7),\n  ('MWLLGRISLRSVSVLVIGLLSAL', '0', '+', 8, 31),\n  ('R', '0', '+', 32, 33)],\n [('SLIIDKQQE', '0', '-', 0, 9),\n  ('ELATDRRIKWWELRRLKASSRSL', '0', '-', 10, 33)],\n [('DRSPSAFECGYLGGFHCGLSPYLLLVFFLHYDA', '1', '+', 0, 33)],\n [('R', '1', '-', 0, 1),\n  ('', '1', '-', 2, 2),\n  ('STNNRNKN', '1', '-', 3, 11),\n  ('PQTGESNGGNYGD', '1', '-', 12, 25),\n  ('KRVPVAC', '1', '-', 26, 33)],\n [('TVAQVRLNVATWEDFIAVCLRTCYWSSFCIMT', '2', '+', 0, 32)],\n [('ADNRQTTGIRTSHRQANQMVGTTEIESEFP', '2', '-', 0, 30),\n  ('P', '2', '-', 31, 32)]]\n</code></pre></div></div>\n\n<p>Now the problem with this list is that it is nested. However, we need to make it flat:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">flat_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">sublist</span> <span class=\"ow\">in</span> <span class=\"n\">all_translations</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">sublist</span><span class=\"p\">:</span>\n        <span class=\"n\">flat_list</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">flat_list</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[('RP', '0', '+', 0, 2),\n ('PKCV', '0', '+', 3, 7),\n ('MWLLGRISLRSVSVLVIGLLSAL', '0', '+', 8, 31),\n ('R', '0', '+', 32, 33),\n ('SLIIDKQQE', '0', '-', 0, 9),\n ('ELATDRRIKWWELRRLKASSRSL', '0', '-', 10, 33),\n ('DRSPSAFECGYLGGFHCGLSPYLLLVFFLHYDA', '1', '+', 0, 33),\n ('R', '1', '-', 0, 1),\n ('', '1', '-', 2, 2),\n ('STNNRNKN', '1', '-', 3, 11),\n ('PQTGESNGGNYGD', '1', '-', 12, 25),\n ('KRVPVAC', '1', '-', 26, 33),\n ('TVAQVRLNVATWEDFIAVCLRTCYWSSFCIMT', '2', '+', 0, 32),\n ('ADNRQTTGIRTSHRQANQMVGTTEIESEFP', '2', '-', 0, 30),\n ('P', '2', '-', 31, 32)]\n</code></pre></div></div>\n\n<p>Now we can load the list into <code class=\"language-plaintext highlighter-rouge\">Pandas</code> and plot away:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">flat_list</span><span class=\"p\">,</span><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">aa</span><span class=\"sh\">'</span><span class=\"p\">,</span><span class=\"sh\">'</span><span class=\"s\">frame</span><span class=\"sh\">'</span><span class=\"p\">,</span><span class=\"sh\">'</span><span class=\"s\">phase</span><span class=\"sh\">'</span><span class=\"p\">,</span><span class=\"sh\">'</span><span class=\"s\">start</span><span class=\"sh\">'</span><span class=\"p\">,</span><span class=\"sh\">'</span><span class=\"s\">end</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">df</span>\n</code></pre></div></div>\n\n<div>\n<style scoped=\"\">\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>aa</th>\n      <th>frame</th>\n      <th>phase</th>\n      <th>start</th>\n      <th>end</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>RP</td>\n      <td>0</td>\n      <td>+</td>\n      <td>0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>PKCV</td>\n      <td>0</td>\n      <td>+</td>\n      <td>3</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>MWLLGRISLRSVSVLVIGLLSAL</td>\n      <td>0</td>\n      <td>+</td>\n      <td>8</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>R</td>\n      <td>0</td>\n      <td>+</td>\n      <td>32</td>\n      <td>33</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>SLIIDKQQE</td>\n      <td>0</td>\n      <td>-</td>\n      <td>0</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>ELATDRRIKWWELRRLKASSRSL</td>\n      <td>0</td>\n      <td>-</td>\n      <td>10</td>\n      <td>33</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>DRSPSAFECGYLGGFHCGLSPYLLLVFFLHYDA</td>\n      <td>1</td>\n      <td>+</td>\n      <td>0</td>\n      <td>33</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>R</td>\n      <td>1</td>\n      <td>-</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td></td>\n      <td>1</td>\n      <td>-</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>STNNRNKN</td>\n      <td>1</td>\n      <td>-</td>\n      <td>3</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>PQTGESNGGNYGD</td>\n      <td>1</td>\n      <td>-</td>\n      <td>12</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>KRVPVAC</td>\n      <td>1</td>\n      <td>-</td>\n      <td>26</td>\n      <td>33</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>TVAQVRLNVATWEDFIAVCLRTCYWSSFCIMT</td>\n      <td>2</td>\n      <td>+</td>\n      <td>0</td>\n      <td>32</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>ADNRQTTGIRTSHRQANQMVGTTEIESEFP</td>\n      <td>2</td>\n      <td>-</td>\n      <td>0</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>P</td>\n      <td>2</td>\n      <td>-</td>\n      <td>31</td>\n      <td>32</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<p>Now let’s plot it:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">altair</span> <span class=\"k\">as</span> <span class=\"n\">alt</span>\n\n<span class=\"n\">plus</span> <span class=\"o\">=</span> <span class=\"n\">alt</span><span class=\"p\">.</span><span class=\"nc\">Chart</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">phase</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"sh\">'</span><span class=\"s\">+</span><span class=\"sh\">'</span><span class=\"p\">]).</span><span class=\"nf\">mark_rect</span><span class=\"p\">().</span><span class=\"nf\">encode</span><span class=\"p\">(</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">alt</span><span class=\"p\">.</span><span class=\"nc\">X</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">start:Q</span><span class=\"sh\">'</span><span class=\"p\">),</span>\n    <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">alt</span><span class=\"p\">.</span><span class=\"nc\">X2</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">end:Q</span><span class=\"sh\">'</span><span class=\"p\">),</span>\n    <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">alt</span><span class=\"p\">.</span><span class=\"nc\">Y</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">frame:N</span><span class=\"sh\">'</span><span class=\"p\">),</span>\n    <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">frame</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"n\">tooltip</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">aa:N</span><span class=\"sh\">'</span>\n             <span class=\"p\">).</span><span class=\"nf\">properties</span><span class=\"p\">(</span>\n    <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">600</span><span class=\"p\">,</span>\n    <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"n\">minus</span> <span class=\"o\">=</span> <span class=\"n\">alt</span><span class=\"p\">.</span><span class=\"nc\">Chart</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">phase</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"sh\">'</span><span class=\"s\">-</span><span class=\"sh\">'</span><span class=\"p\">]).</span><span class=\"nf\">mark_rect</span><span class=\"p\">().</span><span class=\"nf\">encode</span><span class=\"p\">(</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">alt</span><span class=\"p\">.</span><span class=\"nc\">X</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">start:Q</span><span class=\"sh\">'</span><span class=\"p\">,</span><span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"n\">alt</span><span class=\"p\">.</span><span class=\"nc\">EncodingSortField</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">start:Q</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">descending</span><span class=\"sh\">'</span><span class=\"p\">)),</span>\n    <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">alt</span><span class=\"p\">.</span><span class=\"nc\">X2</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">end:Q</span><span class=\"sh\">'</span><span class=\"p\">),</span>\n    <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">alt</span><span class=\"p\">.</span><span class=\"nc\">Y</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">frame:N</span><span class=\"sh\">'</span><span class=\"p\">),</span>\n    <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">frame</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"n\">tooltip</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">aa:N</span><span class=\"sh\">'</span>\n             <span class=\"p\">).</span><span class=\"nf\">properties</span><span class=\"p\">(</span>\n    <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">600</span><span class=\"p\">,</span>\n    <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"n\">plus</span> <span class=\"o\">&amp;</span> <span class=\"n\">minus</span>\n</code></pre></div></div>\n\n<figure id=\"figure-1\" style=\"max-width: 90%;\"><div style=\"overflow-x: auto\"><object data=\"./images/orfs.svg\" type=\"image/svg+xml\" alt=\"ORFS. \">ORFS.</object></div><a target=\"_blank\" href=\"./images/orfs.svg\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 1</strong>:</span> Translation on plus (top) and minus (bottom) strands.</figcaption></figure>\n"],"ref_slides":[],"hands_on":true,"slides":false,"mod_date":"2024-02-19 19:03:29 +0000","pub_date":"2024-02-06 10:22:19 +0000","version":5,"api":"https://training.galaxyproject.org/training-material/api/topics/data-science/tutorials/gnmx-lecture4/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"Foundations of Data Science","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial","tags":["work-in-progress"],"contributors":[{"name":"Anton Nekrutenko","email":"anton@nekrut.org","joined":"2017-09","id":"nekrut","url":"https://training.galaxyproject.org/training-material/api/contributors/nekrut.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/nekrut/"}]}