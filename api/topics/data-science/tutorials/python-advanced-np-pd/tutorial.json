{"layout":"tutorial_hands_on","title":"Advanced Python","level":"Intermediate","zenodo_link":"https://zenodo.org/record/3477564","requirements":[{"type":"internal","topic_name":"data-science","tutorials":["python-basics"]}],"follow_up_training":[],"questions":["How can I analyze data using Python with Numpy and Pandas?"],"objectives":["Use the scientific libraries pandas and numpy to explore tabular datasets","Calculate basic statistics about datasets and columns"],"time_estimation":"3H","key_points":["Python has many libraries offering a variety of capabilities, which makes it popular for beginners, as well as, more experienced users","You can use scientific libraries like Numpy and Pandas to perform data analysis."],"subtopic":"python","contributors":[{"name":"Maria Christina Maniou","joined":"2021-09","elixir_node":"gr","affiliations":["elixir-europe"],"id":"mcmaniou","url":"https://training.galaxyproject.org/training-material/api/contributors/mcmaniou.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/mcmaniou/"},{"name":"Fotis E. Psomopoulos","email":"fpsom@certh.gr","twitter":"fopsom","matrix":"fpsom:matrix.org","orcid":"0000-0002-0222-4273","linkedin":"fpsom","joined":"2019-03","elixir_node":"gr","affiliations":["gallantries","elixir-europe"],"id":"fpsom","url":"https://training.galaxyproject.org/training-material/api/contributors/fpsom.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/fpsom/"},{"name":"The Carpentries","joined":"2021-09","id":"carpentries","url":"https://training.galaxyproject.org/training-material/api/organisations/carpentries.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/carpentries/"},{"name":"Gallantries: Bridging Training Communities in Life Science, Environment and Health","short_name":"Gallantries","start_date":"2020-09-01","end_date":"2023-09-30","joined":"2020-09","avatar":"https://gallantries.github.io/assets/images/gallantries-logo.png","github":false,"funder":true,"url":"https://training.galaxyproject.org/training-material/api/funders/gallantries.json","funder_name":"Erasmus+ Programme","funding_id":"2020-1-NL01-KA203-064717","funding_system":"erasmusplus","funding_statement":"This project (<a href=\"https://erasmus-plus.ec.europa.eu/projects/search/details/2020-1-NL01-KA203-064717\"><code class=\"language-plaintext highlighter-rouge\">2020-1-NL01-KA203-064717</code></a>) is funded with the support of the Erasmus+ programme of the European Union. Their funding has supported a large number of tutorials within the GTN across a wide array of topics.\n<img src=\"https://gallantries.github.io/assets/images/logosbeneficaireserasmusright_en.jpg\" alt=\"eu flag with the text: with the support of the erasmus programme of the european union\" />\n<img src=\"https://www.erasmusplus.nl/assets/images/logo.png\" alt=\"erasmus plus logo\" />","members":["abretaud","bebatut","colineroyaux","fpsom","hexylena","shiltemann","yvanlebras"],"id":"gallantries","page":"https://training.galaxyproject.org/training-material/hall-of-fame/gallantries/"}],"priority":2,"notebook":{"language":"python","pyolite":true},"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00081","url":"/topics/data-science/tutorials/python-advanced-np-pd/tutorial.html","topic_name":"data-science","tutorial_name":"python-advanced-np-pd","dir":"topics/data-science/tutorials/python-advanced-np-pd","symlink":null,"id":"data-science/python-advanced-np-pd","ref_tutorials":["<p>In this lesson, we will be using Python 3 with some of its most popular scientific libraries. This tutorial assumes that the reader is familiar with the fundamentals of the Python programming language, as well as, how to run Python programs using Galaxy. Otherwise, it is advised to follow the “Introduction to Python” tutorial available in the same platform. We will be using JupyterNotebook, a Python interpreter that comes with everything we need for the lesson. Please note:  JupyterNotebook is only currently available on the <a href=\"https://usegalaxy.eu/\">usegalaxy.eu</a> and <a href=\"https://usegalaxy.org/\">usegalaxy.org</a> sites.</p>\n\n<blockquote class=\"comment\">\n  <comment-title></comment-title>\n  <p>This tutorial is <strong>significantly</strong> based on <a href=\"https://carpentries.org\">the Carpentries</a> <a href=\"https://swcarpentry.github.io/python-novice-inflammation/\">Programming with Python</a> and <a href=\"https://swcarpentry.github.io/python-novice-gapminder/\">Plotting and Programming in Python</a>, which is licensed CC-BY 4.0.</p>\n\n  <p>Adaptations have been made to make this work better in a GTN/Galaxy environment.</p>\n</blockquote>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#analyze-data-using-numpy\" id=\"markdown-toc-analyze-data-using-numpy\">Analyze data using numpy</a>    <ol>\n      <li><a href=\"#process-the-data\" id=\"markdown-toc-process-the-data\">Process the data</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#use-pandas-to-work-with-dataframes\" id=\"markdown-toc-use-pandas-to-work-with-dataframes\">Use pandas to work with dataframes</a>    <ol>\n      <li><a href=\"#explore-the-data\" id=\"markdown-toc-explore-the-data\">Explore the data</a></li>\n      <li><a href=\"#select-data\" id=\"markdown-toc-select-data\">Select data</a></li>\n      <li><a href=\"#use-conditionals-to-select-data\" id=\"markdown-toc-use-conditionals-to-select-data\">Use conditionals to select data</a></li>\n      <li><a href=\"#group-by-and-analyze-the-data\" id=\"markdown-toc-group-by-and-analyze-the-data\">Group-by and analyze the data</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#conclusion\" id=\"markdown-toc-conclusion\">Conclusion</a></li>\n</ol>\n\n</blockquote>\n\n<h1 id=\"analyze-data-using-numpy\">Analyze data using numpy</h1>\n<p>NumPy is a python library and it stands for Numerical Python. In general, you should use this library when you want to perform operations and manipulate numerical data, especially if you have matrices or arrays. To tell Python that we’d like to start using NumPy, we need to import it:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n</code></pre></div></div>\n<p>A Numpy array contains one or more elements of the same type. To examine the basic functions of the library, we will create an array of random data. These data will correspond to arthritis patients’ inflammation. The rows are the individual patients, and the columns are their daily inflammation measurements. We will use the <code class=\"language-plaintext highlighter-rouge\">random.randint()</code> function. It has 4 arguments as inputs <code class=\"language-plaintext highlighter-rouge\">randint(low, high=None, size=None, dtype=int)</code>. <code class=\"language-plaintext highlighter-rouge\">low</code> nad <code class=\"language-plaintext highlighter-rouge\">high</code> specify the limits of the random number generator. <code class=\"language-plaintext highlighter-rouge\">size</code> determines the shape of the array and it can be an integer or a tuple.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">seed</span><span class=\"p\">(</span><span class=\"mi\">2021</span><span class=\"p\">)</span>  <span class=\"c1\">#create reproducible work\n</span><span class=\"n\">random_data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">randint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">,</span><span class=\"mi\">70</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>If we want to check the data have been loaded, we can print the variable’s value:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">random_data</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Now that the data are in memory, we can manipulate them. First, let’s ask what type of thing data refers to:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">random_data</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>The output tells us that data currently refers to an N-dimensional array, the functionality for which is provided by the NumPy library. These data correspond to arthritis patients’ inflammation. The rows are the individual patients, and the columns are their daily inflammation measurements.</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">type</code> function will only tell you that a variable is a NumPy array but won’t tell you the type of thing inside the array. We can find out the type of the data contained in the NumPy array.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">random_data</span><span class=\"p\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>This tells us that the NumPy array’s elements are integer numbers.</p>\n\n<p>With the following command, we can see the array’s shape:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">random_data</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>The output tells us that the data array variable contains 50 rows and 70 columns. When we created the variable <code class=\"language-plaintext highlighter-rouge\">random_data</code> to store our arthritis data, we did not only create the array; we also created information about the array, called members or attributes. This extra information describes <code class=\"language-plaintext highlighter-rouge\">random_data</code> in the same way an adjective describes a noun. <code class=\"language-plaintext highlighter-rouge\">random_data.shape</code> is an attribute of <code class=\"language-plaintext highlighter-rouge\">random_data</code> which describes the dimensions of <code class=\"language-plaintext highlighter-rouge\">random_data</code>.</p>\n\n<p>If we want to get a single number from the array, we must provide an index in square brackets after the variable name, just as we do in math when referring to an element of a matrix. Our data has two dimensions, so we will need to use two indices to refer to one specific value:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">first value in data:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">random_data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">middle value in data:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">random_data</span><span class=\"p\">[</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>The expression random_data[25, 35] accesses the element at row 25, column 35. While this expression may not surprise you, random_data[0, 0] might. Programming languages like Fortran, MATLAB and R start counting at 1 because that’s what human beings have done for thousands of years. Languages in the C family (including C++, Java, Perl, and Python) count from 0 because it represents an offset from the first value in the array (the second value is offset by one index from the first value). As a result, if we have an M×N array in Python, its indices go from 0 to M-1 on the first axis and 0 to N-1 on the second.</p>\n\n<p>Slicing data\nAn index like [25, 35] selects a single element of an array, but we can select whole sections as well, using slicing the same way as previously with the strings. For example, we can select the first ten days (columns) of values for the first four patients (rows) like this:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">random_data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>We don’t have to include the upper and lower bound on the slice. If we don’t include the lower bound, Python uses 0 by default; if we don’t include the upper, the slice runs to the end of the axis, and if we don’t include either (i.e., if we use ‘:’ on its own), the slice includes everything:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">small</span> <span class=\"o\">=</span> <span class=\"n\">random_data</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">:]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">small is:</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">small</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>The above example selects rows 0 through 2 and columns 36 through to the end of the array.</p>\n\n<h2 id=\"process-the-data\">Process the data</h2>\n<p>NumPy has several useful functions that take an array as input to perform operations on its values. If we want to find the average inflammation for all patients on all days, for example, we can ask NumPy to compute random_data’s mean value:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">mean</span><span class=\"p\">(</span><span class=\"n\">random_data</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>Let’s use three other NumPy functions to get some descriptive values about the dataset. We’ll also use multiple assignment, a convenient Python feature that will enable us to do this all in one line.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">maxval</span><span class=\"p\">,</span> <span class=\"n\">minval</span><span class=\"p\">,</span> <span class=\"n\">stdval</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"n\">random_data</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">min</span><span class=\"p\">(</span><span class=\"n\">random_data</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">std</span><span class=\"p\">(</span><span class=\"n\">random_data</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">maximum inflammation:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">maxval</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">minimum inflammation:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">minval</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">standard deviation:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">stdval</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>How did we know what functions NumPy has and how to use them? If you are working in IPython or in a Jupyter Notebook, there is an easy way to find out. If you type the name of something followed by a dot, then you can use tab completion (e.g. type <code class=\"language-plaintext highlighter-rouge\">np.</code> and then press Tab) to see a list of all functions and attributes that you can use. After selecting one, you can also add a question mark (e.g. <code class=\"language-plaintext highlighter-rouge\">np.cumprod?</code>), and IPython will return an explanation of the method! This is the same as doing <code class=\"language-plaintext highlighter-rouge\">help(np.cumprod)</code>.</p>\n\n<p>When analyzing data, though, we often want to look at variations in statistical values, such as the maximum inflammation per patient or the average inflammation per day. One way to do this is to create a new temporary array of the data we want, then ask it to do the calculation:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">patient_0</span> <span class=\"o\">=</span> <span class=\"n\">random_data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"c1\"># 0 on the first axis (rows), everything on the second (columns)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">maximum inflammation for patient 0:</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"n\">patient_0</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>What if we need the maximum inflammation for each patient over all days (as in the next diagram on the left) or the average for each day (as in the diagram on the right)? As the diagram below shows, we want to perform the operation across an axis:</p>\n\n<p><a href=\"../../images/python-advanced-np-pd/Figure8_Operations_across_axis.png\" rel=\"noopener noreferrer\"><img src=\"../../images/python-advanced-np-pd/Figure8_Operations_across_axis.png\" alt=\"A cartoon shows a data structure on the left with Patient 0 to N as rows in a table, and then Day 0 to N as columns of the same table. Below is written &quot;numpy.max(data, axis=1)&quot; which does an aggregation and finds the max per patient (so maximum daily value for each patient.) On the right a similar table is shown but written below is numpy.max(data, axis=0) and now the maximum is calculated per day, which patient had the maximum value.\" width=\"751\" height=\"477\" loading=\"lazy\" /></a></p>\n\n<p>To support this functionality, most array functions allow us to specify the axis we want to work on. If we ask for the average across axis 0 (rows in our 2D example), we get:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">mean</span><span class=\"p\">(</span><span class=\"n\">random_data</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>As a quick check, we can ask this array what its shape is:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">mean</span><span class=\"p\">(</span><span class=\"n\">random_data</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>The expression (70,) tells us we have an N×1 vector, so this is the average inflammation per day for all patients. If we average across axis 1 (columns in our 2D example), we get the average inflammation per patient across all days.:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">mean</span><span class=\"p\">(</span><span class=\"n\">random_data</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<h3 id=\"stacking-arrays\">Stacking arrays</h3>\n<p>Arrays can be concatenated and stacked on top of one another, using NumPy’s <code class=\"language-plaintext highlighter-rouge\">vstack</code> and <code class=\"language-plaintext highlighter-rouge\">hstack</code> functions for vertical and horizontal stacking, respectively.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">A = </span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n\n<span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">hstack</span><span class=\"p\">([</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">B = </span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span>\n\n<span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">vstack</span><span class=\"p\">([</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">C = </span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"remove-nan-values\">Remove NaN values</h3>\n\n<p>Sometimes there are missing values in an array, that could make it difficult to perform operations on it. To remove the <code class=\"language-plaintext highlighter-rouge\">NaN</code> you must first find their indexes and then replace them. The following example replaces them with <code class=\"language-plaintext highlighter-rouge\">0</code>.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"nf\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">NaN</span><span class=\"p\">]])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">isnan</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Selecting and stacking arrays</question-title>\n\n  <p>Write some additional code that slices the first and last columns of A, and stacks them into a 3x2 array. Make sure to print the results to verify your solution.</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p>A ‘gotcha’ with array indexing is that singleton dimensions are dropped by default. That means <code class=\"language-plaintext highlighter-rouge\">A[:, 0]</code> is a one dimensional array, which won’t stack as desired. To preserve singleton dimensions, the index itself can be a slice or array. For example, <code class=\"language-plaintext highlighter-rouge\">A[:, :1]</code> returns a two dimensional array with one singleton dimension (i.e. a column vector).</p>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>D = np.hstack((A[:, :1], A[:, -1:]))\nprint('D = ')\nprint(D)\n</code></pre></div>    </div>\n\n  </blockquote>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title>Selecting with conditionals</question-title>\n\n  <p>Given the followind array <code class=\"language-plaintext highlighter-rouge\">A</code>, keep only the elements that are lower that <code class=\"language-plaintext highlighter-rouge\">0.05</code>.</p>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>A = np.array([0.81, 0.025, 0.15, 0.67, 0.01])\n</code></pre></div>  </div>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>A = A[A&lt;0.05]\n</code></pre></div>    </div>\n\n  </blockquote>\n</blockquote>\n\n<h1 id=\"use-pandas-to-work-with-dataframes\">Use pandas to work with dataframes</h1>\n\n<p>Pandas (<span class=\"citation\"><a href=\"#reback2020pandas\">pandas development team 2020</a></span>, <span class=\"citation\"><a href=\"#mckinney-proc-scipy-2010\">Wes McKinney 2010 </a></span>) is a widely-used Python library for statistics, particularly on tabular data. If you are familiar with R dataframes, then this is the library that integrates this functionality. A dataframe is a 2-dimensional table with indexes and column names. The indexes indicate the difference in rows, while the column names indicate the difference in columns. You will see later that these two features are useful when you’re manipulating your data. Each column can contain different data types.</p>\n\n<p>Load it with import pandas as <code class=\"language-plaintext highlighter-rouge\">pd</code>. The alias <code class=\"language-plaintext highlighter-rouge\">pd</code> is commonly used for pandas.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n</code></pre></div></div>\n\n<p>There are many ways to create a pandas dataframe. For example you can use a numpy array as input.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">([[</span><span class=\"sh\">''</span><span class=\"p\">,</span><span class=\"sh\">'</span><span class=\"s\">Col1</span><span class=\"sh\">'</span><span class=\"p\">,</span><span class=\"sh\">'</span><span class=\"s\">Col2</span><span class=\"sh\">'</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Row1</span><span class=\"sh\">'</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Row2</span><span class=\"sh\">'</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:,</span><span class=\"mi\">1</span><span class=\"p\">:],</span>\n                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n                  <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">:]))</span>\n</code></pre></div></div>\n\n<p>For the purposes of this tutorial, we will use a file with the annotated differentially expressed genes that was produced in the <a href=\"/training-material/topics/transcriptomics/tutorials/ref-based/tutorial.html\">Reference-based RNA-Seq data analysis</a> tutorial</p>\n\n<p>We can read a tabular file with <code class=\"language-plaintext highlighter-rouge\">pd.read_csv</code>. The first argument is the filepath of the file to be read. The <code class=\"language-plaintext highlighter-rouge\">sep</code> argument refers to the symbol used to separate the data into different columns. You can check the rest of the arguments using the <code class=\"language-plaintext highlighter-rouge\">help()</code> function.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">read_csv</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">https://zenodo.org/record/3477564/files/annotatedDEgenes.tabular</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">sep</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"se\">\\t</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>The columns in a dataframe are the observed variables, and the rows are the observations. Pandas uses backslash <code class=\"language-plaintext highlighter-rouge\">\\</code> to show wrapped lines when output is too wide to fit the screen.</p>\n\n<h2 id=\"explore-the-data\">Explore the data</h2>\n\n<p>You can use <code class=\"language-plaintext highlighter-rouge\">index_col</code> to specify that a column’s values should be used as row headings.</p>\n\n<p>By default row indexes are numbers, but we could use a column of the data. To pass the name of the column to <code class=\"language-plaintext highlighter-rouge\">read_csv</code>, you can use its <code class=\"language-plaintext highlighter-rouge\">index_col</code> parameter. Be careful though, because the row indexes must be unique for each row.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">read_csv</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">https://zenodo.org/record/3477564/files/annotatedDEgenes.tabular</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">sep</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"se\">\\t</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">index_col</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">GeneID</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>You can use the <code class=\"language-plaintext highlighter-rouge\">DataFrame.info()</code> method to find out more about a dataframe.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p>We learn that this is a DataFrame. It consists of 130 rows and 12 columns. None of the columns contains any missing values. 6 columns contain 64-bit floating point <code class=\"language-plaintext highlighter-rouge\">float64</code> values, 2 contain 64-bit integer <code class=\"language-plaintext highlighter-rouge\">int64</code> values and 4 contain character <code class=\"language-plaintext highlighter-rouge\">object</code> values. It uses 13.2KB of memory.</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">DataFrame.columns</code> variable stores information about the dataframe’s columns.</p>\n\n<p>Note that this is an attribute, not a method. (It doesn’t have parentheses.) Called a member variable, or just member.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">columns</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>You could use <code class=\"language-plaintext highlighter-rouge\">DataFrame.T</code> to transpose a dataframe. The <code class=\"language-plaintext highlighter-rouge\">Transpose</code> (written <code class=\"language-plaintext highlighter-rouge\">.T</code>) doesn’t copy the data, just changes the program’s view of it. Like columns, it is a member variable.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>You can use <code class=\"language-plaintext highlighter-rouge\">DataFrame.describe()</code> to get summary statistics about the data. <code class=\"language-plaintext highlighter-rouge\">DataFrame.describe()</code> returns the summary statistics of only the columns that have numerical data.  All other columns are ignored, unless you use the argument <code class=\"language-plaintext highlighter-rouge\">include='all'</code>. Depending on the data type of each column, the statistics that can’t be calculated are replaced with  the value <code class=\"language-plaintext highlighter-rouge\">NaN</code>.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">describe</span><span class=\"p\">(</span><span class=\"n\">include</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">all</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Using pd.head and pd.tail</question-title>\n\n  <p>After reading the data, use <code class=\"language-plaintext highlighter-rouge\">help(data.head)</code> and <code class=\"language-plaintext highlighter-rouge\">help(data.tail)</code> to find out what <code class=\"language-plaintext highlighter-rouge\">DataFrame.head</code> and <code class=\"language-plaintext highlighter-rouge\">DataFrame.tail</code> do.\n\ta. What method call will display the first three rows of the data?\n\tb. What method call will display the last three columns of this data? (Hint: you may need to change your view of the data.)</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p>a. We can check out the first five rows of the data by executing <code class=\"language-plaintext highlighter-rouge\">data.head()</code> (allowing us to view the head of the DataFrame). We can specify the number of rows we wish to see by specifying the parameter <code class=\"language-plaintext highlighter-rouge\">n</code> in our call to <code class=\"language-plaintext highlighter-rouge\">data.head()</code>. To view the first three rows, execute:</p>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>data.head(n=3)\n</code></pre></div>    </div>\n\n    <table>\n      <thead>\n        <tr>\n          <th> </th>\n          <th>Base mean</th>\n          <th>log2(FC)</th>\n          <th>StdErr</th>\n          <th>Wald-Stats</th>\n          <th>P-value</th>\n          <th>P-adj</th>\n          <th>Chromosome</th>\n          <th>Start</th>\n          <th>End</th>\n          <th>Strand</th>\n          <th>Feature</th>\n          <th>Gene name</th>\n          <th>GeneID</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>FBgn0039155</td>\n          <td>1086.974295</td>\n          <td>-4.148450</td>\n          <td>0.134949</td>\n          <td>-30.740913</td>\n          <td>1.617357e-207</td>\n          <td>1.387207e-203</td>\n          <td>chr3R</td>\n          <td>24141394</td>\n          <td>24147490</td>\n          <td>+</td>\n          <td>protein_coding</td>\n          <td>Kal1</td>\n          <td> </td>\n        </tr>\n        <tr>\n          <td>FBgn0003360</td>\n          <td>6409.577128</td>\n          <td>-2.999777</td>\n          <td>0.104345</td>\n          <td>-28.748637</td>\n          <td>9.419922e-182</td>\n          <td>4.039734e-178</td>\n          <td>chrX</td>\n          <td>10780892</td>\n          <td>10786958</td>\n          <td>-</td>\n          <td>protein_coding</td>\n          <td>sesB</td>\n          <td> </td>\n        </tr>\n        <tr>\n          <td>FBgn0026562</td>\n          <td>65114.840564</td>\n          <td>-2.380164</td>\n          <td>0.084327</td>\n          <td>-28.225437</td>\n          <td>2.850430e-175</td>\n          <td>8.149380e-172</td>\n          <td>chr3R</td>\n          <td>26869237</td>\n          <td>26871995</td>\n          <td>-</td>\n          <td>protein_coding</td>\n          <td>BM-40-SPARC</td>\n          <td> </td>\n        </tr>\n      </tbody>\n    </table>\n\n    <p>b. To check out the last three rows, we would use the command, <code class=\"language-plaintext highlighter-rouge\">data.tail(n=3)</code>, analogous to <code class=\"language-plaintext highlighter-rouge\">head()</code> used above. However, here we want to look \tat the last three columns so we need to change our view and then use <code class=\"language-plaintext highlighter-rouge\">tail()</code>. To do so, we create a new DataFrame in which rows and columns are \tswitched:</p>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>data_flipped = data.T\n</code></pre></div>    </div>\n    <p>We can then view the last three columns of the data by viewing the last three rows of data_flipped:</p>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>data_flipped.tail(n=3)\n</code></pre></div>    </div>\n    <p>| GeneID | FBgn0039155 | FBgn0003360 | FBgn0026562 | FBgn0025111 | FBgn0029167 | FBgn0039827 | FBgn0035085 | FBgn0034736 | FBgn0264475 | FBgn0000071 | … | FBgn0264343 | FBgn0038237 | FBgn0020376 | FBgn0028939 | FBgn0036560 | FBgn0035710 | FBgn0035523 | FBgn0038261 | FBgn0039178 | FBgn0034636 |\n| —- | —- | —- | —- | —- | —- | —- | —- | —- | —- | —- | —- | —- | —- | —- | —- | —- | —- | —- | —- | —- | —- |\n| Strand | + | - | - | - | + | + | + | + | + | + | … | + | - | + | + | + | - | + | + | + | - |\n| Feature | protein_coding | protein_coding | protein_coding | protein_coding | protein_coding | protein_coding | protein_coding | protein_coding | lincRNA | protein_coding | … | protein_coding | protein_coding | protein_coding | protein_coding | protein_coding | protein_coding | protein_coding | protein_coding | protein_coding | protein_coding |\n| Gene name | Kal1 | sesB | BM-40-SPARC | Ant2 | Hml | CG1544 | CG3770 | CG6018 | CR43883 | Ama | … | CG43799 | Pde6 | Sr-CIII | NimC2 | CG5895 | SP1173 | CG1311 | CG14856 | CG6356 | CG10440 |</p>\n\n  </blockquote>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title>Saving in a csv file</question-title>\n\n  <p>As well as the <code class=\"language-plaintext highlighter-rouge\">read_csv</code> function for reading data from a file, Pandas provides a <code class=\"language-plaintext highlighter-rouge\">to_csv</code> function to write dataframes to files. Applying what you’ve learned about reading from files, write one of your dataframes to a file called <code class=\"language-plaintext highlighter-rouge\">processed.csv</code>. You can use <code class=\"language-plaintext highlighter-rouge\">help</code> to get information on how to use <code class=\"language-plaintext highlighter-rouge\">to_csv</code>.</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>data_flipped.to_csv('processed.csv')\n</code></pre></div>    </div>\n\n  </blockquote>\n</blockquote>\n\n<ul>\n  <li>Note about Pandas DataFrames/Series</li>\n</ul>\n\n<p>A <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html\">DataFrame</a> is a collection of <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html\">Series</a>; The DataFrame is the way Pandas represents a table, and Series is the data-structure Pandas use to represent a column.</p>\n\n<p>Pandas is built on top of the Numpy library, which in practice means that most of the methods defined for Numpy Arrays apply to Pandas Series/DataFrames.</p>\n\n<p>What makes Pandas so attractive is the powerful interface to access individual records of the table, proper handling of missing values, and relational-databases operations between DataFrames.</p>\n\n<h2 id=\"select-data\">Select data</h2>\n<p>To access a value at the position <code class=\"language-plaintext highlighter-rouge\">[i,j]</code> of a DataFrame, we have two options, depending on what is the meaning of i in use. Remember that a DataFrame provides an index as a way to identify the rows of the table; a row, then, has a position inside the table as well as a label, which uniquely identifies its entry in the DataFrame.</p>\n\n<p>You can use <code class=\"language-plaintext highlighter-rouge\">DataFrame.iloc[..., ...]</code> to select values by their (entry) position and basically specify location by numerical index analogously to 2D version of character selection in strings.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n</code></pre></div></div>\n<p>You can also use <code class=\"language-plaintext highlighter-rouge\">DataFrame.loc[..., ...]</code> to select values by their (entry) label and basically specify location by row name analogously to 2D version of dictionary keys.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">FBgn0039155</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Base mean</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>You can use Python’s usual slicing notation, to select all or a subset of rows and/or columns. For example, the following code selects all the columns of the row <code class=\"language-plaintext highlighter-rouge\">\"FBgn0039155\"</code>.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">FBgn0039155</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"p\">:])</span>\n</code></pre></div></div>\n\n<p>Which would get the same result as printing <code class=\"language-plaintext highlighter-rouge\">data.loc[\"FBgn0039155\"]</code> (without a second index).</p>\n\n<p>You can select multiple columns or rows using <code class=\"language-plaintext highlighter-rouge\">DataFrame.loc</code> and a named slice or <code class=\"language-plaintext highlighter-rouge\">Dataframe.iloc</code> and the numbers corresponding to the rows and columns.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">FBgn0003360</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">FBgn0029167</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Base mean</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">Wald-Stats</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">4</span> <span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<ul>\n  <li>Note the difference between the 2 outputs.</li>\n</ul>\n\n<p>When choosing or transitioning between <code class=\"language-plaintext highlighter-rouge\">loc</code> and <code class=\"language-plaintext highlighter-rouge\">iloc</code>, you should keep in mind that the two methods use slightly different indexing schemes.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">iloc</code> uses the Python stdlib indexing scheme, where the first element of the range is included and the last one excluded. So <code class=\"language-plaintext highlighter-rouge\">0:10</code> will select entries <code class=\"language-plaintext highlighter-rouge\">0,...,9</code>. <code class=\"language-plaintext highlighter-rouge\">loc</code>, meanwhile, indexes inclusively. So <code class=\"language-plaintext highlighter-rouge\">0:10</code> will select entries <code class=\"language-plaintext highlighter-rouge\">0,...,10</code>.</p>\n\n<p>This is particularly confusing when the DataFrame index is a simple numerical list, e.g. <code class=\"language-plaintext highlighter-rouge\">0,...,1000</code>. In this case <code class=\"language-plaintext highlighter-rouge\">df.iloc[0:1000]</code> will return 1000 entries, while <code class=\"language-plaintext highlighter-rouge\">df.loc[0:1000]</code> return 1001 of them! To get 1000 elements using <code class=\"language-plaintext highlighter-rouge\">loc</code>, you will need to go one lower and ask for <code class=\"language-plaintext highlighter-rouge\">df.loc[0:999]</code>.</p>\n\n<p>The result of slicing is a new dataframe and can be used in further operations. All the statistical operators that work on entire dataframes work the same way on slices. E.g., calculate max of a slice.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">FBgn0003360</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">FBgn0029167</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Base mean</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">max</span><span class=\"p\">())</span>\n</code></pre></div></div>\n\n<h2 id=\"use-conditionals-to-select-data\">Use conditionals to select data</h2>\n\n<p>You can use conditionals to select data. A comparison is applied element by element and returns a similarly-shaped dataframe of <code class=\"language-plaintext highlighter-rouge\">True</code> and <code class=\"language-plaintext highlighter-rouge\">False</code>. The last one can be used as a mask to subset the original dataframe. The following example creates a new dataframe consisting only of the columns ‘P-adj’ and ‘Gene name’, then keeps the rows that comply with the expression <code class=\"language-plaintext highlighter-rouge\">'P-adj' &lt; 0.000005</code></p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">subset</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">loc</span><span class=\"p\">[:,</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">P-adj</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Gene name</span><span class=\"sh\">'</span><span class=\"p\">]]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">subset</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">subset</span><span class=\"p\">.</span><span class=\"n\">loc</span><span class=\"p\">[:,</span> <span class=\"sh\">'</span><span class=\"s\">P-adj</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"mf\">0.000005</span>\n<span class=\"n\">new_data</span> <span class=\"o\">=</span> <span class=\"n\">subset</span><span class=\"p\">[</span><span class=\"n\">mask</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">new_data</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>If we have not had specified the column, that the expression should be applied to, then it would have been applied to the entire dataframe. But the dataframe contains different type of data. In that case, an error would occur.</p>\n\n<p>Consider the following example of a dataframe consisting only of numerical data. The expression and the mask would be normally applied to the data and the mask would return <code class=\"language-plaintext highlighter-rouge\">NaN</code> for the data that don’t comply with the expression.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">subset</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">loc</span><span class=\"p\">[:,</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">StdErr</span><span class=\"sh\">'</span><span class=\"p\">,</span>\t<span class=\"sh\">'</span><span class=\"s\">Wald-Stats</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">P-value</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">P-adj</span><span class=\"sh\">'</span><span class=\"p\">]]</span>\n<span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">subset</span> <span class=\"o\">&lt;</span> <span class=\"mf\">0.05</span>\n<span class=\"n\">new_data</span> <span class=\"o\">=</span> <span class=\"n\">subset</span><span class=\"p\">[</span><span class=\"n\">mask</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">new_data</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>This is very useful because NaNs are ignored by operations like max, min, average, etc.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">new_data</span><span class=\"p\">.</span><span class=\"nf\">describe</span><span class=\"p\">())</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Manipulating dataframes</question-title>\n\n  <p>Explain what each line in the following short program does: what is in first, second, etc.?</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>first = pd.read_csv(\"https://zenodo.org/record/3477564/files/annotatedDEgenes.tabular\", sep = \"\\t\", index_col = 'GeneID')\nsecond = first[first['log2(FC)'] &gt; 0 ]\nthird = second.drop('FBgn0025111')\nfourth = third.drop('StdErr', axis = 1)\nfourth.to_csv('result.csv')\n</code></pre></div>  </div>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p>Let’s go through this piece of code line by line.</p>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>first = pd.read_csv(\"https://zenodo.org/record/3477564/files/annotatedDEgenes.tabular\", sep = \"\\t\", index_col = 'GeneID')\n</code></pre></div>    </div>\n    <p>This line loads the data into a dataframe called first. The <code class=\"language-plaintext highlighter-rouge\">index_col='GeneID'</code> parameter selects which column to use as the row labels in the dataframe.</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>second = first[first['log2(FC)'] &gt; 0 ]\n</code></pre></div>    </div>\n\n    <p>This line makes a selection: only those rows of first for which the ‘log2(FC)’ column contains a positive value are extracted. Notice how the Boolean expression inside the brackets is used to select only those rows where the expression is true.</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>third = second.drop('FBgn0025111')\n</code></pre></div>    </div>\n\n    <p>As the syntax suggests, this line drops the row from second where the label is ‘FBgn0025111’. The resulting dataframe third has one row less than the original dataframe second.</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>fourth = third.drop('StdErr', axis = 1)\n</code></pre></div>    </div>\n\n    <p>Again we apply the drop function, but in this case we are dropping not a row but a whole column. To accomplish this, we need to specify also the axis parameter.</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>fourth.to_csv('result.csv')\n</code></pre></div>    </div>\n\n    <p>The final step is to write the data that we have been working on to a csv file. Pandas makes this easy with the <code class=\"language-plaintext highlighter-rouge\">to_csv()</code> function. The only required argument to the function is the filename. Note that the file will be written in the directory from which you started the Jupyter or Python session.</p>\n\n  </blockquote>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title>Finding min-max indexes</question-title>\n\n  <p>Explain in simple terms what <code class=\"language-plaintext highlighter-rouge\">idxmin</code> and <code class=\"language-plaintext highlighter-rouge\">idxmax</code> do in the short program below. When would you use these methods?</p>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>data = pd.read_csv(\"https://zenodo.org/record/3477564/files/annotatedDEgenes.tabular\", sep = \"\\t\", index_col = 'GeneID')\n\nprint(data['Base mean'].idxmin())\nprint(data['Base mean'].idxmax())\n</code></pre></div>  </div>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p><code class=\"language-plaintext highlighter-rouge\">idxmin</code> will return the index value corresponding to the minimum; idxmax will do the same for the maximum value.</p>\n\n    <p>You can use these functions whenever you want to get the row index of the minimum/maximum value and not the actual minimum/maximum value.</p>\n\n    <p>Output:\nFBgn0063667\nFBgn0026562</p>\n\n  </blockquote>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title>Selecting with conditionals</question-title>\n\n  <p>Assume Pandas has been imported and the previous dataset has been loaded. Write an expression to select each of the following:\na. P-value of each gene\nb. all the information of gene <code class=\"language-plaintext highlighter-rouge\">FBgn0039178</code>\nc. the information of all genes that belong to chromosome <code class=\"language-plaintext highlighter-rouge\">chr3R</code></p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p>a. <code class=\"language-plaintext highlighter-rouge\">data['P-value']</code>\nb.<code class=\"language-plaintext highlighter-rouge\">data.loc['FBgn0039178', :]</code>\nc. <code class=\"language-plaintext highlighter-rouge\">data[data['Chromosome'] == 'chr3R']</code></p>\n\n  </blockquote>\n</blockquote>\n\n<h2 id=\"group-by-and-analyze-the-data\">Group-by and analyze the data</h2>\n\n<p>Many data analysis tasks can be approached using the “split-apply-combine” paradigm: split the data into groups, apply some analysis to each group, and then combine the results.</p>\n\n<p>Pandas makes this very easy through the use of the <code class=\"language-plaintext highlighter-rouge\">groupby()</code> method, which splits the data into groups. When the data is grouped in this way, the aggregate method <code class=\"language-plaintext highlighter-rouge\">agg()</code> can be used to apply an aggregating or summary function to each group.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">summarised_data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">groupby</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Chromosome</span><span class=\"sh\">'</span><span class=\"p\">).</span><span class=\"nf\">agg</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">Base mean</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">first</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n                             <span class=\"sh\">'</span><span class=\"s\">log2(FC)</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">max</span><span class=\"sh\">'</span><span class=\"p\">})</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">summarised_data</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>There are a couple of things that should be noted. The <code class=\"language-plaintext highlighter-rouge\">agg()</code> method accepts a dictionary as input that specifies the function to be applied to each column. The output is a new dataframe, that each row corresponds to one group. The output dataframe uses the grouping column as index. We could change the last one by simply using the <code class=\"language-plaintext highlighter-rouge\">reset_index()</code> method.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">summarised_data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">groupby</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Chromosome</span><span class=\"sh\">'</span><span class=\"p\">).</span><span class=\"nf\">agg</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">Base mean</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">first</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n                                                  <span class=\"sh\">'</span><span class=\"s\">log2(FC)</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">max</span><span class=\"sh\">'</span><span class=\"p\">}).</span><span class=\"nf\">reset_index</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">summarised_data</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Finding the max of each group</question-title>\n\n  <p>Using the same dataset, try to find the longest genes in each chromosome.</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>data['Gene Length'] = data['End'] - data['Start']\ndata.groupby('Chromosome').agg(max_length = ('Gene Length', 'max'))\n</code></pre></div>    </div>\n\n  </blockquote>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title>Grouping with multiple variables</question-title>\n\n  <p>Using the same dataset, try to find how many genes are found on each strand of each chromosome.</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p>You can group the data according to more than one column.</p>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>data.groupby(['Chromosome', 'Strand']).size()\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>This tutorial aims to serve as an introduction to data analysis using the Python programming language. We hope you feel more confident in Python!</p>\n"],"ref_slides":[],"video_library":{"tutorial":null,"slides":null,"demo":null,"both":null,"session":null},"hands_on":true,"slides":false,"mod_date":"2023-10-23 09:44:54 +0000","pub_date":"2021-11-08 15:53:26 +0000","version":14,"api":"https://training.galaxyproject.org/training-material/api/topics/data-science/tutorials/python-advanced-np-pd/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"Foundations of Data Science","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial"}