{"layout":"tutorial_hands_on","title":"dplyr & tidyverse for data processing","level":"Advanced","zenodo_link":null,"requirements":[{"type":"internal","topic_name":"data-science","tutorials":["r-basics","r-advanced"]}],"follow_up_training":[],"questions":["How can I load tabular data into R?","How can I slice and dice the data to ask questions?"],"objectives":["Read data with the built-in `read.csv`","Read data with dplyr's `read_csv`","Use dplyr and tidyverse functions to cleanup data."],"time_estimation":"1H","key_points":["Dplyr and tidyverse make it a lot easier to process data","The functions for selecting data are a lot easier to understand than R's built in alternatives."],"contributors":[{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"},{"name":"Gallantries: Bridging Training Communities in Life Science, Environment and Health","short_name":"Gallantries","start_date":"2020-09-01","end_date":"2023-09-30","joined":"2020-09","avatar":"https://gallantries.github.io/assets/images/gallantries-logo.png","github":false,"funder":true,"url":"https://training.galaxyproject.org/training-material/api/funders/gallantries.json","funder_name":"Erasmus+ Programme","funding_id":"2020-1-NL01-KA203-064717","funding_system":"erasmusplus","funding_statement":"This project (<a href=\"https://erasmus-plus.ec.europa.eu/projects/search/details/2020-1-NL01-KA203-064717\"><code class=\"language-plaintext highlighter-rouge\">2020-1-NL01-KA203-064717</code></a>) is funded with the support of the Erasmus+ programme of the European Union. Their funding has supported a large number of tutorials within the GTN across a wide array of topics.\n<img src=\"https://gallantries.github.io/assets/images/logosbeneficaireserasmusright_en.jpg\" alt=\"eu flag with the text: with the support of the erasmus programme of the european union\" />\n<img src=\"https://www.erasmusplus.nl/assets/images/logo.png\" alt=\"erasmus plus logo\" />","members":["abretaud","bebatut","colineroyaux","fpsom","hexylena","shiltemann","yvanlebras"],"id":"gallantries","page":"https://training.galaxyproject.org/training-material/hall-of-fame/gallantries/"},{"name":"Avans Hogeschool","joined":"2020-11","url":"https://training.galaxyproject.org/training-material/api/organisations/avans-atgm.json","avatar":"/training-material/shared/images/logo-avans.png","members":["bazante1"],"former_members":["dirowa","hexylena"],"id":"avans-atgm","page":"https://training.galaxyproject.org/training-material/hall-of-fame/avans-atgm/"}],"subtopic":"r","notebook":{"language":"r"},"priority":3,"tags":["R","rmarkdown-notebook","jupyter-notebook"],"license":"MIT","js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00104","url":"/topics/data-science/tutorials/r-dplyr/tutorial.html","topic_name":"data-science","tutorial_name":"r-dplyr","dir":"topics/data-science/tutorials/r-dplyr","symlink":null,"id":"data-science/r-dplyr","ref_tutorials":["<p>dplyr (<span class=\"citation\"><a href=\"#r-dplyr\">Wickham <i>et al.</i> 2021</a></span>) is a powerful R-package to transform and summarize tabular data with rows and columns. It is part of a group of packages (including <code class=\"language-plaintext highlighter-rouge\">ggplot2</code>) called the <code class=\"language-plaintext highlighter-rouge\">tidyverse</code> (<span class=\"citation\"><a href=\"#r-tidyverse\">Wickham <i>et al.</i> 2019</a></span>), a collection of packages for data processing and visualisation. For further exploration please see the dplyr package vignette: <a href=\"https://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html\">Introduction to dplyr</a></p>\n\n<blockquote class=\"comment\">\n  <comment-title></comment-title>\n\n  <p>This tutorial is <strong>significantly</strong> based on <a href=\"https://github.com/genomicsclass/labs/blob/master/intro/dplyr_tutorial.Rmd\">GenomicsClass/labs</a>.</p>\n\n</blockquote>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#why-is-it-useful\" id=\"markdown-toc-why-is-it-useful\">Why Is It Useful?</a></li>\n  <li><a href=\"#how-does-it-compare-to-using-base-functions-r\" id=\"markdown-toc-how-does-it-compare-to-using-base-functions-r\">How Does It Compare To Using Base Functions R?</a></li>\n  <li><a href=\"#how-do-i-get-dplyr\" id=\"markdown-toc-how-do-i-get-dplyr\">How Do I Get dplyr?</a></li>\n  <li><a href=\"#data-mammals-sleep\" id=\"markdown-toc-data-mammals-sleep\">Data: Mammals Sleep</a></li>\n  <li><a href=\"#important-dplyr-verbs-to-remember\" id=\"markdown-toc-important-dplyr-verbs-to-remember\">Important dplyr Verbs To Remember</a></li>\n  <li><a href=\"#dplyr-verbs-in-action\" id=\"markdown-toc-dplyr-verbs-in-action\">dplyr Verbs In Action</a>    <ol>\n      <li><a href=\"#pipe-operator-\" id=\"markdown-toc-pipe-operator-\">Pipe Operator: %&gt;%</a></li>\n      <li><a href=\"#selecting-columns-using-select\" id=\"markdown-toc-selecting-columns-using-select\">Selecting Columns Using <code class=\"language-plaintext highlighter-rouge\">select()</code></a></li>\n      <li><a href=\"#selecting-rows-using-filter\" id=\"markdown-toc-selecting-rows-using-filter\">Selecting Rows Using <code class=\"language-plaintext highlighter-rouge\">filter()</code></a></li>\n      <li><a href=\"#arrange-or-re-order-rows-using-arrange\" id=\"markdown-toc-arrange-or-re-order-rows-using-arrange\">Arrange Or Re-order Rows Using <code class=\"language-plaintext highlighter-rouge\">arrange()</code></a></li>\n      <li><a href=\"#create-new-columns-using-mutate\" id=\"markdown-toc-create-new-columns-using-mutate\">Create New Columns Using <code class=\"language-plaintext highlighter-rouge\">mutate()</code></a></li>\n      <li><a href=\"#create-summaries-of-the-tibble-using-summarise\" id=\"markdown-toc-create-summaries-of-the-tibble-using-summarise\">Create summaries of the tibble using <code class=\"language-plaintext highlighter-rouge\">summarise()</code></a></li>\n      <li><a href=\"#group-operations-using-group_by\" id=\"markdown-toc-group-operations-using-group_by\">Group operations using <code class=\"language-plaintext highlighter-rouge\">group_by()</code></a></li>\n      <li><a href=\"#ggplot2\" id=\"markdown-toc-ggplot2\">ggplot2</a></li>\n    </ol>\n  </li>\n</ol>\n\n</blockquote>\n\n<h2 id=\"why-is-it-useful\">Why Is It Useful?</h2>\n\n<p>The package contains a set of functions (or “verbs”) that perform common data manipulation operations such as filtering for rows, selecting specific columns, re-ordering rows, adding new columns and summarizing data.</p>\n\n<p>In addition, dplyr contains a useful function to perform another common task which is the “split-apply-combine” concept.  We will discuss that in a little bit.</p>\n\n<h2 id=\"how-does-it-compare-to-using-base-functions-r\">How Does It Compare To Using Base Functions R?</h2>\n\n<p>If you are familiar with R, you are probably familiar with base R functions such as split(), subset(), apply(), sapply(), lapply(), tapply() and aggregate(). Compared to base functions in R, the functions in dplyr are easier to work with, are more consistent in the syntax and are targeted for data analysis around tibbles, instead of just vectors.</p>\n\n<h2 id=\"how-do-i-get-dplyr\">How Do I Get dplyr?</h2>\n\n<p>To load the required packages:</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"n\">tidyverse</span><span class=\"p\">)</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<blockquote class=\"tip\">\n  <tip-title>Package not found?</tip-title>\n  <p>Remember that you can install new packages by running</p>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>install.packages(\"tidyverse\")\n</code></pre></div>  </div>\n  <p>Or by using the Install button on the RStudio Packages interface</p>\n</blockquote>\n\n<p>Here we’ve imported the entire suite of tidyverse packages. We’ll specifically be using:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Package</th>\n      <th>Use</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">readr</code></td>\n      <td>This provides the <code class=\"language-plaintext highlighter-rouge\">read_csv</code> function which is identical to <code class=\"language-plaintext highlighter-rouge\">read.csv</code> except it returns a tibble</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">dplyr</code></td>\n      <td>All of the useful functions we’ll be covering are part of dplyr</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">magrittr</code></td>\n      <td>A dependency of <code class=\"language-plaintext highlighter-rouge\">dplyr</code> that provides the <code class=\"language-plaintext highlighter-rouge\">%&gt;%</code> operator</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">ggplot2</code></td>\n      <td>The famous plotting library which we’ll use at the very end to plot our aggregated data.</td>\n    </tr>\n  </tbody>\n</table>\n\n<h1 id=\"data-mammals-sleep\">Data: Mammals Sleep</h1>\n\n<p>The msleep (mammals sleep) data set contains the sleep times and weights for a set of mammals. This data set contains 83 rows and 11 variables.</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">url</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"s2\">\"https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/msleep_ggplot2.csv\"</span><span class=\"w\">\n</span><span class=\"n\">msleep</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"n\">msleep</span><span class=\"p\">)</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>The columns (in order) correspond to the following:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>column name</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>name</td>\n      <td>common name</td>\n    </tr>\n    <tr>\n      <td>genus</td>\n      <td>taxonomic rank</td>\n    </tr>\n    <tr>\n      <td>vore</td>\n      <td>carnivore, omnivore or herbivore?</td>\n    </tr>\n    <tr>\n      <td>order</td>\n      <td>taxonomic rank</td>\n    </tr>\n    <tr>\n      <td>conservation</td>\n      <td>the conservation status of the mammal</td>\n    </tr>\n    <tr>\n      <td>sleep_total</td>\n      <td>total amount of sleep, in hours</td>\n    </tr>\n    <tr>\n      <td>sleep_rem</td>\n      <td>rem sleep, in hours</td>\n    </tr>\n    <tr>\n      <td>sleep_cycle</td>\n      <td>length of sleep cycle, in hours</td>\n    </tr>\n    <tr>\n      <td>awake</td>\n      <td>amount of time spent awake, in hours</td>\n    </tr>\n    <tr>\n      <td>brainwt</td>\n      <td>brain weight in kilograms</td>\n    </tr>\n    <tr>\n      <td>bodywt</td>\n      <td>body weight in kilograms</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Compare the above output with the more traditional <code class=\"language-plaintext highlighter-rouge\">read.csv</code> that is built into R</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">dfmsleep</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">read.csv</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"n\">dfmsleep</span><span class=\"p\">)</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>This is a “data frame” and was the basis of data processing for years in R, and is still quite commonly used! But notice how <code class=\"language-plaintext highlighter-rouge\">dplyr</code> has a much prettier and more consice output. This is what is called a <code class=\"language-plaintext highlighter-rouge\">tibble</code> (like a table). We can immediately see metadata about the table, the separator that was guessed for us, what datatypes each column was (dbl or chr), how many rows and columns we have, etc. The <code class=\"language-plaintext highlighter-rouge\">tibble</code> works basically exactly like a data frame except it has a lot of features to integrate nicely with the <code class=\"language-plaintext highlighter-rouge\">dplyr</code> package.</p>\n\n<p><em>That said</em>, all of the functions below you will learn about work equally well with data frames and tibbles, but tibbles will save you from filling your screen with hundreds of rows by automatically truncating large tables unless you specifically request otherwise.</p>\n\n<h1 id=\"important-dplyr-verbs-to-remember\">Important dplyr Verbs To Remember</h1>\n\n<table>\n  <thead>\n    <tr>\n      <th>dplyr verbs</th>\n      <th>Description</th>\n      <th>SQL Equivalent Operation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">select()</code></td>\n      <td>select columns</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">SELECT</code></td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">filter()</code></td>\n      <td>filter rows</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">WHERE</code></td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">arrange()</code></td>\n      <td>re-order or arrange rows</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">ORDER BY</code></td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">mutate()</code></td>\n      <td>create new columns</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">SELECT x, x*2 ...</code></td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">summarise()</code></td>\n      <td>summarise values</td>\n      <td>n/a</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">group_by()</code></td>\n      <td>allows for group operations in the “split-apply-combine” concept</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">GROUP BY</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<h1 id=\"dplyr-verbs-in-action\">dplyr Verbs In Action</h1>\n\n<p>The two most basic functions are <code class=\"language-plaintext highlighter-rouge\">select()</code> and <code class=\"language-plaintext highlighter-rouge\">filter()</code>, which selects columns and filters rows respectively.</p>\n\n<h2 id=\"pipe-operator-\">Pipe Operator: %&gt;%</h2>\n\n<p>Before we go any further, let’s introduce the pipe operator: %&gt;%. dplyr imports this operator from another package (magrittr).This operator allows you to pipe the output from one function to the input of another function. Instead of nesting functions (reading from the inside to the outside), the idea of piping is to read the functions from left to right. This is a lot more like how you would write a <code class=\"language-plaintext highlighter-rouge\">bash</code> data processing pipeline and can be a lot more readable and intuitive than the nested version.</p>\n\n<p>Here’s is the more old fashioned way of writing the equivalent code:</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">msleep</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sleep_total</span><span class=\"p\">))</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>Now in this case, we will pipe the msleep tibble to the function that will select two columns (name and sleep_total) and then pipe the new tibble to the function <code class=\"language-plaintext highlighter-rouge\">head()</code>, which will return the head of the new tibble.</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">msleep</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sleep_total</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"m\">2</span><span class=\"p\">)</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n  <p>How would you rewrite the following code to use the pipe operator?</p>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>prcomp(tail(read.csv(\"file.csv\"), 10))\n</code></pre></div>  </div>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <p>Just read from inside to outside, starting with the innermost <code class=\"language-plaintext highlighter-rouge\">()</code> and use <code class=\"language-plaintext highlighter-rouge\">%&gt;%</code> between each step.</p>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>read.csv(\"file.csv\") %&gt;% tail(10) %&gt;% prcomp()\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<h2 id=\"selecting-columns-using-select\">Selecting Columns Using <code class=\"language-plaintext highlighter-rouge\">select()</code></h2>\n\n<p>Select a set of columns: the name and the sleep_total columns.</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">msleep</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sleep_total</span><span class=\"p\">)</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>To select all the columns <em>except</em> a specific column, use the “-“ (subtraction) operator (also known as negative indexing):</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">msleep</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>To select a range of columns by name, use the “:” (colon) operator:</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">msleep</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">order</span><span class=\"p\">)</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>To select all columns that start with the character string “sl”, use the function <code class=\"language-plaintext highlighter-rouge\">starts_with()</code>:</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">msleep</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">starts_with</span><span class=\"p\">(</span><span class=\"s2\">\"sl\"</span><span class=\"p\">))</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>Some additional options to select columns based on a specific criteria include:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Function</th>\n      <th>Usage</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">ends_with()</code></td>\n      <td>Select columns that end with a character string</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">contains()</code></td>\n      <td>Select columns that contain a character string</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">matches()</code></td>\n      <td>Select columns that match a regular expression</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">one_of()</code></td>\n      <td>Select column names that are from a group of names</td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 id=\"selecting-rows-using-filter\">Selecting Rows Using <code class=\"language-plaintext highlighter-rouge\">filter()</code></h2>\n\n<p>Filter the rows for mammals that sleep a total of more than 16 hours.</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">msleep</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\"> </span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">sleep_total</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"m\">16</span><span class=\"p\">)</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>Filter the rows for mammals that sleep a total of more than 16 hours <em>and</em> have a body weight of greater than 1 kilogram.</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">msleep</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\"> </span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">sleep_total</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"m\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bodywt</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">)</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>Filter the rows for mammals in the Perissodactyla and Primates taxonomic order</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">msleep</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\"> </span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"w\"> </span><span class=\"o\">%in%</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"s2\">\"Perissodactyla\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"Primates\"</span><span class=\"p\">))</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>You can use the boolean operators (e.g. &gt;, &lt;, &gt;=, &lt;=, !=, %in%) to create the logical tests.</p>\n\n<h2 id=\"arrange-or-re-order-rows-using-arrange\">Arrange Or Re-order Rows Using <code class=\"language-plaintext highlighter-rouge\">arrange()</code></h2>\n\n<p>To arrange (or re-order) rows by a particular column, such as the taxonomic order, list the name of the column you want to arrange the rows by:</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">msleep</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\"> </span><span class=\"n\">arrange</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">genus</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>Now we will select three columns from msleep, arrange the rows by the taxonomic order and then arrange the rows by sleep_total. Finally, show the final tibble:</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">msleep</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\">\n    </span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">order</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sleep_total</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\">\n    </span><span class=\"n\">arrange</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sleep_total</span><span class=\"p\">)</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>Same as above, except here we filter the rows for mammals that sleep for 16 or more hours, instead of showing the whole tibble:</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">msleep</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\">\n    </span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">order</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sleep_total</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\">\n    </span><span class=\"n\">arrange</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sleep_total</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\">\n    </span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">sleep_total</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"m\">16</span><span class=\"p\">)</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>Something slightly more complicated: same as above, except arrange the rows in the sleep_total column in a descending order. For this, use the function <code class=\"language-plaintext highlighter-rouge\">desc()</code></p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">msleep</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\">\n    </span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">order</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sleep_total</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\">\n    </span><span class=\"n\">arrange</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">desc</span><span class=\"p\">(</span><span class=\"n\">sleep_total</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\">\n    </span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">sleep_total</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"m\">16</span><span class=\"p\">)</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<h2 id=\"create-new-columns-using-mutate\">Create New Columns Using <code class=\"language-plaintext highlighter-rouge\">mutate()</code></h2>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">mutate()</code> function will add new columns to the tibble. Create a new column called rem_proportion, which is the ratio of rem sleep to total amount of sleep.</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">msleep</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\">\n  </span><span class=\"n\">mutate</span><span class=\"p\">(</span><span class=\"n\">rem_proportion</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sleep_rem</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">sleep_total</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\">\n  </span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">starts_with</span><span class=\"p\">(</span><span class=\"s2\">\"sl\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">rem_proportion</span><span class=\"p\">)</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>You can many new columns using mutate (separated by commas). Here we add a second column called bodywt_grams which is the bodywt column in grams.</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">msleep</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\">\n    </span><span class=\"n\">mutate</span><span class=\"p\">(</span><span class=\"n\">rem_proportion</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sleep_rem</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">sleep_total</span><span class=\"p\">,</span><span class=\"w\">\n           </span><span class=\"n\">bodywt_grams</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bodywt</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"m\">1000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\">\n    </span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">sleep_total</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sleep_rem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rem_proportion</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bodywt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bodywt_grams</span><span class=\"p\">)</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<h2 id=\"create-summaries-of-the-tibble-using-summarise\">Create summaries of the tibble using <code class=\"language-plaintext highlighter-rouge\">summarise()</code></h2>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">summarise()</code> function will create summary statistics for a given column in the tibble such as finding the mean. For example, to compute the average number of hours of sleep, apply the <code class=\"language-plaintext highlighter-rouge\">mean()</code> function to the column sleep_total and call the summary value avg_sleep.</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">msleep</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\">\n    </span><span class=\"n\">summarise</span><span class=\"p\">(</span><span class=\"n\">avg_sleep</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">sleep_total</span><span class=\"p\">))</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>There are many other summary statistics you could consider such <code class=\"language-plaintext highlighter-rouge\">sd()</code>, <code class=\"language-plaintext highlighter-rouge\">min()</code>, <code class=\"language-plaintext highlighter-rouge\">max()</code>, <code class=\"language-plaintext highlighter-rouge\">median()</code>, <code class=\"language-plaintext highlighter-rouge\">sum()</code>, <code class=\"language-plaintext highlighter-rouge\">n()</code> (returns the length of vector), <code class=\"language-plaintext highlighter-rouge\">first()</code> (returns first value in vector), <code class=\"language-plaintext highlighter-rouge\">last()</code> (returns last value in vector) and <code class=\"language-plaintext highlighter-rouge\">n_distinct()</code> (number of distinct values in vector).</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">msleep</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\">\n    </span><span class=\"n\">summarise</span><span class=\"p\">(</span><span class=\"n\">avg_sleep</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">sleep_total</span><span class=\"p\">),</span><span class=\"w\">\n              </span><span class=\"n\">min_sleep</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">min</span><span class=\"p\">(</span><span class=\"n\">sleep_total</span><span class=\"p\">),</span><span class=\"w\">\n              </span><span class=\"n\">max_sleep</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"n\">sleep_total</span><span class=\"p\">),</span><span class=\"w\">\n              </span><span class=\"n\">total</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">())</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<h2 id=\"group-operations-using-group_by\">Group operations using <code class=\"language-plaintext highlighter-rouge\">group_by()</code></h2>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">group_by()</code> verb is an important function in dplyr. As we mentioned before it’s related to concept of “split-apply-combine”. We literally want to split the tibble by some variable (e.g. taxonomic order), apply a function to the individual tibbles and then combine the output.</p>\n\n<p>Let’s do that: split the msleep tibble by the taxonomic order, then ask for the same summary statistics as above. We expect a set of summary statistics for each taxonomic order.</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">msleep</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\">\n    </span><span class=\"n\">group_by</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\">\n    </span><span class=\"n\">summarise</span><span class=\"p\">(</span><span class=\"n\">avg_sleep</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">sleep_total</span><span class=\"p\">),</span><span class=\"w\">\n              </span><span class=\"n\">min_sleep</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">min</span><span class=\"p\">(</span><span class=\"n\">sleep_total</span><span class=\"p\">),</span><span class=\"w\">\n              </span><span class=\"n\">max_sleep</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"n\">sleep_total</span><span class=\"p\">),</span><span class=\"w\">\n              </span><span class=\"n\">total</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">())</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<h2 id=\"ggplot2\">ggplot2</h2>\n\n<p>Most people want to slice and dice their data before plotting, so let’s demonstrate that quickly by plotting our last dataset.</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"n\">ggplot2</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">msleep</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\">\n    </span><span class=\"n\">group_by</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\">\n    </span><span class=\"n\">summarise</span><span class=\"p\">(</span><span class=\"n\">avg_sleep</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">sleep_total</span><span class=\"p\">),</span><span class=\"w\">\n              </span><span class=\"n\">min_sleep</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">min</span><span class=\"p\">(</span><span class=\"n\">sleep_total</span><span class=\"p\">),</span><span class=\"w\">\n              </span><span class=\"n\">max_sleep</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"n\">sleep_total</span><span class=\"p\">),</span><span class=\"w\">\n              </span><span class=\"n\">total</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"o\">%&gt;%</span><span class=\"w\">\n    </span><span class=\"n\">ggplot</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">geom_point</span><span class=\"p\">(</span><span class=\"n\">aes</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">min_sleep</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">max_sleep</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">colour</span><span class=\"o\">=</span><span class=\"n\">order</span><span class=\"p\">))</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>Notice how we can just keep piping our data together, this makes it incredibly easier to experiment and play around with our data and test out what filtering or summarisation we want and how that will plot in the end. If we wanted, or if the data processing is an especially computationally expensive step, we could save it to an intermediate variable before playing around with plotting options, but in the case of this small dataset that’s probably not necessary.</p>\n"],"ref_slides":[],"hands_on":true,"slides":false,"mod_date":"2023-10-23 09:44:54 +0000","pub_date":"2021-10-20 15:49:04 +0000","version":8,"api":"https://training.galaxyproject.org/training-material/api/topics/data-science/tutorials/r-dplyr/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"Foundations of Data Science","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":false},"type":"tutorial"}