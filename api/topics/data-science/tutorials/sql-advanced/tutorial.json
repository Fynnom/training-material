{"layout":"tutorial_hands_on","title":"Advanced SQL","level":"Introductory","zenodo_link":null,"requirements":[{"type":"internal","topic_name":"data-science","tutorials":["sql-basic"]}],"follow_up_training":[{"type":"internal","topic_name":"data-science","tutorials":["sql-python"]}],"questions":["How can I calculate sums, averages, and other summary values?","How can I combine data from multiple tables?","How should I format data in a database, and why?","How can I create, modify, and delete tables and data?","How can I access databases from programs written in Python?"],"objectives":["Define aggregation and give examples of its use.","Write queries that compute aggregated values.","Trace the execution of a query that performs aggregation.","Explain how missing data is handled during aggregation.","Explain the operation of a query that joins two tables.","Explain how to restrict the output of a query containing a join to only include meaningful combinations of values.","Write queries that join tables on equal keys.","Explain what primary and foreign keys are, and why they are useful.","Explain what an atomic value is.","Distinguish between atomic and non-atomic values.","Explain why every value in a database should be atomic.","Explain what a primary key is and why every record should have one.","Identify primary keys in database tables.","Explain why database entries should not contain redundant information.","Identify redundant information in databases.","Write statements that create tables.","Write statements to insert, modify, and delete records.","Write short programs that execute SQL queries.","Trace the execution of a program that contains an SQL query.","Explain why most database applications are written in a general-purpose language rather than in SQL."],"time_estimation":"3H","key_points":["Use aggregation functions to combine multiple values.","Aggregation functions ignore `null` values.","Aggregation happens after filtering.","Use GROUP BY to combine subsets separately.","If no aggregation function is specified for a field, the query may return an arbitrary value for that field.","Use JOIN to combine data from two tables.","Use table.field notation to refer to fields when doing joins.","Every fact should be represented in a database exactly once.","A join produces all combinations of records from one table with records from another.","A primary key is a field (or set of fields) whose values uniquely identify the records in a table.","A foreign key is a field (or set of fields) in one table whose values are a primary key in another table.","We can eliminate meaningless combinations of records by matching primary keys and foreign keys between tables.","The most common join condition is matching keys.","Every value in a database should be atomic.","Every record should have a unique primary key.","A database should not contain redundant information.","Units and similar metadata should be stored with the data.","Use CREATE and DROP to create and delete tables.","Use INSERT to add data.","Use UPDATE to modify existing data.","Use DELETE to remove data.","It is simpler and safer to modify data when every record has a unique primary key.","Do not create dangling references by deleting records that other records refer to.","General-purpose languages have libraries for accessing databases.","To connect to a database, a program must use a library specific to that database manager.","These libraries use a connection-and-cursor model.","Programs can read query results in batches or all at once.","Queries should be written using parameter substitution, not string formatting."],"contributors":[{"name":"The Carpentries","joined":"2021-09","id":"carpentries","url":"https://training.galaxyproject.org/training-material/api/organisations/carpentries.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/carpentries/"},{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"},{"name":"Avans Hogeschool","joined":"2020-11","url":"https://training.galaxyproject.org/training-material/api/organisations/avans-atgm.json","avatar":"/training-material/shared/images/logo-avans.png","members":["bazante1"],"former_members":["dirowa","hexylena"],"id":"avans-atgm","page":"https://training.galaxyproject.org/training-material/hall-of-fame/avans-atgm/"}],"subtopic":"sql","notebook":{"language":"sql"},"abbreviations":{"SQL":"Structured Query Language"},"tags":["SQL","jupyter-notebook"],"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00106","url":"/topics/data-science/tutorials/sql-advanced/tutorial.html","topic_name":"data-science","tutorial_name":"sql-advanced","dir":"topics/data-science/tutorials/sql-advanced","symlink":null,"id":"data-science/sql-advanced","ref_tutorials":["\n<div>\n  <blockquote class=\"question\">\n    <div class=\"box-title\" aria-label=\"quiz box: SQL Advanced Recap\"><i class=\"far fa-question-circle\" aria-hidden=\"true\"></i><span class=\"visually-hidden\"></span> Quiz: SQL Advanced Recap</div>\n    <p>Check your knowledge with a quiz!</p>\n\n    <ul>\n      <li><a href=\"/training-material/quiz/quiz.html?mode=self&amp;quiz=/training-material/topics/data-science/tutorials/sql-advanced/quiz/recap.yml\">Self Study Mode</a> - do the quiz at your own pace, to check your understanding.</li>\n      <li><a href=\"/training-material/quiz/quiz.html?mode=teacher&amp;quiz=/training-material/topics/data-science/tutorials/sql-advanced/quiz/recap.yml\">Classroom Mode</a> - do the quiz synchronously with a classroom of students.</li>\n    </ul>\n  </blockquote>\n</div>\n\n<blockquote class=\"comment\">\n  <comment-title></comment-title>\n\n  <p>This tutorial is <strong>significantly</strong> based on <a href=\"https://carpentries.org\">the Carpentries</a> <a href=\"https://github.com/swcarpentry/sql-novice-survey/\">Databases and SQL</a> lesson, which is licensed CC-BY 4.0.</p>\n\n  <p>Abigail Cabunoc and Sheldon McKay (eds): “Software Carpentry: Using Databases and SQL.”  Version 2017.08, August 2017,\n<a href=\"https://github.com/swcarpentry/sql-novice-survey\">github.com/swcarpentry/sql-novice-survey</a>, <a href=\"https://doi.org/10.5281/zenodo.838776\">https://doi.org/10.5281/zenodo.838776</a></p>\n\n  <p>Adaptations have been made to make this work better in a GTN/Galaxy environment.</p>\n</blockquote>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#aggregation\" id=\"markdown-toc-aggregation\">Aggregation</a>    <ol>\n      <li><a href=\"#averaging-with-null\" id=\"markdown-toc-averaging-with-null\">Averaging with NULL</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#combining-data\" id=\"markdown-toc-combining-data\">Combining Data</a></li>\n  <li><a href=\"#data-hygiene\" id=\"markdown-toc-data-hygiene\">Data Hygiene</a></li>\n  <li><a href=\"#creating-and-modifying-data\" id=\"markdown-toc-creating-and-modifying-data\">Creating and Modifying Data</a></li>\n</ol>\n\n</blockquote>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">#</span> <span class=\"n\">This</span> <span class=\"n\">preamble</span> <span class=\"k\">sets</span> <span class=\"n\">up</span> <span class=\"n\">the</span> <span class=\"k\">sql</span> <span class=\"nv\">\"magic\"</span> <span class=\"k\">for</span> <span class=\"n\">jupyter</span><span class=\"p\">.</span> <span class=\"n\">Use</span> <span class=\"o\">%%</span><span class=\"k\">sql</span> <span class=\"k\">in</span> <span class=\"n\">your</span> <span class=\"n\">cells</span> <span class=\"k\">to</span> <span class=\"k\">write</span> <span class=\"k\">sql</span><span class=\"o\">!</span>\n<span class=\"o\">!</span><span class=\"n\">python3</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">ipython</span><span class=\"o\">-</span><span class=\"k\">sql</span> <span class=\"n\">sqlalchemy</span>\n<span class=\"o\">!</span><span class=\"n\">wget</span> <span class=\"o\">-</span><span class=\"k\">c</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">swcarpentry</span><span class=\"p\">.</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">io</span><span class=\"o\">/</span><span class=\"k\">sql</span><span class=\"o\">-</span><span class=\"n\">novice</span><span class=\"o\">-</span><span class=\"n\">survey</span><span class=\"o\">/</span><span class=\"n\">files</span><span class=\"o\">/</span><span class=\"n\">survey</span><span class=\"p\">.</span><span class=\"n\">db</span>\n<span class=\"n\">import</span> <span class=\"n\">sqlalchemy</span>\n<span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">sqlalchemy</span><span class=\"p\">.</span><span class=\"n\">create_engine</span><span class=\"p\">(</span><span class=\"nv\">\"sqlite:///survey.db\"</span><span class=\"p\">)</span>\n<span class=\"o\">%</span><span class=\"n\">load_ext</span> <span class=\"k\">sql</span>\n<span class=\"o\">%</span><span class=\"k\">sql</span> <span class=\"n\">sqlite</span><span class=\"p\">:</span><span class=\"o\">///</span><span class=\"n\">survey</span><span class=\"p\">.</span><span class=\"n\">db</span>\n<span class=\"o\">%</span><span class=\"n\">config</span> <span class=\"n\">SqlMagic</span><span class=\"p\">.</span><span class=\"n\">displaycon</span><span class=\"o\">=</span><span class=\"k\">False</span>\n</code></pre></div></div>\n\n<h1 id=\"aggregation\">Aggregation</h1>\n\n<p>We now want to calculate ranges and averages for our data.\nWe know how to select all of the dates from the <code class=\"language-plaintext highlighter-rouge\">Visited</code> table:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"n\">dated</span> <span class=\"k\">FROM</span> <span class=\"n\">Visited</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>but to combine them,\nwe must use an aggregation function\nsuch as <code class=\"language-plaintext highlighter-rouge\">min</code> or <code class=\"language-plaintext highlighter-rouge\">max</code>.\nEach of these functions takes a set of records as input,\nand produces a single record as output:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"k\">min</span><span class=\"p\">(</span><span class=\"n\">dated</span><span class=\"p\">)</span> <span class=\"k\">FROM</span> <span class=\"n\">Visited</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p><a href=\"../../images/carpentries-sql/sql-aggregation.svg\" rel=\"noopener noreferrer\"><img src=\"../../images/carpentries-sql/sql-aggregation.svg\" alt=\"SQL Aggregation. \" width=\"128\" height=\"85\" loading=\"lazy\" /></a></p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"k\">max</span><span class=\"p\">(</span><span class=\"n\">dated</span><span class=\"p\">)</span> <span class=\"k\">FROM</span> <span class=\"n\">Visited</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">min</code> and <code class=\"language-plaintext highlighter-rouge\">max</code> are just two of\nthe aggregation functions built into SQL.\nThree others are <code class=\"language-plaintext highlighter-rouge\">avg</code>,\n<code class=\"language-plaintext highlighter-rouge\">count</code>,\nand <code class=\"language-plaintext highlighter-rouge\">sum</code>:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"k\">avg</span><span class=\"p\">(</span><span class=\"n\">reading</span><span class=\"p\">)</span> <span class=\"k\">FROM</span> <span class=\"n\">Survey</span> <span class=\"k\">WHERE</span> <span class=\"n\">quant</span> <span class=\"o\">=</span> <span class=\"s1\">'sal'</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"n\">reading</span><span class=\"p\">)</span> <span class=\"k\">FROM</span> <span class=\"n\">Survey</span> <span class=\"k\">WHERE</span> <span class=\"n\">quant</span> <span class=\"o\">=</span> <span class=\"s1\">'sal'</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"k\">sum</span><span class=\"p\">(</span><span class=\"n\">reading</span><span class=\"p\">)</span> <span class=\"k\">FROM</span> <span class=\"n\">Survey</span> <span class=\"k\">WHERE</span> <span class=\"n\">quant</span> <span class=\"o\">=</span> <span class=\"s1\">'sal'</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>We used <code class=\"language-plaintext highlighter-rouge\">count(reading)</code> here,\nbut we could just as easily have counted <code class=\"language-plaintext highlighter-rouge\">quant</code>\nor any other field in the table,\nor even used <code class=\"language-plaintext highlighter-rouge\">count(*)</code>,\nsince the function doesn’t care about the values themselves,\njust how many values there are.</p>\n\n<p>SQL lets us do several aggregations at once.\nWe can,\nfor example,\nfind the range of sensible salinity measurements:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"k\">min</span><span class=\"p\">(</span><span class=\"n\">reading</span><span class=\"p\">),</span> <span class=\"k\">max</span><span class=\"p\">(</span><span class=\"n\">reading</span><span class=\"p\">)</span> <span class=\"k\">FROM</span> <span class=\"n\">Survey</span> <span class=\"k\">WHERE</span> <span class=\"n\">quant</span> <span class=\"o\">=</span> <span class=\"s1\">'sal'</span> <span class=\"k\">AND</span> <span class=\"n\">reading</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>We can also combine aggregated results with raw results,\nalthough the output might surprise you:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"n\">person</span><span class=\"p\">,</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"k\">FROM</span> <span class=\"n\">Survey</span> <span class=\"k\">WHERE</span> <span class=\"n\">quant</span> <span class=\"o\">=</span> <span class=\"s1\">'sal'</span> <span class=\"k\">AND</span> <span class=\"n\">reading</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>Why does Lake’s name appear rather than Roerich’s or Dyer’s?\nThe answer is that when it has to aggregate a field,\nbut isn’t told how to,\nthe database manager chooses an actual value from the input set.\nIt might use the first one processed,\nthe last one,\nor something else entirely.</p>\n\n<p>Another important fact is that when there are no values to aggregate —\nfor example, where there are no rows satisfying the <code class=\"language-plaintext highlighter-rouge\">WHERE</code> clause —\naggregation’s result is “don’t know”\nrather than zero or some other arbitrary value:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"n\">person</span><span class=\"p\">,</span> <span class=\"k\">max</span><span class=\"p\">(</span><span class=\"n\">reading</span><span class=\"p\">),</span> <span class=\"k\">sum</span><span class=\"p\">(</span><span class=\"n\">reading</span><span class=\"p\">)</span> <span class=\"k\">FROM</span> <span class=\"n\">Survey</span> <span class=\"k\">WHERE</span> <span class=\"n\">quant</span> <span class=\"o\">=</span> <span class=\"s1\">'missing'</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>One final important feature of aggregation functions is that\nthey are inconsistent with the rest of SQL in a very useful way.\nIf we add two values,\nand one of them is null,\nthe result is null.\nBy extension,\nif we use <code class=\"language-plaintext highlighter-rouge\">sum</code> to add all the values in a set,\nand any of those values are null,\nthe result should also be null.\nIt’s much more useful,\nthough,\nfor aggregation functions to ignore null values\nand only combine those that are non-null.\nThis behavior lets us write our queries as:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"k\">min</span><span class=\"p\">(</span><span class=\"n\">dated</span><span class=\"p\">)</span> <span class=\"k\">FROM</span> <span class=\"n\">Visited</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>instead of always having to filter explicitly:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"k\">min</span><span class=\"p\">(</span><span class=\"n\">dated</span><span class=\"p\">)</span> <span class=\"k\">FROM</span> <span class=\"n\">Visited</span> <span class=\"k\">WHERE</span> <span class=\"n\">dated</span> <span class=\"k\">IS</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>Aggregating all records at once doesn’t always make sense.\nFor example,\nsuppose we suspect that there is a systematic bias in our data,\nand that some scientists’ radiation readings are higher than others.\nWe know that this doesn’t work:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"n\">person</span><span class=\"p\">,</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"n\">reading</span><span class=\"p\">),</span> <span class=\"n\">round</span><span class=\"p\">(</span><span class=\"k\">avg</span><span class=\"p\">(</span><span class=\"n\">reading</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">FROM</span>  <span class=\"n\">Survey</span>\n<span class=\"k\">WHERE</span> <span class=\"n\">quant</span> <span class=\"o\">=</span> <span class=\"s1\">'rad'</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>because the database manager selects a single arbitrary scientist’s name\nrather than aggregating separately for each scientist.\nSince there are only five scientists,\nwe could write five queries of the form:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"n\">person</span><span class=\"p\">,</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"n\">reading</span><span class=\"p\">),</span> <span class=\"n\">round</span><span class=\"p\">(</span><span class=\"k\">avg</span><span class=\"p\">(</span><span class=\"n\">reading</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">FROM</span>  <span class=\"n\">Survey</span>\n<span class=\"k\">WHERE</span> <span class=\"n\">quant</span> <span class=\"o\">=</span> <span class=\"s1\">'rad'</span>\n<span class=\"k\">AND</span>   <span class=\"n\">person</span> <span class=\"o\">=</span> <span class=\"s1\">'dyer'</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>but this would be tedious,\nand if we ever had a data set with fifty or five hundred scientists,\nthe chances of us getting all of those queries right is small.</p>\n\n<p>What we need to do is\ntell the database manager to aggregate the hours for each scientist separately\nusing a <code class=\"language-plaintext highlighter-rouge\">GROUP BY</code> clause:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span>   <span class=\"n\">person</span><span class=\"p\">,</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"n\">reading</span><span class=\"p\">),</span> <span class=\"n\">round</span><span class=\"p\">(</span><span class=\"k\">avg</span><span class=\"p\">(</span><span class=\"n\">reading</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">FROM</span>     <span class=\"n\">Survey</span>\n<span class=\"k\">WHERE</span>    <span class=\"n\">quant</span> <span class=\"o\">=</span> <span class=\"s1\">'rad'</span>\n<span class=\"k\">GROUP</span> <span class=\"k\">BY</span> <span class=\"n\">person</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">GROUP BY</code> does exactly what its name implies:\ngroups all the records with the same value for the specified field together\nso that aggregation can process each batch separately.\nSince all the records in each batch have the same value for <code class=\"language-plaintext highlighter-rouge\">person</code>,\nit no longer matters that the database manager\nis picking an arbitrary one to display\nalongside the aggregated <code class=\"language-plaintext highlighter-rouge\">reading</code> values.</p>\n\n<blockquote class=\"tip\">\n  <tip-title>Know Excel? It's just a pivot table.</tip-title>\n  <p><code class=\"language-plaintext highlighter-rouge\">GROUP BY</code> is basically just a pivot table for Excel users, it lets you build\nnice summary tables which aggregate your results.</p>\n\n  <p>And if you didn’t already know the Excel equivalent, now you know what to\nlook for when you need it!</p>\n</blockquote>\n\n<p>Just as we can sort by multiple criteria at once,\nwe can also group by multiple criteria.\nTo get the average reading by scientist and quantity measured,\nfor example,\nwe just add another field to the <code class=\"language-plaintext highlighter-rouge\">GROUP BY</code> clause:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span>   <span class=\"n\">person</span><span class=\"p\">,</span> <span class=\"n\">quant</span><span class=\"p\">,</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"n\">reading</span><span class=\"p\">),</span> <span class=\"n\">round</span><span class=\"p\">(</span><span class=\"k\">avg</span><span class=\"p\">(</span><span class=\"n\">reading</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">FROM</span>     <span class=\"n\">Survey</span>\n<span class=\"k\">GROUP</span> <span class=\"k\">BY</span> <span class=\"n\">person</span><span class=\"p\">,</span> <span class=\"n\">quant</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>Note that we have added <code class=\"language-plaintext highlighter-rouge\">quant</code> to the list of fields displayed,\nsince the results wouldn’t make much sense otherwise.</p>\n\n<p>Let’s go one step further and remove all the entries\nwhere we don’t know who took the measurement:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span>   <span class=\"n\">person</span><span class=\"p\">,</span> <span class=\"n\">quant</span><span class=\"p\">,</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"n\">reading</span><span class=\"p\">),</span> <span class=\"n\">round</span><span class=\"p\">(</span><span class=\"k\">avg</span><span class=\"p\">(</span><span class=\"n\">reading</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">FROM</span>     <span class=\"n\">Survey</span>\n<span class=\"k\">WHERE</span>    <span class=\"n\">person</span> <span class=\"k\">IS</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span>\n<span class=\"k\">GROUP</span> <span class=\"k\">BY</span> <span class=\"n\">person</span><span class=\"p\">,</span> <span class=\"n\">quant</span>\n<span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"n\">person</span><span class=\"p\">,</span> <span class=\"n\">quant</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>Looking more closely,\nthis query:</p>\n\n<ol>\n  <li>selected records from the <code class=\"language-plaintext highlighter-rouge\">Survey</code> table where the <code class=\"language-plaintext highlighter-rouge\">person</code> field was not null;</li>\n  <li>grouped those records into subsets so that the <code class=\"language-plaintext highlighter-rouge\">person</code> and <code class=\"language-plaintext highlighter-rouge\">quant</code> values in each subset were the same;</li>\n  <li>ordered those subsets first by <code class=\"language-plaintext highlighter-rouge\">person</code>, and then within each sub-group by <code class=\"language-plaintext highlighter-rouge\">quant</code>; and</li>\n  <li>counted the number of records in each subset, calculated the average <code class=\"language-plaintext highlighter-rouge\">reading</code> in each, and chose a <code class=\"language-plaintext highlighter-rouge\">person</code> and <code class=\"language-plaintext highlighter-rouge\">quant</code> value from each (it doesn’t matter which ones, since they’re all equal).</li>\n</ol>\n\n<blockquote class=\"question\">\n  <question-title>Counting Temperature Readings</question-title>\n\n  <p>How many temperature readings did Frank Pabodie record,\nand what was their average value?</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT count(reading), avg(reading) FROM Survey WHERE quant = 'temp' AND person = 'pb';\n</code></pre></div>    </div>\n\n    <table>\n      <thead>\n        <tr>\n          <th>count(reading)</th>\n          <th>avg(reading)</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>2</td>\n          <td>-20.0</td>\n        </tr>\n      </tbody>\n    </table>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- Try solutions here!</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <h2 id=\"averaging-with-null\">Averaging with NULL</h2>\n\n  <p>The average of a set of values is the sum of the values\ndivided by the number of values.\nDoes this mean that the <code class=\"language-plaintext highlighter-rouge\">avg</code> function returns 2.0 or 3.0\nwhen given the values 1.0, <code class=\"language-plaintext highlighter-rouge\">null</code>, and 5.0?</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <p>The answer is 3.0.\n<code class=\"language-plaintext highlighter-rouge\">NULL</code> is not a value; it is the absence of a value.\nAs such it is not included in the calculation.</p>\n\n    <p>You can confirm this, by executing this code:</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT AVG(a) FROM (\n    SELECT 1 AS a\n    UNION ALL SELECT NULL\n    UNION ALL SELECT 5);\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- Try solutions here!</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>What Does This Query Do?</question-title>\n\n  <p>We want to calculate the difference between\neach individual radiation reading\nand the average of all the radiation readings.\nWe write the query:</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT reading - avg(reading) FROM Survey WHERE quant = 'rad';\n</code></pre></div>  </div>\n\n  <p>What does this actually produce, and can you think of why?</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <p>The query produces only one row of results when we what we really want is a result for each of the readings.\nThe <code class=\"language-plaintext highlighter-rouge\">avg()</code> function produces only a single value, and because it is run first, the table is reduced to a single row.\nThe <code class=\"language-plaintext highlighter-rouge\">reading</code> value is simply an arbitrary one.</p>\n\n    <p>To achieve what we wanted, we would have to run two queries:</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT avg(reading) FROM Survey WHERE quant='rad';\n</code></pre></div>    </div>\n\n    <p>This produces the average value (6.5625), which we can then insert into a second query:</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT reading - 6.5625 FROM Survey WHERE quant = 'rad';\n</code></pre></div>    </div>\n\n    <p>This produces what we want, but we can combine this into a single query using subqueries.</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT reading - (SELECT avg(reading) FROM Survey WHERE quant='rad') FROM Survey WHERE quant = 'rad';\n</code></pre></div>    </div>\n\n    <p>This way we don’t have execute two queries.</p>\n\n    <p>In summary what we have done is to replace <code class=\"language-plaintext highlighter-rouge\">avg(reading)</code> with <code class=\"language-plaintext highlighter-rouge\">(SELECT avg(reading) FROM Survey WHERE quant='rad')</code> in the original query.</p>\n\n  </blockquote>\n</blockquote>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- Try solutions here!</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Ordering When Concatenating</question-title>\n\n  <p>The function <code class=\"language-plaintext highlighter-rouge\">group_concat(field, separator)</code>\nconcatenates all the values in a field\nusing the specified separator character\n(or ‘,’ if the separator isn’t specified).\nUse this to produce a one-line list of scientists’ names,\nsuch as:</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>William Dyer, Frank Pabodie, Anderson Lake, Valentina Roerich, Frank Danforth\n</code></pre></div>  </div>\n\n  <p>Can you find a way to order the list by surname?</p>\n</blockquote>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- Try solutions here!</span>\n</code></pre></div></div>\n\n<h1 id=\"combining-data\">Combining Data</h1>\n\n<p>In order to submit our data to a web site\nthat aggregates historical meteorological data,\nwe might need to format it as\nlatitude, longitude, date, quantity, and reading.\nHowever,\nour latitudes and longitudes are in the <code class=\"language-plaintext highlighter-rouge\">Site</code> table,\nwhile the dates of measurements are in the <code class=\"language-plaintext highlighter-rouge\">Visited</code> table\nand the readings themselves are in the <code class=\"language-plaintext highlighter-rouge\">Survey</code> table.\nWe need to combine these tables somehow.</p>\n\n<p>This figure shows the relations between the tables:</p>\n\n<p><a href=\"../../images/carpentries-sql/sql-join-structure.svg\" rel=\"noopener noreferrer\"><img src=\"../../images/carpentries-sql/sql-join-structure.svg\" alt=\"Survey Database Structure. \" loading=\"lazy\" /></a></p>\n\n<p>The SQL command to do this is <code class=\"language-plaintext highlighter-rouge\">JOIN</code>.\nTo see how it works,\nlet’s start by joining the <code class=\"language-plaintext highlighter-rouge\">Site</code> and <code class=\"language-plaintext highlighter-rouge\">Visited</code> tables:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">Site</span> <span class=\"k\">JOIN</span> <span class=\"n\">Visited</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">JOIN</code> creates\nthe cross product\nof two tables,\ni.e.,\nit joins each record of one table with each record of the other table\nto give all possible combinations.\nSince there are three records in <code class=\"language-plaintext highlighter-rouge\">Site</code>\nand eight in <code class=\"language-plaintext highlighter-rouge\">Visited</code>,\nthe join’s output has 24 records (3 * 8 = 24) .\nAnd since each table has three fields,\nthe output has six fields (3 + 3 = 6).</p>\n\n<p>What the join <em>hasn’t</em> done is\nfigure out if the records being joined have anything to do with each other.\nIt has no way of knowing whether they do or not until we tell it how.\nTo do that,\nwe add a clause specifying that\nwe’re only interested in combinations that have the same site name,\nthus we need to use a filter:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">Site</span> <span class=\"k\">JOIN</span> <span class=\"n\">Visited</span> <span class=\"k\">ON</span> <span class=\"n\">Site</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">Visited</span><span class=\"p\">.</span><span class=\"n\">site</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">ON</code> is very similar to <code class=\"language-plaintext highlighter-rouge\">WHERE</code>,\nand for all the queries in this lesson you can use them interchangeably.\nThere are differences in how they affect <a href=\"https://en.wikipedia.org/wiki/Join_%28SQL%29#Outer_join\">outer joins</a>,\nbut that’s beyond the scope of this lesson.\nOnce we add this to our query,\nthe database manager throws away records\nthat combined information about two different sites,\nleaving us with just the ones we want.</p>\n\n<p>Notice that we used <code class=\"language-plaintext highlighter-rouge\">Table.field</code> to specify field names\nin the output of the join.\nWe do this because tables can have fields with the same name,\nand we need to be specific which ones we’re talking about.\nFor example,\nif we joined the <code class=\"language-plaintext highlighter-rouge\">Person</code> and <code class=\"language-plaintext highlighter-rouge\">Visited</code> tables,\nthe result would inherit a field called <code class=\"language-plaintext highlighter-rouge\">id</code>\nfrom each of the original tables.</p>\n\n<p>We can now use the same dotted notation\nto select the three columns we actually want\nout of our join:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"n\">Site</span><span class=\"p\">.</span><span class=\"n\">lat</span><span class=\"p\">,</span> <span class=\"n\">Site</span><span class=\"p\">.</span><span class=\"n\">long</span><span class=\"p\">,</span> <span class=\"n\">Visited</span><span class=\"p\">.</span><span class=\"n\">dated</span>\n<span class=\"k\">FROM</span>   <span class=\"n\">Site</span> <span class=\"k\">JOIN</span> <span class=\"n\">Visited</span>\n<span class=\"k\">ON</span>     <span class=\"n\">Site</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">Visited</span><span class=\"p\">.</span><span class=\"n\">site</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>If joining two tables is good,\njoining many tables must be better.\nIn fact,\nwe can join any number of tables\nsimply by adding more <code class=\"language-plaintext highlighter-rouge\">JOIN</code> clauses to our query,\nand more <code class=\"language-plaintext highlighter-rouge\">ON</code> tests to filter out combinations of records\nthat don’t make sense:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"n\">Site</span><span class=\"p\">.</span><span class=\"n\">lat</span><span class=\"p\">,</span> <span class=\"n\">Site</span><span class=\"p\">.</span><span class=\"n\">long</span><span class=\"p\">,</span> <span class=\"n\">Visited</span><span class=\"p\">.</span><span class=\"n\">dated</span><span class=\"p\">,</span> <span class=\"n\">Survey</span><span class=\"p\">.</span><span class=\"n\">quant</span><span class=\"p\">,</span> <span class=\"n\">Survey</span><span class=\"p\">.</span><span class=\"n\">reading</span>\n<span class=\"k\">FROM</span>   <span class=\"n\">Site</span> <span class=\"k\">JOIN</span> <span class=\"n\">Visited</span> <span class=\"k\">JOIN</span> <span class=\"n\">Survey</span>\n<span class=\"k\">ON</span>     <span class=\"n\">Site</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">Visited</span><span class=\"p\">.</span><span class=\"n\">site</span>\n<span class=\"k\">AND</span>    <span class=\"n\">Visited</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">Survey</span><span class=\"p\">.</span><span class=\"n\">taken</span>\n<span class=\"k\">AND</span>    <span class=\"n\">Visited</span><span class=\"p\">.</span><span class=\"n\">dated</span> <span class=\"k\">IS</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>We can tell which records from <code class=\"language-plaintext highlighter-rouge\">Site</code>, <code class=\"language-plaintext highlighter-rouge\">Visited</code>, and <code class=\"language-plaintext highlighter-rouge\">Survey</code>\ncorrespond with each other\nbecause those tables contain\nprimary keys\nand foreign keys.\nA primary key is a value,\nor combination of values,\nthat uniquely identifies each record in a table.\nA foreign key is a value (or combination of values) from one table\nthat identifies a unique record in another table.\nAnother way of saying this is that\na foreign key is the primary key of one table\nthat appears in some other table.\nIn our database,\n<code class=\"language-plaintext highlighter-rouge\">Person.id</code> is the primary key in the <code class=\"language-plaintext highlighter-rouge\">Person</code> table,\nwhile <code class=\"language-plaintext highlighter-rouge\">Survey.person</code> is a foreign key\nrelating the <code class=\"language-plaintext highlighter-rouge\">Survey</code> table’s entries\nto entries in <code class=\"language-plaintext highlighter-rouge\">Person</code>.</p>\n\n<p>Most database designers believe that\nevery table should have a well-defined primary key.\nThey also believe that this key should be separate from the data itself,\nso that if we ever need to change the data,\nwe only need to make one change in one place.\nOne easy way to do this is\nto create an arbitrary, unique ID for each record\nas we add it to the database.\nThis is actually very common:\nthose IDs have names like “student numbers” and “patient numbers”,\nand they almost always turn out to have originally been\na unique record identifier in some database system or other.\nAs the query below demonstrates,\nSQLite <a href=\"https://www.sqlite.org/lang_createtable.html#rowid\">automatically numbers records</a> as they’re added to tables,\nand we can use those record numbers in queries:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"n\">rowid</span><span class=\"p\">,</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">Person</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Listing Radiation Readings</question-title>\n\n  <p>Write a query that lists all radiation readings from the DR-1 site.</p>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT Survey.reading\nFROM Site JOIN Visited JOIN Survey\nON Site.name = Visited.site\nAND Visited.id = Survey.taken\nWHERE Site.name = 'DR-1'\nAND Survey.quant = 'rad';\n</code></pre></div>    </div>\n\n    <table>\n      <thead>\n        <tr>\n          <th>reading</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>9.82</td>\n        </tr>\n        <tr>\n          <td>7.8</td>\n        </tr>\n        <tr>\n          <td>11.25</td>\n        </tr>\n      </tbody>\n    </table>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- Try solutions here!</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Where's Frank?</question-title>\n\n  <p>Write a query that lists all sites visited by people named “Frank”.</p>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT DISTINCT Site.name\nFROM Site JOIN Visited JOIN Survey JOIN Person\nON Site.name = Visited.site\nAND Visited.id = Survey.taken\nAND Survey.person = Person.id\nWHERE Person.personal = 'Frank';\n</code></pre></div>    </div>\n\n    <table>\n      <thead>\n        <tr>\n          <th>name</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>DR-3</td>\n        </tr>\n      </tbody>\n    </table>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- Try solutions here!</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Reading Queries</question-title>\n\n  <p>Describe in your own words what the following query produces:</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT Site.name FROM Site JOIN Visited\nON Site.lat &lt; -49.0 AND Site.name = Visited.site AND Visited.dated &gt;= '1932-01-01';\n</code></pre></div>  </div>\n</blockquote>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- Try solutions here!</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Who Has Been Where?</question-title>\n\n  <p>Write a query that shows each site with exact location (lat, long) ordered by visited date,\nfollowed by personal name and family name of the person who visited the site\nand the type of measurement taken and its reading. Please avoid all null values.\nTip: you should get 15 records with 8 fields.</p>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT Site.name, Site.lat, Site.long, Person.personal, Person.family, Survey.quant, Survey.reading, Visited.dated\nFROM Site JOIN Visited JOIN Survey JOIN Person\nON Site.name = Visited.site\nAND Visited.id = Survey.taken\nAND Survey.person = Person.id\nWHERE Survey.person IS NOT NULL\nAND Visited.dated IS NOT NULL\nORDER BY Visited.dated;\n</code></pre></div>    </div>\n\n    <table>\n      <thead>\n        <tr>\n          <th>name</th>\n          <th>lat</th>\n          <th>long</th>\n          <th>personal</th>\n          <th>family</th>\n          <th>quant</th>\n          <th>reading</th>\n          <th>dated</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>DR-1</td>\n          <td>-49.85</td>\n          <td>-128.57</td>\n          <td>William</td>\n          <td>Dyer</td>\n          <td>rad</td>\n          <td>9.82</td>\n          <td>1927-02-08</td>\n        </tr>\n        <tr>\n          <td>DR-1</td>\n          <td>-49.85</td>\n          <td>-128.57</td>\n          <td>William</td>\n          <td>Dyer</td>\n          <td>sal</td>\n          <td>0.13</td>\n          <td>1927-02-08</td>\n        </tr>\n        <tr>\n          <td>DR-1</td>\n          <td>-49.85</td>\n          <td>-128.57</td>\n          <td>William</td>\n          <td>Dyer</td>\n          <td>rad</td>\n          <td>7.8</td>\n          <td>1927-02-10</td>\n        </tr>\n        <tr>\n          <td>DR-1</td>\n          <td>-49.85</td>\n          <td>-128.57</td>\n          <td>William</td>\n          <td>Dyer</td>\n          <td>sal</td>\n          <td>0.09</td>\n          <td>1927-02-10</td>\n        </tr>\n        <tr>\n          <td>DR-3</td>\n          <td>-47.15</td>\n          <td>-126.72</td>\n          <td>Anderson</td>\n          <td>Lake</td>\n          <td>sal</td>\n          <td>0.05</td>\n          <td>1930-01-07</td>\n        </tr>\n        <tr>\n          <td>DR-3</td>\n          <td>-47.15</td>\n          <td>-126.72</td>\n          <td>Frank</td>\n          <td>Pabodie</td>\n          <td>rad</td>\n          <td>8.41</td>\n          <td>1930-01-07</td>\n        </tr>\n        <tr>\n          <td>DR-3</td>\n          <td>-47.15</td>\n          <td>-126.72</td>\n          <td>Frank</td>\n          <td>Pabodie</td>\n          <td>temp</td>\n          <td>-21.5</td>\n          <td>1930-01-07</td>\n        </tr>\n        <tr>\n          <td>DR-3</td>\n          <td>-47.15</td>\n          <td>-126.72</td>\n          <td>Frank</td>\n          <td>Pabodie</td>\n          <td>rad</td>\n          <td>7.22</td>\n          <td>1930-01-12</td>\n        </tr>\n        <tr>\n          <td>DR-3</td>\n          <td>-47.15</td>\n          <td>-126.72</td>\n          <td>Anderson</td>\n          <td>Lake</td>\n          <td>sal</td>\n          <td>0.1</td>\n          <td>1930-02-26</td>\n        </tr>\n        <tr>\n          <td>DR-3</td>\n          <td>-47.15</td>\n          <td>-126.72</td>\n          <td>Frank</td>\n          <td>Pabodie</td>\n          <td>rad</td>\n          <td>4.35</td>\n          <td>1930-02-26</td>\n        </tr>\n        <tr>\n          <td>DR-3</td>\n          <td>-47.15</td>\n          <td>-126.72</td>\n          <td>Frank</td>\n          <td>Pabodie</td>\n          <td>temp</td>\n          <td>-18.5</td>\n          <td>1930-02-26</td>\n        </tr>\n        <tr>\n          <td>MSK-4</td>\n          <td>-48.87</td>\n          <td>-123.4</td>\n          <td>Anderson</td>\n          <td>Lake</td>\n          <td>rad</td>\n          <td>1.46</td>\n          <td>1932-01-14</td>\n        </tr>\n        <tr>\n          <td>MSK-4</td>\n          <td>-48.87</td>\n          <td>-123.4</td>\n          <td>Anderson</td>\n          <td>Lake</td>\n          <td>sal</td>\n          <td>0.21</td>\n          <td>1932-01-14</td>\n        </tr>\n        <tr>\n          <td>MSK-4</td>\n          <td>-48.87</td>\n          <td>-123.4</td>\n          <td>Valentina</td>\n          <td>Roerich</td>\n          <td>sal</td>\n          <td>22.5</td>\n          <td>1932-01-14</td>\n        </tr>\n        <tr>\n          <td>DR-1</td>\n          <td>-49.85</td>\n          <td>-128.57</td>\n          <td>Valentina</td>\n          <td>Roerich</td>\n          <td>rad</td>\n          <td>11.25</td>\n          <td>1932-03-22</td>\n        </tr>\n      </tbody>\n    </table>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- Try solutions here!</span>\n</code></pre></div></div>\n\n<p>A good visual explanation of joins can be found <a href=\"https://sql-joins.leopard.in.ua/\">in the SQL Join Visualizer</a></p>\n\n<h1 id=\"data-hygiene\">Data Hygiene</h1>\n\n<p>Now that we have seen how joins work, we can see why the relational\nmodel is so useful and how best to use it.  The first rule is that\nevery value should be atomic, i.e., not\ncontain parts that we might want to work with separately.  We store\npersonal and family names in separate columns instead of putting the\nentire name in one column so that we don’t have to use substring\noperations to get the name’s components.  More importantly, we store\nthe two parts of the name separately because splitting on spaces is\nunreliable: just think of a name like “Eloise St. Cyr” or “Jan Mikkel\nSteubart”.</p>\n\n<p>The second rule is that every record should have a unique primary key.\nThis can be a serial number that has no intrinsic meaning,\none of the values in the record (like the <code class=\"language-plaintext highlighter-rouge\">id</code> field in the <code class=\"language-plaintext highlighter-rouge\">Person</code> table),\nor even a combination of values:\nthe triple <code class=\"language-plaintext highlighter-rouge\">(taken, person, quant)</code> from the <code class=\"language-plaintext highlighter-rouge\">Survey</code> table uniquely identifies every measurement.</p>\n\n<p>The third rule is that there should be no redundant information.\nFor example,\nwe could get rid of the <code class=\"language-plaintext highlighter-rouge\">Site</code> table and rewrite the <code class=\"language-plaintext highlighter-rouge\">Visited</code> table like this:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>id</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>dated</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>619</td>\n      <td>-49.85</td>\n      <td>-128.57</td>\n      <td>1927-02-08</td>\n    </tr>\n    <tr>\n      <td>622</td>\n      <td>-49.85</td>\n      <td>-128.57</td>\n      <td>1927-02-10</td>\n    </tr>\n    <tr>\n      <td>734</td>\n      <td>-47.15</td>\n      <td>-126.72</td>\n      <td>1930-01-07</td>\n    </tr>\n    <tr>\n      <td>735</td>\n      <td>-47.15</td>\n      <td>-126.72</td>\n      <td>1930-01-12</td>\n    </tr>\n    <tr>\n      <td>751</td>\n      <td>-47.15</td>\n      <td>-126.72</td>\n      <td>1930-02-26</td>\n    </tr>\n    <tr>\n      <td>752</td>\n      <td>-47.15</td>\n      <td>-126.72</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <td>837</td>\n      <td>-48.87</td>\n      <td>-123.40</td>\n      <td>1932-01-14</td>\n    </tr>\n    <tr>\n      <td>844</td>\n      <td>-49.85</td>\n      <td>-128.57</td>\n      <td>1932-03-22</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>In fact,\nwe could use a single table that recorded all the information about each reading in each row,\njust as a spreadsheet would.\nThe problem is that it’s very hard to keep data organized this way consistent:\nif we realize that the date of a particular visit to a particular site is wrong,\nwe have to change multiple records in the database.\nWhat’s worse,\nwe may have to guess which records to change,\nsince other sites may also have been visited on that date.</p>\n\n<p>The fourth rule is that the units for every value should be stored explicitly.\nOur database doesn’t do this,\nand that’s a problem:\nRoerich’s salinity measurements are several orders of magnitude larger than anyone else’s,\nbut we don’t know if that means she was using parts per million instead of parts per thousand,\nor whether there actually was a saline anomaly at that site in 1932.</p>\n\n<p>Stepping back,\ndata and the tools used to store it have a symbiotic relationship:\nwe use tables and joins because it’s efficient,\nprovided our data is organized a certain way,\nbut organize our data that way because we have tools to manipulate it efficiently.\nAs anthropologists say,\nthe tool shapes the hand that shapes the tool.</p>\n\n<blockquote class=\"question\">\n  <question-title>Identifying Atomic Values</question-title>\n\n  <p>Which of the following are atomic values? Which are not? Why?</p>\n\n  <ul>\n    <li>New Zealand</li>\n    <li>87 Turing Avenue</li>\n    <li>January 25, 1971</li>\n    <li>the XY coordinate (0.5, 3.3)</li>\n  </ul>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <p>New Zealand is the only clear-cut atomic value.</p>\n\n    <p>The address and the XY coordinate contain more than one piece of information\nwhich should be stored separately:</p>\n    <ul>\n      <li>House number, street name</li>\n      <li>X coordinate, Y coordinate</li>\n    </ul>\n\n    <p>The date entry is less clear cut, because it contains month, day, and year elements.\nHowever, there is a <code class=\"language-plaintext highlighter-rouge\">DATE</code> datatype in SQL, and dates should be stored using this format.\nIf we need to work with the month, day, or year separately, we can use the SQL functions available for our database software\n(for example <a href=\"https://docs.oracle.com/cd/B19306_01/server.102/b14200/functions050.htm\"><code class=\"language-plaintext highlighter-rouge\">EXTRACT</code></a> or <a href=\"http://www.sqlite.org/lang_datefunc.html\"><code class=\"language-plaintext highlighter-rouge\">STRFTIME</code></a> for SQLite).</p>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- Try solutions here!</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Identifying a Primary Key</question-title>\n\n  <p>What is the primary key in this table?\nI.e., what value or combination of values uniquely identifies a record?</p>\n\n  <table>\n    <thead>\n      <tr>\n        <th>latitude</th>\n        <th>longitude</th>\n        <th>date</th>\n        <th>temperature</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>57.3</td>\n        <td>-22.5</td>\n        <td>2015-01-09</td>\n        <td>-14.2</td>\n      </tr>\n    </tbody>\n  </table>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <p>Latitude, longitude, and date are all required to uniquely identify the temperature record.</p>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- Try solutions here!</span>\n</code></pre></div></div>\n\n<h1 id=\"creating-and-modifying-data\">Creating and Modifying Data</h1>\n\n<p>So far we have only looked at how to get information out of a database,\nboth because that is more frequent than adding information,\nand because most other operations only make sense\nonce queries are understood.\nIf we want to create and modify data,\nwe need to know two other sets of commands.</p>\n\n<p>The first pair are <a href=\"https://www.sqlite.org/lang_createtable.html\"><code class=\"language-plaintext highlighter-rouge\">CREATE TABLE</code></a> and <a href=\"https://www.sqlite.org/lang_droptable.html\"><code class=\"language-plaintext highlighter-rouge\">DROP TABLE</code></a>.\nWhile they are written as two words,\nthey are actually single commands.\nThe first one creates a new table;\nits arguments are the names and types of the table’s columns.\nFor example,\nthe following statements create the four tables in our survey database:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">id</span> <span class=\"nb\">text</span><span class=\"p\">,</span> <span class=\"n\">personal</span> <span class=\"nb\">text</span><span class=\"p\">,</span> <span class=\"n\">family</span> <span class=\"nb\">text</span><span class=\"p\">);</span>\n<span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">Site</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"nb\">text</span><span class=\"p\">,</span> <span class=\"n\">lat</span> <span class=\"nb\">real</span><span class=\"p\">,</span> <span class=\"n\">long</span> <span class=\"nb\">real</span><span class=\"p\">);</span>\n<span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">Visited</span><span class=\"p\">(</span><span class=\"n\">id</span> <span class=\"nb\">integer</span><span class=\"p\">,</span> <span class=\"n\">site</span> <span class=\"nb\">text</span><span class=\"p\">,</span> <span class=\"n\">dated</span> <span class=\"nb\">text</span><span class=\"p\">);</span>\n<span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">Survey</span><span class=\"p\">(</span><span class=\"n\">taken</span> <span class=\"nb\">integer</span><span class=\"p\">,</span> <span class=\"n\">person</span> <span class=\"nb\">text</span><span class=\"p\">,</span> <span class=\"n\">quant</span> <span class=\"nb\">text</span><span class=\"p\">,</span> <span class=\"n\">reading</span> <span class=\"nb\">real</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>We can get rid of one of our tables using:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">DROP</span> <span class=\"k\">TABLE</span> <span class=\"n\">Survey</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>Be very careful when doing this:\nif you drop the wrong table, hope that the person maintaining the database has a backup,\nbut it’s better not to have to rely on it.</p>\n\n<p>Different database systems support different data types for table columns,\nbut most provide the following:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>data type</th>\n      <th>use</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>INTEGER</td>\n      <td>a signed integer</td>\n    </tr>\n    <tr>\n      <td>REAL</td>\n      <td>a floating point number</td>\n    </tr>\n    <tr>\n      <td>TEXT</td>\n      <td>a character string</td>\n    </tr>\n    <tr>\n      <td>BLOB</td>\n      <td>a “binary large object”, such as an image</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Most databases also support Booleans and date/time values;\nSQLite uses the integers 0 and 1 for the former,\nand represents the latter as text or numeric fields.</p>\n\n<p>An increasing number of databases also support geographic data types,\nsuch as latitude and longitude.\nKeeping track of what particular systems do or do not offer,\nand what names they give different data types,\nis an unending portability headache.</p>\n\n<blockquote class=\"tip\">\n  <tip-title>Which database should I use?</tip-title>\n  <p>SQLite is fantastic for small databases or embedded into applications where\nyou want to be able to use SQL to query and process data.</p>\n\n  <p>However for any real analysis PostgreSQL is usually the best choice, it\nscales incredibly well and can meet a wide range of use cases. It has good\ndata type support.</p>\n</blockquote>\n\n<blockquote class=\"tip\">\n  <tip-title>Do you have geographic data?</tip-title>\n  <p>Use Postgres. The <a href=\"https://postgis.net/\">PostGIS</a> library is fantastic and industry standard for storing geographic data in a database.</p>\n</blockquote>\n\n<p>When we create a table,\nwe can specify several kinds of constraints on its columns.\nFor example,\na better definition for the <code class=\"language-plaintext highlighter-rouge\">Survey</code> table would be:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">Survey</span><span class=\"p\">(</span>\n    <span class=\"n\">taken</span>   <span class=\"nb\">integer</span> <span class=\"k\">not</span> <span class=\"k\">null</span><span class=\"p\">,</span> <span class=\"c1\">-- where reading taken</span>\n    <span class=\"n\">person</span>  <span class=\"nb\">text</span><span class=\"p\">,</span>             <span class=\"c1\">-- may not know who took it</span>\n    <span class=\"n\">quant</span>   <span class=\"nb\">text</span> <span class=\"k\">not</span> <span class=\"k\">null</span><span class=\"p\">,</span>    <span class=\"c1\">-- the quantity measured</span>\n    <span class=\"n\">reading</span> <span class=\"nb\">real</span> <span class=\"k\">not</span> <span class=\"k\">null</span><span class=\"p\">,</span>    <span class=\"c1\">-- the actual reading</span>\n    <span class=\"k\">primary</span> <span class=\"k\">key</span><span class=\"p\">(</span><span class=\"n\">taken</span><span class=\"p\">,</span> <span class=\"n\">quant</span><span class=\"p\">),</span>\n    <span class=\"k\">foreign</span> <span class=\"k\">key</span><span class=\"p\">(</span><span class=\"n\">taken</span><span class=\"p\">)</span> <span class=\"k\">references</span> <span class=\"n\">Visited</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">),</span>\n    <span class=\"k\">foreign</span> <span class=\"k\">key</span><span class=\"p\">(</span><span class=\"n\">person</span><span class=\"p\">)</span> <span class=\"k\">references</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span>\n<span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>Once again,\nexactly what constraints are available\nand what they’re called\ndepends on which database manager we are using.</p>\n\n<p>Once tables have been created,\nwe can add, change, and remove records using our other set of commands,\n<code class=\"language-plaintext highlighter-rouge\">INSERT</code>, <code class=\"language-plaintext highlighter-rouge\">UPDATE</code>, and <code class=\"language-plaintext highlighter-rouge\">DELETE</code>.</p>\n\n<p>Here is an example of inserting rows into the <code class=\"language-plaintext highlighter-rouge\">Site</code> table:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">Site</span> <span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">lat</span><span class=\"p\">,</span> <span class=\"n\">long</span><span class=\"p\">)</span> <span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"s1\">'DR-1'</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">49</span><span class=\"p\">.</span><span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">128</span><span class=\"p\">.</span><span class=\"mi\">57</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">Site</span> <span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">lat</span><span class=\"p\">,</span> <span class=\"n\">long</span><span class=\"p\">)</span> <span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"s1\">'DR-3'</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">47</span><span class=\"p\">.</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">126</span><span class=\"p\">.</span><span class=\"mi\">72</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">Site</span> <span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">lat</span><span class=\"p\">,</span> <span class=\"n\">long</span><span class=\"p\">)</span> <span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"s1\">'MSK-4'</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">48</span><span class=\"p\">.</span><span class=\"mi\">87</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">123</span><span class=\"p\">.</span><span class=\"mi\">40</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>We can also insert values into one table directly from another:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">JustLatLong</span><span class=\"p\">(</span><span class=\"n\">lat</span> <span class=\"nb\">real</span><span class=\"p\">,</span> <span class=\"n\">long</span> <span class=\"nb\">real</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">JustLatLong</span> <span class=\"k\">SELECT</span> <span class=\"n\">lat</span><span class=\"p\">,</span> <span class=\"n\">long</span> <span class=\"k\">FROM</span> <span class=\"n\">Site</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>Modifying existing records is done using the <code class=\"language-plaintext highlighter-rouge\">UPDATE</code> statement.\nTo do this we tell the database which table we want to update,\nwhat we want to change the values to for any or all of the fields,\nand under what conditions we should update the values.</p>\n\n<p>For example, if we made a mistake when entering the lat and long values\nof the last <code class=\"language-plaintext highlighter-rouge\">INSERT</code> statement above, we can correct it with an update:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">UPDATE</span> <span class=\"n\">Site</span> <span class=\"k\">SET</span> <span class=\"n\">lat</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">47</span><span class=\"p\">.</span><span class=\"mi\">87</span><span class=\"p\">,</span> <span class=\"n\">long</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">122</span><span class=\"p\">.</span><span class=\"mi\">40</span> <span class=\"k\">WHERE</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'MSK-4'</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>Be careful to not forget the <code class=\"language-plaintext highlighter-rouge\">WHERE</code> clause or the update statement will\nmodify <em>all</em> of the records in the database.</p>\n\n<p>Deleting records can be a bit trickier,\nbecause we have to ensure that the database remains internally consistent.\nIf all we care about is a single table,\nwe can use the <code class=\"language-plaintext highlighter-rouge\">DELETE</code> command with a <code class=\"language-plaintext highlighter-rouge\">WHERE</code> clause\nthat matches the records we want to discard.\nFor example,\nonce we realize that Frank Danforth didn’t take any measurements,\nwe can remove him from the <code class=\"language-plaintext highlighter-rouge\">Person</code> table like this:</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">DELETE</span> <span class=\"k\">FROM</span> <span class=\"n\">Person</span> <span class=\"k\">WHERE</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"s1\">'danforth'</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>But what if we removed Anderson Lake instead?\nOur <code class=\"language-plaintext highlighter-rouge\">Survey</code> table would still contain seven records\nof measurements he’d taken,\nbut that’s never supposed to happen:\n<code class=\"language-plaintext highlighter-rouge\">Survey.person</code> is a foreign key into the <code class=\"language-plaintext highlighter-rouge\">Person</code> table,\nand all our queries assume there will be a row in the latter\nmatching every value in the former.</p>\n\n<p>This problem is called referential integrity:\nwe need to ensure that all references between tables can always be resolved correctly.\nOne way to do this is to delete all the records\nthat use <code class=\"language-plaintext highlighter-rouge\">'lake'</code> as a foreign key\nbefore deleting the record that uses it as a primary key.\nIf our database manager supports it,\nwe can automate this\nusing cascading delete.\nHowever,\nthis technique is outside the scope of this chapter.</p>\n\n<blockquote class=\"tip\">\n  <tip-title>Hybrid Storage Models</tip-title>\n\n  <p>Many applications use a hybrid storage model\ninstead of putting everything into a database:\nthe actual data (such as astronomical images) is stored in files,\nwhile the database stores the files’ names,\ntheir modification dates,\nthe region of the sky they cover,\ntheir spectral characteristics,\nand so on.\nThis is also how most music player software is built:\nthe database inside the application keeps track of the MP3 files,\nbut the files themselves live on disk.</p>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title>Replacing NULL</question-title>\n\n  <p>Write an SQL statement to replace all uses of <code class=\"language-plaintext highlighter-rouge\">null</code> in\n<code class=\"language-plaintext highlighter-rouge\">Survey.person</code> with the string <code class=\"language-plaintext highlighter-rouge\">'unknown'</code>.</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>UPDATE Survey SET person = 'unknown' WHERE person IS NULL;\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- Try solutions here!</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Backing Up with SQL</question-title>\n\n  <p>SQLite has several administrative commands that aren’t part of the\nSQL standard.  One of them is <code class=\"language-plaintext highlighter-rouge\">.dump</code>, which prints the SQL commands\nneeded to re-create the database.  Another is <code class=\"language-plaintext highlighter-rouge\">.read</code>, which reads a\nfile created by <code class=\"language-plaintext highlighter-rouge\">.dump</code> and restores the database.  A colleague of\nyours thinks that storing dump files (which are text) in version\ncontrol is a good way to track and manage changes to the database.\nWhat are the pros and cons of this approach?  (Hint: records aren’t\nstored in any particular order.)</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <h4 id=\"advantages\">Advantages</h4>\n    <ul>\n      <li>A version control system will be able to show differences between versions\nof the dump file; something it can’t do for binary files like databases</li>\n      <li>A VCS only saves changes between versions, rather than a complete copy of\neach version (save disk space)</li>\n      <li>The version control log will explain the reason for the changes in each version\nof the database</li>\n    </ul>\n\n    <h4 id=\"disadvantages\">Disadvantages</h4>\n    <ul>\n      <li>Artificial differences between commits because records don’t have a fixed order</li>\n    </ul>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- Try solutions here!</span>\n</code></pre></div></div>\n\n"],"ref_slides":[],"hands_on":true,"slides":false,"mod_date":"2022-10-18 09:52:08 +0000","pub_date":"2021-10-11 14:22:29 +0000","version":12,"quiz":[{"id":"recap.yml","path":"topics/data-science/tutorials/sql-advanced/quiz/recap.yml","title":"SQL Advanced Recap","contributors":["hexylena"]}],"api":"https://training.galaxyproject.org/training-material/api/topics/data-science/tutorials/sql-advanced/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"Foundations of Data Science","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial"}