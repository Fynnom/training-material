{"layout":"tutorial_hands_on","title":"Python - Type annotations","level":"Intermediate","requirements":[],"follow_up_training":[],"questions":["What is typing?","How does it improve code?","Can it help me?"],"objectives":["Understand the utility of annotating types on one's code","Understand the limits of type annotations in python"],"time_estimation":"30M","key_points":["Typing improves the correctness and quality of your code","It can ensure that editor provided hints are better and more accurate."],"subtopic":"python-modular","contributions":{"authorship":["hexylena"],"editing":["mvdbeek","pvanheus","dirowa","bazante1"],"funding":["avans-atgm"]},"priority":10,"notebook":{"language":"python","pyolite":true},"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00100","url":"/topics/data-science/tutorials/python-typing/tutorial.html","topic_name":"data-science","tutorial_name":"python-typing","dir":"topics/data-science/tutorials/python-typing","symlink":null,"id":"data-science/python-typing","ref_tutorials":["<p>In some languages type annotations are a core part of the language and types are checked at compile time, to ensure your code can never use the incorrect type of object. Python, and a few other dynamic languages, instead use <a href=\"https://en.wikipedia.org/wiki/Duck_typing\">“Duck Typing”</a> wherein the type of the object is less important than whether or not the correct methods or attributes are available.</p>\n\n<p>However, we can provide type hints as we write python which will allow our editor to type check code as we go, even if it is not typically enforced at any point.</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#types\" id=\"markdown-toc-types\">Types</a></li>\n  <li><a href=\"#but-why\" id=\"markdown-toc-but-why\">But why?</a></li>\n  <li><a href=\"#typing-variables\" id=\"markdown-toc-typing-variables\">Typing Variables</a></li>\n  <li><a href=\"#testing-for-types\" id=\"markdown-toc-testing-for-types\">Testing for Types</a></li>\n  <li><a href=\"#exercise\" id=\"markdown-toc-exercise\">Exercise</a></li>\n  <li><a href=\"#automation-with-monkeytype\" id=\"markdown-toc-automation-with-monkeytype\">Automation with MonkeyType</a></li>\n</ol>\n\n</blockquote>\n\n<h2 id=\"types\">Types</h2>\n\n<p>Types used for annotations can be any of the base types:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">str</span>\n<span class=\"nb\">int</span>\n<span class=\"nb\">float</span>\n<span class=\"nb\">bool</span>\n<span class=\"bp\">None</span>\n<span class=\"bp\">...</span>\n</code></pre></div></div>\n\n<p>or they can be relabeling of existing types, letting you create new types as needed to represent your internal data structures</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">NewType</span>\n\n<span class=\"n\">NameType</span> <span class=\"o\">=</span> <span class=\"nc\">NewType</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">NameType</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"n\">Point2D</span> <span class=\"o\">=</span> <span class=\"nc\">NewType</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Point2D</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<blockquote class=\"tip\">\n  <tip-title>Does `tuple` cause an issue?</tip-title>\n  <p>You might be on a python earlier than 3.9. Please update, or rewrite these as Tuple and List which must be imported.</p>\n</blockquote>\n\n<h2 id=\"but-why\">But why?</h2>\n\n<p>Imagine for a minute you have a situation like the following, take a minute to read and understand the code:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Fetch the user and history list\n</span><span class=\"p\">(</span><span class=\"n\">history_id</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"nc\">GetUserAndCurrentHistory</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">hexylena</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># And make sure all of the permissions are correct\n</span><span class=\"n\">history</span> <span class=\"o\">=</span> <span class=\"n\">History</span><span class=\"p\">.</span><span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"n\">history_id</span><span class=\"p\">)</span>\n<span class=\"n\">history</span><span class=\"p\">.</span><span class=\"nf\">share_with</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">)</span>\n<span class=\"n\">history</span><span class=\"p\">.</span><span class=\"nf\">save</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n  <ol>\n    <li>Can you be sure the <code class=\"language-plaintext highlighter-rouge\">history_id</code> and <code class=\"language-plaintext highlighter-rouge\">user_id</code> are in the correct order? It\nseems like potentially not, given the ordering of “user” and “history” in the\nfunction name, but without inspecting the definition of that function we\nwon’t know.</li>\n    <li>What happens if <code class=\"language-plaintext highlighter-rouge\">history_id</code> and <code class=\"language-plaintext highlighter-rouge\">user_id</code> are swapped?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <ol>\n      <li>This is unanswerable without the code.</li>\n      <li>\n        <p>Depending on the magnitude of <code class=\"language-plaintext highlighter-rouge\">history_id</code> and <code class=\"language-plaintext highlighter-rouge\">user_id</code>, those may be within allowable ranges. Take for example</p>\n\n        <table>\n          <thead>\n            <tr>\n              <th>User</th>\n              <th>History Id</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>1</td>\n              <td>1</td>\n            </tr>\n            <tr>\n              <td>1</td>\n              <td>2</td>\n            </tr>\n            <tr>\n              <td>2</td>\n              <td>3</td>\n            </tr>\n            <tr>\n              <td>2</td>\n              <td>4</td>\n            </tr>\n          </tbody>\n        </table>\n\n        <p>Given <code class=\"language-plaintext highlighter-rouge\">user_id=1</code> and <code class=\"language-plaintext highlighter-rouge\">history_id=2</code> we may intend that the second row in our tables, history #2 owned by user #1, is shared with that user, as they’re the owner. But if those are backwards, we’ll get a situation where history #1 is actually associated with user #1, but instead we’re sharing with user #2. We’ve created a situation where we’ve accidentally shared the wrong history with the wrong user! This could be a GDPR violation for our system and cause a lot of trouble.</p>\n      </li>\n    </ol>\n  </blockquote>\n</blockquote>\n\n<p>However, if we have type definitions for the <code class=\"language-plaintext highlighter-rouge\">UserId</code> and <code class=\"language-plaintext highlighter-rouge\">HistoryId</code> that declare them as their own types:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">NewType</span>\n\n<span class=\"n\">UserId</span> <span class=\"o\">=</span> <span class=\"nc\">NewType</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">UserId</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"n\">HistoryId</span> <span class=\"o\">=</span> <span class=\"nc\">NewType</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">HistoryId</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>And then defined on our function, e.g.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">GetUserAndCurrentHistory</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">UserId</span><span class=\"p\">,</span> <span class=\"n\">HistoryId</span><span class=\"p\">]:</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"nc\">UserId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># Pretend this is fetching from the database\n</span>    <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"nc\">HistoryId</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># Likewise\n</span>    <span class=\"nf\">return </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>we would be able to catch that, even if we call the variable <code class=\"language-plaintext highlighter-rouge\">user_id</code>, it will still be typed checked.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">history_id</span><span class=\"p\">:</span> <span class=\"n\">HistoryId</span>\n<span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"n\">UserId</span>\n\n<span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">history_id</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"nc\">GetUserAndCurrentHistory</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">hexylena</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">history_id</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"nc\">GetUserAndCurrentHistory</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">hexylena</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>If we’re using a code editor with typing hints, e.g. VSCode with PyLance, we’ll see something like:</p>\n\n<p><a href=\"../../images/typing.png\" rel=\"noopener noreferrer\"><img src=\"../../images/typing.png\" alt=\"Screenshot of VSCode showing the functions from above. The version with history_id first has a bright red line under the function call of GetUserAndCurrentHistory. A popup tab shown on hovering over the function name shows that Expression of type UserId cannot be assigned to declared type HistoryId. UserId is incompatible with HistoryId. \" width=\"1329\" height=\"346\" loading=\"lazy\" /></a></p>\n\n<p>Here we see that we’re not allowed to call this function this way, it’s simply impossible.</p>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n  <p>What happens if you execute this code?</p>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <p>It executes happily. Types are <strong>not enforced at runtime</strong>. So this case where they’re both custom types around an integer, Python sees that it expects an int in both versions of the function call, and that works fine for it. That is why we are repeatedly calling them “type hints”, they’re hints to your editor to show suggestions and help catch bugs, but they’re not enforced.\nIf you modified the line <code class=\"language-plaintext highlighter-rouge\">y = HistoryId(2)</code> to be something like <code class=\"language-plaintext highlighter-rouge\">y = \"test\"</code>, the code will also execute fine. Python doesn’t care that there’s suddenly a string where you promised and asked for, an int. It simply does not matter.</p>\n\n    <p>However, types <em>are</em> checked when you do operations involving them. Trying to get the <code class=\"language-plaintext highlighter-rouge\">len()</code> of an integer? That will raise an <code class=\"language-plaintext highlighter-rouge\">TypeError</code>, as integers don’t support the <code class=\"language-plaintext highlighter-rouge\">len()</code> call.</p>\n  </blockquote>\n</blockquote>\n\n<h2 id=\"typing-variables\">Typing Variables</h2>\n\n<p>Adding types to variables is easy, you’ve seen a few examples already:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Hello</span><span class=\"sh\">\"</span>\n<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">3.14159</span>\n<span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n</code></pre></div></div>\n\n<h3 id=\"complex-types\">Complex Types</h3>\n\n<p>But you can go further than this with things like <code class=\"language-plaintext highlighter-rouge\">tuple</code> and <code class=\"language-plaintext highlighter-rouge\">list</code> types:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Hi.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">g</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)]</span>\n</code></pre></div></div>\n\n<h3 id=\"typing-functions\">Typing Functions</h3>\n\n<p>Likewise you’ve seen an example of adding type hints to a function:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">reverse_list_of_ints</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]:</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>But this is a very specific function, right? We can reverse lists with more than just integers. For this, you can use <code class=\"language-plaintext highlighter-rouge\">Any</code>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">reverse_list</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]:</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>But this will lose the type information from the start of the function to the end. You said it was a <code class=\"language-plaintext highlighter-rouge\">list[Any]</code> so your editor might not provide any type hints there, even though you could know, that calling it with a <code class=\"language-plaintext highlighter-rouge\">list[int]</code> would always return the same type. Instead you can do</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">TypeVar</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nc\">TypeVar</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">T</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"c1\"># Implicitly any\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">reverse_list</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]:</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>Now this will allow the function to accept a list of any type of value, int, float, etc. But it will also accept types you might not have intended:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">w</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)]</span>\n<span class=\"nf\">reverse_list</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>We can lock down what types we’ll accept by using a <code class=\"language-plaintext highlighter-rouge\">Union</code> instead of <code class=\"language-plaintext highlighter-rouge\">Any</code>. With a <code class=\"language-plaintext highlighter-rouge\">Union</code>, we can define that a type in that position might be any one of a few more specific types. Say your function can only accept strings, integers, or floats:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Union</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">reverse_list</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]:</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>Here we have used a <code class=\"language-plaintext highlighter-rouge\">Union[A, B, ...]</code> to declare that it can only be one of these three types.</p>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n  <ol class=\"solution\">\n    <li>\n      <p>Are both of these valid definitions?`</p>\n\n      <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">q1</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">q2</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">2.3214</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">asdf</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>If that wasn’t what you expected, how would you define it so that it would be?</p>\n      <blockquote>\n        <solution-title></solution-title>\n        <p>Yes, both are valid, but maybe you expected a homogeneous list. If you wanted that, you could instead do</p>\n\n        <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">q3</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">q4</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">2.3243</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">asdf</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"c1\"># Fails\n</span></code></pre></div>        </div>\n      </blockquote>\n    </li>\n  </ol>\n</blockquote>\n\n<h3 id=\"optional\">Optional</h3>\n\n<p>Sometimes you have an argument to a function that is truly optional, maybe you have a different code path if it isn’t there, or you simply process things differently but still correctly. You can explicitly declare this by defining it as <code class=\"language-plaintext highlighter-rouge\">Optional</code></p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Optional</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">pretty</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">padding</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">lines</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">padding</span><span class=\"p\">:</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">padding</span><span class=\"si\">}</span><span class=\"s\"> </span><span class=\"si\">{</span><span class=\"n\">line</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">hello</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">world</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">你好</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">世界</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Without the optional argument\n</span><span class=\"nf\">pretty</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)</span>\n<span class=\"c1\"># And with the optional\n</span><span class=\"nf\">pretty</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">★</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>While this superficially <em>looks</em> like a keyword argument with a default value, however it’s subtly different. Here an explicit value of None is allowed, and we still know that it will either be a string, or it will be None. Not something that was possible with just a keyword argument.</p>\n\n<h2 id=\"testing-for-types\">Testing for Types</h2>\n\n<p>You can use <code class=\"language-plaintext highlighter-rouge\">mypy</code> to ensure that these type annotations are working in a project, this is a step you could add to your automated testing, if you have that. Using the <code class=\"language-plaintext highlighter-rouge\">HistoryId</code>/<code class=\"language-plaintext highlighter-rouge\">UserId</code> example from above, we can write that out into a script and test it out by running <code class=\"language-plaintext highlighter-rouge\">mypy</code> on that file:</p>\n\n<div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>mypy tmp.py\n<span class=\"go\">tmp.py:15: error: Incompatible types in assignment (expression has type \"UserId\", variable has type \"HistoryId\")\ntmp.py:15: error: Incompatible types in assignment (expression has type \"HistoryId\", variable has type \"UserId\")\n</span></code></pre></div></div>\n\n<p>Here it reports the errors in the console, and you can use this to prevent bad code from being committed.</p>\n\n<h2 id=\"exercise\">Exercise</h2>\n\n<p>Here is an example module that would be stored in <code class=\"language-plaintext highlighter-rouge\">corp/__init__.py</code></p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">repeat</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Return a list containing n references to x.</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"n\">n</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">print_capitalized</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Print x capitalized, and return x.</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">capitalize</span><span class=\"p\">())</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">concatenate</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Add two strings together.</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n</code></pre></div></div>\n\n<p>And here are some example invocations of that module, as found in <code class=\"language-plaintext highlighter-rouge\">test.py</code></p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">corp</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"nf\">repeat</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">A</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"c1\"># Should return [\"A\", \"A\", \"A\"]\n</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"nf\">print_capitalized</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">hElLo WorLd</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"c1\"># Should print Hello World\n</span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"nf\">concatenate</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Hi</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Bob</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"c1\"># HiBob\n</span></code></pre></div></div>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Add type annotations</hands-on-title>\n  <ol>\n    <li>Add type annotations to each of those functions AND the variables <code class=\"language-plaintext highlighter-rouge\">x</code>, <code class=\"language-plaintext highlighter-rouge\">y</code>, <code class=\"language-plaintext highlighter-rouge\">z</code></li>\n    <li>How did you know which types were appropriate?</li>\n    <li>Does <code class=\"language-plaintext highlighter-rouge\">mypy</code> approve of your annotations? (Run <code class=\"language-plaintext highlighter-rouge\">mypy test.py</code>, once you’ve written the above files out to their appropriate locations.)</li>\n  </ol>\n</blockquote>\n\n<blockquote class=\"solution\">\n  <solution-title></solution-title>\n  <ol>\n    <li>\n      <p>The proper annotations:</p>\n\n      <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">repeat</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n<span class=\"c1\"># Or\n</span><span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">TypeVar</span>\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nc\">TypeVar</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">T</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">repeat</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]:</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">print_capitalized</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">concatenate</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span><span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n</code></pre></div>      </div>\n\n      <p>and</p>\n\n      <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">...</span>\n<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"bp\">...</span>\n<span class=\"n\">z</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"bp\">...</span>\n</code></pre></div>      </div>\n    </li>\n    <li>You might have discovered this by a combination of looking at the function definitions and their documentation, and perhaps also the sample invocations and what types were passed there.</li>\n    <li>We hope so!</li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"automation-with-monkeytype\">Automation with MonkeyType</h2>\n\n<p>You can use MonkeyType to automatically apply type annotations to your code. Based on the execution of the code, it will make a best guess about what types are supported.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Using MonkeyType to generate automatic annotations</hands-on-title>\n\n  <ol>\n    <li>Create a folder for a module named <code class=\"language-plaintext highlighter-rouge\">some</code></li>\n    <li>Touch <code class=\"language-plaintext highlighter-rouge\">some/__init__.py</code> to ensure it’s importable as a python module</li>\n    <li>\n      <p>Create <code class=\"language-plaintext highlighter-rouge\">some/module.py</code> and add the following contents:</p>\n\n      <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">B</span>\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Create a script that uses that module:</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>from some.module import add\n   \nadd(1, 2)\n</code></pre></div>      </div>\n    </li>\n    <li><code class=\"language-plaintext highlighter-rouge\">pip install monkeytype</code></li>\n    <li>\n      <p>Run MonkeyType to generate the annotations</p>\n\n      <div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"go\">monkeytype run myscript.py\n</span></code></pre></div>      </div>\n    </li>\n    <li>\n      <p>View the generated annotations</p>\n\n      <div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"go\">monkeytype stub myscript.py\n</span></code></pre></div>      </div>\n    </li>\n  </ol>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n  <ol>\n    <li>What was the output of that command?</li>\n    <li>This function will accept strings as well, add a statement to exercise that in <code class=\"language-plaintext highlighter-rouge\">myscript.py</code> and re-run <code class=\"language-plaintext highlighter-rouge\">monkeytype run</code> and <code class=\"language-plaintext highlighter-rouge\">monkeytype stub</code>. What is the new output?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <ol>\n      <li>\n        <p>The expected output is:</p>\n\n        <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span> <span class=\"bp\">...</span>\n</code></pre></div>        </div>\n      </li>\n      <li>\n        <p>You can add a statement like <code class=\"language-plaintext highlighter-rouge\">add(\"a\", \"b\")</code> below <code class=\"language-plaintext highlighter-rouge\">add(1, 2)</code> to see:</p>\n\n        <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]:</span> <span class=\"bp\">...</span>\n</code></pre></div>        </div>\n      </li>\n    </ol>\n  </blockquote>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n  <p>Why is it different?</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <p>Because MonkeyType works by running the code provided (<code class=\"language-plaintext highlighter-rouge\">myscript.py</code>) and annotating based on what executions it saw. In the first invocation it had not seen any calls to <code class=\"language-plaintext highlighter-rouge\">add()</code> with strings, so it only reported <code class=\"language-plaintext highlighter-rouge\">int</code> as acceptable types. However, the second time it saw <code class=\"language-plaintext highlighter-rouge\">str</code>s as well. Can you think of another type that would be supported by this operation, that was not caught? (list!)</p>\n  </blockquote>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n  <ol>\n    <li>Does that type annotation make sense based on what you’ve learned today?</li>\n    <li>Can you write a better type annoation based on what you know?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <ol>\n      <li>It works, but it’s not a great type annotation. Here the description looks like it can accept two <code class=\"language-plaintext highlighter-rouge\">int</code>s and return a <code class=\"language-plaintext highlighter-rouge\">str</code> which isn’t correct.</li>\n      <li>\n        <p>Here is a better type annotation</p>\n\n        <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">TypeVar</span>\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"nc\">TypeVar</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">T</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span>\n   \n<span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">T</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</code></pre></div>        </div>\n      </li>\n    </ol>\n  </blockquote>\n</blockquote>\n"],"ref_slides":[],"video_library":{"tutorial":null,"slides":null,"demo":null,"both":null,"session":null},"hands_on":true,"slides":false,"mod_date":"2023-02-13 13:04:13 +0000","pub_date":"2022-10-19 13:04:07 +0000","version":16,"api":"https://training.galaxyproject.org/training-material/api/topics/data-science/tutorials/python-typing/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"Foundations of Data Science","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial","contributors":[{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"},{"name":"Marius van den Beek","joined":"2018-06","id":"mvdbeek","url":"https://training.galaxyproject.org/training-material/api/contributors/mvdbeek.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/mvdbeek/"},{"name":"Peter van Heusden","twitter":"pvanheus","orcid":"0000-0001-6553-5274","joined":"2017-09","bio":"Research at the South African National Bioinformatics Institute","id":"pvanheus","url":"https://training.galaxyproject.org/training-material/api/contributors/pvanheus.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/pvanheus/"},{"name":"Donny Vrins","joined":"2021-10","linkedin":"Donny Vrins","email":"D.vrins@live.nl","former_affiliations":["avans-atgm"],"id":"dirowa","url":"https://training.galaxyproject.org/training-material/api/contributors/dirowa.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/dirowa/"},{"name":"Bazante Sanders","joined":"2020-12","affiliations":["avans-atgm"],"id":"bazante1","url":"https://training.galaxyproject.org/training-material/api/contributors/bazante1.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/bazante1/"},{"name":"Avans Hogeschool","joined":"2020-11","url":"https://training.galaxyproject.org/training-material/api/organisations/avans-atgm.json","avatar":"/training-material/shared/images/logo-avans.png","members":["bazante1"],"former_members":["dirowa","hexylena"],"id":"avans-atgm","page":"https://training.galaxyproject.org/training-material/hall-of-fame/avans-atgm/"}]}