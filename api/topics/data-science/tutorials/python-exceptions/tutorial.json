{"layout":"tutorial_hands_on","title":"Python - Try & Except","level":"Introductory","requirements":[],"follow_up_training":[],"questions":["How do I try to execute code, knowing it might fail?","What are some situations where this is important?","How can I write my own exceptions."],"objectives":["catch an exception","raise your own exception"],"time_estimation":"20M","key_points":["raise lets your raise your own `Exception`s","This is mostly used by library authors (which you might become!)","Use `try`/`except` to catch expected errors and work around them (if possible)","finally lets you cleanup your temporary files, if you created some."],"subtopic":"python-modular","contributors":[{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"},{"name":"Donny Vrins","joined":"2021-10","linkedin":"Donny Vrins","email":"D.vrins@live.nl","former_affiliations":["avans-atgm"],"id":"dirowa","url":"https://training.galaxyproject.org/training-material/api/contributors/dirowa.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/dirowa/"},{"name":"Bazante Sanders","joined":"2020-12","affiliations":["avans-atgm"],"id":"bazante1","url":"https://training.galaxyproject.org/training-material/api/contributors/bazante1.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/bazante1/"}],"priority":8,"notebook":{"language":"python","pyolite":true},"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00086","url":"/topics/data-science/tutorials/python-exceptions/tutorial.html","topic_name":"data-science","tutorial_name":"python-exceptions","dir":"topics/data-science/tutorials/python-exceptions","symlink":null,"id":"data-science/python-exceptions","ref_tutorials":["<p>Try/except are a construct in Python used to catch a potential exception. Sometimes things go wrong in your code! Or in someone else’s code in a module. Sometimes some errors might be expected like when you try and read a user supplied file, maybe it isn’t available because they’ve specified the wrong path.</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#raise\" id=\"markdown-toc-raise\">Raise</a></li>\n  <li><a href=\"#try--except\" id=\"markdown-toc-try--except\">Try &amp; Except</a></li>\n  <li><a href=\"#finally\" id=\"markdown-toc-finally\">Finally</a></li>\n  <li><a href=\"#fallback\" id=\"markdown-toc-fallback\">Fallback</a></li>\n</ol>\n\n</blockquote>\n\n<h2 id=\"raise\">Raise</h2>\n\n<p>When you’re writing code, sometimes there are errors you might need to handle:</p>\n\n<ul>\n  <li>If you’re calculating the mean of a set of numbers, and the list is empty. You don’t want to divide by <code class=\"language-plaintext highlighter-rouge\">len(numbers)</code> and trigger a Zero Division Error.</li>\n  <li>If you’re opening a file, there maybe a chance that the file is not found.</li>\n</ul>\n\n<p>Using try/excepts allow you to:</p>\n\n<ul>\n  <li>provide friendlier and more useful error messages</li>\n  <li>handle expected error cases</li>\n</ul>\n\n<p>For instance, returning to the <code class=\"language-plaintext highlighter-rouge\">mean()</code> function example, what should <code class=\"language-plaintext highlighter-rouge\">mean([])</code> return for a hypothetical mean function that calculates the average of a list of numbers. Should it return 0? It probably should return an error. Let’s look at some example code:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">mean</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">)</span>\n\n<span class=\"nf\">mean</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"nf\">mean</span><span class=\"p\">([])</span>\n</code></pre></div></div>\n\n<p>This raises a <code class=\"language-plaintext highlighter-rouge\">ZeroDivisionError</code>  but we can make this a more friendly error message by raising our own exception.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">mean</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">numbers</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">ValueError</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">You are calculating the mean of an empty list, which is not possible.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">)</span>\n\n<span class=\"nf\">mean</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"nf\">mean</span><span class=\"p\">([])</span>\n</code></pre></div></div>\n\n<blockquote class=\"tip\">\n  <tip-title>Where do ValueError, ZeroDivisionError come from?</tip-title>\n  <p>There are loads of different types of exception codes! <a href=\"https://docs.python.org/3/library/exceptions.html\">The python documentation has a large list</a> of exceptions and some descriptions for when or why those exceptions might be raised.</p>\n</blockquote>\n\n<p>Now we get a much more useful error message from the function! Using <code class=\"language-plaintext highlighter-rouge\">raise</code> is especially important for <em>library authors</em>, people writing python modules that we all use. If they provide useful error messages, it helps you as an end user understand what’s happening.</p>\n\n<h2 id=\"try--except\">Try &amp; Except</h2>\n\n<p>Let’s look at how you would handle one of these exceptions, we’ll continue with the <code class=\"language-plaintext highlighter-rouge\">mean()</code> example above.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nf\">mean</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Result is </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"nb\">ValueError</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">We cannot calculate the mean</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Here we use <code class=\"language-plaintext highlighter-rouge\">try:</code> to setup a new block, and this code is <strong>tried</strong>, Python attempts to execute it. Below are one or more <code class=\"language-plaintext highlighter-rouge\">except:</code> blocks which catch specific errors. Here we have specifically said we know a ValueError can happen, and decided to handle it.</p>\n\n<p>Or for another example, accessing a user supplied file. Oftentimes users will call your program and supply a non-existent, or inacessible file. Here you can use multiple <code class=\"language-plaintext highlighter-rouge\">except</code> blocks to catch all of those potential errors.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">user_supplied_file</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">does-not-exist.txt</span><span class=\"sh\">'</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">user_supplied_file</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">r</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"nb\">FileNotFoundError</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">The path you supplied (</span><span class=\"si\">{</span><span class=\"n\">user_supplied_file</span><span class=\"si\">}</span><span class=\"s\">) doesn</span><span class=\"sh\">'</span><span class=\"s\">t exist, please double check it!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">PermissionError</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">You supplied a valid file, but it is unreadable. Try changing it</span><span class=\"sh\">'</span><span class=\"s\">s permissions with `chmod +r </span><span class=\"si\">{</span><span class=\"n\">user_supplied_file</span><span class=\"si\">}</span><span class=\"s\">`</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Failing to open a file raises a <code class=\"language-plaintext highlighter-rouge\">FileNotFoundError</code> which indicates the file isn’t available, and <code class=\"language-plaintext highlighter-rouge\">PermissionError</code> indicates that a file is unreadable. However in practice, sometimes you’ll see something like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Bad!\ntry:\n    doSomething()\nexcept:\n    print(\"error\")\n</code></pre></div></div>\n\n<p>This is called a <strong>bare exception</strong>, and will catch any exception, compared with <code class=\"language-plaintext highlighter-rouge\">except ValueError</code> which only catches value errors. People consider this generally a bad idea, termed <em>code smell</em>. (Because it smells (appears) bad!)</p>\n\n<h2 id=\"finally\">Finally</h2>\n\n<p>The last portion of the <code class=\"language-plaintext highlighter-rouge\">try:</code>/<code class=\"language-plaintext highlighter-rouge\">except:</code> block is <code class=\"language-plaintext highlighter-rouge\">finally:</code>, a third block which lets us do cleanup. It’s often very nice to your users that if your program fails halfway through, that you cleanup after yourself.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">os</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">gene_query.fa</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">w</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">handle</span><span class=\"p\">:</span>\n        <span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">&gt;some fasta sequence we want to search against a database</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># runQuery('gene_query.fa')\n</span>\n    <span class=\"c1\"># But here we have an error! Something goes wrong!\n</span>    <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"mi\">0</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"c1\"># And now our results are invalid.\n</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Something went wrong! Oh no! Check your inputs.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"c1\"># So we should cleanup this temporary file we created, so it doesn't cause\n</span>    <span class=\"c1\"># problems or distract the user from the results file.\n</span>    <span class=\"c1\"># This function will delete a file from your computer:\n</span>    <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">gene_query.fa</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"fallback\">Fallback</h2>\n\n<p>Sometimes we can use <code class=\"language-plaintext highlighter-rouge\">try</code>/<code class=\"language-plaintext highlighter-rouge\">except</code> to have a fallback option. Consider the pseudocode below:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>try:\n    runBlast()\nexcept BlastNotAvailable:\n    try:\n        runBLAT()\n    except BLATnotAvailable:\n        print(\"Neither Blast nor BLAT were available.\")\n</code></pre></div></div>\n\n<p>Sometimes you have a fallback option, some other tool you can use in its place. When that’s possible, you can use <code class=\"language-plaintext highlighter-rouge\">try</code> and <code class=\"language-plaintext highlighter-rouge\">except</code> to handle those cases and work around potential issues. But this isn’t always the case, sometimes you just need to print your error message and stop executing code.</p>\n"],"ref_slides":[],"video_library":{"tutorial":null,"slides":null,"demo":null,"both":null,"session":null},"hands_on":true,"slides":false,"mod_date":"2023-02-13 13:04:13 +0000","pub_date":"2022-04-25 11:43:04 +0000","version":9,"api":"https://training.galaxyproject.org/training-material/api/topics/data-science/tutorials/python-exceptions/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"Foundations of Data Science","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial"}