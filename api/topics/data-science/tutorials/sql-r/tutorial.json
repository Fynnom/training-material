{"layout":"tutorial_hands_on","title":"SQL with R","level":"Intermediate","zenodo_link":null,"requirements":[{"type":"internal","topic_name":"data-science","tutorials":["r-basics","r-advanced"]},{"type":"internal","topic_name":"data-science","tutorials":["sql-advanced"]}],"follow_up_training":[],"questions":["How can I access databases from programs written in R?"],"objectives":["Write short programs that execute SQL queries.","Trace the execution of a program that contains an SQL query.","Explain why most database applications are written in a general-purpose language rather than in SQL."],"time_estimation":"45M","key_points":["Data analysis languages have libraries for accessing databases.","To connect to a database, a program must use a library specific to that database manager.","R's libraries can be used to directly query or read from a database.","Programs can read query results in batches or all at once.","Queries should be written using parameter substitution, not string formatting.","R has multiple helper functions to make working with databases easier."],"contributors":[{"name":"The Carpentries","joined":"2021-09","id":"carpentries","url":"https://training.galaxyproject.org/training-material/api/organisations/carpentries.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/carpentries/"},{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"},{"name":"Avans Hogeschool","joined":"2020-11","url":"https://training.galaxyproject.org/training-material/api/organisations/avans-atgm.json","avatar":"/training-material/shared/images/logo-avans.png","members":["bazante1"],"former_members":["dirowa","hexylena"],"id":"avans-atgm","page":"https://training.galaxyproject.org/training-material/hall-of-fame/avans-atgm/"}],"subtopic":"sql","notebook":{"language":"r"},"tags":["SQL","R","rmarkdown-notebook","jupyter-notebook"],"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00110","url":"/topics/data-science/tutorials/sql-r/tutorial.html","topic_name":"data-science","tutorial_name":"sql-r","dir":"topics/data-science/tutorials/sql-r","symlink":null,"id":"data-science/sql-r","ref_tutorials":["<p>In this tutorial you’ll learn to use SQL via R. Some R and SQL experience is a pre-requisite.</p>\n\n<blockquote class=\"comment\">\n  <comment-title></comment-title>\n\n  <p>This tutorial is <strong>significantly</strong> based on <a href=\"https://carpentries.org\">the Carpentries</a> <a href=\"https://github.com/swcarpentry/sql-novice-survey/\">Databases and SQL</a> lesson, which is licensed CC-BY 4.0.</p>\n\n  <p>Abigail Cabunoc and Sheldon McKay (eds): “Software Carpentry: Using Databases and SQL.”  Version 2017.08, August 2017,\n<a href=\"https://github.com/swcarpentry/sql-novice-survey\">github.com/swcarpentry/sql-novice-survey</a>, <a href=\"https://doi.org/10.5281/zenodo.838776\">https://doi.org/10.5281/zenodo.838776</a></p>\n\n  <p>Adaptations have been made to make this work better in a GTN/Galaxy environment.</p>\n</blockquote>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#programming-with-databases---r\" id=\"markdown-toc-programming-with-databases---r\">Programming with Databases - R</a>    <ol>\n      <li><a href=\"#database-helper-functions-in-r\" id=\"markdown-toc-database-helper-functions-in-r\">Database helper functions in R</a></li>\n    </ol>\n  </li>\n</ol>\n\n</blockquote>\n\n<p>For this tutorial we need to download a database that we will use for the queries.</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">download.file</span><span class=\"p\">(</span><span class=\"s2\">\"http://swcarpentry.github.io/sql-novice-survey/files/survey.db\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">destfile</span><span class=\"o\">=</span><span class=\"s2\">\"survey.db\"</span><span class=\"p\">)</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<h1 id=\"programming-with-databases---r\">Programming with Databases - R</h1>\n\n<p>Let’s have a look at how to access a database from\na data analysis language like R.\nOther languages use almost exactly the same model:\nlibrary and function names may differ,\nbut the concepts are the same.</p>\n\n<p>Here’s a short R program that selects latitudes and longitudes\nfrom an SQLite database stored in a file called <code class=\"language-plaintext highlighter-rouge\">survey.db</code>:</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"n\">RSQLite</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">connection</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">dbConnect</span><span class=\"p\">(</span><span class=\"n\">SQLite</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"s2\">\"survey.db\"</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">dbGetQuery</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"SELECT Site.lat, Site.long FROM Site;\"</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">dbDisconnect</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>The program starts by importing the <code class=\"language-plaintext highlighter-rouge\">RSQLite</code> library.\nIf we were connecting to MySQL, DB2, or some other database,\nwe would import a different library,\nbut all of them provide the same functions,\nso that the rest of our program does not have to change\n(at least, not much)\nif we switch from one database to another.</p>\n\n<p>Line 2 establishes a connection to the database.\nSince we’re using SQLite,\nall we need to specify is the name of the database file.\nOther systems may require us to provide a username and password as well.</p>\n\n<p>On line 3, we retrieve the results from an SQL query.\nIt’s our job to make sure that SQL is properly formatted;\nif it isn’t,\nor if something goes wrong when it is being executed,\nthe database will report an error.\nThis result is a dataframe with one row for each entry and one column for each column in the database.</p>\n\n<p>Finally, the last line closes our connection,\nsince the database can only keep a limited number of these open at one time.\nSince establishing a connection takes time,\nthough,\nwe shouldn’t open a connection,\ndo one operation,\nthen close the connection,\nonly to reopen it a few microseconds later to do another operation.\nInstead,\nit’s normal to create one connection that stays open for the lifetime of the program.</p>\n\n<p>Queries in real applications will often depend on values provided by users.\nFor example,\nthis function takes a user’s ID as a parameter and returns their name:</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"n\">RSQLite</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"n\">connection</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">dbConnect</span><span class=\"p\">(</span><span class=\"n\">SQLite</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"s2\">\"survey.db\"</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"n\">getName</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">personID</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"n\">query</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">paste0</span><span class=\"p\">(</span><span class=\"s2\">\"SELECT personal || ' ' || family FROM Person WHERE id =='\"</span><span class=\"p\">,</span><span class=\"w\">\n                  </span><span class=\"n\">personID</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"';\"</span><span class=\"p\">)</span><span class=\"w\">\n  </span><span class=\"nf\">return</span><span class=\"p\">(</span><span class=\"n\">dbGetQuery</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">query</span><span class=\"p\">))</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n\n</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">paste</span><span class=\"p\">(</span><span class=\"s2\">\"full name for dyer:\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">getName</span><span class=\"p\">(</span><span class=\"s1\">'dyer'</span><span class=\"p\">)))</span><span class=\"w\">\n\n</span><span class=\"n\">dbDisconnect</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>We use string concatenation on the first line of this function\nto construct a query containing the user ID we have been given.\nThis seems simple enough,\nbut what happens if someone gives us this string as input?</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>dyer'; DROP TABLE Survey; SELECT '\n</code></pre></div></div>\n\n<p>It looks like there’s garbage after the user’s ID,\nbut it is very carefully chosen garbage.\nIf we insert this string into our query,\nthe result is:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT personal || ' ' || family FROM Person WHERE id='dyer'; DROP TABLE Survey; SELECT '';\n</code></pre></div></div>\n\n<p>If we execute this,\nit will erase one of the tables in our database.</p>\n\n<p>This is called an SQL injection attack,\nand it has been used to attack thousands of programs over the years.\nIn particular,\nmany web sites that take data from users insert values directly into queries\nwithout checking them carefully first.\nA very <a href=\"https://xkcd.com/327/\">relevant XKCD</a> that explains the\ndangers of using raw input in queries a little more succinctly:</p>\n\n<p><a href=\"../../images/xkcd/exploits_of_a_mom.png\" rel=\"noopener noreferrer\"><img src=\"../../images/xkcd/exploits_of_a_mom.png\" alt=\"A 4 panel comic, in the first panel a person is shown answering the phone, hearing that their son's school has some computer trouble. In panel 2 they apologises asking if their child broke something. In panel 3, the unseen person on the other end of the phone call asks if they really named their son Robert'); Drop table students;--? They respond saying 'oh yes. little bobby tables we call him.' In the 4th panel the caller says 'well we have lost this years student records, I hope you're happy.' They respond 'And I hope you've learned to sanitize your database inputs'.\" width=\"666\" height=\"205\" loading=\"lazy\" /></a></p>\n\n<p>Since an unscrupulous parent might try to smuggle commands into our queries in many different ways,\nthe safest way to deal with this threat is\nto replace characters like quotes with their escaped equivalents,\nso that we can safely put whatever the user gives us inside a string.\nWe can do this by using a prepared statement\ninstead of formatting our statements as strings.\nHere’s what our example program looks like if we do this:</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"n\">RSQLite</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">connection</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">dbConnect</span><span class=\"p\">(</span><span class=\"n\">SQLite</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"s2\">\"survey.db\"</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"n\">getName</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">personID</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"n\">query</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"s2\">\"SELECT personal || ' ' || family FROM Person WHERE id == ?\"</span><span class=\"w\">\n  </span><span class=\"nf\">return</span><span class=\"p\">(</span><span class=\"n\">dbGetPreparedQuery</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">query</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data.frame</span><span class=\"p\">(</span><span class=\"n\">personID</span><span class=\"p\">)))</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n\n</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">paste</span><span class=\"p\">(</span><span class=\"s2\">\"full name for dyer:\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">getName</span><span class=\"p\">(</span><span class=\"s1\">'dyer'</span><span class=\"p\">)))</span><span class=\"w\">\n\n</span><span class=\"n\">dbDisconnect</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>The key changes are in the query string and the <code class=\"language-plaintext highlighter-rouge\">dbGetQuery</code> call (we use dbGetPreparedQuery instead).\nInstead of formatting the query ourselves,\nwe put question marks in the query template where we want to insert values.\nWhen we call <code class=\"language-plaintext highlighter-rouge\">dbGetPreparedQuery</code>,\nwe provide a dataframe\nthat contains as many values as there are question marks in the query.\nThe library matches values to question marks in order,\nand translates any special characters in the values\ninto their escaped equivalents\nso that they are safe to use.</p>\n\n<blockquote class=\"question\">\n  <question-title>Filling a Table vs. Printing Values</question-title>\n\n  <p>Write an R program that creates a new database in a file called\n<code class=\"language-plaintext highlighter-rouge\">original.db</code> containing a single table called <code class=\"language-plaintext highlighter-rouge\">Pressure</code>, with a\nsingle field called <code class=\"language-plaintext highlighter-rouge\">reading</code>, and inserts 100,000 random numbers\nbetween 10.0 and 25.0.  How long does it take this program to run?\nHow long does it take to run a program that simply writes those\nrandom numbers to a file?</p>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title>Filtering in SQL vs. Filtering in R</question-title>\n\n  <p>Write an R program that creates a new database called\n<code class=\"language-plaintext highlighter-rouge\">backup.db</code> with the same structure as <code class=\"language-plaintext highlighter-rouge\">original.db</code> and copies all\nthe values greater than 20.0 from <code class=\"language-plaintext highlighter-rouge\">original.db</code> to <code class=\"language-plaintext highlighter-rouge\">backup.db</code>.\nWhich is faster: filtering values in the query, or reading\neverything into memory and filtering in R?</p>\n</blockquote>\n\n<h2 id=\"database-helper-functions-in-r\">Database helper functions in R</h2>\n\n<p>R’s database interface packages (like <code class=\"language-plaintext highlighter-rouge\">RSQLite</code>) all share\na common set of helper functions useful for exploring databases and\nreading/writing entire tables at once.</p>\n\n<p>To view all tables in a database, we can use <code class=\"language-plaintext highlighter-rouge\">dbListTables()</code>:</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">connection</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">dbConnect</span><span class=\"p\">(</span><span class=\"n\">SQLite</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"s2\">\"survey.db\"</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">dbListTables</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>To view all column names of a table, use <code class=\"language-plaintext highlighter-rouge\">dbListFields()</code>:</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">dbListFields</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"Survey\"</span><span class=\"p\">)</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>To read an entire table as a dataframe, use <code class=\"language-plaintext highlighter-rouge\">dbReadTable()</code>:</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">dbReadTable</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"Person\"</span><span class=\"p\">)</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>Finally to write an entire table to a database, you can use <code class=\"language-plaintext highlighter-rouge\">dbWriteTable()</code>.\nNote that we will always want to use the <code class=\"language-plaintext highlighter-rouge\">row.names = FALSE</code> argument or R\nwill write the row names as a separate column.\nIn this example we will write R’s built-in <code class=\"language-plaintext highlighter-rouge\">iris</code> dataset as a table in <code class=\"language-plaintext highlighter-rouge\">survey.db</code>.</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">dbWriteTable</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"iris\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iris</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">row.names</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">FALSE</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"n\">dbReadTable</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"iris\"</span><span class=\"p\">))</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>And as always, remember to close the database connection when done!</p>\n\n<div class=\"language-r highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">dbDisconnect</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span><span class=\"w\">\n</span></code></pre></div></div>\n"],"ref_slides":[],"video_library":{"tutorial":null,"slides":null,"demo":null,"both":null,"session":null},"hands_on":true,"slides":false,"mod_date":"2023-11-15 11:27:38 +0000","pub_date":"2021-10-11 14:22:29 +0000","version":10,"api":"https://training.galaxyproject.org/training-material/api/topics/data-science/tutorials/sql-r/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"Foundations of Data Science","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial"}