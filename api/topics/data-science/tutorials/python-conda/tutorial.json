{"layout":"tutorial_hands_on","title":"Conda Environments For Software Development","level":"Intermediate","requirements":[],"follow_up_training":[],"time_estimation":"30M","questions":["What are Conda environments in software development and why you should use them?","How can we manage Conda environments and external (third-party) libraries via Conda?"],"objectives":["Set up a Conda environment for our software project using `conda`.","Run our software from the command line."],"key_points":["Environments keep Python versions and dependencies required by different projects separate.","An environment is itself a directory structure of software and libraries","Use `conda create -n <name>` to create and manage environments.","Use `conda install` to install and manage additional external (third-party) libraries.","Conda allows you to declare all dependencies for a project in a separate file (by convention called `environment.yml`) which can be shared with collaborators/users and used to replicate an environment.","Use `conda env export > environment.yml` to take snapshot of your project's dependencies.","Use `conda env create -f environment.yml` to replicate someone else's environment on your machine from the `environment.yml` file."],"subtopic":"python-modular","contributions":{"authorship":["carpentries","hexylena"],"funding":["carpentries","avans-atgm"]},"tags":["conda","jupyter-notebook"],"priority":10,"notebook":{"language":"bash"},"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00085","url":"/topics/data-science/tutorials/python-conda/tutorial.html","topic_name":"data-science","tutorial_name":"python-conda","dir":"topics/data-science/tutorials/python-conda","symlink":null,"id":"data-science/python-conda","ref_tutorials":["<p>Conda environments, like Python Virtual Environments allow you to easily manage your installed packages and prevent conflicts between different project’s dependencies. This tutorial follows an identical structure to the virtualenv tutorial, but with conda.</p>\n\n<blockquote class=\"comment\">\n  <comment-title></comment-title>\n\n  <p>This tutorial is significantly based on <a href=\"https://carpentries.org\">the Carpentries</a> lesson <a href=\"https://carpentries-incubator.github.io/python-intermediate-development/\">“Intermediate Research Software Development”</a>.</p>\n\n</blockquote>\n\n<p>If you have a python project you are using, you will often see something like\nfollowing two lines somewhere at the top.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">matplotlib</span> <span class=\"kn\">import</span> <span class=\"n\">pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n<span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n</code></pre></div></div>\n\n<p>This means that our code requires two <em>external libraries</em> (also called third-party packages or dependencies) -\n<code class=\"language-plaintext highlighter-rouge\">numpy</code> and <code class=\"language-plaintext highlighter-rouge\">matplotlib</code>.</p>\n\n<p>Python applications often use external libraries that don’t come as part of the standard Python distribution. This means\nthat you will have to use a <em>package manager</em> tool to install them on your system.</p>\n\n<p>Applications will also sometimes need a\nspecific version of an external library (e.g. because they require that a particular\nbug has been fixed in a newer version of the library), or a specific version of Python interpreter.\nThis means that each Python application you work with may require a different setup and a set of dependencies so it\nis important to be able to keep these configurations separate to avoid confusion between projects.\nThe solution for this problem is to create a self-contained \n<em>environment</em> per project, which contains a particular version of Python installation plus a number of\nadditional external libraries.</p>\n\n<p>If you see something like</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">pysam</span>\n</code></pre></div></div>\n\n<p>You know you’ll need additional packages installed on your system, as it relies on <a href=\"https://github.com/samtools/htslib\">htslib, a C library for working with HTS data</a>. This usually means installing additional packages and things that are not always available from within Python’s packaging ecosystem.</p>\n\n<p>Conda environments go beyond virtual environments, and make it easier to develop, run, test and share code with others. In this tutorial, we learn how\nto set up an environment to develop our code and manage our external dependencies.</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#conda-environments\" id=\"markdown-toc-conda-environments\">Conda Environments</a></li>\n</ol>\n\n</blockquote>\n\n<h2 id=\"conda-environments\">Conda Environments</h2>\n\n<p>So what exactly are conda environments, and why use them?</p>\n\n<p>A conda environment is an <strong>isolated working copy</strong> of specific versions of\none of more packages and all of their dependencies.</p>\n\n<p>This is in fact simply a <em>directory with a particular structure</em> which includes\nlinks to and enables multiple side-by-side installations of different packages\nor different versions of the same external library to coexist on your machine\nand only one to be selected for each of our projects. This allows you to work on\na particular project without worrying about affecting other projects on your\nmachine.</p>\n\n<p>As more external libraries are added to your project over time, you can add them to\nits specific environment and avoid a great deal of confusion by having separate (smaller) environments\nfor each project rather than one huge global environment with potential package version clashes. Another big motivator\nfor using environments is that they make sharing your code with others much easier (as we will see shortly).\nHere are some typical scenarios where the usage of environments is highly recommended (almost unavoidable):</p>\n\n<ul>\n  <li>You have two dependencies with conflicting dependencies! You cannot install\nthe specific version of software X alongside software Y, as they both depend\non different versions of a dependency, that cannot co-exist. This is solved by\nhaving different environments for both.</li>\n  <li>You have an older project that only works under Python 2. You do not have the time to migrate the project to Python 3\nor it may not even be possible as some of the third party dependencies are not available under Python 3. You have to\nstart another project under Python 3. The best way to do this on a single machine is to set up two separate Python\nenvironments.</li>\n  <li>One of your Python 3 projects is locked to use a particular older version of a third party dependency. You cannot use the\nlatest version of the\ndependency as it breaks things in your project. In a separate branch of your project, you want to try and fix problems\nintroduced by the new version of the dependency without affecting the working version of your project. You need to set up\na separate conda environments for your branch to ‘isolate’ your code while testing the new feature.</li>\n</ul>\n\n<p>You do not have to worry too much about specific versions of external libraries that your project depends on most of the time.\nConda environments enable you to always use the latest available version without specifying it explicitly.\nThey also enable you to use a specific older version of a package for your project, should you need to.</p>\n\n<blockquote class=\"tip\">\n  <tip-title>A Specific Package Version is Only Ever Installed Once</tip-title>\n  <p>Note that you will not have a separate package installations for each of your projects - they will only\never be installed once on your system (in <code class=\"language-plaintext highlighter-rouge\">$CONDA/pkgs</code>) but will be referenced from different environments.</p>\n</blockquote>\n\n<h3 id=\"managing-conda-environments\">Managing Conda Environments</h3>\n\n<p>There are several commonly used command line tools for managing environments:</p>\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">homebrew</code>, historically used on OSX to manage packages.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">nix</code>, which has a steep learning curve but allows you to declare the state of your entire system</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">conda</code>, package and environment management system (also included as part of the Anaconda Python distribution often used by the scientific community)</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">docker</code> and <code class=\"language-plaintext highlighter-rouge\">singularity</code> are somewhat similar to other environment managers, as they can have isolated images with software and dependencies.</li>\n  <li>Other, language specific managers</li>\n</ul>\n\n<p>While there are pros and cons for using each of the above, all will do the job of managing\nenvironments for you and it may be a matter of personal preference which one you go for. The Galaxy project is heavily invested in the Conda ecosystem and recommends it as an entry point as it is the most generally useful, and convenient. <a href=\"http://bioconda.github.io/\">The BioConda ecosystem</a> provides an unbelievably large number of packages for bioinformatics specific purposes, which makes it a good choice in general.</p>\n\n<h3 id=\"managing-packages\">Managing Packages</h3>\n\n<p>Part of managing your (virtual) working environment involves installing, updating and removing external packages\non your system. The Conda command (<code class=\"language-plaintext highlighter-rouge\">conda</code>) is most commonly used for this - it interacts\n and obtains the packages from one or more Conda repositories (e.g. Conda Forge, BioConda, etc.)</p>\n\n<blockquote class=\"tip\">\n  <tip-title>A Note on Anaconda and `conda`</tip-title>\n  <p>Anaconda is an open source Python\ndistribution commonly used for scientific programming - it conveniently installs Python, package and environment management <code class=\"language-plaintext highlighter-rouge\">conda</code>, and a \nnumber of commonly used scientific computing packages so you do not have to obtain them separately. \n<code class=\"language-plaintext highlighter-rouge\">conda</code> is an independent command line tool (available separately from the Anaconda distribution too) with dual functionality: (1) it is a package manager that helps you find Python packages from\nremote package repositories and install them on your system, and (2) it is also a virtual environment manager. So, you can use <code class=\"language-plaintext highlighter-rouge\">conda</code> for both tasks instead of using <code class=\"language-plaintext highlighter-rouge\">venv</code> and <code class=\"language-plaintext highlighter-rouge\">pip</code>.</p>\n</blockquote>\n\n<p><code class=\"language-plaintext highlighter-rouge\">venv</code> and <code class=\"language-plaintext highlighter-rouge\">pip</code> are considered the <em>de facto</em> standards for environment and package management for Python 3.\nHowever, the advantages of using Anaconda and <code class=\"language-plaintext highlighter-rouge\">conda</code> are that you get (most of the) packages needed for\nscientific code development included with the distribution. If you are only collaborating with others who are also using\nAnaconda, you may find that <code class=\"language-plaintext highlighter-rouge\">conda</code> satisfies all your needs.</p>\n\n<p>It is good, however, to be aware of all these tools (<code class=\"language-plaintext highlighter-rouge\">pip</code>, <code class=\"language-plaintext highlighter-rouge\">venv</code>, <code class=\"language-plaintext highlighter-rouge\">pyenv</code>, etc.),\nand use them accordingly. As you become more familiar with them you will realise that equivalent tools work in a similar\nway even though the command syntax may be different (and that there are equivalent tools for other programming languages\ntoo to which your knowledge can be ported).</p>\n\n<figure id=\"figure-1\" style=\"max-width: 90%;\"><img src=\"../../images/xkcd/python_environment.png\" alt=\"Python environment hell XKCD comic  showing boxes like pip, easy_install, homebrew 2.7, anaconda, homebrew 3.6, /usr/local/Cellar, ~/python/, and a chaotic mess of arrows moving between them all. At the bottom is the text: My python environment has become so degraded that my laptop has been declared a superfund site. (A superfund site is generally an environmental disaster area.). \" width=\"492\" height=\"487\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/xkcd/python_environment.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 1</strong>:</span> Python Environment Hell from XKCD 1987 (CC-BY-NC 2.5)</figcaption></figure>\n\n<p>Let us have a look at how we can create and manage environments and their packages from the command line using <code class=\"language-plaintext highlighter-rouge\">conda</code>.</p>\n\n<h3 id=\"instaling-miniconda\">Instaling Miniconda</h3>\n\n<p>We will use Miniconda, a minimal conda installer that is commonly used, in place of the larger and slower to download full anaconda distribution.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Installing Conda via Miniconda</hands-on-title>\n  <ol>\n    <li>Go to the <a href=\"https://docs.conda.io/en/latest/miniconda.html\">Miniconda installation page</a> and find the appropriate installer for your system.</li>\n    <li>Download and run the script.</li>\n    <li>You will probably need to close, and restart your terminal.</li>\n    <li>Check that you can run the <code class=\"language-plaintext highlighter-rouge\">conda</code> command, otherwise something may have gone wrong.</li>\n  </ol>\n</blockquote>\n\n<p><em>If</em> you’re running on Linux <em>and</em> following this tutorial via a Jupyter/CoCalc notebook, and you agree to the <a href=\"https://legal.anaconda.com/policies/en/?name=terms-of-service\">Anaconda terms of service</a>, you can simply run the following cell:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>wget <span class=\"nt\">-c</span> https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\nbash Miniconda3-latest-Linux-x86_64.sh <span class=\"nt\">-b</span> \n</code></pre></div></div>\n\n<p>Now you can add it to your <code class=\"language-plaintext highlighter-rouge\">~/.bashrc</code> which will cause Conda to be automatically loaded whenever you open a terminal:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>~/miniconda3/bin/conda init bash\n</code></pre></div></div>\n\n<blockquote class=\"tip\">\n  <tip-title>Reopen Shell / Restart Jupyter Kernel</tip-title>\n  <p>Here you will need to restart your kernel, or if you’re in a desktop environment, restart your terminal.</p>\n</blockquote>\n\n<h3 id=\"installing-our-first-package\">Installing our First Package</h3>\n\n<p>Let’s install our first package, the new <code class=\"language-plaintext highlighter-rouge\">libmamba</code> solver for Conda, as an example of how to install a package. A side benefit is that it will significant speed up your package installations!</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>conda <span class=\"nb\">install</span> <span class=\"nt\">-y</span> <span class=\"nt\">-q</span> conda-libmamba-solver<span class=\"o\">=</span>22.8\n</code></pre></div></div>\n\n<blockquote class=\"tip\">\n  <tip-title>Does it get stuck?</tip-title>\n  <p>This step we have sometimes seen get “stuck”, it will finish executing the transaction and hang, despite successfully installing the software. You can restart the kernel if this happens.</p>\n</blockquote>\n\n<p>Here we see a few things:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">-y</code> - installs without asking questions like “do you want to do this”. Generally people don’t use this, but in a Notebook environment it’s a bit nicer.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">-q</code> - quiet installation, by default it prints a <em>lot</em> of progress update messages.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">conda-libmamba-solver=22.8</code>, the package and version of that package that we wish to install.</li>\n</ul>\n\n<p>We’ll now configure conda to use <code class=\"language-plaintext highlighter-rouge\">mamba</code> by default:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>conda config <span class=\"nt\">--set</span> experimental_solver libmamba\n</code></pre></div></div>\n\n<p>While we’re at it, let’s configure Conda to use the same default repositories as Galaxy:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>conda config <span class=\"nt\">--add</span> channels bioconda\nconda config <span class=\"nt\">--add</span> channels conda-forge\n</code></pre></div></div>\n\n<p>This will give us access to the vast repositories of BioConda (bioinformatics software) and Conda Forge (languages and libraries).</p>\n\n<h3 id=\"creating-a-new-environment\">Creating a new Environment</h3>\n<p>Creating a new environment is done by executing the following command:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>conda create <span class=\"nt\">-y</span> <span class=\"nt\">-n</span> my-env\n</code></pre></div></div>\n\n<p>where <code class=\"language-plaintext highlighter-rouge\">my-env</code> is any arbitrary name for this Conda environment. Environment names are global, so pick something meaningful when you create one!</p>\n\n<p>For our project, let’s create an environment called <code class=\"language-plaintext highlighter-rouge\">hts</code></p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>conda create <span class=\"nt\">-y</span> <span class=\"nt\">-n</span> hts\n</code></pre></div></div>\n\n<p>You can list all of the created environments with</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>conda <span class=\"nb\">env </span>list \n</code></pre></div></div>\n\n<p>You’ll notice that there is a <code class=\"language-plaintext highlighter-rouge\">base</code> environment created by default, where you can install packages and play around with Conda. We do not recommend installing things into the <code class=\"language-plaintext highlighter-rouge\">base</code> environment, if at all possible. Create a new environment for each tool you need to install</p>\n\n<blockquote class=\"tip\">\n  <tip-title>Why separate environments?</tip-title>\n  <p>Conda’s package resolution takes into account every other package installed in an environment. Especially if you use R packages, this can result in environments taking an inreasing amount to time to install new packages and resolve all of the dependencies.</p>\n\n  <p>Thus by using isolated environments, you can be sure package resolution is quite fast.</p>\n</blockquote>\n\n<p>Once you’ve created an environment, you will need to activate it:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>conda activate hts\n</code></pre></div></div>\n\n<p>Activating the environment will change your command line’s prompt to show what environment\nyou are currently using (indicated by its name in round brackets at the start of the prompt),\nand modify the environment so that any packages you install will be available on the CLI.</p>\n\n<p>When you’re done working on your project, you can exit the environment with:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>conda deactivate\n</code></pre></div></div>\n\n<p>If you’ve just done the <code class=\"language-plaintext highlighter-rouge\">deactivate</code>, ensure you reactivate the environment ready for the next part:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>conda activate hts\n</code></pre></div></div>\n\n<h3 id=\"installing-external-libraries-in-an-environment\">Installing External Libraries in an Environment</h3>\n\n<p>We noticed earlier that our code depends on two <em>external libraries</em> - <code class=\"language-plaintext highlighter-rouge\">numpy</code> and <code class=\"language-plaintext highlighter-rouge\">matplotlib</code> as well as <code class=\"language-plaintext highlighter-rouge\">pysam</code> which depends on <code class=\"language-plaintext highlighter-rouge\">htslib</code>. In order for the code to run on your machine, you need to\ninstall these dependencies into your environment.</p>\n\n<p>To install the latest version of a package with <code class=\"language-plaintext highlighter-rouge\">conda</code> you use conda’s <code class=\"language-plaintext highlighter-rouge\">install</code> command and specify the package’s name, e.g.:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>conda <span class=\"nb\">install</span> <span class=\"nt\">-y</span> <span class=\"nt\">-q</span> <span class=\"nv\">python</span><span class=\"o\">=</span>3 numpy matplotlib pysam\n</code></pre></div></div>\n\n<p>Note that we needed to pick a version of python that we’d use, here we specify  <code class=\"language-plaintext highlighter-rouge\">python=3</code> meaning “any Python version that starts with 3”, so it won’t use Python 2.7 or a future Python 4.</p>\n\n<p>If you run the <code class=\"language-plaintext highlighter-rouge\">conda install</code> command on a package that is already installed, <code class=\"language-plaintext highlighter-rouge\">conda</code> will notice this and do nothing.</p>\n\n<p>To install a specific version of a package give the package name followed by <code class=\"language-plaintext highlighter-rouge\">=</code> and the version number, e.g.\n<code class=\"language-plaintext highlighter-rouge\">conda install numpy=1.21.1</code>.</p>\n\n<p>To specify a minimum version of a Python package, you can\ndo <code class=\"language-plaintext highlighter-rouge\">pip3 install 'numpy&gt;=1.20'</code>.</p>\n\n<p>To upgrade a package to the latest version, e.g. <code class=\"language-plaintext highlighter-rouge\">conda update numpy</code>. (If it’s at the latest version it will attempt to downgrade the package)</p>\n\n<p>To display information about the current environment:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>conda info\n</code></pre></div></div>\n\n<p>To display information about a particular package installed in your current environment:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>conda list python\n</code></pre></div></div>\n\n<p>To list all packages installed with <code class=\"language-plaintext highlighter-rouge\">pip</code> (in your current environment):</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>conda list\n</code></pre></div></div>\n\n<p>To uninstall a package installed in the environment do: <code class=\"language-plaintext highlighter-rouge\">conda remove package-name</code>.\nYou can also supply a list of packages to uninstall at the same time.</p>\n\n<h3 id=\"exportingimporting-an-environment-with-conda\">Exporting/Importing an Environment with <code class=\"language-plaintext highlighter-rouge\">conda</code></h3>\n\n<p>You are collaborating on a project with a team so, naturally, you will want to share your environment with your\ncollaborators so they can easily ‘clone’ your software project with all of its dependencies and everyone\ncan replicate equivalent environments on their machines. <code class=\"language-plaintext highlighter-rouge\">conda</code> has a handy way of exporting,\nsaving and sharing environments.</p>\n\n<p>To export your active environment - use <code class=\"language-plaintext highlighter-rouge\">conda env export</code> command to\nproduce a list of packages installed in the environment.\nA common convention is to put this list in a <code class=\"language-plaintext highlighter-rouge\">environment.yml</code> file:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>conda <span class=\"nb\">env export</span> <span class=\"o\">&gt;</span> environment.yml\n<span class=\"nb\">cat </span>environment.yml\n</code></pre></div></div>\n\n<p>The first of the above commands will create a <code class=\"language-plaintext highlighter-rouge\">environment.yml</code> file in your current directory.\nThe <code class=\"language-plaintext highlighter-rouge\">environment.yml</code> file can then be committed to a version control system and\nget shipped as part of your software and shared with collaborators and/or users. They can then replicate your environment and\ninstall all the necessary packages from the project root as follows:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>conda <span class=\"nb\">env </span>create <span class=\"nt\">-y</span> <span class=\"nt\">-f</span> environment.yml\n</code></pre></div></div>\n\n<p>The name is bundled directly into the environment, someone else re-creating\nthis environment from the yaml file will also be able to <code class=\"language-plaintext highlighter-rouge\">conda activate hts</code>\nafterwards. If you want it under a different name, you can use the <code class=\"language-plaintext highlighter-rouge\">-n</code> flag to\nsupply your own name.</p>\n\n<p>As your project grows - you may need to update your environment for a variety of reasons. For example, one of your project’s dependencies has\njust released a new version (dependency version number update), you need an additional package for data analysis\n(adding a new dependency) or you have found a better package and no longer need the older package (adding a new and\nremoving an old dependency). What you need to do in this case (apart from installing the new and removing the\npackages that are no longer needed from your environment) is update the contents of the <code class=\"language-plaintext highlighter-rouge\">environment.yml</code> file\naccordingly by re-issuing <code class=\"language-plaintext highlighter-rouge\">conda env export</code> command and propagate the updated <code class=\"language-plaintext highlighter-rouge\">environment.yml</code> file to your collaborators\nvia your code sharing platform (e.g. GitHub).</p>\n\n<blockquote class=\"tip\">\n  <tip-title>Official Documentation</tip-title>\n  <p>For a full list of options and commands, consult the <a href=\"https://docs.conda.io/projects/conda/en/latest/commands.html\">official <code class=\"language-plaintext highlighter-rouge\">conda</code> documentation</a></p>\n</blockquote>\n"],"ref_slides":[],"video_library":{"tutorial":null,"slides":null,"demo":null,"both":null,"session":null},"hands_on":true,"slides":false,"mod_date":"2023-05-17 17:21:19 +0000","pub_date":"2022-10-19 13:04:07 +0000","version":6,"api":"https://training.galaxyproject.org/training-material/api/topics/data-science/tutorials/python-conda/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"Foundations of Data Science","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial","contributors":[{"name":"The Carpentries","joined":"2021-09","id":"carpentries","url":"https://training.galaxyproject.org/training-material/api/organisations/carpentries.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/carpentries/"},{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"},{"name":"The Carpentries","joined":"2021-09","id":"carpentries","url":"https://training.galaxyproject.org/training-material/api/organisations/carpentries.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/carpentries/"},{"name":"Avans Hogeschool","joined":"2020-11","url":"https://training.galaxyproject.org/training-material/api/organisations/avans-atgm.json","avatar":"/training-material/shared/images/logo-avans.png","members":["bazante1"],"former_members":["dirowa","hexylena"],"id":"avans-atgm","page":"https://training.galaxyproject.org/training-material/hall-of-fame/avans-atgm/"}]}