{"layout":"tutorial_hands_on","title":"Python - Introductory Graduation","level":"Introductory","requirements":[{"type":"internal","topic_name":"data-science","tutorials":["python-math","python-functions","python-types","python-iterables","python-flow","python-loops","python-files","python-exceptions"]}],"follow_up_training":[],"questions":["What all did I learn up until now?"],"objectives":["Recap all previous modules.","Use exercises to ensure that all previous knowledge is sufficiently covered."],"time_estimation":"1H30M","key_points":[],"subtopic":"python-modular","contributors":[{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"},{"name":"Donny Vrins","joined":"2021-10","linkedin":"Donny Vrins","email":"D.vrins@live.nl","former_affiliations":["avans-atgm"],"id":"dirowa","url":"https://training.galaxyproject.org/training-material/api/contributors/dirowa.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/dirowa/"},{"name":"Bazante Sanders","joined":"2020-12","affiliations":["avans-atgm"],"id":"bazante1","url":"https://training.galaxyproject.org/training-material/api/contributors/bazante1.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/bazante1/"}],"priority":9,"notebook":{"language":"python","pyolite":true},"abbreviations":{"ORF":"Open Reading Frame"},"js_requirements":{"mathjax":8764,"mermaid":false},"short_id":"T00084","url":"/topics/data-science/tutorials/python-basics-recap/tutorial.html","topic_name":"data-science","tutorial_name":"python-basics-recap","dir":"topics/data-science/tutorials/python-basics-recap","symlink":null,"id":"data-science/python-basics-recap","ref_tutorials":["<p>This module provide something like a recap of everything covered by the modular Python Introductory level curriculum. This serves as something of a graduation into the Intermediate tutorials which cover more advanced topics.</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#review\" id=\"markdown-toc-review\">Review</a>    <ol>\n      <li><a href=\"#math\" id=\"markdown-toc-math\">Math</a></li>\n      <li><a href=\"#functions\" id=\"markdown-toc-functions\">Functions</a></li>\n      <li><a href=\"#types\" id=\"markdown-toc-types\">Types</a></li>\n      <li><a href=\"#comparators\" id=\"markdown-toc-comparators\">Comparators</a></li>\n      <li><a href=\"#iterables\" id=\"markdown-toc-iterables\">Iterables</a></li>\n      <li><a href=\"#flow-control\" id=\"markdown-toc-flow-control\">Flow Control</a></li>\n      <li><a href=\"#loops\" id=\"markdown-toc-loops\">Loops</a></li>\n      <li><a href=\"#files\" id=\"markdown-toc-files\">Files</a></li>\n      <li><a href=\"#exceptions\" id=\"markdown-toc-exceptions\">Exceptions</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#exercises\" id=\"markdown-toc-exercises\">Exercises</a>    <ol>\n      <li><a href=\"#series-approximation\" id=\"markdown-toc-series-approximation\">Series Approximation</a></li>\n      <li><a href=\"#monte-carlo-simulation\" id=\"markdown-toc-monte-carlo-simulation\">Monte Carlo Simulation</a></li>\n      <li><a href=\"#sixpack\" id=\"markdown-toc-sixpack\">Sixpack</a></li>\n    </ol>\n  </li>\n</ol>\n\n</blockquote>\n\n<h1 id=\"review\">Review</h1>\n\n<p>This recapitulates the main points from all of the previous modular tutorials</p>\n\n<h2 id=\"math\">Math</h2>\n\n<p>Math in python works a lot like math in real life (from algebra onwards). Variables can be assigned, and worked with in the place of numbers</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">y</span>\n</code></pre></div></div>\n\n<p>We can use familiar math operators:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Operator</th>\n      <th>Operation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">+</code></td>\n      <td>Addition</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">-</code></td>\n      <td>Subtraction</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">*</code></td>\n      <td>Multiplication</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">/</code></td>\n      <td>Division (<code class=\"language-plaintext highlighter-rouge\">//</code> for rounded, integer division)</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>And some familiar operations require the use of the <code class=\"language-plaintext highlighter-rouge\">math</code> module:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">math</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<h2 id=\"functions\">Functions</h2>\n\n<p>Functions were similarly analogous to algebra and mathematics, we can express <code class=\"language-plaintext highlighter-rouge\">f(x) = x * 3</code> in python as:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">y</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">z</span>\n</code></pre></div></div>\n\n<p>There are a few basic parts of a function:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">def</code> starts a function <em>definition</em></li>\n  <li>it needs a name, here it’s <code class=\"language-plaintext highlighter-rouge\">f</code></li>\n  <li>between some parentheses are the arguments\n    <ul>\n      <li>the are arguments, just the variable name (<code class=\"language-plaintext highlighter-rouge\">x</code>)</li>\n      <li>and keyword arguments, where there is a variable and a value (<code class=\"language-plaintext highlighter-rouge\">y=3</code>)</li>\n    </ul>\n  </li>\n  <li>The function body\n    <ul>\n      <li>With one or more lines</li>\n      <li>Usually ending in a <code class=\"language-plaintext highlighter-rouge\">return</code></li>\n    </ul>\n  </li>\n</ul>\n\n<p>And we know we can nest functions, using functional composition, just like in math. In math functional composition was written <code class=\"language-plaintext highlighter-rouge\">f(g(x))</code> and in python it’s exactly the same:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">sqrt</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"p\">.</span><span class=\"nf\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)))</span>\n</code></pre></div></div>\n\n<p>Here we’ve nested three different functions (print is a function!). To read this we start in the middle (math.pow) and move outwards (math.sqrt, print).</p>\n\n<h2 id=\"types\">Types</h2>\n\n<p>There are lots of different datatypes in Python! The basic types are <code class=\"language-plaintext highlighter-rouge\">bool</code>, <code class=\"language-plaintext highlighter-rouge\">int</code>, <code class=\"language-plaintext highlighter-rouge\">float</code>, <code class=\"language-plaintext highlighter-rouge\">str</code>. Then we have more complex datatypes like <code class=\"language-plaintext highlighter-rouge\">list</code> and <code class=\"language-plaintext highlighter-rouge\">dict</code> which can contain the basic types (as well as other lists/dicts nested.)</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Data type</th>\n      <th>Examples</th>\n      <th>When to use it</th>\n      <th>When <strong>not</strong> to use it</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Boolean (<code class=\"language-plaintext highlighter-rouge\">bool</code>)</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">True</code>, <code class=\"language-plaintext highlighter-rouge\">False</code></td>\n      <td>If there are only two possible states, true or false</td>\n      <td>If your data is not binary</td>\n    </tr>\n    <tr>\n      <td>Integer (<code class=\"language-plaintext highlighter-rouge\">int</code>)</td>\n      <td>1, 0, -1023, 42</td>\n      <td>Countable, singular items. How many patients are there, how many events did you record, how many variants are there in the sequence</td>\n      <td>If doubling or halving the value would not make sense: do not use for e.g. patient IDs, or phone numbers. If these are integers you might accidentally do math on the value.</td>\n    </tr>\n    <tr>\n      <td>Float (<code class=\"language-plaintext highlighter-rouge\">float</code>)</td>\n      <td>123.49, 3.14159, -3.33334</td>\n      <td>If you need more precision or partial values. Recording distance between places, height, mass, etc.</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>Strings (<code class=\"language-plaintext highlighter-rouge\">str</code>)</td>\n      <td>‘patient_12312’, ‘Jane Doe’, ‘火锅’</td>\n      <td>To store free text, identifiers, sequence IDs, etc.</td>\n      <td>If it’s truly a numeric value you can do calculations with, like adding or subtracting or doing statistics.</td>\n    </tr>\n    <tr>\n      <td>List / Array (<code class=\"language-plaintext highlighter-rouge\">list</code>)</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">['A', 1, 3.4, ['Nested']]</code></td>\n      <td>If you need to store a list of items, like sequences from a file. Especially if you’re reading in a table of data from a file.</td>\n      <td>If you want to retrieve individual values, and there are clear identifiers it might be better as a dict.</td>\n    </tr>\n    <tr>\n      <td>Dictionary / Associative Array / map (<code class=\"language-plaintext highlighter-rouge\">dict</code>)</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">{\"weight\": 3.4, \"age\": 12, \"name\": \"Fluffy\"}</code></td>\n      <td>When you have identifiers for your data, and want to look them up by that value. E.g. looking up sequences by an identifier, or data about students based on their name. Counting values.</td>\n      <td>If you just have a list of items without identifiers, it makes more sense to just use a list.</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>There are a couple more datatypes we didn’t cover in detail: <code class=\"language-plaintext highlighter-rouge\">set</code>s, <code class=\"language-plaintext highlighter-rouge\">tuple</code>, <code class=\"language-plaintext highlighter-rouge\">None</code>, <code class=\"language-plaintext highlighter-rouge\">enum</code>, <code class=\"language-plaintext highlighter-rouge\">byte</code>, all of which <a href=\"https://docs.python.org/3/library/datatypes.html\">can be read about in Python’s documentation.</a></p>\n\n<h2 id=\"comparators\">Comparators</h2>\n\n<p>We have a couple of comparators available to use specifically for numeric values:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">&gt;</code>: greater than</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;</code>: less than</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&gt;=</code>: greater than or equal to</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;=</code>: less than or equal to</li>\n</ul>\n\n<p>And a couple that can be used with numbers and strings (or other values!)</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">==</code>: equal to</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">!=</code>: does not equal</li>\n</ul>\n\n<h2 id=\"iterables\">Iterables</h2>\n\n<p>In Python, there is a class of things which can be easily looped over, called “iterables”. All of the following are examples of iterable items:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">range(10)</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">'abcd'</code>, a string</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">['a', 'b' , 'c' , 'd']</code>, a list</li>\n</ul>\n\n<h2 id=\"flow-control\">Flow Control</h2>\n\n<p>Basic flow control looks like <code class=\"language-plaintext highlighter-rouge\">if</code>, <code class=\"language-plaintext highlighter-rouge\">elif</code>, <code class=\"language-plaintext highlighter-rouge\">else</code>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">blood_oxygen_saturation</span> <span class=\"o\">=</span> <span class=\"mf\">92.3</span>\n<span class=\"n\">altitude</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">if</span> <span class=\"n\">blood_oxygen_saturation</span> <span class=\"o\">&gt;</span> <span class=\"mi\">96</span> <span class=\"ow\">and</span> <span class=\"n\">altitude</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Healthy individual at sea level</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">blood_oxygen_saturation</span> <span class=\"o\">&gt;</span> <span class=\"mi\">92</span> <span class=\"ow\">and</span> <span class=\"n\">altitude</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">1000</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Healthy value above sea level</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">blood_oxygen_saturation</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Monitor failure</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Not good</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>We must start with an <code class=\"language-plaintext highlighter-rouge\">if</code>, then we can have one or more <code class=\"language-plaintext highlighter-rouge\">elif</code>s, and 0 or 1 else to end our clause. If there is no <code class=\"language-plaintext highlighter-rouge\">else</code>, it’s like nothing happens, we just check the <code class=\"language-plaintext highlighter-rouge\">if</code> and <code class=\"language-plaintext highlighter-rouge\">elif</code>s and if none match, nothing happens by default.</p>\n\n<p>We could use <code class=\"language-plaintext highlighter-rouge\">and</code> to check if both conditions are true, and <code class=\"language-plaintext highlighter-rouge\">or</code> to check if one condition is true.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># And\n</span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"bp\">False</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"bp\">False</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s\"> AND </span><span class=\"si\">{</span><span class=\"n\">j</span><span class=\"si\">}</span><span class=\"s\"> =&gt; </span><span class=\"si\">{</span><span class=\"n\">i</span> <span class=\"ow\">and</span> <span class=\"n\">j</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Or\n</span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"bp\">False</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"bp\">False</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s\"> OR </span><span class=\"si\">{</span><span class=\"n\">j</span><span class=\"si\">}</span><span class=\"s\"> =&gt; </span><span class=\"si\">{</span><span class=\"n\">i</span> <span class=\"ow\">or</span> <span class=\"n\">j</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>And if we needed, we can invert conditions with not.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Not\n</span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"bp\">False</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">NOT </span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s\"> =&gt; </span><span class=\"si\">{</span><span class=\"ow\">not</span> <span class=\"n\">i</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>All of these components (<code class=\"language-plaintext highlighter-rouge\">if/elif/else</code>, <code class=\"language-plaintext highlighter-rouge\">and</code>, <code class=\"language-plaintext highlighter-rouge\">or</code>, <code class=\"language-plaintext highlighter-rouge\">not</code>, numerical and value comparators) let us build up</p>\n\n<h2 id=\"loops\">Loops</h2>\n\n<p>Loops let us <em>loop</em> over the contents of something iterable (a string, a list, lines in a file). We write</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>for loopVariable in myIterable:\n    # Do something\n    print(loopVariable)\n</code></pre></div></div>\n\n<p>Each loop has:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">for</code>, a keyword to start the loop</li>\n  <li>a loop variable, here named <code class=\"language-plaintext highlighter-rouge\">loopVariable</code> which is set automatically every iteration of the loop</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">in</code>, a keyword used in a loop</li>\n  <li>something we want to iterate over like a list or string (which is really just a list of single characters) or lines in a file.</li>\n  <li>a loop body where all the action happens</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">for</span> <span class=\"n\">base</span> <span class=\"ow\">in</span> <span class=\"sh\">'</span><span class=\"s\">ACTGATGCYGGCA</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">base</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n        <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n    <span class=\"k\">elif</span> <span class=\"n\">base</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n    <span class=\"k\">elif</span> <span class=\"n\">base</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">T</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n        <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n    <span class=\"k\">elif</span> <span class=\"n\">base</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">G</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n        <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">g</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Unexpected base!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">a=</span><span class=\"si\">{</span><span class=\"n\">a</span><span class=\"si\">}</span><span class=\"s\"> c=</span><span class=\"si\">{</span><span class=\"n\">c</span><span class=\"si\">}</span><span class=\"s\"> t=</span><span class=\"si\">{</span><span class=\"n\">t</span><span class=\"si\">}</span><span class=\"s\"> g=</span><span class=\"si\">{</span><span class=\"n\">g</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"files\">Files</h2>\n\n<p>In python you must <code class=\"language-plaintext highlighter-rouge\">open()</code> a file handle, using one of the three modes (read, write, or append). Normally you must also later <code class=\"language-plaintext highlighter-rouge\">close()</code> that file, but your life can be a bit</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">out.txt</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">w</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">handle</span><span class=\"p\">:</span>\n    <span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Здравствуйте </span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">世界!</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Welcome!</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Can no longer handle.write(), once we've exited the with block, the file is automatically closed for us.\n</span></code></pre></div></div>\n\n<p>There are several basic parts</p>\n\n<ul>\n  <li>We use <code class=\"language-plaintext highlighter-rouge\">with</code> to indicate we want to use the context manager for file opening (this is what automatically closes the file afterwards)</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">open(path, mode)</code> opens a file</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">as</code> is a keyword</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">handle</code> is the name of a file handle, something that represents the file which we can write to, or read from.</li>\n</ul>\n\n<p>Additionally if you need a newline in your file, you <em>must</em> write it yourself with a <code class=\"language-plaintext highlighter-rouge\">\\n</code>.</p>\n\n<p>The above code is equivalent to this, but it is not recommended, it’s a bit harder to read, and it is very very common to forget to close files which is not ideal.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">handle</span> <span class=\"o\">=</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">out.txt</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">w</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Здравствуйте </span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">世界!</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Welcome!</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Can no longer write.\n</span></code></pre></div></div>\n\n<p>You can also read from a file:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Read the entire file as one giant string\n</span><span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">out.txt</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">r</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">handle</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"nf\">read</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Or read it as separate lines.\n</span><span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">out.txt</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">r</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">handle</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"nf\">readlines</span><span class=\"p\">())</span>\n</code></pre></div></div>\n\n<h2 id=\"exceptions\">Exceptions</h2>\n\n<p>Sometimes things go wrong!</p>\n\n<ul>\n  <li>You divide by zero (<code class=\"language-plaintext highlighter-rouge\">ZeroDivisionError</code>)</li>\n  <li>You try and add a string and a number (<code class=\"language-plaintext highlighter-rouge\">TypeError</code>)</li>\n  <li>You have incorrect indentation (<code class=\"language-plaintext highlighter-rouge\">IndentationError</code>)</li>\n  <li>Files are unreadable</li>\n  <li>Files have the wrong permissions</li>\n</ul>\n\n<p>If you expect that something will go wrong you can guard against it with a <code class=\"language-plaintext highlighter-rouge\">try</code>/<code class=\"language-plaintext highlighter-rouge\">except</code></p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"nb\">ZeroDivisionError</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Nope! I expected that!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Some of the most common reasons to do this are when you’re processing user input data. Users often input invalid data, unfortunately.</p>\n\n<h1 id=\"exercises\">Exercises</h1>\n\n<h2 id=\"series-approximation\">Series Approximation</h2>\n\n<p>Write a program that computes the sum of an alternating series where each element of the series is an expression of the form</p>\n\n\\[4\\cdot\\sum\\_{k=1}^{N} \\dfrac{(-1)^{k+1}}{2 * k-1}\\]\n\n<p>Use that expression and calculate the sum for various values of N like <code class=\"language-plaintext highlighter-rouge\">10</code>, <code class=\"language-plaintext highlighter-rouge\">1000</code>, <code class=\"language-plaintext highlighter-rouge\">1000000</code></p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Write your approximation here!\n</span><span class=\"k\">def</span> <span class=\"nf\">calculate_sum</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">):</span>\n    <span class=\"c1\"># for values in the range [1, N] (inclusive!)\n</span>        <span class=\"c1\"># calculate the expression (the bit after the Sigma)\n</span>    <span class=\"c1\"># sum up all of those numbers!\n</span>    <span class=\"k\">return</span> <span class=\"n\">value</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">calculate_sum</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<h2 id=\"monte-carlo-simulation\">Monte Carlo Simulation</h2>\n\n<p>You can use a monte carlo simulation to calculate the value of π. The easy way to do this is to take the region <code class=\"language-plaintext highlighter-rouge\">x = [0, 1], y = [0, 1]</code>, and fill it with random points. For each point, calculate the distance to the origin. Calculate the ratio of the inside points to the total points, and multiply the value by 4 to estimate π.</p>\n\n<p>You can use the <code class=\"language-plaintext highlighter-rouge\">random</code> module to generate random values:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">random</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">random</span><span class=\"p\">())</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">random</span><span class=\"p\">())</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">random</span><span class=\"p\">())</span>\n</code></pre></div></div>\n\n<p>Using the <code class=\"language-plaintext highlighter-rouge\">random.random()</code> to generate x and y coordinates, write a function that:</p>\n\n<ul>\n  <li>generates N random points</li>\n  <li>calculate their distance to the origin</li>\n  <li>Calculate the number of points that are <code class=\"language-plaintext highlighter-rouge\">distance&lt;=1</code></li>\n  <li>divide that by <code class=\"language-plaintext highlighter-rouge\">N</code>, and multiply by <code class=\"language-plaintext highlighter-rouge\">4</code>.</li>\n</ul>\n\n<figure id=\"figure-1\" style=\"max-width: 90%;\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/8/84/Pi_30K.gif\" alt=\"Gif of the unit square 0, 1 on the x and y axes. Points are being randomly generated and points inside the unit circle are marked in red, outside in blue. A quarter of a circle starts to appear, and the numbers at the top show as N increases, the approximation of Pi improves.\" loading=\"lazy\" /><a target=\"_blank\" href=\"https://upload.wikimedia.org/wikipedia/commons/8/84/Pi_30K.gif\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 1</strong>:</span> Gif from the Wikipedia Article for Monte Carlo Method</figcaption></figure>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Write your code here!\n</span><span class=\"kn\">import</span> <span class=\"n\">math</span>\n\n<span class=\"c1\"># Just a suggestion: write a function to calculate the distance to origin.\n#\n</span><span class=\"k\">def</span> <span class=\"nf\">distance</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...\n</span>    <span class=\"k\">return</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">generate_random_point</span><span class=\"p\">():</span>\n    <span class=\"c1\"># ....\n</span>    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">approximate</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">):</span>\n    <span class=\"c1\"># For every point in the range [0, N]\n</span>    <span class=\"c1\">#   check if it's distance is great than 1\n</span>\n    <span class=\"c1\"># Find the ratio of how many are distance&lt;=1\n</span>    <span class=\"c1\"># and return 4 times that ratio.\n</span>    <span class=\"k\">return</span> <span class=\"mi\">4</span> <span class=\"o\">*</span> <span class=\"n\">x</span>\n\n<span class=\"c1\"># Try it with a couple N values like 1, 100, 100000,\n</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span>\n<span class=\"c1\"># Since we're using a random number function, the result is different every\n# time we run the simulation.\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">approximate</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">approximate</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">approximate</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<h2 id=\"sixpack\">Sixpack</h2>\n\n<p>Sixpack is an old EMBOSS program which takes in a DNA sequence, and then for every frame, for both strands, emits every Open Reading Frame (ORF) that it sees.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  G  R  G  F  W  C  L  G  G  K  A  A  K  N  Y  R  E  K  S  V  D  V  A  G  Y  D  X   F1\n   G  V  A  S  G  A  W  A  V  K  R  Q  K  T  T  V  K  S  R  W  M  W  R  V  M  M     F2\n    A  W  L  L  V  P  G  R  *  S  G  K  K  L  P  *  K  V  G  G  C  G  G  L  *  X    F3\n1 GGGCGTGGCTTCTGGTGCCTGGGCGGTAAAGCGGCAAAAAACTACCGTGAAAAGTCGGTGGATGTGGCGGGTTATGATG 79\n  ----:----|----:----|----:----|----:----|----:----|----:----|----:----|----:----\n1 CCCGCACCGAAGACCACGGACCCGCCATTTCGCCGTTTTTTGATGGCACTTTTCAGCCACCTACACCGCCCAATACTAC 79\n   P  R  P  K  Q  H  R  P  P  L  A  A  F  F  *  R  S  F  D  T  S  T  A  P  *  S     F6\n  X  A  H  S  R  T  G  P  R  Y  L  P  L  F  S  G  H  F  T  P  P  H  P  P  N  H  H   F5\n    P  T  A  E  P  A  Q  A  T  F  R  C  F  V  V  T  F  L  R  H  I  H  R  T  I  I    F4\n</code></pre></div></div>\n\n<p>Here we see a DNA sequence <code class=\"language-plaintext highlighter-rouge\">GGGCGTGGCTTCTGGTGCCTGGGCGGTAAAGCGGCAAAAAACTACCGTGAAAAGTCGGTGGATGTGGCGGGTTATGATG</code> which you’ll use as input. Above is the translation of the sequence to protein, for each of the three frames (F1-6). Below is the reverse complement of the sequence, and the three frame translation again.</p>\n\n<p>What sixpack does is:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>orfs = []\n\nfor sequence in [forward, reverse_complement(forward)]:\n    for frame in [sequence, sequence[1:], sequence[2:]]:\n        # Remembering\n        for potential start_codon:\n            # accumulate until it sees a stop codon\n            # and append it to the orfs array once it does.\n</code></pre></div></div>\n\n<p>Here are some variables for your convenience:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">start_codons</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">TTG</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">CTG</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">ATG</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"n\">stop_codons</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">TAA</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TAG</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">TGA</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># And some convenience functions\n</span><span class=\"k\">def</span> <span class=\"nf\">is_start_codon</span><span class=\"p\">(</span><span class=\"n\">codon</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">codon</span> <span class=\"ow\">in</span> <span class=\"n\">start_codons</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_stop_codon</span><span class=\"p\">(</span><span class=\"n\">codon</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">codon</span> <span class=\"ow\">in</span> <span class=\"n\">stop_codons</span>\n</code></pre></div></div>\n\n<p>It’s a good exercise to rewrite <code class=\"language-plaintext highlighter-rouge\">sixpack</code> in a very simplified version without most of the features in sixpack:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Write your code here!\n</span>\n<span class=\"c1\"># Some recommendations:\n</span><span class=\"k\">def</span> <span class=\"nf\">reverse_complement</span><span class=\"p\">(</span><span class=\"n\">sequence</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"bp\">...</span>\n\n<span class=\"n\">orfs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">sequence</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">forward</span><span class=\"p\">,</span> <span class=\"nf\">reverse_complement</span><span class=\"p\">(</span><span class=\"n\">forward</span><span class=\"p\">)]:</span>\n    <span class=\"k\">for</span> <span class=\"n\">frame</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">sequence</span><span class=\"p\">,</span> <span class=\"n\">sequence</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:],</span> <span class=\"n\">sequence</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:]]:</span>\n        <span class=\"c1\"># Remembering\n</span>        <span class=\"k\">for</span> <span class=\"n\">potential</span> <span class=\"n\">start_codon</span><span class=\"p\">:</span>\n            <span class=\"c1\"># accumulate until it sees a stop codon\n</span>            <span class=\"c1\"># and append it to the orfs array once it does.\n</span></code></pre></div></div>\n"],"ref_slides":[],"video_library":{"tutorial":null,"slides":null,"demo":null,"both":null,"session":null},"hands_on":true,"slides":false,"mod_date":"2023-02-13 13:04:13 +0000","pub_date":"2022-04-25 11:43:04 +0000","version":9,"api":"https://training.galaxyproject.org/training-material/api/topics/data-science/tutorials/python-basics-recap/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"Foundations of Data Science","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial"}