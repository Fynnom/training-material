{"layout":"tutorial_hands_on","title":"Python - Subprocess","level":"Intermediate","requirements":[],"follow_up_training":[],"questions":["How can I run another program?"],"objectives":["Run a command in a subprocess.","Learn about `check_call` and `check_output` and when to use each of these.","Read it's output."],"time_estimation":"45M","key_points":["**DO NOT USE `os.system`**","**DO NOT USE shell=True**","üëçUse `subprocess.check_call()` if you don't care about the output, just that it succeeds.","üëçUse `subprocess.check_output()` if you want the output","Use `.decode('utf-8')` to read the output of `check_output()`"],"subtopic":"python-modular","contributors":[{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"},{"name":"Donny Vrins","joined":"2021-10","linkedin":"Donny Vrins","email":"D.vrins@live.nl","former_affiliations":["avans-atgm"],"id":"dirowa","url":"https://training.galaxyproject.org/training-material/api/contributors/dirowa.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/dirowa/"},{"name":"Bazante Sanders","joined":"2020-12","affiliations":["avans-atgm"],"id":"bazante1","url":"https://training.galaxyproject.org/training-material/api/contributors/bazante1.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/bazante1/"}],"priority":12,"notebook":{"language":"python","pyolite":true},"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00097","url":"/topics/data-science/tutorials/python-subprocess/tutorial.html","topic_name":"data-science","tutorial_name":"python-subprocess","dir":"topics/data-science/tutorials/python-subprocess","symlink":null,"id":"data-science/python-subprocess","ref_tutorials":["<p>Sometimes you need to run other tools in Python, like maybe you want to\nHere we‚Äôll give a quick tutorial on how to read and write files within Python.</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#subprocesses\" id=\"markdown-toc-subprocesses\">Subprocesses</a></li>\n  <li><a href=\"#check-call-downloading-files\" id=\"markdown-toc-check-call-downloading-files\">Check Call: Downloading Files</a></li>\n  <li><a href=\"#check-output-gene-calling-with-augustus\" id=\"markdown-toc-check-output-gene-calling-with-augustus\">Check Output: Gene Calling with Augustus</a></li>\n  <li><a href=\"#aside-stdin-stderr-stdout\" id=\"markdown-toc-aside-stdin-stderr-stdout\">Aside: <code class=\"language-plaintext highlighter-rouge\">stdin</code>, <code class=\"language-plaintext highlighter-rouge\">stderr</code>, <code class=\"language-plaintext highlighter-rouge\">stdout</code></a></li>\n  <li><a href=\"#pipes\" id=\"markdown-toc-pipes\">Pipes</a></li>\n</ol>\n\n</blockquote>\n\n<h1 id=\"subprocesses\">Subprocesses</h1>\n\n<p>Programs can run other programs, and in Python we do this via the <code class=\"language-plaintext highlighter-rouge\">subprocess</code> module. It lets you run any other command on the system, just like you could at the terminal.</p>\n\n<p>The first step is importing the module</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">subprocess</span>\n</code></pre></div></div>\n\n<p>You‚Äôll primarily use two functions:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">help</span><span class=\"p\">(</span><span class=\"n\">subprocess</span><span class=\"p\">.</span><span class=\"n\">check_call</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Which executes a command and checks if it was successful (or it raises an exception), and</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">help</span><span class=\"p\">(</span><span class=\"n\">subprocess</span><span class=\"p\">.</span><span class=\"n\">check_output</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h1 id=\"check-call-downloading-files\">Check Call: Downloading Files</h1>\n\n<p>Which executes a command returns the output of that command. This is really useful if you‚Äôre running a subprocess that writes something to stdout, like a report you need to parse. We‚Äôll learn how to use these by running two gene callers, augustus and glimmer. You can install both from Conda if you do not have them already.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>conda create -n subprocess augustus glimmer3\n</code></pre></div></div>\n\n<p>Additionally you‚Äôll need two files, you <em>generally should not do this</em>, but you can use a subprocess to download the file! We‚Äôll use <code class=\"language-plaintext highlighter-rouge\">subprocess.check_call</code> for this which simply executes the program, and continues on. If there is an error in the execution, it will raise an exception and stop execution.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/836/945/GCF_000836945.1_ViralProj14044/GCF_000836945.1_ViralProj14044_genomic.fna.gz</span><span class=\"sh\">\"</span>\n<span class=\"n\">genome</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">Escherichia virus T4.fna.gz</span><span class=\"sh\">'</span>\n<span class=\"n\">subprocess</span><span class=\"p\">.</span><span class=\"nf\">check_call</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">wget</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">-O</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">genome</span><span class=\"p\">])</span>\n<span class=\"n\">subprocess</span><span class=\"p\">.</span><span class=\"nf\">check_call</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">gzip</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">-d</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">genome</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<blockquote class=\"tip\">\n  <tip-title>What do these commands look like on the CLI?</tip-title>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>wget https://ftp.ncbi.nlm.nih.gov/.... -O \"Escherichia virus T4.fna.gz\"\ngzip -d \"Escherichia virus T4.fna.gz\"\n</code></pre></div>  </div>\n</blockquote>\n\n<p>The above segment</p>\n<ul>\n  <li>sets a url variable</li>\n  <li>sets an output filename, <code class=\"language-plaintext highlighter-rouge\">Escherichia virus T4.fna.gz</code></li>\n  <li>runs <code class=\"language-plaintext highlighter-rouge\">check_call</code> with a single argument: a list\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">wget</code> a tool we use to download files</li>\n      <li>the URL</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">-O</code> indicating the next argument will be the ‚Äòoutput name‚Äô</li>\n      <li>what we want the output filename to be called</li>\n    </ul>\n  </li>\n  <li>runs <code class=\"language-plaintext highlighter-rouge\">check_call</code> with a single argument: a list\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">gzip</code> a tool to decompress files\n  -<code class=\"language-plaintext highlighter-rouge\">-d</code> indicating we want to decompress</li>\n      <li>and the filename.</li>\n    </ul>\n  </li>\n</ul>\n\n<p>This list is especially important. When you run commands on the command line, normally you just type in a really bit of text by yourself. It‚Äôs one big string, and you‚Äôre responsible for making sure quotation marks appear in the right place. For instance, if you have spaces in your filenames, you have to quote the filename. Python requires you specify a list of arguments, and then handles the quoting for you! Which, honestly, is easier and safer.</p>\n\n<blockquote class=\"code-2col\">\n  <blockquote class=\"code-in\">\n    <code-in-title>Terminal</code-in-title>\n    <p>Here we manually quote the argument</p>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>glimmer3 \"bow genome.txt\"\n</code></pre></div>    </div>\n  </blockquote>\n  <blockquote class=\"code-out\">\n    <code-out-title>Python</code-out-title>\n    <p>Here python handles that for us</p>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>subprocess.check_call(['glimmer3', 'bow genome.txt'])\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<blockquote class=\"tip\">\n  <tip-title>Exploitation!</tip-title>\n  <p>This is one of the major reasons we don‚Äôt use <code class=\"language-plaintext highlighter-rouge\">os.system</code> or older Python interfaces for running commands.\nIf you‚Äôre processing files, and a user supplies a file with a space, if your program isn‚Äôt expecting that space in that filename, then it could do something dangerous!\nLike exploit your system!</p>\n\n  <p>So, <strong>always</strong> use <code class=\"language-plaintext highlighter-rouge\">subprocess</code> if you run to commands, never any other module, <em>despite what you see on the internet!</em></p>\n</blockquote>\n\n<p>There are more functions in the module, but the vast majority of the time, those are sufficient.</p>\n\n<h1 id=\"check-output-gene-calling-with-augustus\">Check Output: Gene Calling with Augustus</h1>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">gff3</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"p\">.</span><span class=\"nf\">check_output</span><span class=\"p\">([</span>\n    <span class=\"sh\">'</span><span class=\"s\">augustus</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"c1\"># Our command\n</span>    <span class=\"sh\">'</span><span class=\"s\">--species=E_coli_K12</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"c1\"># the first argument, the species, we're using a phage so we call genes  based on it's host organism\n</span>    <span class=\"sh\">'</span><span class=\"s\">Escherichia virus T4.fna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"c1\"># The path to our genome file, without the .gz because we decompressed it.\n</span>    <span class=\"sh\">'</span><span class=\"s\">--gff3=on</span><span class=\"sh\">'</span> <span class=\"c1\"># We would like gff3 formatted output (it's easier to parse!)\n</span><span class=\"p\">])</span>\n\n<span class=\"n\">gff3</span> <span class=\"o\">=</span> <span class=\"n\">gff3</span><span class=\"p\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">gff3</span> <span class=\"o\">=</span> <span class=\"n\">gff3</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"se\">\\n</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"tip\">\n  <tip-title>What does this commands look like on the CLI?</tip-title>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>augustus --species=E_coli_K12 'Escherichia virus T4.fna' --gff3=on\n</code></pre></div>  </div>\n</blockquote>\n\n<p>If you‚Äôre using <code class=\"language-plaintext highlighter-rouge\">subprocess.check_output()</code> python doesn‚Äôt return plain text <code class=\"language-plaintext highlighter-rouge\">str</code> to you, instead it returns a <code class=\"language-plaintext highlighter-rouge\">bytes</code> object. We can decode that into text with <code class=\"language-plaintext highlighter-rouge\">.decode('utf-8')</code>, a phrase you should memorise as going next to <code class=\"language-plaintext highlighter-rouge\">check_output()</code>, for 99% of use cases.</p>\n\n<p>Let‚Äôs look at the results!</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">gff3</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">20</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>It‚Äôs a lot of comment lines, starting with <code class=\"language-plaintext highlighter-rouge\">#</code>. Let‚Äôs remove those</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">cleaned_gff3</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">gff3</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">line</span><span class=\"p\">.</span><span class=\"nf\">startswith</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">#</span><span class=\"sh\">'</span><span class=\"p\">):</span>\n        <span class=\"k\">continue</span>\n    <span class=\"n\">cleaned_gff3</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">cleaned_gff3</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">20</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>And now you‚Äôve got a set of gff3 formatted gene calls! You can use all of your loop processing skills to slice and dice this data into something great!</p>\n\n<h1 id=\"aside-stdin-stderr-stdout\">Aside: <code class=\"language-plaintext highlighter-rouge\">stdin</code>, <code class=\"language-plaintext highlighter-rouge\">stderr</code>, <code class=\"language-plaintext highlighter-rouge\">stdout</code></h1>\n\n<p>All unix processes have three default file handles that are available to them:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">stdin</code>, where data is passed to the program via a pipe. E.g. <code class=\"language-plaintext highlighter-rouge\">generate-data | my-program</code>, there the program would read the output of <code class=\"language-plaintext highlighter-rouge\">generate-data</code> from the pipe.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">stdout</code>, the default place where things are written. E.g. if you <code class=\"language-plaintext highlighter-rouge\">print()</code> in python, it goes to <code class=\"language-plaintext highlighter-rouge\">stdout</code>. People often redirect <code class=\"language-plaintext highlighter-rouge\">stdout</code> to a file, like <code class=\"language-plaintext highlighter-rouge\">my-program &gt; output.txt</code> to save the output.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">stderr</code>, <em>generally</em> if your program produces output on <code class=\"language-plaintext highlighter-rouge\">stdout</code>, you might still want to log messages (errors, % done, etc.) If you write to <code class=\"language-plaintext highlighter-rouge\">stdout</code>, it might get mixed in with the user‚Äôs outputs, so we write to <code class=\"language-plaintext highlighter-rouge\">stderr</code>, which also gets printed to the screen, and looks identical as any print statement, but it‚Äôs coming from a separate pipe.</li>\n</ul>\n\n<h1 id=\"pipes\">Pipes</h1>\n\n<p>One of the more complicated cases, however, is when you need pipes.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/001/721/125/GCF_001721125.1_ASM172112v1/GCF_001721125.1_ASM172112v1_cds_from_genomic.fna.gz</span><span class=\"sh\">\"</span>\n<span class=\"n\">cds</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">E. Coli CDSs.fna.gz</span><span class=\"sh\">'</span>\n<span class=\"n\">subprocess</span><span class=\"p\">.</span><span class=\"nf\">check_call</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">wget</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">-O</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">cds</span><span class=\"p\">])</span>\n<span class=\"n\">subprocess</span><span class=\"p\">.</span><span class=\"nf\">check_call</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">gzip</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">-d</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">cds</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>With subprocesses, you can control the stdin, and stdout of the process by using file handles.</p>\n\n<blockquote class=\"code-2col\">\n  <blockquote class=\"code-in\">\n    <code-in-title>Terminal</code-in-title>\n    <p>Here we pipe a file to a process named <code class=\"language-plaintext highlighter-rouge\">build-icm</code> which takes one argument, the output name. It reads sequences from stdin.</p>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cat seq.fa | build-icm test.icm\n# OR\nbuild-icm test.icm &lt; seq.fa\n</code></pre></div>    </div>\n  </blockquote>\n  <blockquote class=\"code-out\">\n    <code-out-title>Python</code-out-title>\n    <p>Here we need to do a bit more.</p>\n    <ol>\n      <li>Open a file handle</li>\n      <li>Pass that file handle to <code class=\"language-plaintext highlighter-rouge\">check_call</code> or <code class=\"language-plaintext highlighter-rouge\">check_output</code>. This determines where stdin comes from.\n        <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>with open('seq.fa', 'r') as handle:\n subprocess.check_call(['build-icm', 'test.icm'], stdin=handle)\n</code></pre></div>        </div>\n      </li>\n    </ol>\n  </blockquote>\n</blockquote>\n\n<p>We‚Äôll do that now:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">E. Coli CDSs.fna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">r</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">handle</span><span class=\"p\">:</span>\n    <span class=\"n\">subprocess</span><span class=\"p\">.</span><span class=\"nf\">check_call</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">build-icm</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">test.icm</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"n\">stdin</span><span class=\"o\">=</span><span class=\"n\">handle</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"tip\">\n  <tip-title>What does this commands look like on the CLI?</tip-title>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>build-icm test.icm &lt; 'E. Coli CDSs.fna'\n</code></pre></div>  </div>\n</blockquote>\n\n<p>Here we build a model, based on the sequences of <em>E. Coli</em> K-12, that Glimmer3 can use.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"p\">.</span><span class=\"nf\">check_output</span><span class=\"p\">([</span>\n    <span class=\"sh\">'</span><span class=\"s\">glimmer3</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"c1\"># Our program\n</span>    <span class=\"sh\">'</span><span class=\"s\">Escherichia virus T4.fna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"c1\"># The input genome\n</span>    <span class=\"sh\">'</span><span class=\"s\">test.icm</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"c1\"># The model we just built\n</span>    <span class=\"sh\">'</span><span class=\"s\">t4-genes</span><span class=\"sh\">'</span>  <span class=\"c1\"># The base name for output files. It'll produce t4-genes.detail and t4-genes.predict.\n</span><span class=\"p\">]).</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"c1\"># And of course we decode as utf-8\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"tip\">\n  <tip-title>What does this commands look like on the CLI?</tip-title>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>glimmer3 'Escherichia virus T4.fna' test.icm t4-genes\n</code></pre></div>  </div>\n</blockquote>\n\n<p><em>What happened here?</em> The output of the program was written to <code class=\"language-plaintext highlighter-rouge\">stderr</code>, not <code class=\"language-plaintext highlighter-rouge\">stdout</code>, so Python may print that out to your screen, but <code class=\"language-plaintext highlighter-rouge\">output</code> will be empty. To solve this common problem we can re-run the program and collect both <code class=\"language-plaintext highlighter-rouge\">stdout</code> and <code class=\"language-plaintext highlighter-rouge\">stderr</code>.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"p\">.</span><span class=\"nf\">check_output</span><span class=\"p\">([</span>\n    <span class=\"sh\">'</span><span class=\"s\">glimmer3</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"c1\"># Our program\n</span>    <span class=\"sh\">'</span><span class=\"s\">Escherichia virus T4.fna</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"c1\"># The input genome\n</span>    <span class=\"sh\">'</span><span class=\"s\">test.icm</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"c1\"># The model we just built\n</span>    <span class=\"sh\">'</span><span class=\"s\">t4-genes</span><span class=\"sh\">'</span>  <span class=\"c1\"># The base name for output files. It'll produce t4-genes.detail and t4-genes.predict.\n</span><span class=\"p\">],</span> <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"p\">.</span><span class=\"n\">STDOUT</span><span class=\"p\">).</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"c1\"># And of course we decode as utf-8\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Here we‚Äôve re-directed the <code class=\"language-plaintext highlighter-rouge\">stderr</code> to <code class=\"language-plaintext highlighter-rouge\">stdout</code> and mixed both of them together. This isn‚Äôt always what we want, but here the program produces no output, and we can do that safely, and now we can parse it or do any other computations we need with it! Our Glimmer3 gene calls are in <code class=\"language-plaintext highlighter-rouge\">t4-genes.detail</code> and <code class=\"language-plaintext highlighter-rouge\">t4-genes.predict</code> if we want to open and process those as well.</p>\n"],"ref_slides":[],"video_library":{"tutorial":null,"slides":null,"demo":null,"both":null,"session":null},"hands_on":true,"slides":false,"mod_date":"2023-02-13 13:04:13 +0000","pub_date":"2022-04-25 11:43:04 +0000","version":8,"api":"https://training.galaxyproject.org/training-material/api/topics/data-science/tutorials/python-subprocess/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"Foundations of Data Science","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial"}