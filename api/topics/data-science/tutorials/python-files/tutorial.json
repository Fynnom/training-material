{"layout":"tutorial_hands_on","title":"Python - Files & CSV","level":"Introductory","requirements":[],"follow_up_training":[],"questions":["How can I read from a file?","How can I parse a CSV file?","How can I write results out"],"objectives":["Read data from a file","Write new data to a file","Use `with` to ensure the file is closed properly.","Use the CSV module to parse comma and tab separated datasets."],"time_estimation":"1H30M","key_points":["File reading requires a mode: read, write, and append","Use the CSV module to parse CSV files.","do NOT attempt to do it yourself, it will encounter edge cases that the CSV module handles for you","Use a `with` block to open a file."],"subtopic":"python-modular","contributors":[{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"},{"name":"Donny Vrins","joined":"2021-10","linkedin":"Donny Vrins","email":"D.vrins@live.nl","former_affiliations":["avans-atgm"],"id":"dirowa","url":"https://training.galaxyproject.org/training-material/api/contributors/dirowa.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/dirowa/"},{"name":"Bazante Sanders","joined":"2020-12","affiliations":["avans-atgm"],"id":"bazante1","url":"https://training.galaxyproject.org/training-material/api/contributors/bazante1.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/bazante1/"}],"priority":7,"notebook":{"language":"python","pyolite":true},"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00087","url":"/topics/data-science/tutorials/python-files/tutorial.html","topic_name":"data-science","tutorial_name":"python-files","dir":"topics/data-science/tutorials/python-files","symlink":null,"id":"data-science/python-files","ref_tutorials":["<p>Here we’ll give a quick tutorial on how to read and write files within Python.</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#setup\" id=\"markdown-toc-setup\">Setup</a></li>\n  <li><a href=\"#reading-from-a-file\" id=\"markdown-toc-reading-from-a-file\">Reading from a file</a></li>\n  <li><a href=\"#writing-files\" id=\"markdown-toc-writing-files\">Writing files</a></li>\n  <li><a href=\"#reading-csv-data\" id=\"markdown-toc-reading-csv-data\">Reading CSV data</a></li>\n</ol>\n\n</blockquote>\n\n<h2 id=\"setup\">Setup</h2>\n\n<p>For this tutorial, we assume you’re working in a notebook (Jupyter, CoCalc, etc) so we’ll run a quick “setup” step to download some CSV data:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">urllib.request</span>\n<span class=\"c1\"># Download a copy of Hamlet.\n</span><span class=\"n\">urllib</span><span class=\"p\">.</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"nf\">urlretrieve</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">https://gutenberg.org/cache/epub/1524/pg1524.txt</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">hamlet.txt</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Download some COVID data for Europe\n</span><span class=\"n\">urllib</span><span class=\"p\">.</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"nf\">urlretrieve</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">https://opendata.ecdc.europa.eu/covid19/vaccine_tracker/csv/data.csv</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">vaccinations.csv</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># And a fastq file\n</span><span class=\"n\">urllib</span><span class=\"p\">.</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"nf\">urlretrieve</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">https://gist.github.com/hexylena/7d249607f8f763301f06c78a48c3bf6f/raw/a100e278cee1c94035a3a644b16863deee0ba2c0/example.fastq</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">example.fastq</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>And now we’re ready to get started learning about files!</p>\n\n<h2 id=\"reading-from-a-file\">Reading from a file</h2>\n\n<p>Reading from and writing to files in Python is very straightforward, we use <code class=\"language-plaintext highlighter-rouge\">open()</code> to open a file to read from it. Files are accessed through something called a <strong>file <a href=\"https://en.wikipedia.org/wiki/Handle_(computing)\">handle</a></strong>, you’re not accessing the file itself, you’re opening a connection to the file, and then you can read lines from through that file handle. When you open a file handle, you must specify it’s mode:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Mode</th>\n      <th>Purpose</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">r</code></td>\n      <td>We will <strong>read</strong> from this file handle</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">w</code></td>\n      <td>We will <strong>write</strong> to this file handle</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">a</code></td>\n      <td>We will <strong>append</strong> to this file handle (we cannot access earlier contents!)</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>You will mostly use <code class=\"language-plaintext highlighter-rouge\">r</code> and <code class=\"language-plaintext highlighter-rouge\">w</code>, <code class=\"language-plaintext highlighter-rouge\">a</code> is especially useful for writing to program logs where you don’t really care what was written before, you just want to add your new logs to the end of the file.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">hamlet.txt</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">r</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">handle</span><span class=\"p\">:</span>\n    <span class=\"c1\"># readlines reads every line of a file into a giant list!\n</span>    <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"nf\">readlines</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p>Here we introduce a new bit of syntax, the <code class=\"language-plaintext highlighter-rouge\">with</code> block. Technically <code class=\"language-plaintext highlighter-rouge\">with</code> begins a “context manager” which allows python to setup some things before the block, run some contents in the block, and automatically handle cleanup of this block. When you open a file, you <em>must</em> close it when you’re done with it (otherwise bad things can happen!) and <code class=\"language-plaintext highlighter-rouge\">with</code> prevents most of those issues.</p>\n\n<p>In the above code snippet after the second line, the file (referred to by <code class=\"language-plaintext highlighter-rouge\">handle</code>) is automatically closed.</p>\n\n<blockquote class=\"code-2col\">\n  <blockquote class=\"code-in\">\n    <code-in-title>Using `with`</code-in-title>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>with open('file.txt', 'r') as handle:\n    print(handle.readlines())\n</code></pre></div>    </div>\n  </blockquote>\n  <blockquote class=\"code-out\">\n    <code-out-title>Not using `with`</code-out-title>\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>handle = open('file.txt', 'r')\nprint(handle.readlines())\nhandle.close() # Important!\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<p>Let’s see what’s in our file. `</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>Notice how it prints out a blank line afterwards! This is due to a <code class=\"language-plaintext highlighter-rouge\">\\n</code>, a newline. A newline just tells the computer “please put content on the next line”. We can see it by using the <code class=\"language-plaintext highlighter-rouge\">repr()</code> function:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">repr</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n\n<p>Every line that’s read in ends in a newline currently. This is done because if we wanted to write it back out, we would need to preserve those newlines, or all of the content would be on one giant line. Let’s try writing out a file, it’s <em>just</em> like reading in a file!</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">hamlet-copy.txt</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">w</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">handle</span><span class=\"p\">:</span>\n    <span class=\"c1\"># readlines reads every line of a file into a giant list!\n</span>    <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">lines</span><span class=\"p\">:</span>\n        <span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Check this file in your folder, does it look right? Is it identical in size to the original?</p>\n\n<h3 id=\"use-case-summarisation\">Use Case: Summarisation</h3>\n\n<p>Let’s use the file’s contents for something useful. This file specifically is the play Hamlet, by Shakespeare. The contents are formatted with a speaker indicated with all capital letters, followed by their lines (potentially spread over multiple lines of the file.)</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>HAMLET. Madam, how like you this play?\n\nQUEEN. The lady protests too much, methinks.\n\nHAMLET. O, but she’ll keep her word.\n</code></pre></div></div>\n\n<p>So let’s count up how many times each character speaks! (Roughly)</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">hamlet.txt</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">r</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">handle</span><span class=\"p\">:</span>\n    <span class=\"c1\"># readlines reads every line of a file into a giant list!\n</span>    <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"nf\">readlines</span><span class=\"p\">()</span>\n\n<span class=\"n\">speakers</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n</code></pre></div></div>\n\n<p>Here we’ve initialised the <code class=\"language-plaintext highlighter-rouge\">lines</code> variable with the contents of the text, and setup <code class=\"language-plaintext highlighter-rouge\">speakers</code> as a dictionary that will let us track how many times each character speaks. Next let’s define a function to check if a character is speaking on that line. It is if it meets two conditions: the first word is all caps, and it ends with a <code class=\"language-plaintext highlighter-rouge\">.</code>.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">is_speaker</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">word</span> <span class=\"o\">==</span> <span class=\"n\">word</span><span class=\"p\">.</span><span class=\"nf\">upper</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"n\">word</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">.</span><span class=\"sh\">'</span>\n</code></pre></div></div>\n\n<p>We can use that function later to check if a line starts with a speaker</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Loop over every line we read in\n</span><span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">lines</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Split by default splits on whitespace.\n</span>    <span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"n\">line</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Are there words on this line? We can't access the first word if we\n</span>    <span class=\"c1\"># haven't any words.\n</span>    <span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">continue</span>\n\n    <span class=\"c1\"># Check if the first word is uppercase, and the last character is a `.`,\n</span>    <span class=\"c1\"># then it's a character speaking.\n</span>    <span class=\"k\">if</span> <span class=\"nf\">is_speaker</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n        <span class=\"c1\"># Give this an easier to remember and understand name.\n</span>        <span class=\"n\">speaker</span> <span class=\"o\">=</span> <span class=\"n\">words</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># Have we seen this speaker before? If not, we should add them to the\n</span>        <span class=\"c1\"># speakers dictionary. Hint: Try removing this to see why we do this.\n</span>        <span class=\"k\">if</span> <span class=\"n\">speaker</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">speakers</span><span class=\"p\">:</span>\n            <span class=\"n\">speakers</span><span class=\"p\">[</span><span class=\"n\">speaker</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n        <span class=\"c1\"># Increment the number of times we've seen them speak.\n</span>        <span class=\"n\">speakers</span><span class=\"p\">[</span><span class=\"n\">speaker</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">speakers</span><span class=\"p\">[</span><span class=\"n\">speaker</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n</code></pre></div></div>\n\n<p>Ok! We’ve done a couple things here that all fall into the category of <strong>defensive programming</strong>. As programmers, we often accept input from users or from unknown sources. That input may be wrong, it may have bad data, it may be trying to attack us. So we respond by checking very carefully if things match our expectations, and rejecting the input otherwise. We did a couple things here for that:</p>\n\n<ul>\n  <li>Checking if the input matches our expectations exactly (capitals, <code class=\"language-plaintext highlighter-rouge\">.</code>)</li>\n  <li>Checking if the line is empty, using <code class=\"language-plaintext highlighter-rouge\">continue</code> to skip it if it was</li>\n  <li>Checking if the speaker is already known in the dictionary, adding it otherwise.</li>\n</ul>\n\n<p>Let’s see who was the most chatty:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">speakers</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">():</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>We’ve clearly caught a number of values that aren’t expected, some section headers (the numeric values, and some rare values we don’t expect.)</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">speakers</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Hamlet, the titular character, has the vast majority of turns speaking throughout the play:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Character</th>\n      <th>Turns speaking</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>HAMLET</td>\n      <td>358</td>\n    </tr>\n    <tr>\n      <td>HORATIO</td>\n      <td>107</td>\n    </tr>\n    <tr>\n      <td>KING</td>\n      <td>102</td>\n    </tr>\n    <tr>\n      <td>POLONIUS</td>\n      <td>86</td>\n    </tr>\n    <tr>\n      <td>QUEEN</td>\n      <td>69</td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 id=\"writing-files\">Writing files</h2>\n\n<p>Writing a file out is exactly like reading a file, we just use the different file mode <code class=\"language-plaintext highlighter-rouge\">w</code> to indicate we wish to write to a file:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">hello.txt</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">w</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">handle</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Let's write it out a few times\n</span>    <span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Hello, world!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Hello, world!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Hello, world!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Hello, world!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Check the file’s contents in your folder, does it look like you expect? Remember your <code class=\"language-plaintext highlighter-rouge\">\\n</code>s!</p>\n\n<h3 id=\"use-case-transformation\">Use Case: Transformation</h3>\n\n<p>A common use case is transforming one file’s contents into another file format or file type. Let’s do a very simple example of that, taking a FASTQ file and transforming it into a FASTA file. Remember first that a FASTQ file looks like:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>@M00970:337:000000000-BR5KF:1:1102:17745:1557 1:N:0:CGCAGAAC+ACAGAGTT\nGTGCCAGCCGCCGCGGTAGTCCGACGTGGCTGTCTCTTATACACATCTCCGAGCCCACGAGACCGAAGAACATCTCGTATGCCGTCTTCTGCTTGAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAGAAGCAAATGACGATTCAAGAAAGAAAAAAACACAGAATACTAACAATAAGTCATAAACATCATCAACATAAAAAAGGAAATACACTTACAACACATATCAATATCTAAAATAAATGATCAGCACACAACATGACGATTACCACACATGTGTACTACAAGTCAACTA\n+\nGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGFGGGFGGGGGGAFFGGFGGGGGGGGFGGGGGGGGGGGGGGFGGG+38+35*311*6,,31=******441+++0+0++0+*1*2++2++0*+*2*02*/***1*+++0+0++38++00++++++++++0+0+2++*+*+*+*+*****+0**+0**+***+)*.***1**//*)***)/)*)))*)))*),)0(((-((((-.(4(,,))).,(())))))).)))))))-))-(\n</code></pre></div></div>\n\n<table>\n  <thead>\n    <tr>\n      <th>Line</th>\n      <th>Contents</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>Identifier, prefixed with <code class=\"language-plaintext highlighter-rouge\">@</code></td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>Sequence</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">+</code></td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>Quality scores</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>And a fasta file looks like this, where <code class=\"language-plaintext highlighter-rouge\">&gt;</code> indicates a sequence identifier, and it is followed by one or more lines of ACTGs.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&gt;M00970:337:000000000-BR5KF:1:1102:17745:1557 1:N:0:CGCAGAAC+ACAGAGTT\nGTGCCAGCCGCCGCGGTAGTCCGACGTGGCTGTCTCTTATACACATCTCCGAGCCCACGAGACCGAAGAACATCTCGTATGCCGTCTTCTGCTTGAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAGAAGCAAATGACGATTCAAGAAAGAAAAAAACACAGAATACTAACAATAAGTCATAAACATCATCAACATAAAAAAGGAAATACACTTACAACACATATCAATATCTAAAATAAATGATCAGCACACAACATGACGATTACCACACATGTGTACTACAAGTCAACTA\n</code></pre></div></div>\n\n<p>In the setup portion we downloaded a FASTQ file, now let’s extract all of the sequences from this file, and write them out as a FASTA file. Why would you want to do this? Sometimes after sequencing a sample (especially metagenomics), you want to blast the sequences to figure out which organisms they belong to. A common way to do that is BLAST which accepts fasta formatted sequences. So we’ll write something to convert these formats, removing the <code class=\"language-plaintext highlighter-rouge\">+</code> and quality score lines.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">example.fastq</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">r</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">handle</span><span class=\"p\">:</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"nf\">readlines</span><span class=\"p\">()</span>\n\n<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">example-converted.fasta</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">w</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">handle</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Since fastq files have groups of 4 lines, we can use that to extract\n</span>        <span class=\"c1\"># specific lines of every read:\n</span>        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">4</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">&gt;</span><span class=\"sh\">\"</span> <span class=\"o\">+</span> <span class=\"n\">line</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">4</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n        <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n</code></pre></div></div>\n\n<p>That’s it! Check if your <code class=\"language-plaintext highlighter-rouge\">fasta</code> file looks correct.</p>\n\n<blockquote class=\"tip\">\n  <tip-title>`enumerate`</tip-title>\n  <p>If you want to know which item number you’re on while you’re looping over a list, you can use the function <code class=\"language-plaintext highlighter-rouge\">enumerate()</code>\nTry out this code to see how it works:</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>for index, item in enumerate(['a', 'b', 'c']):\n    print(index, item)\n</code></pre></div>  </div>\n\n  <p>Try using it to clean up the above code.</p>\n</blockquote>\n\n<h2 id=\"reading-csv-data\">Reading CSV data</h2>\n\n<p>If you’re reading data from a comma separated value (CSV) or tab separated value (TSV) file, you should use the built in <code class=\"language-plaintext highlighter-rouge\">csv</code> module to do this. You might ask yourself “Why, csv parsing is easy” and that is a common thought! It would be so simple to do something like</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Please don't do this :)\n</span><span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">vaccinations.csv</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">r</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">handle</span><span class=\"p\">:</span>\n    <span class=\"n\">first_lines</span> <span class=\"o\">=</span> <span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"nf\">readlines</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">first_lines</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">,</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>But you would be wrong! This code has a subtle bug that you might not see until someone generates data that specifically affects it, with “quoted” columns. If you have a table like</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Patient</th>\n      <th>Location</th>\n      <th>Disease Indications</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Helena</td>\n      <td>Den Haag, the Netherlands</td>\n      <td>Z87.890</td>\n    </tr>\n    <tr>\n      <td>Bob</td>\n      <td>Little Rock, Arkansas, USA</td>\n      <td>Z72.53</td>\n    </tr>\n    <tr>\n      <td>Jane</td>\n      <td>London, UK</td>\n      <td>Z86.16</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>This would probably be exported as a CSV file from Excel that looks like:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Patient,Location,Disease Indications\nHelena,\"Den Haag, the Netherlands\",Z87.890\nBob,\"Little Rock, Arkansas, USA\",Z72.53\nJane,\"London, UK\",Z86.16\n</code></pre></div></div>\n\n<p>Note that some columns are quoted. What do you think will happen with the following code?</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">csv_data</span> <span class=\"o\">=</span> <span class=\"sh\">\"\"\"</span><span class=\"s\">\nPatient,Location,Disease Indications\nHelena,</span><span class=\"sh\">\"</span><span class=\"s\">Den Haag, the Netherlands</span><span class=\"sh\">\"</span><span class=\"s\">,Z87.890\nBob,</span><span class=\"sh\">\"</span><span class=\"s\">Little Rock, Arkansas, USA</span><span class=\"sh\">\"</span><span class=\"s\">,Z72.53\nJane,</span><span class=\"sh\">\"</span><span class=\"s\">London, UK</span><span class=\"sh\">\"</span><span class=\"s\">,Z86.16\n</span><span class=\"sh\">\"\"\"</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">().</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"se\">\\n</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Please don't do this :)\n</span><span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">csv_data</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">,</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>Does that look right? Maybe not. Instead we can use the <code class=\"language-plaintext highlighter-rouge\">csv</code> module to work around this and properly process CSV files:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">csv</span>\n\n<span class=\"n\">csv_data</span> <span class=\"o\">=</span> <span class=\"sh\">\"\"\"</span><span class=\"s\">\nPatient,Location,Disease Indications\nHelena,</span><span class=\"sh\">\"</span><span class=\"s\">Den Haag, the Netherlands</span><span class=\"sh\">\"</span><span class=\"s\">,Z87.890\nBob,</span><span class=\"sh\">\"</span><span class=\"s\">Little Rock, Arkansas, USA</span><span class=\"sh\">\"</span><span class=\"s\">,Z72.53\nJane,</span><span class=\"sh\">\"</span><span class=\"s\">London, UK</span><span class=\"sh\">\"</span><span class=\"s\">,Z86.16\n</span><span class=\"sh\">\"\"\"</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">().</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"se\">\\n</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Please DO this :)\n</span><span class=\"n\">csv_reader</span> <span class=\"o\">=</span> <span class=\"n\">csv</span><span class=\"p\">.</span><span class=\"nf\">reader</span><span class=\"p\">(</span><span class=\"n\">csv_data</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">,</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">quotechar</span><span class=\"o\">=</span><span class=\"sh\">'\"'</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">csv_reader</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>That looks a lot better! Now we’ve properly handled the quoted columns that contain one or more <code class=\"language-plaintext highlighter-rouge\">,</code> in the middle of our file. This is actually one of the motivating factors in using the TSV format, the <kbd>tab</kbd> character is much more rare in data than <kbd>,</kbd>. There is less chance for confusion with poorly written software.</p>\n\n<p>Let’s read in some statistics about vaccinations:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">csv</span>\n\n<span class=\"n\">vax</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">vaccinations.csv</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">r</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">handle</span><span class=\"p\">:</span>\n    <span class=\"n\">csv_reader</span> <span class=\"o\">=</span> <span class=\"n\">csv</span><span class=\"p\">.</span><span class=\"nf\">reader</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">,</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">quotechar</span><span class=\"o\">=</span><span class=\"sh\">'\"'</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">csv_reader</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Skip our header row\n</span>        <span class=\"k\">if</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">YearWeekISO</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n        <span class=\"c1\"># Otherwise load in the data\n</span>        <span class=\"n\">vax</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">vax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>Here we have a 2 dimensional array, a list of lists. Each row is an entry in the main list, and each column is an entry in each of those children.</p>\n\n<p>Our columns are:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Column</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>YearWeekISO</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>ReportingCountry</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>Denominator</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>NumberDosesReceived</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>NumberDosesExported</td>\n    </tr>\n    <tr>\n      <td>5</td>\n      <td>FirstDose</td>\n    </tr>\n    <tr>\n      <td>6</td>\n      <td>FirstDoseRefused</td>\n    </tr>\n    <tr>\n      <td>7</td>\n      <td>SecondDose</td>\n    </tr>\n    <tr>\n      <td>8</td>\n      <td>DoseAdditional1</td>\n    </tr>\n    <tr>\n      <td>9</td>\n      <td>UnknownDose</td>\n    </tr>\n    <tr>\n      <td>10</td>\n      <td>Region</td>\n    </tr>\n    <tr>\n      <td>11</td>\n      <td>TargetGroup</td>\n    </tr>\n    <tr>\n      <td>12</td>\n      <td>Vaccine</td>\n    </tr>\n    <tr>\n      <td>13</td>\n      <td>Population</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Let’s subset the data to make it a bit easier to work with, maybe we’ll just use the Dutch data (please feel free to choose another column though!)</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">country</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">NL</span><span class=\"sh\">'</span>\n\n<span class=\"n\">subset</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">vax</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Here we select for a country\n</span>    <span class=\"k\">if</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">country</span><span class=\"p\">:</span>\n        <span class=\"n\">subset</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">subset</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>That should be easier to work with, now we only have one country’s data. Let’s do some exercises with this data:</p>\n\n<blockquote class=\"question\">\n  <question-title>Which vaccines were given?</question-title>\n\n  <p>Which vaccines were given? Use the <code class=\"language-plaintext highlighter-rouge\">subset</code> to examine which vaccines were given in the Netherlands. <em>Tip</em>: if <code class=\"language-plaintext highlighter-rouge\">x</code> is a list, <code class=\"language-plaintext highlighter-rouge\">set(x)</code> will return the unique values in that list.</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <p>To figure out which vaccines were given, we can look at column 12:</p>\n\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">vaccines</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">subset</span><span class=\"p\">:</span>\n    <span class=\"n\">vaccines</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"n\">vaccines</span><span class=\"p\">))</span>\n</code></pre></div>    </div>\n\n    <p>We can use the <code class=\"language-plaintext highlighter-rouge\">set</code> function to convert the list to a set, and show only the unique values.</p>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try things out here!\n</span></code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>How many of each vaccine were given?</question-title>\n\n  <p>How many of each were given?</p>\n\n  <p><em>Tip</em>: use the accumulator pattern.\n<em>Tip</em>: Columns 5, 7, and 8 have doses being given out to patients.</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">doses</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">subset</span><span class=\"p\">:</span>\n    <span class=\"n\">brand</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">brand</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">doses</span><span class=\"p\">:</span>\n        <span class=\"n\">doses</span><span class=\"p\">[</span><span class=\"n\">brand</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">doses</span><span class=\"p\">[</span><span class=\"n\">brand</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">doses</span><span class=\"p\">[</span><span class=\"n\">brand</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">doses</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try things out here!\n</span></code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>How many of each vaccine were exported? received?</question-title>\n\n  <p>How many of each were exported? received?</p>\n\n  <p><em>Tip</em>: you only need to loop once.\n<em>Tip</em>: you will need to handle an edge case here. Try and find it out!</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">export</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"n\">received</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">subset</span><span class=\"p\">:</span>\n    <span class=\"n\">brand</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">brand</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">export</span><span class=\"p\">:</span>\n        <span class=\"n\">export</span><span class=\"p\">[</span><span class=\"n\">brand</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">if</span> <span class=\"n\">brand</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">received</span><span class=\"p\">:</span>\n        <span class=\"n\">received</span><span class=\"p\">[</span><span class=\"n\">brand</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">if</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span>\n        <span class=\"n\">export</span><span class=\"p\">[</span><span class=\"n\">brand</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">export</span><span class=\"p\">[</span><span class=\"n\">brand</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">])</span>\n    <span class=\"k\">if</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span>\n        <span class=\"n\">received</span><span class=\"p\">[</span><span class=\"n\">brand</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">received</span><span class=\"p\">[</span><span class=\"n\">brand</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">received</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try things out here!\n</span></code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>When was the first dose received?</question-title>\n\n  <p><em>Tip</em>: use <code class=\"language-plaintext highlighter-rouge\">break</code>, and check how many doses were given!</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">subset</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">])</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">On </span><span class=\"si\">{</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s\">, </span><span class=\"si\">{</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s\"> doses of </span><span class=\"si\">{</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s\"> were given</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">break</span>\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try things out here!\n</span></code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Transform the data for plotting</question-title>\n\n  <p>Let’s say you want to plot the fraction of the population that has been vaccinated by the various points in time.</p>\n\n  <ul>\n    <li>Subset the data further for TargetGroup (column 11) set to ‘ALL’</li>\n    <li>Create an accumulator, to count how many doses have been given their FirstDose at each week</li>\n    <li>Use column 13 (population) to calculate the fraction of the population that has been given one of those doses at each week</li>\n  </ul>\n\n  <p>The output should be a list of percentages ranging from [0.0 to 1.0].</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">total_doses</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">percent_vaccinated_per_week</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">subset</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"sh\">'</span><span class=\"s\">ALL</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n        <span class=\"k\">continue</span>\n    <span class=\"n\">total_doses</span> <span class=\"o\">=</span> <span class=\"n\">total_doses</span> <span class=\"o\">+</span> <span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">])</span>\n    <span class=\"n\">percent_vaccinated_per_week</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">total_doses</span> <span class=\"o\">/</span> <span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]))</span>\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try things out here!\n</span><span class=\"n\">percent_vaccinated_per_week</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"c1\"># Write code here!\n</span>\n\n\n\n<span class=\"c1\"># When you're done, you should have a 'results' variable\n# You may need to `pip install matplotlib`\n</span><span class=\"o\">%</span><span class=\"n\">matplotlib</span> <span class=\"n\">inline</span>\n<span class=\"kn\">import</span> <span class=\"n\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n<span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">plot</span><span class=\"p\">(</span><span class=\"n\">percent_vaccinated_per_week</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">xlabel</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Week</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">ylabel</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Percent Vaccinated</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Which vaccines were given?</question-title>\n\n  <p>Write this out to a new file, with two columns. The index and the Percent Vaccinated. It should be a comma separated file, and should have a header. Save this as a csv file named <code class=\"language-plaintext highlighter-rouge\">weekly-percent-vax.csv</code></p>\n\n  <p><em>Tip</em>: use a <code class=\"language-plaintext highlighter-rouge\">csvwriter</code>, it works exactly like a <code class=\"language-plaintext highlighter-rouge\">csvreader</code>. You can use the <code class=\"language-plaintext highlighter-rouge\">writerow()</code> function to write out a row.\n<em>Tip</em>: Use <code class=\"language-plaintext highlighter-rouge\">enumerate()</code> to get a list of items with indexes.</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>with open('weekly-percent-vax.csv', 'w') as handle:\n    writer = csv.writer(csv_data, delimiter=\",\", quotechar='\"')\n    for row in enumerate(percent_vaccinated_per_week):\n        writer.writerow(row)\n</code></pre></div>    </div>\n\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try things out here!\n</span></code></pre></div></div>\n\n<p>Congratulations on getting this far! Hopefully you feel more comfortable working with files.</p>\n"],"ref_slides":[],"video_library":{"tutorial":null,"slides":null,"demo":null,"both":null,"session":null},"hands_on":true,"slides":false,"mod_date":"2023-02-13 13:04:13 +0000","pub_date":"2022-04-25 11:43:04 +0000","version":9,"api":"https://training.galaxyproject.org/training-material/api/topics/data-science/tutorials/python-files/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"Foundations of Data Science","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial"}