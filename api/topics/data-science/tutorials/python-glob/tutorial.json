{"layout":"tutorial_hands_on","title":"Python - Globbing","level":"Intermediate","requirements":[],"follow_up_training":[],"questions":["How can I collect a list of files."],"objectives":["Use glob to collect a list of files","Learn about the potential pitfalls of glob"],"time_estimation":"15M","key_points":["If your data is ordering dependent, sort your globs!"],"subtopic":"python-modular","contributors":[{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"},{"name":"Donny Vrins","joined":"2021-10","linkedin":"Donny Vrins","email":"D.vrins@live.nl","former_affiliations":["avans-atgm"],"id":"dirowa","url":"https://training.galaxyproject.org/training-material/api/contributors/dirowa.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/dirowa/"},{"name":"Bazante Sanders","joined":"2020-12","affiliations":["avans-atgm"],"id":"bazante1","url":"https://training.galaxyproject.org/training-material/api/contributors/bazante1.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/bazante1/"}],"priority":11,"notebook":{"language":"python","pyolite":true},"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00090","url":"/topics/data-science/tutorials/python-glob/tutorial.html","topic_name":"data-science","tutorial_name":"python-glob","dir":"topics/data-science/tutorials/python-glob","symlink":null,"id":"data-science/python-glob","ref_tutorials":["<p>Globbing is the term used in computer science when we have a bunch of files and we want to list all of them matching some pattern.</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#setup\" id=\"markdown-toc-setup\">Setup</a></li>\n  <li><a href=\"#finding-files\" id=\"markdown-toc-finding-files\">Finding Files</a></li>\n  <li><a href=\"#finding-files-in-directories\" id=\"markdown-toc-finding-files-in-directories\">Finding files in directories</a></li>\n  <li><a href=\"#exercise\" id=\"markdown-toc-exercise\">Exercise</a></li>\n  <li><a href=\"#pitfalls\" id=\"markdown-toc-pitfalls\">Pitfalls</a></li>\n</ol>\n\n</blockquote>\n\n<h1 id=\"setup\">Setup</h1>\n\n<p>We’ll start by creating some files for use in the rest of this tutorial</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">import</span> <span class=\"n\">subprocess</span>\n\n<span class=\"n\">dirs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">a/b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">c/e</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">.</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">a.txt</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">a.csv</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b.csv</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b.txt</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">e.glm</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"n\">dirs</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Create some directories\n</span>    <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">makedirs</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Create some files\n</span>    <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">files</span><span class=\"p\">:</span>\n        <span class=\"n\">subprocess</span><span class=\"p\">.</span><span class=\"nf\">check_output</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">touch</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)])</span>\n</code></pre></div></div>\n\n<p>Now we should have a pretty full folder!</p>\n\n<h1 id=\"finding-files\">Finding Files</h1>\n\n<p>We can use the glob module to find files:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">glob</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">glob</span><span class=\"p\">.</span><span class=\"nf\">glob</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">*.csv</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">glob</span><span class=\"p\">.</span><span class=\"nf\">glob</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">*.txt</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>Here we use an asterisk (<code class=\"language-plaintext highlighter-rouge\">*</code>) as a wildcard, it matches any bit of text (but not into folders!) to all matching files. Here we list all matching <code class=\"language-plaintext highlighter-rouge\">csv</code> or <code class=\"language-plaintext highlighter-rouge\">txt</code> files. This is great to find files matching a pattern.</p>\n\n<p>We can also use asterisks anywhere in the glob, it doesn’t just have to be the filename portion:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">glob</span><span class=\"p\">.</span><span class=\"nf\">glob</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">a*</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>Here we even see a third entry: the directory.</p>\n\n<h1 id=\"finding-files-in-directories\">Finding files in directories</h1>\n\n<p>Until now we’ve found only files in a single top level directory, but what if we wanted to find files in subdirectories?</p>\n\n<p>Only need a single directory? Just include that!</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">glob</span><span class=\"p\">.</span><span class=\"nf\">glob</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">a/*.csv</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>But if you need more levels, or want to look in <em>all</em> folders, then you need the double wildcard! With two asterisks <code class=\"language-plaintext highlighter-rouge\">**</code> we can search recursively through directories for files:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">glob</span><span class=\"p\">.</span><span class=\"nf\">glob</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">**/a.csv</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<h1 id=\"exercise\">Exercise</h1>\n\n<blockquote class=\"question\">\n  <question-title>Where in the world is the CSV?</question-title>\n\n  <ol>\n    <li>How would you find all <code class=\"language-plaintext highlighter-rouge\">.csv</code> files?</li>\n    <li>How would you find all <code class=\"language-plaintext highlighter-rouge\">.txt</code> files?</li>\n    <li>How would you find all files starting with the letter ‘e’?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <ol>\n      <li><code class=\"language-plaintext highlighter-rouge\">glob.glob('**/*.csv')</code></li>\n      <li><code class=\"language-plaintext highlighter-rouge\">glob.glob('**/*.txt')</code></li>\n      <li><code class=\"language-plaintext highlighter-rouge\">glob.glob('**/e*')</code></li>\n    </ol>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try things out here!\n</span></code></pre></div></div>\n\n<h1 id=\"pitfalls\">Pitfalls</h1>\n\n<p>Some analyses (especially simultaions) can be dependent on data input order or data sorting. This was recently seen in <span class=\"citation\"><a href=\"#Bhandari_Neupane_2019\">Neupane <i>et al.</i> 2019</a></span> where the data files used were sorted one way on Windows, and another on Linux, resulting in different results for the same code and the same datasets! Yikes!</p>\n\n<p>If you know your analyses are dependent on file ordering, then you can use <code class=\"language-plaintext highlighter-rouge\">sorted()</code> to make sure the data is provided in a uniform way every time.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">glob</span><span class=\"p\">.</span><span class=\"nf\">glob</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">**/a.csv</span><span class=\"sh\">'</span><span class=\"p\">)))</span>\n</code></pre></div></div>\n\n<p>If you’re not sure if your results will be dependent, you can try sorting anyway. Or better yet, randomising the list of inputs to make sure your code behaves properly in any scenario.</p>\n"],"ref_slides":[],"hands_on":true,"slides":false,"mod_date":"2023-02-13 13:04:13 +0000","pub_date":"2022-04-25 11:43:04 +0000","version":7,"api":"https://training.galaxyproject.org/training-material/api/topics/data-science/tutorials/python-glob/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"Foundations of Data Science","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial"}