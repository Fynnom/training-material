{"layout":"tutorial_hands_on","title":"Basics of using Git from the Command Line","questions":["How can I start tracking my changes with git?","How do I commit changes?","How can I undo a mistake?"],"objectives":["Create a repository","Commit a file","Make some changes","Use the log to view the diff","Undo a bad change"],"time_estimation":"30m","key_points":["While git is extremely powerful, just using it for tracking changes is quite easy!","This does not take advantage of any advanced features, nor collaboration, but it is easy to expand into doing that."],"contributions":{"authorship":["hexylena"]},"requirements":[{"type":"internal","topic_name":"data-science","tutorials":["cli-basics"]}],"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00079","url":"/topics/data-science/tutorials/git-cli/tutorial.html","topic_name":"data-science","tutorial_name":"git-cli","dir":"topics/data-science/tutorials/git-cli","symlink":null,"id":"data-science/git-cli","ref_tutorials":["<p>Version control is a way of tracking the change history of a project. Even if you have never used a version control tool, you’ve probably already done it manually: copying and renaming project folders (“paper-1.doc”, “paper-2.doc”, etc.) is a form of version control. Within bioinformatics (from research, to development, to sysadmin) a lot of us are using <code class=\"language-plaintext highlighter-rouge\">git</code> as our primary method of source control for everything we do: notes, slides, tutorials, code, notebooks, ansible, system configuration, and more.</p>\n\n<blockquote class=\"comment\">\n  <comment-title>Source</comment-title>\n  <p>This tutorial contains text from <a href=\"https://github.com/rdadolf/git-tutorial/\">this tutorial</a> by Robert Adolf (<a href=\"https://github.com/rdadolf\">@rdadolf</a>), which is licensed CC-BY.</p>\n</blockquote>\n\n<p>Git is a tool that automates and enhances a lot of the tasks that arise when dealing with larger, longer-living, and collaborative projects. It’s also become the common underpinning to many popular online code repositories, GitHub being the most popular.</p>\n\n<p>While it can be used collaboratively, this tutorial focuses on a single-user git repository for the most basic operations.</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, you will learn how to create a git repo, and begin working with it.</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#why-should-you-use-version-control\" id=\"markdown-toc-why-should-you-use-version-control\">Why should you use version control?</a></li>\n  <li><a href=\"#pre-requisites\" id=\"markdown-toc-pre-requisites\">Pre-requisites</a></li>\n  <li><a href=\"#setting-up-a-repository\" id=\"markdown-toc-setting-up-a-repository\">Setting up a Repository</a></li>\n  <li><a href=\"#adding-files\" id=\"markdown-toc-adding-files\">Adding Files</a></li>\n  <li><a href=\"#logs\" id=\"markdown-toc-logs\">Logs</a></li>\n  <li><a href=\"#branching\" id=\"markdown-toc-branching\">Branching</a></li>\n  <li><a href=\"#undo-revert\" id=\"markdown-toc-undo-revert\">Undo! Revert!</a></li>\n  <li><a href=\"#further-reading\" id=\"markdown-toc-further-reading\">Further Reading</a></li>\n</ol>\n\n</blockquote>\n\n<h2 id=\"why-should-you-use-version-control\">Why should you use version control?</h2>\n\n<p>If you ask 10 people, you’ll get 10 different answers, but one of the commonalities is that most people don’t realize how integral it is to their development process until they’ve started using it. Still, for the sake of argument, here are some highlights:</p>\n\n<ul>\n  <li><strong>You can undo anything</strong>: Git provides a complete history of every change that has ever been made to your project, timestamped, commented, and attributed. If something breaks, you always have the choice of going back to a previous tate.</li>\n  <li><strong>You won’t need to keep undo-ing things</strong>: One of the advantages of using git properly is that by keeping new changes separate from a stable base, you tend to avoid the massive rollbacks associated with constantly tinkering with a single code.</li>\n  <li><strong>You can identify exactly when and where changes were made</strong> (and by whom!): Git allows you to pinpoint when a particular piece of code was changed, so finding what other pieces of code a bug might affect or figuring out why a certain expression was added is easy.</li>\n  <li><strong>Git forces teams to face conflicts directly</strong>: On a team-based project, many people are often working with the same code. By having a tool which understands when and where files were changed, it’s easy to see when changes might conflict with each other. While it might seem troublesome sometimes to have to deal with conflicts, the alternative—not knowing there’s a conflict—is much more insidious.</li>\n</ul>\n\n<h2 id=\"pre-requisites\">Pre-requisites</h2>\n\n<p><a href=\"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\">You will need to install git, if you have not done so already.</a></p>\n\n<h2 id=\"setting-up-a-repository\">Setting up a Repository</h2>\n\n<p>Let’s create a new repository.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Create a Repository</hands-on-title>\n  <ol>\n    <li>\n      <p>Make a new directory where you will store your files, and navigate into it.</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">mkdir </span>git-tutorial<span class=\"p\">;</span> <span class=\"nb\">cd </span>git-tutorial<span class=\"p\">;</span>\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n    <li>\n      <p>Create or “initialise” the <code class=\"language-plaintext highlighter-rouge\">git</code> repository with the <code class=\"language-plaintext highlighter-rouge\">git init</code> command.</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git init\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"code-out\">\n        <code-out-title></code-out-title>\n        <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Initialized empty Git repository <span class=\"k\">in</span> /tmp/project/.git/\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>This has created a folder <code class=\"language-plaintext highlighter-rouge\">.git</code> in your project directory, here is where <code class=\"language-plaintext highlighter-rouge\">git</code> stores all of it’s data that it needs to track repository changes over time. It’s not terribly interesting yet though!</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>What's the status</hands-on-title>\n  <ol>\n    <li>\n      <p>You can always check the status of a repository with <code class=\"language-plaintext highlighter-rouge\">git status</code></p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git status\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"code-out\">\n        <code-out-title></code-out-title>\n        <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>On branch main\n\nNo commits yet\n\nnothing to commit <span class=\"o\">(</span>create/copy files and use <span class=\"s2\">\"git add\"</span> to track<span class=\"o\">)</span>\n\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"adding-files\">Adding Files</h2>\n\n<p>Let’s add our first file, often a (pretty empty) readme file.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>What's the status</hands-on-title>\n  <ol>\n    <li>\n      <p>Create a new file, <code class=\"language-plaintext highlighter-rouge\">readme.md</code> with some basic content</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">echo</span> <span class=\"s2\">\"My Project\"</span> <span class=\"o\">&gt;</span> readme.md\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n    <li>\n      <p>Add a file with <code class=\"language-plaintext highlighter-rouge\">git add</code>. This adds it to git’s staging area to be committed.</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git add readme.md\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n    <li>\n      <p>Commit the file! This will add it to git’s log.</p>\n\n      <blockquote class=\"tip\">\n        <tip-title>What makes a good commit message?</tip-title>\n        <p>It depends a lot on the community, some have specific style guides they enforce, some don’t, but in general</p>\n        <ul>\n          <li>Keep the description short (&lt;72 chars) and descriptive.</li>\n          <li>If you need, provide a long description as well, explaining your changes. (Use <code class=\"language-plaintext highlighter-rouge\">git commit</code> without the <code class=\"language-plaintext highlighter-rouge\">-m</code> flag!)\n<a href=\"https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\">A lot has been written</a> about good commit messages, search the internet and find ideas for what you think makes a good commit message!</li>\n        </ul>\n\n        <p>And beware of the trap we all fall into sometimes, <a href=\"https://xkcd.com/1296/\">unhelpful commit messages</a>\n<a href=\"../../images/xkcd/git_commit.png\" rel=\"noopener noreferrer\"><img src=\"../../images/xkcd/git_commit.png\" alt=\"xkcd comic with commits in a table from 14h to 2h ago, starting with extremely useful commits like &quot;created main loop &amp; timing control&quot;, and becoming extremely unhelpful messages for the latest commits, like 'AAAAAA' or &quot;asdfasdf&quot;.\" width=\"439\" height=\"250\" loading=\"lazy\" /></a>\nEven your author is <a href=\"https://github.com/galaxyproject/gxadmin/commit/568adb703189d98da701e35c3414be35ea106184\">very</a>, <a href=\"https://github.com/galaxyproject/training-material/commit/611f82d267f1426aa09863c2ac9c9006f38e3c4c\">very</a> guilty of this, but you can do better!</p>\n      </blockquote>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git commit <span class=\"nt\">-m</span> <span class=\"s2\">\"Add readme\"</span>\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"code-out\">\n        <code-out-title></code-out-title>\n        <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">[</span>main <span class=\"o\">(</span>root-commit<span class=\"o\">)</span> f5ec14f] Add readme\n 1 file changed, 1 insertion<span class=\"o\">(</span>+<span class=\"o\">)</span>\n create mode 100644 readme.md\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n  </ol>\n\n  <blockquote class=\"question\">\n    <question-title>Is there anything left to do? Check the status</question-title>\n    <p>Check <code class=\"language-plaintext highlighter-rouge\">git status</code> to see if there’s anything else left to resolve.</p>\n    <blockquote class=\"solution\">\n      <solution-title></solution-title>\n      <div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git status\n<span class=\"go\">On branch main\nnothing to commit, working tree clean\n</span></code></pre></div>      </div>\n    </blockquote>\n  </blockquote>\n\n</blockquote>\n\n<p>Congratulations! You’ve made your first commit. The output of the commit command lists everything you’ve just done:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[main (root-commit) f5ec14f] Add readme\n 1 file changed, 1 insertion(+)\n create mode 100644 readme.md\n</code></pre></div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">f5ec14f</code> is the <strong>commit id</strong>, every commit you make is given a hash which uniquely refers to that specific commit. Next we see our commit message <code class=\"language-plaintext highlighter-rouge\">Add readme</code>, a brief mention of how many files we’ve changed, and how many insertions or deletions we’ve made to the text, and lastly which files we’ve added.</p>\n\n<h3 id=\"exercise-make-some-more-commits\">Exercise: Make some more commits</h3>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Make some more commits</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Add your name to the <code class=\"language-plaintext highlighter-rouge\">readme.md</code> and commit your changes.</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">echo</span> <span class=\"s2\">\"Author: hexylena\"</span> <span class=\"o\">&gt;&gt;</span> readme.md\ngit add readme.md\ngit commit <span class=\"nt\">-m</span> <span class=\"s1\">'Add author name'</span>\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n    <li>\n      <p>Make up a project description, add it to the readme, and commit.</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">echo</span> <span class=\"s2\">\"This project enables stakeholders to experience synergistic effects and increase link up opportunities to improve quarterly and YOY ROI.</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"o\">&gt;&gt;</span> readme.md\ngit add readme.md\ngit commit <span class=\"nt\">-m</span> <span class=\"s1\">'Add project description'</span>\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n    <li>\n      <p><a href=\"https://spdx.org/licenses/\">Pick a license</a> for your project, and mention it in the <code class=\"language-plaintext highlighter-rouge\">readme.md</code>, and commit.</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">echo</span> <span class=\"s2\">\"# License</span><span class=\"se\">\\n</span><span class=\"s2\">AGPL-3.0\"</span> <span class=\"o\">&gt;&gt;</span> readme.md\ngit add readme.md\ngit commit <span class=\"nt\">-m</span> <span class=\"s1\">'Add project license'</span>\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>After this step you should have ~3 commits to work with!</p>\n\n<h2 id=\"logs\">Logs</h2>\n\n<p>One of the most helpful things about git is that, if you have written good commit messages, you can tell what you did and when!</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Check the Receipts</hands-on-title>\n  <ol>\n    <li>\n      <p>Check the <code class=\"language-plaintext highlighter-rouge\">log</code> with <code class=\"language-plaintext highlighter-rouge\">git log</code>. Notice that you can see each commit in reverse chronological order (newest at top), who made the commit, when, and what the commit message was.</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git log\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Output</code-in-title>\n        <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>commit 5d05eb3ec22fd49282b585c60ef8f983d68c2fd7\nAuthor: Helena Rasche &lt;hxr@hx42.org&gt;\nDate:   Mon Jun 13 12:13:21 2022 +0200\n\n    Add project license\n\ncommit 62f974ec5f538232f65b016cf073815349364efa\nAuthor: Helena Rasche &lt;hxr@hx42.org&gt;\nDate:   Mon Jun 13 12:13:16 2022 +0200\n\n    Add project description\n\ncommit 10355c019c04052c15a95a817de04f9ea0ec336c\nAuthor: Helena Rasche &lt;hxr@hx42.org&gt;\nDate:   Mon Jun 13 12:13:11 2022 +0200\n\n    Add author name\n\ncommit f5ec14f05384d76812fc0576df5e4af79336f4e6\nAuthor: Helena Rasche &lt;hxr@hx42.org&gt;\nDate:   Mon Jun 13 11:59:23 2022 +0200\n\n    Add readme\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>The output of <code class=\"language-plaintext highlighter-rouge\">git log</code> is a great way to help you remember what you were doing.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>`git log -p`</hands-on-title>\n  <ol>\n    <li>Use <code class=\"language-plaintext highlighter-rouge\">git log -p</code> to see the log, along with which lines were changed in each commit.</li>\n  </ol>\n</blockquote>\n\n<p>But currently this log is pretty boring, so let’s replace a line and see how that looks.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Replace a line</hands-on-title>\n  <ol>\n    <li>\n      <p>Update your project description in the <code class=\"language-plaintext highlighter-rouge\">readme.md</code>, you’ve been told you need to support completely different features.</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sed</span> <span class=\"nt\">-i</span> s<span class=\"s1\">'/enables.*ROI/creates baking recipes/g'</span> readme.md\ngit add readme.md\ngit commit <span class=\"nt\">-m</span> <span class=\"s1\">'Update project description'</span>\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n    <li>\n      <p>Check what happened with the <code class=\"language-plaintext highlighter-rouge\">git log -p</code>:</p>\n\n      <blockquote class=\"code-out\">\n        <code-out-title>Output</code-out-title>\n        <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git log <span class=\"nt\">-p</span>\ncommit 416a121dfcda14de0c2cb181f298b2c08950475f <span class=\"o\">(</span>HEAD -&gt; main<span class=\"o\">)</span>\nAuthor: Helena Rasche &lt;hxr@hx42.org&gt;\nDate:   Mon Jun 13 12:18:00 2022 +0200\n\n    Update project description\n\ndiff <span class=\"nt\">--git</span> a/readme.md b/readme.md\nindex befc0c9..3b8899e 100644\n<span class=\"nt\">---</span> a/readme.md\n+++ b/readme.md\n@@ <span class=\"nt\">-1</span>,6 +1,6 @@\n My Project\n Author: hexylena\n<span class=\"nt\">-This</span> project enables stakeholders to experience synergistic effects and increase <span class=\"nb\">link </span>up opportunities to improve quarterly and YOY ROI.\n+This project creates baking recipes.\n\n <span class=\"c\"># License</span>\n AGPL-3.0\n\n</code></pre></div>        </div>\n      </blockquote>\n\n      <p>This is a diff, a comparison between two versions of a file.</p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-how-to-read-a-diff\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-how-to-read-a-diff\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: How to read a Diff</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <p>If you haven’t worked with diffs before, this can be something quite new or different.</p>   <p>If we have two files, let’s say a grocery list, in two files. We’ll call them ‘a’ and ‘b’.</p>   <blockquote class=\"code-2col\">   <blockquote class=\"code-in\">     <code-in-title>Old</code-in-title>     <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ cat old<br />🍎<br />🍐<br />🍊<br />🍋<br />🍒<br />🥑<br /></code></pre></div>    </div>   </blockquote>   <blockquote class=\"code-out\">     <code-out-title>New</code-out-title>     <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ cat new<br />🍎<br />🍐<br />🍊<br />🍋<br />🍍<br />🥑<br /></code></pre></div>    </div>   </blockquote> </blockquote>   <p>We can see that they have some different entries. We’ve removed 🍒 because they’re awful, and replaced them with an 🍍</p>   <p>Diff lets us compare these files</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>diff old new<br />5c5<br />&lt; 🍒<br /><span class=\"nt\">---</span><br /><span class=\"o\">&gt;</span> 🍍<br /></code></pre></div></div>   <p>Here we see that 🍒 is only in a, and 🍍 is only in b. But otherwise the files are identical.</p>   <p>There are a couple different formats to diffs, one is the ‘unified diff’</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>diff <span class=\"nt\">-U2</span> old new<br /><span class=\"nt\">---</span> old\t2022-02-16 14:06:19.697132568 +0100<br />+++ new\t2022-02-16 14:06:36.340962616 +0100<br />@@ <span class=\"nt\">-3</span>,4 +3,4 @@<br /> 🍊<br /> 🍋<br />-🍒<br />+🍍<br /> 🥑<br /></code></pre></div></div>   <p>This is basically what you see in the training materials which gives you a lot of context about the changes:</p>   <ul>   <li><code class=\"language-plaintext highlighter-rouge\">--- old</code> is the ‘old’ file in our view</li>   <li><code class=\"language-plaintext highlighter-rouge\">+++ new</code> is the ‘new’ file</li>   <li>@@ these lines tell us where the change occurs and how many lines are added or removed.</li>   <li>Lines starting with a - are removed from our ‘new’ file</li>   <li>Lines with a + have been added.</li> </ul>   <p>So when you go to apply these diffs to your files in the training:</p>   <ol>   <li>Ignore the header</li>   <li>Remove lines starting with - from your file</li>   <li>Add lines starting with + to your file</li> </ol>   <p>The other lines (🍊/🍋 and 🥑) above just provide “context”, they help you know where a change belongs in a file, but <strong>should not be edited</strong> when you’re making the above change. Given the above diff, you would find a line with a 🍒, and replace it with a 🍍</p>   <h4 id=\"added--removed-lines\">Added &amp; Removed Lines</h4>   <p>Removals are very easy to spot, we just have removed lines</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">---</span> old\t2022-02-16 14:06:19.697132568 +0100<br />+++ new\t2022-02-16 14:10:14.370722802 +0100<br />@@ <span class=\"nt\">-4</span>,3 +4,2 @@<br /> 🍋<br /> 🍒<br />-🥑<br /></code></pre></div></div>   <p>And additions likewise are very easy, just add a new line, between the other lines in your file.</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">---</span> old\t2022-02-16 14:06:19.697132568 +0100<br />+++ new\t2022-02-16 14:11:11.422135393 +0100<br />@@ <span class=\"nt\">-1</span>,3 +1,4 @@<br /> 🍎<br />+🍍<br /> 🍐<br /> 🍊<br /></code></pre></div></div>   <h4 id=\"completely-new-files\">Completely new files</h4>   <p>Completely new files look a bit different, there the “old” file is <code class=\"language-plaintext highlighter-rouge\">/dev/null</code>, the empty file in a Linux machine.</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>diff <span class=\"nt\">-U2</span> /dev/null old<br /><span class=\"nt\">---</span> /dev/null\t2022-02-15 11:47:16.100000270 +0100<br />+++ old\t2022-02-16 14:06:19.697132568 +0100<br />@@ <span class=\"nt\">-0</span>,0 +1,6 @@<br />+🍎<br />+🍐<br />+🍊<br />+🍋<br />+🍒<br />+🥑<br /></code></pre></div></div>   <p>And removed files are similar, except with the new file being /dev/null</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">---</span> old\t2022-02-16 14:06:19.697132568 +0100<br />+++ /dev/null\t2022-02-15 11:47:16.100000270 +0100<br />@@ <span class=\"nt\">-1</span>,6 +0,0 @@<br />-🍎<br />-🍐<br />-🍊<br />-🍋<br />-🍒<br />-🥑<br /></code></pre></div></div> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h3 id=\"who-did-that-git-blame-to-the-rescue\">Who did that? <code class=\"language-plaintext highlighter-rouge\">git blame</code> to the rescue</h3>\n\n<p>If you want to know who changed a specific line of a file, you can use <code class=\"language-plaintext highlighter-rouge\">git blame</code> to find out it was probably your fault (as most of us experience when we check the logs.)</p>\n\n<blockquote class=\"code-in\">\n  <code-in-title>Bash</code-in-title>\n  <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git blame readme.md\n</code></pre></div>  </div>\n</blockquote>\n\n<blockquote class=\"code-in\">\n  <code-in-title>Output</code-in-title>\n  <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>^f5ec14f <span class=\"o\">(</span>Helena Rasche 2022-06-13 11:59:23 +0200 1<span class=\"o\">)</span> My Project\n10355c01 <span class=\"o\">(</span>Helena Rasche 2022-06-13 12:13:11 +0200 2<span class=\"o\">)</span> Author: hexylena\n416a121d <span class=\"o\">(</span>Helena Rasche 2022-06-13 12:18:00 +0200 3<span class=\"o\">)</span> This project creates baking recipes.\n62f974ec <span class=\"o\">(</span>Helena Rasche 2022-06-13 12:13:16 +0200 4<span class=\"o\">)</span>\n5d05eb3e <span class=\"o\">(</span>Helena Rasche 2022-06-13 12:13:21 +0200 5<span class=\"o\">)</span> <span class=\"c\"># License</span>\n5d05eb3e <span class=\"o\">(</span>Helena Rasche 2022-06-13 12:13:21 +0200 6<span class=\"o\">)</span> AGPL-3.0\n</code></pre></div>  </div>\n  <p>here we can see for every line: which commit last affected it, who made that commit, and when.</p>\n</blockquote>\n\n<h2 id=\"branching\">Branching</h2>\n\n<p>Git has the concept of branches which are most often used to manage development over time, before it’s considered final. Until now you’ve seen <code class=\"language-plaintext highlighter-rouge\">main</code> in your commits and commit logs (or maybe <code class=\"language-plaintext highlighter-rouge\">master</code> if your git installation is a bit older.)</p>\n\n<p>Oftentimes you’ll see this pattern:</p>\n\n<ol>\n  <li>There is a main branch with a lot of history</li>\n  <li>You want to test out a new option, new configuration, new script you’re working on\n    <ol>\n      <li>So you make a branch</li>\n      <li>Work on that branch</li>\n    </ol>\n  </li>\n  <li>And merge it back into the <code class=\"language-plaintext highlighter-rouge\">main</code> branch, once it’s done.</li>\n</ol>\n\n<p>This is especially relevant for any project that is shared with others, has a public view, or a deployed version of the code. There you don’t want to affect anyone else using the project, or you don’t want to affect the production deployment, until you’re done making your changes.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Create a new branch</hands-on-title>\n\n  <ol>\n    <li>\n      <p><code class=\"language-plaintext highlighter-rouge\">git switch -c &lt;branch&gt;</code> is the command used to create a new branch and switch to it.</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git switch <span class=\"nt\">-c</span> <span class=\"nb\">test</span>\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Output</code-in-title>\n        <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Switched to a new branch <span class=\"s1\">'test'</span>\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>If you look around, you’ll notice everything looks exactly the same! But in fact we are now on a different branch:</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>See available branches</hands-on-title>\n\n  <ol>\n    <li>\n      <p><code class=\"language-plaintext highlighter-rouge\">git branch</code> lists our available branches, and puts an asterisk next to the one we’re currently on.</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git branch\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Output</code-in-title>\n        <p>```bash\n  main</p>\n        <ul>\n          <li>test\n  ```</li>\n        </ul>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>We’re now on the <code class=\"language-plaintext highlighter-rouge\">test</code> branch, so let’s make a commit.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Add a new file</hands-on-title>\n  <ol>\n    <li>\n      <p>Add a new file, let’s call it <code class=\"language-plaintext highlighter-rouge\">docs.md</code>. Write something into it, it doesn’t matter much what.</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">echo</span> <span class=\"s2\">\"# Project Documentation\"</span> <span class=\"o\">&gt;</span> docs.md\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n    <li>\n      <p>Add it, commit it.</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git add docs.md\ngit commit <span class=\"nt\">-m</span> <span class=\"s2\">\"Added documentation\"</span>\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>This file now only exists on the testing branch.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Try Switching Branches</hands-on-title>\n  <ol>\n    <li>\n      <p>Try switching back and forth between the <code class=\"language-plaintext highlighter-rouge\">main</code> and <code class=\"language-plaintext highlighter-rouge\">test</code> branches, and check what’s available on each!</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git branch\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git switch main\n<span class=\"nb\">ls</span>\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Output</code-in-title>\n        <div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"go\">readme.md\n</span></code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git switch <span class=\"nb\">test\nls</span>\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Output</code-in-title>\n        <div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"go\">docs.md   readme.md\n</span></code></pre></div>        </div>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>Each branch has a different view of the repository, and might have different changes on it. Branches are really useful to keep track of work in progress, until it’s done. In a single user environment however, most people often don’t use them, but once you’re collaborating with other’s they’re incredibly important!</p>\n\n<h3 id=\"merging\">Merging</h3>\n\n<p>Once you’re done with a branch, you can merge it into the main branch. This will take all of the work you did on that branch, and make it part of the main branch.</p>\n\n<p>First, let’s compare the two branches, to see what changed.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Replacing argv.</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Compare your current branch against the <code class=\"language-plaintext highlighter-rouge\">main</code> branch with <code class=\"language-plaintext highlighter-rouge\">git diff main</code></p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git diff main\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Output</code-in-title>\n        <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>diff <span class=\"nt\">--git</span> a/docs.md b/docs.md\nnew file mode 100644\nindex 0000000..384aaaa\n<span class=\"nt\">---</span> /dev/null\n+++ b/docs.md\n@@ <span class=\"nt\">-0</span>,0 +1 @@\n+# Project Documentation\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>We can see the output shows all of our changes compared to the main branch and it looks like what we want, so, let’s merge it in.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Merge the `test` branch into `main`</hands-on-title>\n  <ol>\n    <li>\n      <p>Switch to the main branch</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git switch main\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n    <li>\n      <p>Merge in the test branch</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git merge <span class=\"nb\">test</span>\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Output</code-in-title>\n        <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Updating 416a121..9a3387d\nFast-forward\n docs.md | 1 +\n 1 file changed, 1 insertion<span class=\"o\">(</span>+<span class=\"o\">)</span>\n create mode 100644 docs.md\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>This has merged all of the changes you made on the <code class=\"language-plaintext highlighter-rouge\">test</code> branch into the <code class=\"language-plaintext highlighter-rouge\">main</code> branch.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Check the history</hands-on-title>\n  <ol>\n    <li>Check <code class=\"language-plaintext highlighter-rouge\">git log -p</code> again to see the history.</li>\n  </ol>\n</blockquote>\n\n<h2 id=\"undo-revert\">Undo! Revert!</h2>\n\n<p>Oh no, you’ve decided you liked your original project description better. Let’s find that commit and revert it.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Find and revert the bad commit</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Find the commit you want to revert, e.g. with <code class=\"language-plaintext highlighter-rouge\">git log</code>, find the one named “Update project description” (or similar.)</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git log\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n    <li>\n      <p>We can use the <code class=\"language-plaintext highlighter-rouge\">git revert</code> command to undo this commit.</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git revert 416a121dfcda14de0c2cb181f298b2c08950475f\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>This generates a <em>new</em> commit, which reverts the older commit (and probably puts you in a text editor to edit the commit message).\nThis is not the only way to undo mistakes, but probably the easiest.</p>\n\n<p>If you check your <code class=\"language-plaintext highlighter-rouge\">git log</code> you’ll see the change was undone in a second commit, reverting the first. So if you just look at the current files it appears we never undid it, but within the logs we can see the undo step.</p>\n\n<p>With that you’ve got enough skills to track your own data/code/etc with git!</p>\n\n<h1 id=\"further-reading\">Further Reading</h1>\n\n<ul>\n  <li><a href=\"https://rogerdudler.github.io/git-guide/index.html\">git - the simple guide</a></li>\n  <li><a href=\"https://mirrors.edge.kernel.org/pub/software/scm/git/docs/giteveryday.html\">giteveryday(7) manual page, the most common commands most folks use every day</a></li>\n  <li><a href=\"https://github.com/k88hudson/git-flight-rules\">git flight rules, a convenient “how do I do X” guide</a></li>\n  <li><a href=\"https://jvns.ca/blog/2018/10/27/new-zine--oh-shit--git-/\">do you prefer git tutorials as comics? (cw: language)</a></li>\n</ul>\n"],"ref_slides":[],"hands_on":true,"slides":false,"mod_date":"2023-11-15 11:27:38 +0000","pub_date":"2022-06-16 01:07:03 +0000","version":7,"api":"https://training.galaxyproject.org/training-material/api/topics/data-science/tutorials/git-cli/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"Foundations of Data Science","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial","contributors":[{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"}]}