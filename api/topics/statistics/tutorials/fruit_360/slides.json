{"layout":"tutorial_slides","title":"Image classification in Galaxy with fruit 360 dataset","zenodo_link":"https://zenodo.org/record/5702887","questions":["How to solve an image classification problem using convolutional neural network (CNN)?"],"objectives":["Learn how to create a CNN using Galaxy's deep learning tools","Solve an image classification problem on fruit 360 dataset using CNN in Galaxy"],"requirements":[{"type":"internal","topic_name":"statistics","tutorials":["CNN"]}],"time_estimation":"2H","contributors":["kxk302"],"recordings":[{"captioners":["kxk302"],"date":"2022-01-19","galaxy_version":"21.09","length":"1H","youtube_id":"EX8gZ1lxhNY","speakers":["kxk302"]}],"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"S00091","url":"/topics/statistics/tutorials/fruit_360/slides.html","topic_name":"statistics","tutorial_name":"fruit_360","dir":"topics/statistics/tutorials/fruit_360","symlink":null,"id":"statistics/fruit_360","ref_tutorials":["<p>The classification of fruits and vegetables offers many useful applications such as\nautomated harvesting by robots, building up stocks for supermarkets, effective detection\nof specific defects, and determining fruit ripeness (<span class=\"citation\"><a href=\"#Duong2020\">Duong <i>et al.</i> 2020</a></span>,\n<span class=\"citation\"><a href=\"#NaranjoTorres2020\">Naranjo-Torres <i>et al.</i> 2020</a></span>, <span class=\"citation\"><a href=\"#Iswari2017\">Iswari <i>et al.</i> 2017</a></span>). Machine Learning (ML) techniques\nsuch as Deep Learning (DL) are commonly used for image classification problems in various\ndomains, including in agriculture (<span class=\"citation\"><a href=\"#Kamilaris2018\">Kamilaris and Prenafeta-Boldú 2018</a></span>). DL is a technique inspired\nby how a human brain operates. Due to the increased availability of compute capacity and\ntraining data, DL techniques have become very popular in recent years. In this tutorial,\nwe will use Galaxy’s ML toolkit to build a DL model to classify fruit and vegetable\nimages. Our DL model is trained and evaluated on Fruit 360 dataset (<span class=\"citation\"><a href=\"#Murean2018\">Mureşan and Oltean 2018</a></span>)</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#overview-of-convolutional-neural-networks-cnn\" id=\"markdown-toc-overview-of-convolutional-neural-networks-cnn\">Overview of convolutional neural networks (CNN)</a></li>\n  <li><a href=\"#architecture-of-cnn\" id=\"markdown-toc-architecture-of-cnn\">Architecture of CNN</a></li>\n  <li><a href=\"#fruit-360-dataset\" id=\"markdown-toc-fruit-360-dataset\">Fruit 360 dataset</a></li>\n  <li><a href=\"#get-data\" id=\"markdown-toc-get-data\">Get data</a></li>\n  <li><a href=\"#classification-of-fruit-360-dataset-images-with-cnn\" id=\"markdown-toc-classification-of-fruit-360-dataset-images-with-cnn\">Classification of fruit 360 dataset images with CNN</a></li>\n  <li><a href=\"#conclusion\" id=\"markdown-toc-conclusion\">Conclusion</a></li>\n</ol>\n\n</blockquote>\n<h2 id=\"overview-of-convolutional-neural-networks-cnn\">Overview of convolutional neural networks (CNN)</h2>\n\n<p>Here we provide a brief overview of CNN. For a more in depth discussion, please refer to the CNN tutorial cited in the requirements\nsection. CNN were inspired by how the visual cortex of the brain processes visual information (<span class=\"citation\"><a href=\"#HubelWiesel\">Hubel and Wiesel 1959</a></span>). There are\ntwo types of cells in our visual cortex: <strong>simple cells</strong> detect objects at certain angles/locations, and <strong>complex</strong> cells,\nwhich receive inputs from multiple simple cells, and detect movement. In 1980, inspired by hierarchical structure of complex and\nsimple cells, Fukushima proposed <em>Neocognitron</em> (<span class=\"citation\"><a href=\"#Fukishima\">Fukushima 1988</a></span>), a hierarchical neural network used for handwritten Japanese\ncharacter recognition. In 1989, LeCun et. al. (<span class=\"citation\"><a href=\"#LeCunEtAl\">LeCun <i>et al.</i> 1989</a></span>) proposed a CNN that could be trained by backpropagation\nalgorithm. CNN gained immense popularity when they outperformed other models at ImageNet Challenge, a competition in object\nclassification and detection on hundreds of object categories and millions of images.</p>\n\n<h2 id=\"architecture-of-cnn\">Architecture of CNN</h2>\n\n<p>A typical CNN has the following 4 layers (<span class=\"citation\"><a href=\"#OSheaEtAl\">O’Shea and Nash 2015</a></span>)</p>\n\n<ol>\n  <li>Input layer</li>\n  <li>Convolution layer</li>\n  <li>Pooling layer</li>\n  <li>Fully connected layer</li>\n</ol>\n\n<p>Please note that we will explain a 2 dimensional (2D) CNN here. But the same concepts apply to a 1 (or 3) dimensional CNN as well.</p>\n\n<h3 id=\"input-layer\">Input layer</h3>\n\n<p>The input layer represents the input to the CNN. An example input, could be a 28 by 28 pixel grayscale image. We do not\n“flatten” the input to a 1D vector. This makes capturing spatial relationships easier.</p>\n\n<h3 id=\"convolution-layer\">Convolution layer</h3>\n\n<p>The convolution layer is composed of multiple <strong>filters</strong> (also called <strong>kernels</strong>). Filters for a 2D image are also 2D. Suppose\nwe have a 28 by 28 pixel grayscale image. Each pixel is represented by a number between 0 and 255, where 0 represents the color\nblack, 255 represents the color white, and the values in between represent different shades of gray. Suppose we have a 3 by 3\nfilter (9 values in total), and the values are randomly set to 0 or 1. Convolution is the process of placing the 3 by 3 filter\non the top left corner of the image, multiplying filter values by the pixel values and adding the results, moving the filter to\nthe right one pixel at a time and repeating this process (Figure 1). When we get to the top right corner of the image, we simply\nmove the filter down one pixel and restart from the left. This process ends when we get to the bottom right corner of the image.</p>\n\n<figure id=\"figure-1\" style=\"max-width: 90%;\"><img src=\"../../images/Conv_no_padding_no_strides.gif\" alt=\"A 3 by 3 filter applied to a 4 by 4 image, resulting in a 2 by 2 image. \" width=\"244\" height=\"259\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/Conv_no_padding_no_strides.gif\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 1</strong>:</span> A 3 by 3 filter applied to a 4 by 4 image, resulting in a 2 by 2 image (<span class=\"citation\"><a href=\"#DumoulinVisin\">Dumoulin and Visin 2016</a></span>)</figcaption></figure>\n\n<p>Covolution operator has several parameters.</p>\n\n<ol>\n  <li>Filter size</li>\n  <li>Padding</li>\n  <li>Stride</li>\n  <li>Dilation</li>\n  <li>Activation function</li>\n</ol>\n\n<p>Filter size can be 5 by 5, 3 by 3, and so on. Larger filter sizes should be avoided as more weights need to be learned (more\ncompute capacity, more training time, more chance of overfitting). Also, odd sized filters are preferred to even sized filters,\ndue to the nice geometric property of all the input pixels being around the output pixel.</p>\n\n<p>If you look at Figure 1 you see that after applying a 3 by 3 filter to a 4 by 4 image, we end up with a 2 by 2 image – the\nsize of the image has gone down. If we want to keep the image size the same, we can use <em>padding</em> (Figure 2). We pad the input\nin every direction with 0’s before applying the filter. If the padding is 1 by 1, then we add 1 zero in evey direction. If its\n2 by 2, then we add 2 zeros in every direction, and so on.</p>\n\n<figure id=\"figure-2\" style=\"max-width: 90%;\"><img src=\"../../images/Conv_same_padding_no_strides.gif\" alt=\"A 3 by 3 filter applied to a 5 by 5 image, with padding of 1, resulting in a 5 by 5 image. \" width=\"395\" height=\"449\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/Conv_same_padding_no_strides.gif\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 2</strong>:</span> A 3 by 3 filter applied to a 5 by 5 image, with padding of 1, resulting in a 5 by 5 image (<span class=\"citation\"><a href=\"#DumoulinVisin\">Dumoulin and Visin 2016</a></span>)</figcaption></figure>\n\n<p>As mentioned before, we start the convolution by placing the filter on the top left corner of the image, and after multiplying\nfilter and image values (and adding them), we move the filter to the right and repeat the process. How many pixels we move to\nthe right (or down) is the <em>stride</em>. In figure 1 and 2, the stride of the filter is 1. We move the filter one pixel to the right\n(or down). But we could use a different stride. Figure 3 shows an example of using stride of 2.</p>\n\n<figure id=\"figure-3\" style=\"max-width: 90%;\"><img src=\"../../images/Conv_no_padding_strides.gif\" alt=\"A 3 by 3 filter applied to a 5 by 5 image, with stride of 2, resulting in a 2 by 2 image. \" width=\"294\" height=\"288\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/Conv_no_padding_strides.gif\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 3</strong>:</span> A 3 by 3 filter applied to a 5 by 5 image, with stride of 2, resulting in a 2 by 2 image (<span class=\"citation\"><a href=\"#DumoulinVisin\">Dumoulin and Visin 2016</a></span>)</figcaption></figure>\n\n<p>When we apply a, say 3 by 3, filter to an image, our filter’s output is affected by pixels in a 3 by 3 subset of the image. If we\nlike to have a larger <em>receptive field</em> (portion of image that affect filter’s output), we could use <em>dilation</em>. If we set the\ndilation to 2 (Figure 4), instead of a contiguous 3 by 3 subset of the image, every other pixel of a 5 by 5 subset of the image\naffects the filter’s output.</p>\n\n<figure id=\"figure-4\" style=\"max-width: 90%;\"><img src=\"../../images/Conv_dilation.gif\" alt=\"A 3 by 3 filter applied to a 7 by 7 image, with dilation of 2, resulting in a 3 by 3 image. \" width=\"395\" height=\"381\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/Conv_dilation.gif\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 4</strong>:</span> A 3 by 3 filter applied to a 7 by 7 image, with dilation of 2, resulting in a 3 by 3 image (<span class=\"citation\"><a href=\"#DumoulinVisin\">Dumoulin and Visin 2016</a></span>)</figcaption></figure>\n\n<p>After the filter scans the whole image, we apply an activation function to filter output to introduce non-linearlity. The preferred\nactivation function used in CNN is ReLU (<span class=\"citation\"><a href=\"#NwankpaEtAl\">Nwankpa <i>et al.</i> 2018</a></span>). ReLU leaves pixels with positive values in filter output as is,\nand replaces negative values with 0. Figure 5 shows the results of applying ReLU activation function to a filter output.</p>\n\n<figure id=\"figure-5\" style=\"max-width: 90%;\"><img src=\"../../images/Conv_ReLU.png\" alt=\"Two matrices representing filter output before and after ReLU activation function is applied. \" width=\"406\" height=\"159\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/Conv_ReLU.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 5</strong>:</span> Applying ReLU activation function to filter output</figcaption></figure>\n\n<figure id=\"figure-6\" style=\"max-width: 90%;\"><img src=\"../../images/Conv_single_input_channel.png\" alt=\"One matrix representing an input and another matrix representing a filter, along with calculation for single input channel two dimensional convolution operation. \" width=\"564\" height=\"254\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/Conv_single_input_channel.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 6</strong>:</span> Illustration of single input channel two dimensional convolution</figcaption></figure>\n\n<p>Figure 6 illustrates the calculations for a convolution operation, via a 3 by 3 filter on a single channel 5 by 5 input\n(5 x 5 x 1). Figure 7 illustrates the calculations when the input has 3 channels. To show this in 2 dimensions, we are\ndisplaying each channel in input and filter separately. Figure 9 shows a sample multi-channel 2D convolution in 3 dimensions.</p>\n\n<figure id=\"figure-7\" style=\"max-width: 90%;\"><img src=\"../../images/Conv_multiple_input_channel.png\" alt=\"Three matrices representing an input and another three matrices representing a filter, along with calculation for multiple input channel two dimensional convolution operation . \" width=\"643\" height=\"600\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/Conv_multiple_input_channel.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 7</strong>:</span> Illustration of multiple input channel two dimensional convolution</figcaption></figure>\n\n<p>As Figures 7 and 8 show the output of a multi-channel 2D filter is a single channel 2D image. Applying <em>multiple</em> filters to the\ninput image results in a multi-channel 2D image for the output. For example, if the input image is 28 by 28 by 3\n(rows x columns x channels), and we apply a 3 by 3 filter with 1 by 1 padding, we would get a 28 by 28 by 1 image. If we apply 15\nfilters to the input image, our output would be 28 by 28 by 15. Hence, the number of filters in a convolution layer allows us to\nincrease or decrease the channel size.</p>\n\n<figure id=\"figure-8\" style=\"max-width: 90%;\"><img src=\"../../images/Conv_multiple_channel_3d.gif\" alt=\"Multiple cubes representing input, filter, and output in a 3 channel 2 dimensional convolution operation. \" width=\"948\" height=\"548\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/Conv_multiple_channel_3d.gif\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 8</strong>:</span> Three dimensional illustration of multiple input channel two dimensional convolution (Source: https://thomelane.github.io/convolutions/2DConvRGB.html)</figcaption></figure>\n\n<h3 id=\"pooling-layer\">Pooling layer</h3>\n\n<p>The pooling layer performs down sampling to reduce the spatial dimensionality of the input. This decreases the number of parameters,\nwhich in turn reduces the learning time and computation, and the likelihood of overfitting. The most popular type of pooling is\n<em>max pooling</em>. Its usually a 2 by 2 filter with a stride of 2 that returns the maximum value as it slides over the input data,\nsimilar to convolution filters.</p>\n\n<h3 id=\"fully-connected-layer\">Fully connected layer</h3>\n\n<p>The last layer in a CNN is a fully connected layer. We connect all the nodes from the previous layer to this fully connected layer,\nwhich is responsible for classification of the image.</p>\n\n<figure id=\"figure-9\" style=\"max-width: 90%;\"><img src=\"../../images/Conv_CNN.png\" alt=\"A convolutional neural network with 3 convolution layers followed by 3 pooling layers. \" width=\"842\" height=\"265\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/Conv_CNN.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 9</strong>:</span> A convolutional neural network with 3 convolution layers followed by 3 pooling layers (<span class=\"citation\"><a href=\"#OSheaEtAl\">O’Shea and Nash 2015</a></span>)</figcaption></figure>\n\n<p>As shown in Figure 9, a typical CNN usually has more than one convolution plus pooling layer. Each convolution plus pooling layer\nis responsible for feature extraction at a different level of abstraction. For example, the filters in the first layer could detect\nhorizontal, vertical, and diagonal edges. The filters in the next layer could detect shapes, and the filters in the last layer could\ndetect collection of shapes. Filter values are randomly initialized and are learned by the learning algorithm. This makes CNN very\npowerful as they not only do classification, but can also automatically do feature extraction. This distinguishes CNN from other classification techniques (like Support Vector Machines), which cannot do feature extraction.</p>\n\n<h2 id=\"fruit-360-dataset\">Fruit 360 dataset</h2>\n\n<p>Fruit 360 is a dataset with 90380 images of 131 fruits and vegetables\n(https://www.kaggle.com/moltean/fruits). Images are 100 pixel by 100 pixel and are color\n(RGB) images (Hence, 3 values for each pixel). There are 67,692 images in the training\ndataset and 22,688 images in the test dataset. The dataset we use for this tutorial is a\nsubset of fruit 360 dataset, containing only 10 fruits/vegetables (Strawberry,\nApple_Red_Delicious, Pepper_Green, Corn, Banana, Tomato_1, Potato_White, Pineapple,\nOrange, and Peach). We selected a subset of fruits/vegetables, so the dataset size is\nsmaller and the neural network can be trained faster. Our training dataset has 5,015 images\nand our testing dataset has 1,679 images.</p>\n\n<p>The utilities used to create the subset dataset, along with step by step instructions, can\nbe found here: https://github.com/kxk302/fruit_dataset_utilities. First, we created feature\nvectors for each image. Images are 100 pixel by 100 pixel and are color (RGB) images\n(3 values for each pixel). Hence, each image can be represented by 30,000 values\n(100 X 100 X 3). Second, we selected a subset of 10 fruit/vegetable images. Training and\ntesting dataset sizes go from 7 GB and 2.5 GB for 131 fruits/vegetables to 500 MB and\n177 MB for 10 fruits/vegetables, respectively. Third, we created separate files for feature\nvectors and labels. Finally, we mapped the labels for the 10 selected fruits/vegetables to\na range of 0 to 9. Full dataset labels are in the 0 to 130 range, as the full dataset\nincludes 131 fruits/vegetables. The 10 labels for out dataset are as follows: Strawberry:0,\nApple_Red_Delicious:1, Pepper_Green:2, Corn:3, Banana:4, Tomato_1:5, Potato_White:6, Pineapple:7,\nOrange:8, Peach:9.</p>\n\n<h2 id=\"get-data\">Get data</h2>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Data upload</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Make sure you have an empty analysis history.</p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-creating-a-new-history\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-creating-a-new-history\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Creating a new history</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <p>Click the <i class=\"fas fa-plus\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">new-history</span> icon at the top of the history panel:</p>   <p><img src=\"/training-material/shared/images/history_create_new.svg\" alt=\"UI for creating new history\" /></p>   <!-- the original drawing can be found here https://docs.google.com/drawings/d/1cCBrLAo4kDGic5QyB70rRiWJAKTenTU8STsKDaLcVU8/edit?usp=sharing --> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n    <li>\n      <p><strong>Rename your history</strong> to make it easy to recognize</p>\n\n      <blockquote class=\"tip\">\n        <tip-title>Rename a history</tip-title>\n\n        <ul>\n          <li>\n            <p>Click on the title of the history (by default the title is <code class=\"language-plaintext highlighter-rouge\">Unnamed history</code>)</p>\n\n            <p><a href=\"../../../../shared/images/rename_history.png\" rel=\"noopener noreferrer\"><img src=\"../../../../shared/images/rename_history.png\" alt=\"Renaming history. \" width=\"270\" height=\"320\" loading=\"lazy\" /></a></p>\n          </li>\n          <li>Type <code class=\"language-plaintext highlighter-rouge\">Galaxy Introduction</code> as the name</li>\n          <li>Press <kbd>Enter</kbd></li>\n        </ul>\n\n      </blockquote>\n    </li>\n    <li>\n      <p>Import the files from <a href=\"https://zenodo.org/record/5702887\">Zenodo</a></p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://zenodo.org/record/5702887/files/train_X_10.tsv\nhttps://zenodo.org/record/5702887/files/train_y_10.tsv\nhttps://zenodo.org/record/5702887/files/test_X_10.tsv\nhttps://zenodo.org/record/5702887/files/test_y_10.tsv\n</code></pre></div>      </div>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-importing-via-links\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-importing-via-links\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Importing via links</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ul>   <li>Copy the link location</li>   <li>     <p>Click <i class=\"fas fa-upload\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-upload</span> <strong>Upload Data</strong> at the top of the tool panel</p>   </li>   <li>Select <i class=\"fa fa-edit\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-wf-edit</span> <strong>Paste/Fetch Data</strong></li>   <li>     <p>Paste the link(s) into the text field</p>   </li>   <li>     <p>Press <strong>Start</strong></p>   </li>   <li><strong>Close</strong> the window</li> </ul> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n    <li>\n      <p>Rename the datasets as <code class=\"language-plaintext highlighter-rouge\">train_X_10</code>, <code class=\"language-plaintext highlighter-rouge\">train_y_10</code>, <code class=\"language-plaintext highlighter-rouge\">test_X_10</code>, and <code class=\"language-plaintext highlighter-rouge\">test_y_10</code> respectively.</p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-renaming-a-dataset\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-renaming-a-dataset\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Renaming a dataset</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ul>   <li>Click on the <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-pencil</span> <strong>pencil icon</strong> for the dataset to edit its attributes</li>   <li>In the central panel, change the <strong>Name</strong> field</li>   <li>Click the <strong>Save</strong> button</li> </ul> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n    <li>\n      <p>Check that the datatype of all the three datasets is <code class=\"language-plaintext highlighter-rouge\">tabular</code>.</p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-changing-the-datatype\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-changing-the-datatype\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Changing the datatype</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ul>   <li>Click on the <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-pencil</span> <strong>pencil icon</strong> for the dataset to edit its attributes</li>   <li>In the central panel, click <i class=\"fas fa-database\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-chart-select-data</span> <strong>Datatypes</strong> tab on the top</li>   <li>In the <i class=\"fas fa-database\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-chart-select-data</span> <strong>Assign Datatype</strong>, select <code class=\"language-plaintext highlighter-rouge\">datatypes</code> from “<em>New type</em>” dropdown     <ul>       <li>Tip: you can start typing the datatype into the field to filter the dropdown menu</li>     </ul>   </li>   <li>Click the <strong>Save</strong> button</li> </ul> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"classification-of-fruit-360-dataset-images-with-cnn\">Classification of fruit 360 dataset images with CNN</h2>\n\n<p>In this section, we define a CNN and train it using fruit 360 dataset training data. The\ngoal is to learn a model such that given an image of a fruit/vegetable, we can predict\nwhat fruit/vegetable it is (Labels are in the range of 0 to 9). We then evaluate the trained\nCNN on the test dataset and plot the confusion matrix.</p>\n\n<p>In order to train the CNN, we must have the One-Hot Encoding (OHE) representation of the training\nlabels. This is needed to calculate the categorical cross entropy loss function. OHE encodes labels\nas a <strong>one-hot</strong> numeric array, where only one element is 1 and the rest are 0’s. For example, if\nwe had 3 fruits (apple, orange, banana) and their labels were 1, 2, and 3, the OHE\nrepresntation of apple would be (1,0,0), the OHE representation of orange would be (0,1,0), and the\nOHE representation of banana would be (0,0,1). For apple with label 1, the first element of array\nis 1 (and the rest are 0’s); For Orange with label 2, the second element of the array is 1 (and the\nrest are 0’s); And for Banana with label 3, the third element of the array is 1 (and the rest are 0’s).\nWe have 10 fruits/vegetables in our dataset and we would just have an array of size 10, where only one\nelement is 1, corresponding to fruit/vegetable label, and the rest are 0’s.</p>\n\n<p>In order to calculate the OHE of labels, we must first extract the labels column from train_y_10 file.\ntrain_y_10 file has 3 columns: Label_name (string representation of label), file_name (name of fruit/vegetable\nimage file), and Label (integer representation of label). We extract Label from train_y_10, and then calcuate\nits OHE representation.</p>\n\n<h3 id=\"extract-the-label-column-from-train_y_10\"><strong>Extract the Label column from train_y_10</strong></h3>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Advanced Cut</hands-on-title>\n\n  <ul>\n    <li><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_cut_tool/1.1.0\" title=\"Advanced Cut tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Advanced Cut</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 1.1.0)</span>\n      <ul>\n        <li><em>“File to cut”</em> : Select <code class=\"language-plaintext highlighter-rouge\">train_y_10</code></li>\n        <li><em>“Operation”</em> : Select <code class=\"language-plaintext highlighter-rouge\">Keep</code></li>\n        <li><em>“Delimited by”</em>: Select <code class=\"language-plaintext highlighter-rouge\">Tab</code></li>\n        <li><em>“Cut by”</em>: Select <code class=\"language-plaintext highlighter-rouge\">fields</code></li>\n        <li><em>“List of fields”</em>: Select <code class=\"language-plaintext highlighter-rouge\">Column: 3</code></li>\n        <li>Click <em>“Run Tool”</em></li>\n      </ul>\n    </li>\n  </ul>\n\n</blockquote>\n\n<h3 id=\"create-one-hot-encoding-ohe-representation-of-training-labels\"><strong>Create One-Hot Encoding (OHE) representation of training labels</strong></h3>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>One-Hot Encoding</hands-on-title>\n\n  <ul>\n    <li><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/bgruening/sklearn_to_categorical/sklearn_to_categorical/1.0.8.3\" title=\"To categorical tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>To categorical</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 1.0.8.3)</span>\n      <ul>\n        <li><em>“Input file”</em> : Select the output of the previous step.</li>\n        <li><em>“Does the dataset contain header?”</em> : Select <code class=\"language-plaintext highlighter-rouge\">Yes</code></li>\n        <li><em>“Total number of classes”</em>: Select <code class=\"language-plaintext highlighter-rouge\">10</code></li>\n        <li>Click <em>“Run Tool”</em></li>\n      </ul>\n    </li>\n  </ul>\n\n</blockquote>\n\n<h3 id=\"create-a-deep-learning-model-architecture\"><strong>Create a deep learning model architecture</strong></h3>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Model config</hands-on-title>\n\n  <ul>\n    <li><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/bgruening/keras_model_config/keras_model_config/0.5.0\" title=\"Create a deep learning model architecture tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Create a deep learning model architecture</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 0.5.0)</span>\n      <ul>\n        <li><em>“Select keras model type”</em>: <code class=\"language-plaintext highlighter-rouge\">sequential</code></li>\n        <li><em>“input_shape”</em>: <code class=\"language-plaintext highlighter-rouge\">(30000,)</code></li>\n        <li>In <em>“LAYER”</em>:\n          <ul>\n            <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“1: LAYER”</em>:\n              <ul>\n                <li><em>“Choose the type of layer”</em>: <code class=\"language-plaintext highlighter-rouge\">Core -- Reshape</code>\n                  <ul>\n                    <li><em>“target_shape”</em>: <code class=\"language-plaintext highlighter-rouge\">(100,100,3)</code></li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n            <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“2: LAYER”</em>:\n              <ul>\n                <li><em>“Choose the type of layer”</em>: <code class=\"language-plaintext highlighter-rouge\">Convolutional -- Conv2D</code>\n                  <ul>\n                    <li><em>“filters”</em>: <code class=\"language-plaintext highlighter-rouge\">16</code></li>\n                    <li><em>“kernel_size”</em>: <code class=\"language-plaintext highlighter-rouge\">5</code></li>\n                    <li><em>“Activation function”</em>: <code class=\"language-plaintext highlighter-rouge\">relu</code></li>\n                    <li><em>“Type in key words arguments if different from the default”</em>: <code class=\"language-plaintext highlighter-rouge\">input_shape=(100, 100, 3)</code></li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n            <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“3: LAYER”</em>:\n              <ul>\n                <li><em>“Choose the type of layer”</em>: <code class=\"language-plaintext highlighter-rouge\">Pooling -- MaxPooling2D</code>\n                  <ul>\n                    <li><em>“pool_size”</em>: <code class=\"language-plaintext highlighter-rouge\">(2,2)</code></li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n            <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“4: LAYER”</em>:\n              <ul>\n                <li><em>“Choose the type of layer”</em>: <code class=\"language-plaintext highlighter-rouge\">Convolutional -- Conv2D</code>\n                  <ul>\n                    <li><em>“filters”</em>: <code class=\"language-plaintext highlighter-rouge\">32</code></li>\n                    <li><em>“kernel_size”</em>: <code class=\"language-plaintext highlighter-rouge\">5</code></li>\n                    <li><em>“Activation function”</em>: <code class=\"language-plaintext highlighter-rouge\">relu</code></li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n            <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“5: LAYER”</em>:\n              <ul>\n                <li><em>“Choose the type of layer”</em>: <code class=\"language-plaintext highlighter-rouge\">Pooling -- MaxPooling2D</code>\n                  <ul>\n                    <li><em>“pool_size”</em>: <code class=\"language-plaintext highlighter-rouge\">(2,2)</code></li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n            <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“6: LAYER”</em>:\n              <ul>\n                <li><em>“Choose the type of layer”</em>: <code class=\"language-plaintext highlighter-rouge\">Convolutional -- Conv2D</code>\n                  <ul>\n                    <li><em>“filters”</em>: <code class=\"language-plaintext highlighter-rouge\">64</code></li>\n                    <li><em>“kernel_size”</em>: <code class=\"language-plaintext highlighter-rouge\">5</code></li>\n                    <li><em>“Activation function”</em>: <code class=\"language-plaintext highlighter-rouge\">relu</code></li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n            <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“7: LAYER”</em>:\n              <ul>\n                <li><em>“Choose the type of layer”</em>: <code class=\"language-plaintext highlighter-rouge\">Pooling -- MaxPooling2D</code>\n                  <ul>\n                    <li><em>“pool_size”</em>: <code class=\"language-plaintext highlighter-rouge\">(2,2)</code></li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n            <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“8: LAYER”</em>:\n              <ul>\n                <li><em>“Choose the type of layer”</em>: <code class=\"language-plaintext highlighter-rouge\">Core -- Flatten</code></li>\n              </ul>\n            </li>\n            <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“9: LAYER”</em>:\n              <ul>\n                <li><em>“Choose the type of layer”</em>: <code class=\"language-plaintext highlighter-rouge\">Core -- Dense</code>\n                  <ul>\n                    <li><em>“units”</em>”: <code class=\"language-plaintext highlighter-rouge\">256</code></li>\n                    <li><em>“Activation function”</em>: <code class=\"language-plaintext highlighter-rouge\">relu</code></li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n            <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“10: LAYER”</em>:\n              <ul>\n                <li><em>“Choose the type of layer”</em>: <code class=\"language-plaintext highlighter-rouge\">Core -- Dense</code>\n                  <ul>\n                    <li><em>“units”</em>”: <code class=\"language-plaintext highlighter-rouge\">10</code></li>\n                    <li><em>“Activation function”</em>: <code class=\"language-plaintext highlighter-rouge\">softmax</code></li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n        <li>Click <em>“Run Tool”</em></li>\n      </ul>\n    </li>\n  </ul>\n</blockquote>\n\n<p>Each image is passed in as a vector of size 30,000 (100 x 100 X 3 = 30,000). The reshape\nlayer reshapes it into (100, 100, 3) dimensions – 100 rows (image height), 100 columns\n(image width), and 3 channels. Channel size is 3 since the image is color (RGB) and each\ncolor pixel can be represented by 3 integers, representing the Red, Green, and Blue\nprimary colors. Our CNN then has 3 convolution + pooling layers. The first convolution layer\nhas 16 filters (output channel size would be 16), and filter size is 5 x 5. The second convolutional\nlayer has 32 filters (output channel size would be 32), and filter size is 5 x 5. The third\nconvolutional layer has 64 filters (output channel size would be 64), and filter size is 5 x 5. All\n3 pooling layers are MaxPool layers with pool size of 2 x 2. Afterwards, we flatten the previous layer’s\noutput (every row/column/channel would be an individual node), then add a fully connected layer with 256\nnodes and relu activation function. Finally, we add a fully connected layers with 10 nodes, and use\nsoftmax activation function to get the probability of each fruit/vegetable. Fruit/vegetable with the\nhighest probability is predicted by CNN. The model config can be downloaded as a JSON file.</p>\n\n<h3 id=\"create-a-deep-learning-model\"><strong>Create a deep learning model</strong></h3>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Model builder (Optimizer, loss function, and fit parameters)</hands-on-title>\n\n  <ul>\n    <li><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/bgruening/keras_model_builder/keras_model_builder/0.5.0\" title=\"Create deep learning model tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Create deep learning model</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 0.5.0)</span>\n      <ul>\n        <li><em>“Choose a building mode”</em>: <code class=\"language-plaintext highlighter-rouge\">Build a training model</code></li>\n        <li><em>“Select the dataset containing model configuration”</em>: Select the <em>Keras Model Config</em> from the previous step.</li>\n        <li><em>“Do classification or regression?”</em>: <code class=\"language-plaintext highlighter-rouge\">KerasGClassifier</code></li>\n        <li>In <em>“Compile Parameters”</em>:\n          <ul>\n            <li><em>“Select a loss function”</em>: <code class=\"language-plaintext highlighter-rouge\">categorical_crossentropy</code></li>\n            <li><em>“Select an optimizer”</em>: <code class=\"language-plaintext highlighter-rouge\">Adam - Adam optimizer </code></li>\n            <li><em>“Select metrics”</em>: <code class=\"language-plaintext highlighter-rouge\">acc/accuracy</code></li>\n          </ul>\n        </li>\n        <li>In <em>“Fit Parameters”</em>:\n          <ul>\n            <li><em>“epochs”</em>: <code class=\"language-plaintext highlighter-rouge\">40</code></li>\n            <li><em>“batch_size”</em>: <code class=\"language-plaintext highlighter-rouge\">50</code></li>\n          </ul>\n        </li>\n        <li>Click <em>“Run Tool”</em></li>\n      </ul>\n    </li>\n  </ul>\n</blockquote>\n\n<p>A loss function measures how different the predicted output is from the expected output. For multi-class classification problems,\nwe use <em>categorical cross entropy</em> as loss function. Epochs is the number of times the whole training data is used to train the\nmodel. Setting <em>epochs</em> to 40 means each training example in our dataset is used 40 times to train our model. If we update network\nweights/biases after all the training data is feed to the network, the training will be very slow (as we have 5014 training examples\nin our dataset). To speed up the training, we present only a subset of the training examples to the network, after which we update\nthe weights/biases. <em>batch_size</em> decides the size of this subset. The model builder can be downloaded as a zip file.</p>\n\n<h3 id=\"deep-learning-training-and-evaluation\"><strong>Deep learning training and evaluation</strong></h3>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Training the model</hands-on-title>\n\n  <ul>\n    <li><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/bgruening/keras_train_and_eval/keras_train_and_eval/1.0.8.2\" title=\"Deep learning training and evaluation tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Deep learning training and evaluation</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 1.0.8.2)</span>\n      <ul>\n        <li><em>“Select a scheme”</em>: <code class=\"language-plaintext highlighter-rouge\">Train and Validate</code></li>\n        <li><em>“Choose the dataset containing pipeline/estimator object”</em>: Select the <em>Keras Model Builder</em> from the previous step.</li>\n        <li><em>“Select input type:”</em>: <code class=\"language-plaintext highlighter-rouge\">tabular data</code>\n          <ul>\n            <li><em>“Training samples dataset”</em>: Select <code class=\"language-plaintext highlighter-rouge\">train_X_10</code> dataset</li>\n            <li><em>“Choose how to select data by column:”</em>: <code class=\"language-plaintext highlighter-rouge\">All columns</code></li>\n            <li><em>“Dataset containing class labels or target values”</em>: Select the OHE representation of <code class=\"language-plaintext highlighter-rouge\">train_y_10</code> dataset</li>\n            <li><em>“Choose how to select data by column:”</em>: <code class=\"language-plaintext highlighter-rouge\">All columns</code></li>\n          </ul>\n        </li>\n        <li>Click <em>“Run Tool”</em></li>\n      </ul>\n    </li>\n  </ul>\n\n</blockquote>\n\n<p>The training step generates 3 datasets. 1) accuracy of the trained model, 2) the trained model, downloadable as a zip file, and\n3) the trained model weights, downloadable as an hdf5 file. These files are needed for prediction in the next step.</p>\n\n<h3 id=\"model-prediction\"><strong>Model Prediction</strong></h3>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Testing the model</hands-on-title>\n\n  <ul>\n    <li><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/bgruening/model_prediction/model_prediction/1.0.8.2\" title=\"Model Prediction tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Model Prediction</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 1.0.8.2)</span>\n      <ul>\n        <li><em>“Choose the dataset containing pipeline/estimator object”</em> : Select the trained model from the previous step.</li>\n        <li><em>“Choose the dataset containing weights for the estimator above”</em> : Select the trained model weights from the previous step.</li>\n        <li><em>“Select invocation method”</em>: <code class=\"language-plaintext highlighter-rouge\">predict</code></li>\n        <li><em>“Select input data type for prediction”</em>: <code class=\"language-plaintext highlighter-rouge\">tabular data</code></li>\n        <li><em>“Training samples dataset”</em>: Select <code class=\"language-plaintext highlighter-rouge\">test_X_10</code> dataset</li>\n        <li><em>“Choose how to select data by column:”</em>: <code class=\"language-plaintext highlighter-rouge\">All columns</code></li>\n        <li>Click <em>“Run Tool”</em></li>\n      </ul>\n    </li>\n  </ul>\n\n</blockquote>\n\n<p>The prediction step generates 1 dataset. It’s a file that has predictions (0 to 9 for the predicted fruit/vegetable) for every image\nin the test dataset.</p>\n\n<h3 id=\"machine-learning-visualization-extension\"><strong>Machine Learning Visualization Extension</strong></h3>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Creating the confusion matrix</hands-on-title>\n\n  <ul>\n    <li><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/bgruening/ml_visualization_ex/ml_visualization_ex/1.0.8.2\" title=\"Machine Learning Visualization Extension tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Machine Learning Visualization Extension</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 1.0.8.2)</span>\n      <ul>\n        <li><em>“Select a plotting type”</em>: <code class=\"language-plaintext highlighter-rouge\">Confusion matrix for classes</code></li>\n        <li><em>“Select dataset containing the true labels”</em>”: <code class=\"language-plaintext highlighter-rouge\">test_y_10</code></li>\n        <li><em>“Does the dataset contain header:”</em>: <code class=\"language-plaintext highlighter-rouge\">Yes</code></li>\n        <li><em>“Choose how to select data by column:”</em>: <code class=\"language-plaintext highlighter-rouge\">Select columns by column header name(s)</code>\n \t- <em>“Type header name(s):”</em>: <code class=\"language-plaintext highlighter-rouge\">Label</code></li>\n        <li><em>“Select dataset containing the predicted labels”</em>”: Select <code class=\"language-plaintext highlighter-rouge\">Model Prediction</code> from the previous step</li>\n        <li><em>“Does the dataset contain header:”</em>: <code class=\"language-plaintext highlighter-rouge\">Yes</code></li>\n        <li>Click <em>“Run Tool”</em></li>\n      </ul>\n    </li>\n  </ul>\n\n</blockquote>\n\n<p><strong>Confusion Matrix</strong> is a table that describes the performance of a classification model. It lists the number of examples that were\ncorrectly classified by the model, True positives (TP) and true negatives (TN). It also lists the number of examples that were\nclassified as positive that were actually negative (False positive, FP, or Type I error), and the number of examples that were\nclassified as negative that were actually positive (False negative, FN, or Type 2 error). Given the confusion matrix, we can\ncalculate <strong>precision</strong> and <strong>recall</strong> <span class=\"citation\"><a href=\"#TatbulEtAl\">Tatbul <i>et al.</i> 2018</a></span>. Precision is the fraction of predicted positives that are true\npositives (Precision = TP / (TP + FP)). Recall is the fraction of true positives that are predicted (Recall = TP / (TP + FN)).\nOne way to describe the confusion matrix with just one value is to use the <strong>F score</strong>, which is the harmonic mean of precision\nand recall</p>\n\n\\[Precision = \\frac{\\text{True positives}}{\\text{True positives + False positives}}\\]\n\n\\[Recall = \\frac{\\text{True positives}}{\\text{True positives + False negatives}}\\]\n\n\\[F score = \\frac{2 * \\text{Precision * Recall}}{\\text{Precision + Recall}}\\]\n\n<figure id=\"figure-10\" style=\"max-width: 90%;\"><img src=\"../../images/Fruit_confusion_matrix.png\" alt=\"Confusion matrix for fruit 360 image classification problem. \" width=\"922\" height=\"973\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/Fruit_confusion_matrix.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 10</strong>:</span> Fruits/vegetables image classification confusion matrix</figcaption></figure>\n\n<p>Figure 1 is the resultant confusion matrix for our image classification problem. The first row in the table represents the <em>true</em>\nfruit/vegetable with 0 as class label, which is strawberry (we have 164 strawberry images with 0 as class label). The second row\nrepresents the <em>true</em> fruit/vegetable with 1 as class label, which is Apple_Red_Delicious (We have 166 Apple_Red_Delicious images\nwith 1 as class label). Similarly, you can count the true class labels for fruits/vegetables with class label of 2 to 9 by adding\nup the numbers in the corresponding row. The first column from the left represents the <em>predicted</em> fruit/vegetable with 0 as class\nlabel, which is strawberry (Our CNN predicted 164 images as being strawberry, and having class label 0). The second column from\nthe left represents the <em>predicted</em> fruit/vegetable with 1 as class label, which is Apple_Red_Delicious (Our CNN predicted 166\nimages as being Apple_Red_Delicious, and having class label 1). Similarly, you can count the predicted class labels for\nfruits/vegetables with class labels 2 to 9 by adding up the numbers in the corresponding column.</p>\n\n<p>For label 3, which is corn, looking at the green cell in the 4th row and 4th column, we see that our CNN has correctly\npredicted 118 images as being a corn image (True positives). Adding the numbers in the other rows in column 4, we see that\nour CNN has incorrectly predicted 16 images as being corn (False positives). Adding the numbers on the 4th row besides the\nTrue positives, we see that our CNN has incorrectly predicted 32 corn images as being label Potato_White (False negatives).\nGiven these numbers we can calculate Precision, Recall, and the F score for digit 0 as follows:</p>\n\n\\[Precision = \\frac{\\text{True positives}}{\\text{True positives + False positives}} = \\frac{118}{118 + 16} = 0.88\\]\n\n\\[Recall = \\frac{\\text{True positives}}{\\text{True positives + False negatives}} = \\frac{118}{118 + 32} = 0.78\\]\n\n\\[F score = \\frac{2 * \\text{Precision * Recall}}{\\text{Precision + Recall}} = \\frac{2 * 0.88 * 0.78}{0.88 + 0.78} = 0.82\\]\n\n<p>You can calculate the Precision, Recall, and F score for other digits in a similar manner.</p>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>In this tutorial, we briefly described convolutional neural networks (CNN) and their application to image classification problems.\nWe then used Galaxy’s ML toolkit to solve an image classification problem using CNN on fruit 360 dataset.</p>\n"],"ref_slides":["# What is a convolutional neural network (CNN)?\n\n???\n\nWhat is a convolutional neural network (CNN)?\n\n---\n\n# Convolutional Neural Network (CNN)\n\n- Increasing popularity of social media in past decade\n\t- Image and video processing tasks have become very important\n- FNN could not scale up to image and video processing tasks\n- CNN specifically tailored for image and video processing tasks\n\n---\n\n# Inspiration for CNN\n\n- In 1959 Hubel & Wiesel did an experiment to understand how visual cortex of brain processes visual info\n\t- Recorded activity of neurons in visual cortex of a cat\n\t- While moving a bright line in front of the cat\n- Some cells fired when bright line is shown at a particular angle/location\n\t- Called these *simple* cells\n- Other cells fired when bright line was shown regardless of angle/location\n\t- Seemed to detect movement\n\t- Called these *complex* cells\n- Seemed complex cells receive inputs from multiple simple cells\n\t- Have an hierarchical structure\n- Hubel and Wiesel won Noble prize in 1981\n\n---\n\n# Inspiration for CNN\n\n- Inspired by complex/simple cells, Fukushima proposed *Neocognitron* (1980)\n\t- Hierarchical neural network used for handwritten Japanese character recognition\n\t- First CNN, had its own training algorithm\n- In 1989, LeCun proposed CNN that was trained by backpropagation\n- CNN got popular when outperformed other models at ImageNet Challenge\n\t- Competition in object classification/detection\n\t- On hundreds of object categories and millions of images\n\t- Run annually from 2010 to present\n- Notable CNN architectures that won ImageNet challenge\n\t- AlexNet (2012), ZFNet (2013), GoogLeNet & VGG (2014), ResNet (2015)\n\n---\n\n# Architecture of CNN\n\n- A typical CNN has 4 layers\n\t- Input layer\n\t- Convolution layer\n\t- Pooling layer\n\t- Fully connected layer\n\n- We will explain a 2D CNN here\n\t- Same concepts apply to a 1 (or 3) dimensional CNN\n\n---\n\n# Input layer\n\n- Example input a 28 pixel by 28 pixel grayscale image\n- Unlike FNN, we do not “flatten” the input to a 1D vector\n\t- input is presented to network in 2D as 28 x 28 matrix\n\t- This makes capturing spatial relationships easier\n\n---\n\n# Convolution layer\n\n- Composed of multiple filters (kernels)\n- Filters for 2D image are also 2D\n- Suppose we have a 3 by 3 filter (9 values in total)\n\t- Values are randomly set to 0 or 1\n- Convolution: placing 3 by 3 filter on the top left corner of image\n\t- Multiply filter values by pixel values, add the results\n\t- Move filter to right one pixel at a time, and repeat this process\n\t- When at top right corner, move filter down one pixel and repeat process\n\t- Process ends when we get to bottom right corner of image\n\n---\n\n# 3 by 3 Filter\n\n![A 3 by 3 filter applied to a 4 by 4 image, resulting in a 2 by 2 image](/training-material/topics/statistics/images/Conv_no_padding_no_strides.gif) <!-- https://pixy.org/3013900/ CC0 license-->\n\n---\n\n# Convolution operator parameters\n\n- Filter size\n- Padding\n- Stride\n- Dilation\n- Activation function\n\n---\n\n# Filter size\n\n- Filter size can be 5 by 5, 3 by 3, and so on\n- Larger filter sizes should be avoided\n\t- As learning algorithm needs to learn filter values (weights)\n- Odd sized filters are preferred to even sized filters\n\t- Nice geometric property of all input pixels being around output pixel\n\n---\n\n# Padding\n\n- After applying 3 by 3 filter to 4 by 4 image, we get a 2 by 2 image\n\t– Size of the image has gone down\n- If we want to keep image size the same, we can use padding\n\t- We pad input in every direction with 0’s before applying filter\n\t- If padding is 1 by 1, then we add 1 zero in every direction\n\t- If padding is 2 by 2, then we add 2 zeros in every direction, and so on\n\n---\n\n# 3 by 3 filter with padding of 1\n\n![A 3 by 3 filter applied to a 5 by 5 image, with padding of 1, resulting in a 5 by 5 image](/training-material/topics/statistics/images/Conv_same_padding_no_strides.gif) <!-- https://pixy.org/3013900/ CC0 license-->\n\n---\n\n# Stride\n\n- How many pixels we move filter to the right/down is stride\n- Stride 1: move filter one pixel to the right/down\n- Stride 2: move filter two pixels to the right/down\n\n---\n\n# 3 by 3 filter with stride of 2\n\n![A 3 by 3 filter applied to a 5 by 5 image, with stride of 2, resulting in a 2 by 2 image](/training-material/topics/statistics/images/Conv_no_padding_strides.gif) <!-- https://pixy.org/3013900/ CC0 license-->\n\n---\n\n# Dilation\n\n- When we apply 3 by 3 filter, output affected by pixels in 3 by 3 subset of image\n- Dilation: To have a larger receptive field (portion of image affecting filter’s output)\n- If dilation set to 2, instead of contiguous 3 by 3 subset of image, every other pixel of a 5 by 5 subset of image affects output\n\n---\n\n# 3 by 3 filter with dilation of 2\n\n![A 3 by 3 filter applied to a 7 by 7 image, with dilation of 2, resulting in a 3 by 3 image](/training-material/topics/statistics/images/Conv_dilation.gif) <!-- https://pixy.org/3013900/ CC0 license-->\n\n---\n\n# Activation function\n\n- After filter applied to whole image, apply activation function to output to introduce non-linearity\n- Preferred activation function in CNN is ReLU\n- ReLU leaves outputs with positive values as is, replaces negative values with 0\n\n---\n\n# Relu activation function\n\n![Two matrices representing filter output before and after ReLU activation function is applied](/training-material/topics/statistics/images/Conv_ReLU.png) <!-- https://pixy.org/3013900/ CC0 license-->\n\n---\n\n# Single channel 2D convolution\n\n![One matrix representing an input vector and another matrix representing a filter, along with calculation for single input channel two dimensional convolution operation](/training-material/topics/statistics/images/Conv_single_input_channel.png) <!-- https://pixy.org/3013900/ CC0 license-->\n\n---\n\n# Triple channel 2D convolution\n\n![Three matrices representing an input vector and another three matrices representing a filter, along with calculation for multiple input channel two dimensional convolution operation](/training-material/topics/statistics/images/Conv_multiple_input_channel.png) <!-- https://pixy.org/3013900/ CC0 license-->\n\n---\n\n# Triple channel 2D convolution in 3D\n\n![Multiple cubes representing input vector, filter, and output in a 3 channel 2 dimensional convolution operation](/training-material/topics/statistics/images/Conv_multiple_channel_3d.gif) <!-- https://pixy.org/3013900/ CC0 license-->\n\n---\n\n# Change channel size\n\n- Output of a multi-channel 2D filter is a single channel 2D image\n- Applying *multiple* filters results in a multi-channel 2D image\n- E.g., if input image is 28 x 28 x 3 (rows x columns x channels)\n\t- We apply a 3 x 3 filter with 1 x 1 padding, we get a 28 x 28 x 1 image\n\t- If we apply 15 such filters, we get a 28 x 28 x 15\n- Number of filters allows us to increase or decrease channel size\n\n---\n\n# Pooling layer\n\n- Pooling layer performs down sampling to reduce spatial dimensionality of input\n- This decreases number of parameters\n\t- Reduces learning time/computation\n\t- Reduces likelihood of overfitting\n- Most popular type is *max* pooling\n\t- Usually a 2 x 2 filter with a stride of 2 \n\t- Returns maximum value as it slides over input data\n\n---\n\n# Fully connected layer\n\n- Last layer in a CNN\n- Connect all nodes from previous layer to this fully connected layer\n\t- Which is responsible for classification of the image\n\n---\n\n# An example CNN\n\n![A convolutional neural network with 3 convolution layers followed by 3 pooling layers](/training-material/topics/statistics/images/Conv_CNN.png) <!-- https://pixy.org/3013900/ CC0 license-->\n\n---\n\n# An example CNN\n\n- A typical CNN has several convolution plus pooling layers\n\t- Each responsible for feature extraction at different levels of abstraction\n\t- E.g., filters in first layer detect horizental, vertical, and diagonal edges\n\t- Filters in the next layer detect shapes\n\t- Filters in the last layer detect collection of shapes\n- Filter values randomly initialized, learned by learning algorithm\n- CNN not only do classification, but can also automatically do feature extraction\n\t- Distinguishes CNN from other classification techniques (like Support Vector Machines)\n\n---\n\n# Fruit 360 dataset\n\n- A dataset with 90,380 images of 131 fruits and vegetables\n\t- Images are 100 by 100 pixel and are color (RGB) images (3 values per pixel)\n\t- 67,692 images in training dataset and 22,688 images in test dataset\n\t- https://www.kaggle.com/moltean/fruits\n- This tutorial's dataset is a subset of fruit 360 dataset\n\t- Containing only 10 fruits/vegetables \n\t- Selected a subset of images, so dataset size is smaller and CNN trains faster \n\t- 5,015 images in training dataset, and 1,679 images in test dataset\n---\n\n# Utilities for creating a subset of fruit 360 dataset\n\n- The utilities and instructions at https://github.com/kxk302/fruit_dataset_utilities\n- First, creat feature vectors for each image \n\t- Images are 100 by 100 pixel color (RGB) images\n\t- Each image represented by 30,000 values (100 X 100 X 3)\n- Second, we selected a subset of 10 fruit/vegetable images\n\t- Training and test dataset sizes went from 7 GB and 2.5 GB to 500 MB and 177 MB\n- Third, we created separate files for feature vectors and labels \n- Finally, mapped labels for 10 selected fruits/vegetables to a 0 to 9 range \n\t- Full dataset labels are in the 0 to 130 range\n---\n\n# Classification of fruit/vegetable images with CNN\n\n- We define a CNN and train it using fruit 360 dataset training data\n- Goal is to learn a model such that given image of a fruit/vegetable we predict its label (0 to 9)\n- We then evaluate the trained CNN on test dataset and plot the confusion matrix\n---\n\n# For references, please see tutorial's References section\n\n---\n\n- Galaxy Training Materials ([training.galaxyproject.org](https://training.galaxyproject.org))\n\n![Screenshot of the gtn stats page with 21 topics, 170 tutorials, 159 contributors, 16 scientific topics, and a growing community](/training-material/topics/introduction/images/gtn_stats.png)\n\n???\n\n- If you would like to learn more about Galaxy, there are a large number of tutorials available.\n- These tutorials cover a wide range of scientific domains.\n\n---\n\n# Getting Help\n\n- **Help Forum** ([help.galaxyproject.org](https://help.galaxyproject.org))\n\n\n  ![Galaxy Help](/training-material/topics/introduction/images/galaxy_help.png)\n\n\n- **Gitter Chat**\n    - [Main Chat](https://gitter.im/galaxyproject/Lobby)\n    - [Galaxy Training Chat](https://gitter.im/Galaxy-Training-Network/Lobby)\n    - Many more channels (scientific domains, developers, admins)\n\n???\n\n- If you get stuck, there are ways to get help.\n- You can ask your questions on the help forum.\n- Or you can chat with the community on Gitter.\n\n---\n\n# Join an event\n\n- Many Galaxy events across the globe\n- Event Horizon: [galaxyproject.org/events](https://galaxyproject.org/events)\n\n![Event schedule](/training-material/topics/introduction/images/event_horizon.png)\n\n???\n\n- There are frequent Galaxy events all around the world.\n- You can find upcoming events on the Galaxy Event Horizon.\n"],"hands_on":true,"slides":true,"mod_date":"2024-05-29 15:37:52 +0000","pub_date":"2021-12-01 15:54:59 +0000","version":17,"workflows":[{"workflow":"fruit_360.ga","tests":false,"url":"https://training.galaxyproject.org/training-material/topics/statistics/tutorials/fruit_360/workflows/fruit_360.ga","path":"topics/statistics/tutorials/fruit_360/workflows/fruit_360.ga","wfid":"statistics-fruit_360","wfname":"fruit_360","trs_endpoint":"https://training.galaxyproject.org/training-material/api/ga4gh/trs/v2/tools/statistics-fruit_360/versions/fruit_360","license":null,"creators":[{"class":"Person","name":"Kaivan Kamali"}],"name":"fruit_360","title":"fruit_360","test_results":null,"modified":"2024-06-20 10:21:38 +0000","mermaid":"flowchart TD\n  0[\"ℹ️ Input Dataset\\ntest_y_10.tsv\"];\n  style 0 stroke:#2c3143,stroke-width:4px;\n  1[\"ℹ️ Input Dataset\\ntrain_y_10.tsv\"];\n  style 1 stroke:#2c3143,stroke-width:4px;\n  2[\"ℹ️ Input Dataset\\ntrain_X_10.tsv\"];\n  style 2 stroke:#2c3143,stroke-width:4px;\n  3[\"ℹ️ Input Dataset\\ntest_X_10.tsv\"];\n  style 3 stroke:#2c3143,stroke-width:4px;\n  4[\"Create a deep learning model architecture\"];\n  5[\"Advanced Cut\"];\n  0 -->|output| 5;\n  6[\"Advanced Cut\"];\n  1 -->|output| 6;\n  7[\"Create deep learning model\"];\n  4 -->|outfile| 7;\n  8[\"To categorical\"];\n  6 -->|output| 8;\n  9[\"Deep learning training and evaluation\"];\n  7 -->|outfile| 9;\n  2 -->|output| 9;\n  8 -->|outfile| 9;\n  10[\"Model Prediction\"];\n  9 -->|outfile_object| 10;\n  9 -->|outfile_weights| 10;\n  3 -->|output| 10;\n  11[\"Machine Learning Visualization Extension\"];\n  10 -->|outfile_predict| 11;\n  5 -->|output| 11;"}],"api":"https://training.galaxyproject.org/training-material/api/topics/statistics/tutorials/fruit_360/tutorial.json","tools":["toolshed.g2.bx.psu.edu/repos/bgruening/keras_model_builder/keras_model_builder/0.5.0","toolshed.g2.bx.psu.edu/repos/bgruening/keras_model_config/keras_model_config/0.5.0","toolshed.g2.bx.psu.edu/repos/bgruening/keras_train_and_eval/keras_train_and_eval/1.0.8.2","toolshed.g2.bx.psu.edu/repos/bgruening/keras_train_and_eval/keras_train_and_eval/1.0.8.3","toolshed.g2.bx.psu.edu/repos/bgruening/ml_visualization_ex/ml_visualization_ex/1.0.8.2","toolshed.g2.bx.psu.edu/repos/bgruening/ml_visualization_ex/ml_visualization_ex/1.0.8.3","toolshed.g2.bx.psu.edu/repos/bgruening/model_prediction/model_prediction/1.0.8.2","toolshed.g2.bx.psu.edu/repos/bgruening/model_prediction/model_prediction/1.0.8.3","toolshed.g2.bx.psu.edu/repos/bgruening/sklearn_to_categorical/sklearn_to_categorical/1.0.8.3","toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_cut_tool/1.1.0"],"supported_servers":{"exact":[{"url":"https://usegalaxy.cz/","name":"UseGalaxy.cz","usegalaxy":false},{"url":"https://usegalaxy.eu","name":"UseGalaxy.eu","usegalaxy":true},{"url":"https://usegalaxy.org","name":"UseGalaxy.org (Main)","usegalaxy":true},{"url":"https://usegalaxy.org.au","name":"UseGalaxy.org.au","usegalaxy":true}],"inexact":[]},"topic_name_human":"Statistics and machine learning","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[{"name":"keras_model_builder","owner":"bgruening","revisions":"772e0e89fc68","tool_panel_section_label":"Machine Learning","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"keras_model_config","owner":"bgruening","revisions":"8a794e6d3388","tool_panel_section_label":"Machine Learning","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"keras_train_and_eval","owner":"bgruening","revisions":"f1b9a42d6809","tool_panel_section_label":"Machine Learning","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"keras_train_and_eval","owner":"bgruening","revisions":"b6ef6d0cb6b7","tool_panel_section_label":"Machine Learning","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"ml_visualization_ex","owner":"bgruening","revisions":"05143043ca13","tool_panel_section_label":"Machine Learning","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"ml_visualization_ex","owner":"bgruening","revisions":"947c2eacccb8","tool_panel_section_label":"Machine Learning","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"model_prediction","owner":"bgruening","revisions":"83228baae3c5","tool_panel_section_label":"Machine Learning","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"model_prediction","owner":"bgruening","revisions":"1552b8cb4a94","tool_panel_section_label":"Machine Learning","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"sklearn_to_categorical","owner":"bgruening","revisions":"ec69cbe34b73","tool_panel_section_label":"Machine Learning","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"text_processing","owner":"bgruening","revisions":"d698c222f354","tool_panel_section_label":"Text Manipulation","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"}]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools:\n- name: keras_model_builder\n  owner: bgruening\n  revisions: 772e0e89fc68\n  tool_panel_section_label: Machine Learning\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: keras_model_config\n  owner: bgruening\n  revisions: 8a794e6d3388\n  tool_panel_section_label: Machine Learning\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: keras_train_and_eval\n  owner: bgruening\n  revisions: f1b9a42d6809\n  tool_panel_section_label: Machine Learning\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: keras_train_and_eval\n  owner: bgruening\n  revisions: b6ef6d0cb6b7\n  tool_panel_section_label: Machine Learning\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: ml_visualization_ex\n  owner: bgruening\n  revisions: 05143043ca13\n  tool_panel_section_label: Machine Learning\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: ml_visualization_ex\n  owner: bgruening\n  revisions: 947c2eacccb8\n  tool_panel_section_label: Machine Learning\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: model_prediction\n  owner: bgruening\n  revisions: 83228baae3c5\n  tool_panel_section_label: Machine Learning\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: model_prediction\n  owner: bgruening\n  revisions: 1552b8cb4a94\n  tool_panel_section_label: Machine Learning\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: sklearn_to_categorical\n  owner: bgruening\n  revisions: ec69cbe34b73\n  tool_panel_section_label: Machine Learning\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: text_processing\n  owner: bgruening\n  revisions: d698c222f354\n  tool_panel_section_label: Text Manipulation\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n","tours":false,"video":false,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial","logo":"GTN","key_points":null,"redirect_from":["/short/statistics/fruit_360/slides","/short/S00091"]}