{"layout":"tutorial_hands_on","title":"Clinical-MP-3-Verification","zenodo_link":"https://doi.org/10.5281/zenodo.10105821","questions":["Why do we need to verify our identified peptides","What is the importance of making a new database for quantification"],"objectives":["Verification of peptides helps in confirming the presence of the peptides in our samplle"],"time_estimation":"3H","key_points":["Perform verification","Extraction of accession numbers for getting protein sequences"],"contributions":{"authorship":["subinamehta","katherine-d21","dechendb"],"editing":["pratikdjagtap","timothygriffin"]},"requirements":[{"type":"internal","topic_name":"proteomics"}],"subtopic":"clinical-metaproteomics","follow_up_training":[{"type":"internal","topic_name":"proteomics","tutorials":["clinical-mp-4-quantitation"]}],"tags":["label-TMT11"],"redirect_from":["/topics/proteomics/tutorials/clinical-mp-data-verification/tutorial","/short/proteomics/clinical-mp-3-verification","/short/T00415"],"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00415","url":"/topics/proteomics/tutorials/clinical-mp-3-verification/tutorial.html","topic_name":"proteomics","tutorial_name":"clinical-mp-3-verification","dir":"topics/proteomics/tutorials/clinical-mp-3-verification","symlink":null,"id":"proteomics/clinical-mp-3-verification","ref_tutorials":["<h1 id=\"introduction\">Introduction</h1>\n\n<p>In proteomic research, the primary goal is to obtain accurate and meaningful insights into the proteome of a biological system. Verifying the presence of peptides or proteins is a critical step in achieving this goal, ensuring the quality and reliability of the data and the biological relevance of the findings. This tutorial is a sequel to the clinical metaproteomics discovery workflow. Once you have identified microbial peptides, the next step is to verify these peptides, for which we use PepQuery.</p>\n\n<p>The PepQuery tool is used to validate the identified microbial peptides from SearchGUI/PeptideShaker and MaxQuant, to ensure that they are indeed of microbial origin and that human peptides were not misassigned. To do this, all confident microbial peptides from the two database search algorithms were merged and searched against the Human UniProt Reference proteome (with Isoforms) and cRAP databases.</p>\n\n<p>Interestingly, the PepQuery tool does not rely on searching peptides against a reference protein sequence database as “traditional” shotgun proteomics does, which enables it to identify novel, disease-specific sequences with sensitivity and specificity in its protein validation (Figure A). Then we extract microbial protein sequences that are assigned to the PepQuery verified peptides. To this, we again add the Human UniProt Reference proteome (with Isoforms) and cRAP databases for creating a database for quantitation purposes (Figure B).</p>\n\n<p><a href=\"../../images/clinical-mp/clinical-mp-verification-1.JPG\" rel=\"noopener noreferrer\"><img src=\"../../images/clinical-mp/clinical-mp-verification-1.JPG\" alt=\"Peptide Verification. \" width=\"960\" height=\"540\" loading=\"lazy\" /></a></p>\n\n<p><a href=\"../../images/clinical-mp/clinical-mp-verification-2.JPG\" rel=\"noopener noreferrer\"><img src=\"../../images/clinical-mp/clinical-mp-verification-2.JPG\" alt=\"Database generation from verified peptides. \" width=\"960\" height=\"540\" loading=\"lazy\" /></a></p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#introduction\" id=\"markdown-toc-introduction\">Introduction</a>    <ol>\n      <li><a href=\"#get-data\" id=\"markdown-toc-get-data\">Get data</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#extraction-of-microbial-peptides-from-searchguipeptideshaker-and-maxquant\" id=\"markdown-toc-extraction-of-microbial-peptides-from-searchguipeptideshaker-and-maxquant\">Extraction of Microbial Peptides from SearchGUI/PeptideShaker and MaxQuant</a>    <ol>\n      <li><a href=\"#concatenate-peptides-from-maxquant-and-sgps-for-pepquery2\" id=\"markdown-toc-concatenate-peptides-from-maxquant-and-sgps-for-pepquery2\">Concatenate peptides from MaxQuant and SGPS for PepQuery2</a></li>\n      <li><a href=\"#creating-input-database-for-pepquery2\" id=\"markdown-toc-creating-input-database-for-pepquery2\">Creating input database for PepQuery2</a></li>\n      <li><a href=\"#peptide-verification\" id=\"markdown-toc-peptide-verification\">Peptide verification</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#collapsing-all-the-data\" id=\"markdown-toc-collapsing-all-the-data\">Collapsing all the data</a>    <ol>\n      <li><a href=\"#filtering-out-confident-peptides\" id=\"markdown-toc-filtering-out-confident-peptides\">Filtering out confident peptides</a></li>\n      <li><a href=\"#querying-verified-peptides\" id=\"markdown-toc-querying-verified-peptides\"><strong>Querying verified peptides</strong></a></li>\n      <li><a href=\"#retrieve-uniprot-ids-for-distinct-peptides\" id=\"markdown-toc-retrieve-uniprot-ids-for-distinct-peptides\">Retrieve UniProt IDs for distinct peptides</a></li>\n      <li><a href=\"#generate-fasta-database-from-uniprot-ids\" id=\"markdown-toc-generate-fasta-database-from-uniprot-ids\">Generate FASTA database from UniProt IDs</a></li>\n      <li><a href=\"#generating-compact-database\" id=\"markdown-toc-generating-compact-database\">Generating compact database</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#conclusion\" id=\"markdown-toc-conclusion\">Conclusion</a></li>\n</ol>\n\n</blockquote>\n\n<h2 id=\"get-data\">Get data</h2>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title> Data Upload </hands-on-title>\n\n  <ol>\n    <li>Create a new history for this tutorial</li>\n    <li>\n      <p>Import the files from <a href=\"https://doi.org/10.5281/zenodo.10105821\">Zenodo</a> or from\nthe shared data library (<code class=\"language-plaintext highlighter-rouge\">GTN - Material</code> -&gt; <code class=\"language-plaintext highlighter-rouge\">proteomics</code>\n -&gt; <code class=\"language-plaintext highlighter-rouge\">Clinical-MP-3-Verification</code>):</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://zenodo.org/records/10105821/files/PTRC_Skubitz_Plex2_F10_9Aug19_Rage_Rep-19-06-08.mgf\nhttps://zenodo.org/records/10105821/files/PTRC_Skubitz_Plex2_F11_9Aug19_Rage_Rep-19-06-08.mgf\nhttps://zenodo.org/records/10105821/files/PTRC_Skubitz_Plex2_F13_9Aug19_Rage_Rep-19-06-08.mgf\nhttps://zenodo.org/records/10105821/files/PTRC_Skubitz_Plex2_F15_9Aug19_Rage_Rep-19-06-08.mgf\nhttps://zenodo.org/records/10105821/files/SGPS_Peptide_Report.tabular\nhttps://zenodo.org/records/10105821/files/MaxQuant_Peptide_Report.tabular\nhttps://zenodo.org/records/10105821/files/Distinct_Peptides_for_PepQuery.tabular\n</code></pre></div>      </div>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-importing-via-links\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-importing-via-links\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Importing via links</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ul>   <li>Copy the link location</li>   <li>     <p>Click <i class=\"fas fa-upload\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-upload</span> <strong>Upload Data</strong> at the top of the tool panel</p>   </li>   <li>Select <i class=\"fa fa-edit\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-wf-edit</span> <strong>Paste/Fetch Data</strong></li>   <li>     <p>Paste the link(s) into the text field</p>   </li>   <li>     <p>Press <strong>Start</strong></p>   </li>   <li><strong>Close</strong> the window</li> </ul> </blockquote>\n      <p><!--END_SNIPPET--></p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-importing-data-from-a-data-library\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-importing-data-from-a-data-library\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Importing data from a data library</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <p>As an alternative to uploading the data from a URL or your computer, the files may also have been made available from a <em>shared data library</em>:</p>   <ol>   <li>Go into <strong>Shared data</strong> (top panel) then <strong>Data libraries</strong></li>   <li>Navigate to  the correct folder as indicated by your instructor.     <ul>       <li>On most Galaxies tutorial data will be provided in a folder named <strong>GTN - Material –&gt; Topic Name -&gt; Tutorial Name</strong>.</li>     </ul>   </li>   <li>Select the desired files</li>   <li>Click on <strong>Add to History</strong> <i class=\"fas fa-caret-down\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-dropdown</span> near the top and select <strong>as Datasets</strong> from the dropdown menu</li>   <li>     <p>In the pop-up window, choose</p>     <ul>       <li><em>“Select history”</em>: the history you want to import the data to (or create a new one)</li>     </ul>   </li>   <li>Click on <strong>Import</strong></li> </ol> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n    <li>Rename the datasets</li>\n    <li>\n      <p>Check that the datatype</p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-changing-the-datatype\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-changing-the-datatype\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Changing the datatype</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ul>   <li>Click on the <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-pencil</span> <strong>pencil icon</strong> for the dataset to edit its attributes</li>   <li>In the central panel, click <i class=\"fas fa-database\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-chart-select-data</span> <strong>Datatypes</strong> tab on the top</li>   <li>In the <i class=\"fas fa-database\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-chart-select-data</span> <strong>Assign Datatype</strong>, select <code class=\"language-plaintext highlighter-rouge\">datatypes</code> from “<em>New type</em>” dropdown     <ul>       <li>Tip: you can start typing the datatype into the field to filter the dropdown menu</li>     </ul>   </li>   <li>Click the <strong>Save</strong> button</li> </ul> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n    <li>Add to each database a tag corresponding to input files.</li>\n    <li>\n      <p>Users can create a database collection of the MGF files.</p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-adding-a-tag\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-adding-a-tag\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Adding a tag</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ol>   <li>Click on the dataset to expand it</li>   <li>Click on <strong>Add Tags</strong> <i class=\"fas fa-tags\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-tags</span></li>   <li>Add a tag  starting with <code class=\"language-plaintext highlighter-rouge\">#</code>     <ul>       <li>Tags starting with <code class=\"language-plaintext highlighter-rouge\">#</code> will be automatically propagated to the outputs of tools using this dataset.</li>     </ul>   </li>   <li>Press <kbd>Enter</kbd></li>   <li>Check that the tag appears below the dataset name</li> </ol> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h1 id=\"extraction-of-microbial-peptides-from-searchguipeptideshaker-and-maxquant\">Extraction of Microbial Peptides from SearchGUI/PeptideShaker and MaxQuant</h1>\n<p>Now that we have identified microbial peptides from SearchGUI/PeptideShaker and MaxQuant, we need to extract the microbial peptide sequences and group them to obtain a list of distinct microbial peptides. This list of distinct peptides will be used as input for PepQuery2 to verify confident microbial peptides.</p>\n\n<p>First, we will use the Cut tool to select the peptide and protein columns from the SearchGUI/PeptideShaker and MaxQuant Peptide Reports. Then we use Remove header lines from SGPS and MaxQuant to prepare for concatenation with Remove beginning.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title> Extracting peptides </hands-on-title>\n\n  <ol>\n    <li><span class=\"tool\" data-tool=\"Cut1\" title=\"Cut tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Cut</strong></span> with the following parameters:\n      <ul>\n        <li><em>“Cut columns”</em>: <code class=\"language-plaintext highlighter-rouge\">c6,c2</code></li>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“From”</em>: <code class=\"language-plaintext highlighter-rouge\">output</code> (Input dataset)</li>\n      </ul>\n    </li>\n    <li><span class=\"tool\" data-tool=\"Cut1\" title=\"Cut tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Cut</strong></span> with the following parameters:\n      <ul>\n        <li><em>“Cut columns”</em>: <code class=\"language-plaintext highlighter-rouge\">c1,c35</code></li>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“From”</em>: <code class=\"language-plaintext highlighter-rouge\">output</code> (Input dataset)</li>\n      </ul>\n    </li>\n    <li><span class=\"tool\" data-tool=\"Remove beginning1\" title=\"Remove beginning tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Remove beginning</strong></span> with the following parameters:\n      <ul>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“from”</em>: <code class=\"language-plaintext highlighter-rouge\">out_file1</code> (output of <strong>Cut</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>)</li>\n      </ul>\n    </li>\n    <li><span class=\"tool\" data-tool=\"Remove beginning1\" title=\"Remove beginning tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Remove beginning</strong></span> with the following parameters:\n      <ul>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“from”</em>: <code class=\"language-plaintext highlighter-rouge\">out_file1</code> (output of <strong>Cut</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>)</li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"concatenate-peptides-from-maxquant-and-sgps-for-pepquery2\">Concatenate peptides from MaxQuant and SGPS for PepQuery2</h2>\n\n<p>We will now concatenate the peptide and protein datasets from SearchGUI/PeptideShaker and MaxQuant. Later, we will generate a list of confident peptides using PepQuery2. The list of confident peptides will be searched against the concatenated peptide-protein datasets from SearchGUI/PeptideShaker and MaxQuant to generate a list of verified peptides.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title> Concatenate SGPS and MaxQuant peptides </hands-on-title>\n\n  <ol>\n    <li><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_cat/0.1.1\" title=\"Concatenate datasets tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Concatenate datasets</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 0.1.1)</span> with the following parameters:\n      <ul>\n        <li><i class=\"far fa-copy\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-files</span> <em>“Datasets to concatenate”</em>: <code class=\"language-plaintext highlighter-rouge\">out_file1</code> (output of <strong>Remove beginning</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>), <code class=\"language-plaintext highlighter-rouge\">out_file1</code> (output of <strong>Remove beginning</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>)</li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"creating-input-database-for-pepquery2\">Creating input database for PepQuery2</h2>\n\n<p>We generate and merge Human UniProt (with Isoforms) and contaminants (cRAP) to make an input database for PepQuery2.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title> FASTA Merge Files and Filter Unique Sequences</hands-on-title>\n\n  <ol>\n    <li><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/galaxyp/fasta_merge_files_and_filter_unique_sequences/fasta_merge_files_and_filter_unique_sequences/1.2.0\" title=\"FASTA Merge Files and Filter Unique Sequences tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>FASTA Merge Files and Filter Unique Sequences</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 1.2.0)</span> with the following parameters:\n      <ul>\n        <li><em>“Run in batch mode?”</em>: <code class=\"language-plaintext highlighter-rouge\">Merge individual FASTAs (output collection if input is collection)</code>\n          <ul>\n            <li>In <em>“Input FASTA File(s)”</em>:\n              <ul>\n                <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Insert Input FASTA File(s)”</em>\n                  <ul>\n                    <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“FASTA File”</em>: <code class=\"language-plaintext highlighter-rouge\">Human UniProt+Isoforms FASTA</code> (output of <strong>Protein Database Downloader</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>)</li>\n                    <li>\n                      <ul>\n                        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“FASTA File”</em>: <code class=\"language-plaintext highlighter-rouge\">cRAP database</code> (output of <strong>Protein Database Downloader</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>)</li>\n                      </ul>\n                    </li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"peptide-verification\">Peptide verification</h2>\n<p>The PepQuery2 tool will be used to validate the identified microbial peptides from SearchGUI/PeptideShaker and MaxQuant to ensure that they are indeed of microbial origin and that human peptides were not misassigned. We will use the list of <code class=\"language-plaintext highlighter-rouge\">Distinct Peptides</code> (from the <a href=\"https://github.com/subinamehta/training-material/blob/main/topics/proteomics/tutorials/clinical-mp-discovery/tutorial.md\">Discovery Module</a>), <code class=\"language-plaintext highlighter-rouge\">Human UniProt+Isoforms+cRAP database</code>, and our <code class=\"language-plaintext highlighter-rouge\">MGF file collection</code> as inputs for PepQuery2. The outputs we are interested in are the four PSM Rank (txt) files (one for each MGF file).</p>\n\n<p>Interestingly, the PepQuery2 tool does not rely on searching peptides against a reference protein sequence database as “traditional” shotgun proteomics does, which enables it to identify novel, disease-specific sequences with sensitivity and specificity in its protein validation. More information about PepQuery is available, including the first <span class=\"citation\"><a href=\"#Wen2019\">Wen <i>et al.</i> 2019</a></span> and second iterations <span class=\"citation\"><a href=\"#Wen2023\">Wen and Zhang 2023</a></span>.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title> Peptide verification </hands-on-title>\n\n  <ol>\n    <li><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/galaxyp/pepquery2/pepquery2/2.0.2+galaxy0\" title=\"PepQuery2 tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>PepQuery2</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 2.0.2+galaxy0)</span> with the following parameters:\n      <ul>\n        <li><em>“Validation Task Type”</em>: <code class=\"language-plaintext highlighter-rouge\">novel peptide/protein validation</code></li>\n        <li>In <em>“Input Data”</em>:\n          <ul>\n            <li><em>“Input Type”</em>: <code class=\"language-plaintext highlighter-rouge\">peptide</code>\n              <ul>\n                <li><em>“Peptides?”</em>: <code class=\"language-plaintext highlighter-rouge\">Peptide list from your history</code>\n                  <ul>\n                    <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Peptide Sequences (.txt)”</em>: <code class=\"language-plaintext highlighter-rouge\">output</code> (Input dataset)</li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n            <li><em>“Protein Reference Database from”</em>: <code class=\"language-plaintext highlighter-rouge\">history</code>\n              <ul>\n                <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Protein Reference Database File”</em>: <code class=\"language-plaintext highlighter-rouge\">output</code> (output of <strong>FASTA Merge Files and Filter Unique Sequences</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>)</li>\n              </ul>\n            </li>\n            <li><em>“MS/MS dataset to search”</em>: ` Spectrum Datasets from history`\n              <ul>\n                <li><i class=\"far fa-folder\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-collection</span> <em>“Spectrum File”</em>: <code class=\"language-plaintext highlighter-rouge\">output</code> (Input dataset collection)</li>\n              </ul>\n            </li>\n            <li><em>“Report Spectrum Scan as”</em>: <code class=\"language-plaintext highlighter-rouge\">spectrum title in MGF</code></li>\n          </ul>\n        </li>\n        <li>In <em>“Modifications”</em>:\n          <ul>\n            <li><em>“Fixed modification(s)”</em>: <code class=\"language-plaintext highlighter-rouge\">1: Carbamidomethylation of C [57.02146372057]</code> <code class=\"language-plaintext highlighter-rouge\">13: TMT 11-plex of K [229.16293213472]</code> <code class=\"language-plaintext highlighter-rouge\">14: TMT 11-plex of peptide N-term [229.16293213472]</code></li>\n            <li><em>“Variable modification(s)”</em>: <code class=\"language-plaintext highlighter-rouge\">2: Oxidation of M [15.99491461956]</code></li>\n            <li><em>“Use more stringent criterion for unrestricted modification searching”</em>: <code class=\"language-plaintext highlighter-rouge\">Yes</code></li>\n            <li><em>“Consider amino acid substitution modifications?”</em>: <code class=\"language-plaintext highlighter-rouge\">Yes</code></li>\n          </ul>\n        </li>\n        <li>In <em>“Digestion”</em>:\n          <ul>\n            <li><em>“Enzyme”</em>: <code class=\"language-plaintext highlighter-rouge\">Trypsin</code></li>\n            <li><em>“Max Missed Cleavages”</em>: <code class=\"language-plaintext highlighter-rouge\">2</code></li>\n          </ul>\n        </li>\n        <li>In <em>“Mass spectrometer”</em>:\n          <ul>\n            <li>In <em>“Tolerance”</em>:\n              <ul>\n                <li><em>“Precursor Tolerance”</em>: <code class=\"language-plaintext highlighter-rouge\">10</code></li>\n                <li><em>“Precursor Unit”</em>: <code class=\"language-plaintext highlighter-rouge\">ppm</code></li>\n                <li><em>“Tolerance”</em>: <code class=\"language-plaintext highlighter-rouge\">0.6</code></li>\n              </ul>\n            </li>\n            <li>In <em>“PSM”</em>:\n              <ul>\n                <li><em>“Fragmentation Method”</em>: <code class=\"language-plaintext highlighter-rouge\">CID/HCD</code></li>\n                <li><em>“Scoring Method”</em>: <code class=\"language-plaintext highlighter-rouge\">HyperScore</code></li>\n                <li><em>“Minimum Charge”</em>: <code class=\"language-plaintext highlighter-rouge\">2</code></li>\n                <li><em>“Maximum Charge”</em>: <code class=\"language-plaintext highlighter-rouge\">6</code></li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h1 id=\"collapsing-all-the-data\">Collapsing all the data</h1>\n\n<p>Remember that PepQuery2 generates a PSM Rank file for each input MGF file, so we will have four PSM Rank files. To make the analysis more efficient, we will collapse these four PSM Rank files into one dataset.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title> Collasping PSM rank files into a singular dataset using Collapse Collection </hands-on-title>\n\n  <ol>\n    <li><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/nml/collapse_collections/collapse_dataset/5.1.0\" title=\"Collapse Collection tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Collapse Collection</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 5.1.0)</span> with the following parameters:\n      <ul>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Collection of files to collapse into single dataset”</em>: <code class=\"language-plaintext highlighter-rouge\">psm_rank_txt</code> (output of <strong>PepQuery2</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>)</li>\n        <li><em>“Keep one header line”</em>: <code class=\"language-plaintext highlighter-rouge\">Yes</code></li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"filtering-out-confident-peptides\">Filtering out confident peptides</h2>\n\n<p>Now, we want to filter for confident peptides from PepQuery2 and prepare them for the Query Tabular tool.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title> Filter </hands-on-title>\n\n  <ol>\n    <li><span class=\"tool\" data-tool=\"Filter1\" title=\"Filter tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Filter</strong></span> with the following parameters:\n      <ul>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Filter”</em>: <code class=\"language-plaintext highlighter-rouge\">output</code> (output of <strong>Collapse Collection</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>)</li>\n        <li><em>“With following condition”</em>: <code class=\"language-plaintext highlighter-rouge\">c20=='Yes'</code></li>\n        <li><em>“Number of header lines to skip”</em>: <code class=\"language-plaintext highlighter-rouge\">1</code></li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title> Remove header line from filtered PepQuery peptides with Remove beginning </hands-on-title>\n\n  <ol>\n    <li><span class=\"tool\" data-tool=\"Remove beginning1\" title=\"Remove beginning tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Remove beginning</strong></span> with the following parameters:\n      <ul>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“from”</em>: <code class=\"language-plaintext highlighter-rouge\">out_file1</code> (output of <strong>Filter</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>)</li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title> Cut (select out) peptide sequences from PepQuery output with Cut </hands-on-title>\n\n  <ol>\n    <li><span class=\"tool\" data-tool=\"Cut1\" title=\"Cut tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Cut</strong></span> with the following parameters:\n      <ul>\n        <li><em>“Cut columns”</em>: <code class=\"language-plaintext highlighter-rouge\">c1</code></li>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“From”</em>: <code class=\"language-plaintext highlighter-rouge\">out_file1</code> (output of <strong>Remove beginning</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>)</li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"querying-verified-peptides\"><strong>Querying verified peptides</strong></h2>\n\n<p>We will use the Query Tabular tool <span class=\"citation\"><a href=\"#Johnson2019\">Johnson <i>et al.</i> 2019</a></span> to search the PepQuery-verified peptides against the concatenated dataset that contains peptides and proteins from SearchGUI/Peptide and MaxQuant. This step ensures all the PepQuery-verified peptides are assigned to their protein/protein groups.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title> Querying verified peptides </hands-on-title>\n\n  <ol>\n    <li><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/iuc/query_tabular/query_tabular/3.3.0\" title=\"Query Tabular tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Query Tabular</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 3.3.0)</span> with the following parameters:\n      <ul>\n        <li>In <em>“Database Table”</em>:\n          <ul>\n            <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Insert Database Table”</em>\n              <ul>\n                <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Tabular Dataset for Table”</em>: <code class=\"language-plaintext highlighter-rouge\">out_file1</code> (output of <strong>Cut</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>)</li>\n                <li>In <em>“Table Options”</em>:\n                  <ul>\n                    <li><em>“Specify Name for Table”</em>: <code class=\"language-plaintext highlighter-rouge\">pep</code></li>\n                    <li><em>“Specify Column Names (comma-separated list)”</em>: <code class=\"language-plaintext highlighter-rouge\">mpep</code></li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n            <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Insert Database Table”</em>\n              <ul>\n                <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Tabular Dataset for Table”</em>: <code class=\"language-plaintext highlighter-rouge\">out_file1</code> (output of <strong>Concatenate datasets</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>)</li>\n                <li>In <em>“Table Options”</em>:\n                  <ul>\n                    <li><em>“Specify Name for Table”</em>: <code class=\"language-plaintext highlighter-rouge\">prot</code></li>\n                    <li><em>“Specify Column Names (comma-separated list)”</em>: <code class=\"language-plaintext highlighter-rouge\">pep,prot</code></li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n        <li><em>“SQL Query to generate tabular output”</em>: <code class=\"language-plaintext highlighter-rouge\">select pep.mpep, prot.prot\n</code>FROM pep\nINNER JOIN  prot on pep.mpep=prot.pep `</li>\n        <li><em>“include query result column headers”</em>: <code class=\"language-plaintext highlighter-rouge\">Yes</code>\n`</li>\n      </ul>\n    </li>\n  </ol>\n\n  <blockquote class=\"comment\">\n    <comment-title>SQL Query information</comment-title>\n    <p>The query input files are the list of peptides and the peptide report we obtained from MaxQuant and SGPS. The query is matching each peptide (m.pep) from the PepQuery results to the peptide reports so that each verified peptide has its protein/protein group assigned to it.</p>\n  </blockquote>\n\n  <hands-on-title> Remove Header with Remove beginning </hands-on-title>\n\n  <ol>\n    <li><span class=\"tool\" data-tool=\"Remove beginning1\" title=\"Remove beginning tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Remove beginning</strong></span> with the following parameters:\n      <ul>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“from”</em>: <code class=\"language-plaintext highlighter-rouge\">output</code> (output of <strong>Query Tabular</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>)</li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>Using the Group tool, we can select distinct (unique) peptides and proteins from the Query Tabular tool.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title> Extract distinct peptides with Group </hands-on-title>\n\n  <ol>\n    <li><span class=\"tool\" data-tool=\"Grouping1\" title=\"Group tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Group</strong></span> with the following parameters:\n      <ul>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Select data”</em>: <code class=\"language-plaintext highlighter-rouge\">out_file1</code> (output of <strong>Remove beginning</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>)</li>\n        <li><em>“Group by column”</em>: <code class=\"language-plaintext highlighter-rouge\">c1</code></li>\n        <li>In <em>“Operation”</em>:\n          <ul>\n            <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Insert Operation”</em>\n              <ul>\n                <li><em>“Type”</em>: <code class=\"language-plaintext highlighter-rouge\">Concatenate Distinct</code></li>\n                <li><em>“On column”</em>: <code class=\"language-plaintext highlighter-rouge\">c2</code></li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"retrieve-uniprot-ids-for-distinct-peptides\">Retrieve UniProt IDs for distinct peptides</h2>\n\n<p>Again, we will use the Query Tabular tool to retrieve UniProt IDs (accession numbers) for the distinct (grouped) peptides.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title> Query Tabular </hands-on-title>\n\n  <ol>\n    <li><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/iuc/query_tabular/query_tabular/3.3.0\" title=\"Query Tabular tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Query Tabular</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 3.3.0)</span> with the following parameters:\n      <ul>\n        <li>In <em>“Database Table”</em>:\n          <ul>\n            <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Insert Database Table”</em>\n              <ul>\n                <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Tabular Dataset for Table”</em>: <code class=\"language-plaintext highlighter-rouge\">out_file1</code> (output of <strong>Group</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>)</li>\n                <li>In <em>“Filter Dataset Input”</em>:\n                  <ul>\n                    <li>In <em>“Filter Tabular Input Lines”</em>:\n                      <ul>\n                        <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Insert Filter Tabular Input Lines”</em>\n                          <ul>\n                            <li><em>“Filter By”</em>: <code class=\"language-plaintext highlighter-rouge\">normalize list columns, replicates row for each item in list</code>\n                              <ul>\n                                <li><em>“enter column numbers to normalize”</em>: <code class=\"language-plaintext highlighter-rouge\">2</code></li>\n                                <li><em>“List item delimiter in column”</em>: <code class=\"language-plaintext highlighter-rouge\">;</code></li>\n                              </ul>\n                            </li>\n                          </ul>\n                        </li>\n                        <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Insert Filter Tabular Input Lines”</em>\n                          <ul>\n                            <li><em>“Filter By”</em>: <code class=\"language-plaintext highlighter-rouge\">regex replace value in column</code>\n                              <ul>\n                                <li><em>“enter column number to replace”</em>: <code class=\"language-plaintext highlighter-rouge\">2</code></li>\n                                <li><em>“regex pattern”</em>: <code class=\"language-plaintext highlighter-rouge\">(tr|sp)[|]</code></li>\n                              </ul>\n                            </li>\n                          </ul>\n                        </li>\n                        <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Insert Filter Tabular Input Lines”</em>\n                          <ul>\n                            <li><em>“Filter By”</em>: <code class=\"language-plaintext highlighter-rouge\">regex replace value in column</code>\n                              <ul>\n                                <li><em>“enter column number to replace”</em>: <code class=\"language-plaintext highlighter-rouge\">2</code></li>\n                                <li><em>“regex pattern”</em>: <code class=\"language-plaintext highlighter-rouge\">[ ]+</code></li>\n                              </ul>\n                            </li>\n                          </ul>\n                        </li>\n                        <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Insert Filter Tabular Input Lines”</em>\n                          <ul>\n                            <li><em>“Filter By”</em>: <code class=\"language-plaintext highlighter-rouge\">regex replace value in column</code>\n                              <ul>\n                                <li><em>“enter column number to replace”</em>: <code class=\"language-plaintext highlighter-rouge\">2</code></li>\n                                <li><em>“regex pattern”</em>: <code class=\"language-plaintext highlighter-rouge\">[|].*$</code></li>\n                              </ul>\n                            </li>\n                          </ul>\n                        </li>\n                      </ul>\n                    </li>\n                  </ul>\n                </li>\n                <li>In <em>“Table Options”</em>:\n                  <ul>\n                    <li><em>“Specify Name for Table”</em>: <code class=\"language-plaintext highlighter-rouge\">t1</code></li>\n                    <li><em>“Use first line as column names”</em>: <code class=\"language-plaintext highlighter-rouge\">Yes</code></li>\n                    <li><em>“Specify Column Names (comma-separated list)”</em>: <code class=\"language-plaintext highlighter-rouge\">pep,prot</code>\n` <em>“SQL Query to generate tabular output”</em>: <code class=\"language-plaintext highlighter-rouge\">SELECT distinct(prot) AS Accession \n from t1</code>\n <em>“include query result column headers”</em>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <ol>\n    <li>What is the accession number of a protein?</li>\n    <li>Can there be multiple accession numbers for one peptide or protein?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <ol>\n      <li>\n        <p>An accession number of a protein, also called a protein accession number, is a unique identifier assigned to a specific protein sequence in a protein sequence database. These accession numbers are used to reference and catalog proteins in a standardized and systematic manner</p>\n      </li>\n      <li>\n        <p>Yes, a single peptide or protein can have multiple accession numbers, particularly when dealing with different protein sequence databases, databases for specific species, or different versions of the same database. That’s the reason in our workflow we merge both accession and sequences.</p>\n      </li>\n    </ol>\n  </blockquote>\n\n</blockquote>\n\n<h2 id=\"generate-fasta-database-from-uniprot-ids\">Generate FASTA database from UniProt IDs</h2>\n<p>Using the UniProt IDs from Query Tabular, we will be able to generate a FASTA database for our PepQuery-verified peptides.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title> UniprotXML-downloader </hands-on-title>\n\n  <ol>\n    <li><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/galaxyp/uniprotxml_downloader/uniprotxml_downloader/2.4.0\" title=\"UniProt tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>UniProt</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 2.4.0)</span> with the following parameters:\n      <ul>\n        <li><em>“Select”</em>: <code class=\"language-plaintext highlighter-rouge\">A history dataset with a column containing Uniprot IDs</code>\n          <ul>\n            <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Dataset (tab separated) with ID column”</em>: <code class=\"language-plaintext highlighter-rouge\">output</code> (Input dataset)</li>\n            <li><em>“Column with ID”</em>: <code class=\"language-plaintext highlighter-rouge\">c1</code></li>\n            <li><em>“Field”</em>: <code class=\"language-plaintext highlighter-rouge\">Accession</code></li>\n          </ul>\n        </li>\n        <li><em>“uniprot output format”</em>: <code class=\"language-plaintext highlighter-rouge\">fasta</code></li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"generating-compact-database\">Generating compact database</h2>\n\n<p>Lastly, we will merge the Human UniProt (with isoforms), contaminants (cRAP) and the PepQuery-verified FASTA databases into one Quantitation Database that will be used as input for the <a href=\"https://github.com/subinamehta/training-material/blob/main/topics/proteomics/tutorials/clinical-mp-quantitation/tutorial.md\">Quantification Module</a>.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title> Generation of Compact Verified Database with UniProt </hands-on-title>\n\n  <ol>\n    <li><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/galaxyp/fasta_merge_files_and_filter_unique_sequences/fasta_merge_files_and_filter_unique_sequences/1.2.0\" title=\"FASTA Merge Files and Filter Unique Sequences tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>FASTA Merge Files and Filter Unique Sequences</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 1.2.0)</span> with the following parameters:\n      <ul>\n        <li><em>“Run in batch mode?”</em>: <code class=\"language-plaintext highlighter-rouge\">Merge individual FASTAs (output collection if input is collection)</code>\n          <ul>\n            <li>In <em>“Input FASTA File(s)”</em>:\n              <ul>\n                <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Insert Input FASTA File(s)”</em>\n                  <ul>\n                    <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“FASTA File”</em>: <code class=\"language-plaintext highlighter-rouge\">proteome</code> (output of <strong>UniProt</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>)</li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>A peptide verification workflow is a critical step in proteomic research that enhances data reliability, quantitative accuracy, and biological understanding by confirming the presence and validity of selected peptides. It is a pivotal quality control process that ensures the trustworthiness of proteomic findings and supports downstream investigations. By completing this tutorial, you have not only verified the microbial peptides but also created a database consisting of protein sequences from the PepQuery-verified peptides. The need of such a database is to ensure that when we quantify our proteins and peptides we are reducing the introduction of false positives. This database will be now used for quantitation purposes.</p>\n"],"ref_slides":[],"video_library":{"tutorial":null,"slides":null,"demo":null,"both":null,"session":null},"hands_on":true,"slides":false,"mod_date":"2024-04-23 19:09:22 +0000","pub_date":"2024-02-06 15:43:02 +0000","version":5,"api":"https://training.galaxyproject.org/training-material/api/topics/proteomics/tutorials/clinical-mp-3-verification/tutorial.json","tools":["Cut1","Filter1","Grouping1","Remove beginning1","toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_cat/0.1.1","toolshed.g2.bx.psu.edu/repos/galaxyp/fasta_merge_files_and_filter_unique_sequences/fasta_merge_files_and_filter_unique_sequences/1.2.0","toolshed.g2.bx.psu.edu/repos/galaxyp/pepquery2/pepquery2/2.0.2+galaxy0","toolshed.g2.bx.psu.edu/repos/galaxyp/uniprotxml_downloader/uniprotxml_downloader/2.4.0","toolshed.g2.bx.psu.edu/repos/iuc/query_tabular/query_tabular/3.3.0","toolshed.g2.bx.psu.edu/repos/nml/collapse_collections/collapse_dataset/5.1.0"],"supported_servers":{"exact":[{"url":"https://usegalaxy.cz/","name":"UseGalaxy.cz","usegalaxy":false},{"url":"https://usegalaxy.eu","name":"UseGalaxy.eu","usegalaxy":true}],"inexact":[]},"topic_name_human":"Proteomics","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[{"name":"text_processing","owner":"bgruening","revisions":"d698c222f354","tool_panel_section_label":"Text Manipulation","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"fasta_merge_files_and_filter_unique_sequences","owner":"galaxyp","revisions":"f546e7278f04","tool_panel_section_label":"FASTA/FASTQ","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"pepquery2","owner":"galaxyp","revisions":"a07976bbc4d9","tool_panel_section_label":"Proteomics","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"uniprotxml_downloader","owner":"galaxyp","revisions":"a371252a2cf6","tool_panel_section_label":"Get Data","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"query_tabular","owner":"iuc","revisions":"cf34c344508d","tool_panel_section_label":"Text Manipulation","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"collapse_collections","owner":"nml","revisions":"90981f86000f","tool_panel_section_label":"Collection Operations","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"}]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools:\n- name: text_processing\n  owner: bgruening\n  revisions: d698c222f354\n  tool_panel_section_label: Text Manipulation\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: fasta_merge_files_and_filter_unique_sequences\n  owner: galaxyp\n  revisions: f546e7278f04\n  tool_panel_section_label: FASTA/FASTQ\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: pepquery2\n  owner: galaxyp\n  revisions: a07976bbc4d9\n  tool_panel_section_label: Proteomics\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: uniprotxml_downloader\n  owner: galaxyp\n  revisions: a371252a2cf6\n  tool_panel_section_label: Get Data\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: query_tabular\n  owner: iuc\n  revisions: cf34c344508d\n  tool_panel_section_label: Text Manipulation\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: collapse_collections\n  owner: nml\n  revisions: 90981f86000f\n  tool_panel_section_label: Collection Operations\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n","tours":false,"video":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial","contributors":[{"name":"Subina Mehta","email":"subinamehta@gmail.com","twitter":"Subina_Mehta","linkedin":"subinamehta","matrix":"subinamehta:matrix.org","orcid":"0000-0001-9818-0537","joined":"2018-06","id":"subinamehta","url":"https://training.galaxyproject.org/training-material/api/contributors/subinamehta.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/subinamehta/"},{"name":"Katherine Do","joined":"2023-08","id":"katherine-d21","url":"https://training.galaxyproject.org/training-material/api/contributors/katherine-d21.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/katherine-d21/"},{"name":"Dechen Bhuming","joined":"2023-06","id":"dechendb","url":"https://training.galaxyproject.org/training-material/api/contributors/dechendb.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/dechendb/"},{"name":"Pratik Jagtap","email":"pjagtap@umn.edu","joined":"2017-09","orcid":"0000-0003-0984-0973","id":"pratikdjagtap","url":"https://training.galaxyproject.org/training-material/api/contributors/pratikdjagtap.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/pratikdjagtap/"},{"name":"Timothy J. Griffin","email":"tgriffin@umn.edu","github":false,"joined":"2017-09","orcid":"0000-0001-6801-2559","id":"timothygriffin","url":"https://training.galaxyproject.org/training-material/api/contributors/timothygriffin.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/timothygriffin/"}]}