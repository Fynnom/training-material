{"layout":"tutorial_hands_on","title":"Metaproteomics tutorial","zenodo_link":"https://doi.org/10.5281/zenodo.839701","questions":["How can I match metaproteomic mass spectrometry data to peptide sequences derived from shotgun metagenomic data?","How can I perform taxonomy analysis and visualize metaproteomics data?","How can I perform functional analysis on this metaproteomics data?"],"objectives":["A taxonomy and functional analysis of metaproteomic mass spectrometry data."],"time_estimation":"2h","key_points":["Use dataset collections","With SearchGUI and PeptideShaker you can gain access to multiple search engines","Learning the basics of SQL queries can pay off"],"contributors":[{"name":"Timothy J. Griffin","email":"tgriffin@umn.edu","github":false,"joined":"2017-09","orcid":"0000-0001-6801-2559","id":"timothygriffin","url":"https://training.galaxyproject.org/training-material/api/contributors/timothygriffin.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/timothygriffin/"},{"name":"Pratik Jagtap","email":"pjagtap@umn.edu","joined":"2017-09","orcid":"0000-0003-0984-0973","id":"pratikdjagtap","url":"https://training.galaxyproject.org/training-material/api/contributors/pratikdjagtap.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/pratikdjagtap/"},{"name":"James Johnson","email":"jj@umn.edu","joined":"2017-09","in_memoriam":"<a href=\"https://galaxyproject.org/news/2024-03-19-remembrances-of-jj/\">James ‘JJ’ Johnson, was a Galaxy community rock star most known for his indispensable contributions to the Galaxy Proteomics community.</a>\n\nJJ’s works will live on in so many Galaxy tools and workflows for years to come.","id":"jj-umn","url":"https://training.galaxyproject.org/training-material/api/contributors/jj-umn.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/jj-umn/"},{"name":"Clemens Blank","email":"blankclemens@gmail.com","orcid":"0000-0002-1726-2256","joined":"2017-09","elixir_node":"de","former_affiliations":["uni-freiburg","elixir-europe"],"id":"blankclemens","url":"https://training.galaxyproject.org/training-material/api/contributors/blankclemens.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/blankclemens/"},{"name":"Subina Mehta","email":"subinamehta@gmail.com","twitter":"Subina_Mehta","linkedin":"subinamehta","matrix":"subinamehta:matrix.org","orcid":"0000-0001-9818-0537","joined":"2018-06","id":"subinamehta","url":"https://training.galaxyproject.org/training-material/api/contributors/subinamehta.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/subinamehta/"}],"subtopic":"multi-omics","tags":["microgalaxy"],"edam_ontology":["topic_0121","topic_3922","topic_3050","topic_0637"],"recordings":[{"captioners":["emmaleith"],"date":"2021-02-15","galaxy_version":"21.01","length":"1H","youtube_id":"3_yaPp-RCFw","speakers":["pratikdjagtap"]}],"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00221","url":"/topics/proteomics/tutorials/metaproteomics/tutorial.html","topic_name":"proteomics","tutorial_name":"metaproteomics","dir":"topics/proteomics/tutorials/metaproteomics","symlink":null,"id":"proteomics/metaproteomics","ref_tutorials":["<p>In this metaproteomics tutorial we will identify expressed proteins from a complex bacterial community sample.\nFor this MS/MS data will be matched to peptide sequences provided through a FASTA file.</p>\n\n<p>Metaproteomics is the large-scale characterization of the entire protein complement of environmental microbiota\nat a given point in time. It has the potential to unravel the mechanistic details of microbial interactions with\nthe host / environment by analyzing the functional dynamics of the microbiome.</p>\n\n<p>In this tutorial, we will analyze a sample of sea water that was collected in August of 2013 from the Bering\nStrait chlorophyll maximum layer (7m depth, 65° 43.44″ N, 168° 57.42″ W). The data were originally published in <span class=\"citation\"><a href=\"#May_2016\">May <i>et al.</i> 2016</a></span>.</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will deal with:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#pretreatments\" id=\"markdown-toc-pretreatments\">Pretreatments</a>    <ol>\n      <li><a href=\"#data-upload\" id=\"markdown-toc-data-upload\">Data upload</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#analysis\" id=\"markdown-toc-analysis\">Analysis</a>    <ol>\n      <li><a href=\"#match-peptide-sequences\" id=\"markdown-toc-match-peptide-sequences\">Match peptide sequences</a></li>\n      <li><a href=\"#taxonomy-analysis\" id=\"markdown-toc-taxonomy-analysis\">Taxonomy analysis</a></li>\n      <li><a href=\"#genus-taxonomy-level-summary\" id=\"markdown-toc-genus-taxonomy-level-summary\">Genus taxonomy level summary</a></li>\n      <li><a href=\"#functional-analysis\" id=\"markdown-toc-functional-analysis\">Functional Analysis</a></li>\n    </ol>\n  </li>\n</ol>\n\n</blockquote>\n\n<h1 id=\"pretreatments\">Pretreatments</h1>\n\n<h2 id=\"data-upload\">Data upload</h2>\n\n<p>There are three ways to upload your data.</p>\n\n<ul>\n  <li>Upload/Import the files from your computer</li>\n  <li>Using a direct link</li>\n  <li>Import from the data library if your instance provides the files</li>\n</ul>\n\n<p>In this tutorial, we will get the data from Zenodo: <a href=\"https://doi.org/10.5281/zenodo.839701\"><a href=\"https://zenodo.org/badge/DOI/10.5281/zenodo.839701.svg\" rel=\"noopener noreferrer\"><img src=\"https://zenodo.org/badge/DOI/10.5281/zenodo.839701.svg\" alt=\"DOI. \" loading=\"lazy\" /></a></a>.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Data upload and organization</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Create a new history and name it something meaningful (e.g. <em>Metaproteomics tutorial</em>)</p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-creating-a-new-history\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-creating-a-new-history\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Creating a new history</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <p>Click the <i class=\"fas fa-plus\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">new-history</span> icon at the top of the history panel:</p>   <p><img src=\"/training-material/shared/images/history_create_new.svg\" alt=\"UI for creating new history\" /></p>   <!-- the original drawing can be found here https://docs.google.com/drawings/d/1cCBrLAo4kDGic5QyB70rRiWJAKTenTU8STsKDaLcVU8/edit?usp=sharing --> </blockquote>\n      <p><!--END_SNIPPET--></p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-renaming-a-history\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-renaming-a-history\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Renaming a history</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ol>   <li>Click on <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-pencil</span> (<strong>Edit</strong>) next to the history name (which by default is “Unnamed history”)</li>   <li>Type the new name</li>   <li>Click on <strong>Save</strong></li> </ol>   <p>If you do not have the <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-pencil</span> (<strong>Edit</strong>) next to the history name:</p>   <ol>   <li>Click on <strong>Unnamed history</strong> (or the current name of the history) (<strong>Click to rename history</strong>) at the top of your history panel</li>   <li>Type the new name</li>   <li>Press <kbd>Enter</kbd></li> </ol> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n    <li>\n      <p>Import the three MGF MS/MS files and the FASTA sequence file from Zenodo.</p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-importing-via-links\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-importing-via-links\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Importing via links</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ul>   <li>Copy the link location</li>   <li>     <p>Click <i class=\"fas fa-upload\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-upload</span> <strong>Upload Data</strong> at the top of the tool panel</p>   </li>   <li>Select <i class=\"fa fa-edit\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-wf-edit</span> <strong>Paste/Fetch Data</strong></li>   <li>     <p>Paste the link(s) into the text field</p>   </li>   <li>     <p>Press <strong>Start</strong></p>   </li>   <li><strong>Close</strong> the window</li> </ul> </blockquote>\n      <p><!--END_SNIPPET--></p>\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://zenodo.org/record/839701/files/2016_Jan_12_QE2_45.mgf\nhttps://zenodo.org/record/839701/files/2016_Jan_12_QE2_46.mgf\nhttps://zenodo.org/record/839701/files/2016_Jan_12_QE2_47.mgf\nhttps://zenodo.org/record/839701/files/FASTA_Bering_Strait_Trimmed_metapeptides_cRAP.fasta\nhttps://zenodo.org/record/839701/files/Gene_Ontology_Terms.tabular\n</code></pre></div>      </div>\n\n      <p>As default, Galaxy takes the link as name.</p>\n\n      <blockquote class=\"comment\">\n        <comment-title></comment-title>\n        <ul>\n          <li>Rename the datasets to a more descriptive name</li>\n        </ul>\n      </blockquote>\n    </li>\n    <li>\n      <p>Build a <strong>Dataset list</strong> for the three MGF files</p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-creating-a-dataset-collection\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-creating-a-dataset-collection\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Creating a dataset collection</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ul>   <li>Click on <i class=\"far fa-check-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-selector</span> <strong>Select Items</strong> at the top of the history panel <img src=\"/training-material/topics/galaxy-interface/images/historyItemControls.png\" alt=\"Select Items button\" /></li>   <li>Check all the datasets in your history you would like to include</li>   <li>     <p>Click <strong>n of N selected</strong> and choose <strong>Build Dataset List</strong></p>     <p><img src=\"/training-material/topics/galaxy-interface/images/buildList.png\" alt=\"build list collection menu item\" width=\"15%\" /></p>   </li>   <li>Enter a name for your collection</li>   <li>Click <strong>Create collection</strong> to build your collection</li>   <li>Click on the checkmark icon at the top of your history again</li> </ul> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>We have a choice to run all these steps using a single workflow, then discuss each step and the results in more detail.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Pretreatments</hands-on-title>\n\n  <ol>\n    <li>\n      <p><strong>Import the workflow</strong> into Galaxy:</p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"hands_on\">   <div class=\"box-title hands_on-title\" id=\"hands-on-importing-and-launching-a-gtn-workflow\"><i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i> Hands-on: Importing and launching a GTN workflow</div>   <div class=\"show-when-galaxy-proxy-active\"> <span class=\"workflow\" data-workflow=\"https://training.galaxyproject.org/training-material/api/ga4gh/trs/v2/tools/proteomics-metaproteomics/versions/workflow\">Launch <strong>Pretreatments</strong> <i class=\"fas fa-share-alt\" aria-hidden=\"true\"></i></span> (<a href=\"https://github.com/galaxyproject/training-material/blob/main/topics/proteomics/tutorials/metaproteomics/workflows/workflow.ga\">View on GitHub</a>, <a href=\"https://training.galaxyproject.org/training-material/topics/proteomics/tutorials/metaproteomics/workflows/workflow.ga\">Download workflow</a>) workflow. </div>   <div class=\"hide-when-galaxy-proxy-active\"> Click to  <a href=\"https://my.galaxy.training/?path=/workflows/trs_import%3Frun_form=true%26trs_url=https://training.galaxyproject.org/training-material/api/ga4gh/trs/v2/tools/proteomics-metaproteomics/versions/workflow\">     Launch <strong>Pretreatments</strong> <i class=\"fas fa-share-alt\" aria-hidden=\"true\"></i> </a> (<a href=\"https://github.com/galaxyproject/training-material/blob/main/topics/proteomics/tutorials/metaproteomics/workflows/workflow.ga\">View on GitHub</a>, <a href=\"https://training.galaxyproject.org/training-material/topics/proteomics/tutorials/metaproteomics/workflows/workflow.ga\">Download workflow</a>) </div>   <!--SNIPPET-->   <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-if-this-does-not-work\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-if-this-does-not-work\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: If this does not work</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ul>   <li>Click on <em>Workflow</em> on the top menu bar of Galaxy. You will see a list of all your workflows.</li>   <li>Click on <i class=\"fas fa-upload\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-upload</span> <strong>Import</strong> at the top-right of the screen</li>   <li>Paste the following URL into the box labelled <em>“Archived Workflow URL”</em>: <code class=\"language-plaintext highlighter-rouge\">https://training.galaxyproject.org/training-material/topics/proteomics/tutorials/metaproteomics/workflows/workflow.ga</code></li>   <li>Click the <strong>Import workflow</strong> button</li> </ul>   <p>Below is a short video demonstrating how to import a workflow from GitHub using this procedure:</p>   <figure> <iframe credentialless=\"\" allowfullscreen=\"\" referrerpolicy=\"no-referrer\" sandbox=\"allow-scripts allow-same-origin\" allow=\"accelerometer 'none'; ambient-light-sensor 'none'; autoplay 'none'; battery 'none'; bluetooth 'none'; browsing-topics 'none'; camera 'none'; ch-ua 'none'; display-capture 'none'; domain-agent 'none'; document-domain 'none'; encrypted-media 'none'; execution-while-not-rendered 'none'; execution-while-out-of-viewport 'none'; gamepad 'none'; geolocation 'none'; gyroscope 'none'; hid 'none'; identity-credentials-get 'none'; idle-detection 'none'; keyboard-map 'none'; local-fonts 'none'; magnetometer 'none'; microphone 'none'; midi 'none'; navigation-override 'none'; otp-credentials 'none'; payment 'none'; picture-in-picture 'none'; publickey-credentials-create 'none'; publickey-credentials-get 'none'; screen-wake-lock 'none'; serial 'none'; speaker-selection 'none'; sync-xhr 'none'; usb 'none'; web-share 'none'; window-management 'none'; xr-spatial-tracking 'none'\" csp=\"sandbox allow-scripts allow-same-origin;\" width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/hoP36Te5wko\" title=\"Importing a workflow from URL\" frameborder=\"0\" loading=\"lazy\"></iframe> <figcaption>   <span class=\"figcaption-prefix\"><strong>Video</strong>:</span> Importing a workflow from URL</figcaption> </figure> </blockquote>   <p><!--END_SNIPPET--></p> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n    <li>\n      <p>Run <strong>Workflow</strong> <i class=\"fas fa-share-alt\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">workflow</span> using the following parameters:</p>\n      <ul>\n        <li><em>“Send results to a new history”</em>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“1: SixGill generated protein fasta file”</em>: <code class=\"language-plaintext highlighter-rouge\">FASTA_Bering_Strait_Trimmed_metapeptides_cRAP.fasta</code></li>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“2: Dataset collection of Bering Strait MGF files”</em>: <code class=\"language-plaintext highlighter-rouge\">Dataset collection of bering MGF</code></li>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“3: GeneOntology terms (selected)”</em>: <code class=\"language-plaintext highlighter-rouge\">Gene_Ontology_terms.tabular</code></li>\n      </ul>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-running-a-workflow\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-running-a-workflow\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Running a workflow</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ul>   <li>Click on <em>Workflow</em> on the top menu bar of Galaxy. You will see a list of all your workflows.</li>   <li>Click on the <i class=\"fas fa-play\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">workflow-run</span> (<em>Run workflow</em>) button next to your workflow</li>   <li>Configure the workflow as needed</li>   <li>Click the <strong>Run Workflow</strong> button at the top-right of the screen</li>   <li>You may have to refresh your history to see the queued jobs</li> </ul> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h1 id=\"analysis\">Analysis</h1>\n\n<h2 id=\"match-peptide-sequences\">Match peptide sequences</h2>\n\n<p>The search database labelled <code class=\"language-plaintext highlighter-rouge\">FASTA_Bering_Strait_Trimmed_metapeptides_cRAP.FASTA</code> is the input database that\nwill be used to match MS/MS to peptide sequences via a sequence database search. It is a small excerpt of the original database, which was constructed based on a metagenomic screening of the sea water samples (see <span class=\"citation\"><a href=\"#May_2016\">May <i>et al.</i> 2016</a></span>). The full original database <a href=\"https://noble.gs.washington.edu/proj/metapeptide/data/metapeptides_BSt.fasta\">is available online</a>. The contaminant database (cRAP) was merged with the original database.</p>\n\n<p>For this, the sequence database-searching program called <a href=\"https://compomics.github.io/projects/searchgui.html\">SearchGUI</a> will be used.\nThe created dataset collection of the three <em>MGF files</em> in the history is used as the MS/MS input.</p>\n\n<h3 id=\"searchgui\">SearchGUI</h3>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>SearchGUI</hands-on-title>\n\n  <ol>\n    <li><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/galaxyp/peptideshaker/search_gui/3.3.10.1\" title=\"Search GUI tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Search GUI</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 3.3.10.1)</span> with the following parameters:\n      <ul>\n        <li><strong>Protein Database</strong>: <code class=\"language-plaintext highlighter-rouge\">FASTA_Bering_Strait_Trimmed_metapeptides_cRAP.FASTA</code>(or however you named the <code class=\"language-plaintext highlighter-rouge\">FASTA</code> file)</li>\n        <li><strong>Input Peak lists (mgf)</strong>: <code class=\"language-plaintext highlighter-rouge\">MGF files</code> dataset collection.</li>\n      </ul>\n\n      <blockquote class=\"tip\">\n        <tip-title>Select dataset collections as input</tip-title>\n\n        <ul>\n          <li>\n            <p>Click the <strong>Dataset collection</strong> icon on the left of the input field:</p>\n\n            <p><a href=\"../../images/dataset_button.png\" rel=\"noopener noreferrer\"><img src=\"../../images/dataset_button.png\" alt=\"Dataset collection button. \" width=\"168\" height=\"86\" loading=\"lazy\" /></a></p>\n          </li>\n          <li>\n            <p>Select the appropriate dataset collection from the list</p>\n          </li>\n        </ul>\n      </blockquote>\n\n      <p>Section <strong>Search Engine Options</strong>:</p>\n\n      <ul>\n        <li><strong>Search Engines</strong>: <code class=\"language-plaintext highlighter-rouge\">X!Tandem</code></li>\n      </ul>\n\n      <blockquote class=\"comment\">\n        <comment-title></comment-title>\n\n        <p>The section <strong>Search Engine Options</strong> contains a selection of sequence database searching\nalgorithms that are available in SearchGUI. Any combination of these programs can be used for\ngenerating PSMs from MS/MS data. For the purpose of this tutorial, <strong>X!Tandem</strong> we will be used.</p>\n      </blockquote>\n\n      <p>Section <strong>Precursor Options</strong>:</p>\n\n      <ul>\n        <li><strong>Fragment Tolerance Units</strong>: <code class=\"language-plaintext highlighter-rouge\">Daltons</code></li>\n        <li><strong>Fragment Tolerance</strong>: <code class=\"language-plaintext highlighter-rouge\">0.2</code>- this is high resolution MS/MS data</li>\n        <li><strong>Maximum Charge</strong>: <code class=\"language-plaintext highlighter-rouge\">6</code></li>\n      </ul>\n\n      <p>Section <strong>Protein Modification Options</strong>:</p>\n\n      <ul>\n        <li><strong>Fixed Modifications</strong>: <code class=\"language-plaintext highlighter-rouge\">Carbamidomethylation of C</code></li>\n        <li><strong>Variable modifications</strong>: <code class=\"language-plaintext highlighter-rouge\">Oxidation of M</code></li>\n      </ul>\n\n      <blockquote class=\"tip\">\n        <tip-title>Search for options</tip-title>\n\n        <ul>\n          <li>For selection lists, typing the first few letters in the window will filter the available options.</li>\n        </ul>\n      </blockquote>\n\n      <p>Section <strong>Advanced Options</strong>:</p>\n      <ul>\n        <li><strong>X!Tandem Options</strong>: <code class=\"language-plaintext highlighter-rouge\">Advanced</code></li>\n        <li><strong>X!Tandem: Quick Acetyl</strong>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n        <li><strong>X!Tandem: Quick Pyrolidone</strong>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n        <li><strong>X!Tandem: Protein stP Bias</strong>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n        <li>\n          <p><strong>X!Tandem: Maximum Valid Expectation Value</strong>: <code class=\"language-plaintext highlighter-rouge\">100</code></p>\n        </li>\n        <li>leave everything else as default</li>\n      </ul>\n    </li>\n    <li>Click <strong>Run Tool</strong>.</li>\n  </ol>\n\n</blockquote>\n\n<p>Once the database search is completed, the SearchGUI tool will output a file (called a\nSearchGUI archive file) that will serve as an input for the next section, PeptideShaker.</p>\n\n<blockquote class=\"comment\">\n  <comment-title></comment-title>\n  <p>Note that sequence databases used for metaproteomics are usually much larger than the excerpt used in this tutorial. When using large databases, the peptide identification step can take much more time for computation. In metaproteomics, choosing the optimal database is a crucial step of your workflow, for further reading see <a href=\"https://www.ncbi.nlm.nih.gov/pubmed/27824341\">Timmins-Schiffman et al (2017)</a>.</p>\n\n  <p>To learn more about database construction in general, like integrating contaminant databases or using a decoy strategy for FDR searching, please consult our tutorial on <a href=\"/training-material/topics/proteomics/tutorials/database-handling/tutorial.html\">Database Handling</a>.</p>\n\n</blockquote>\n\n<h3 id=\"peptideshaker\">PeptideShaker</h3>\n\n<p><a href=\"https://compomics.github.io/projects/peptide-shaker.html\">PeptideShaker</a> is a post-processing software tool that\nprocesses data from the SearchGUI software tool. It serves to organize the Peptide-Spectral\nMatches (PSMs) generated from SearchGUI processing and is contained in the SearchGUI archive.\nIt provides an assessment of confidence of the data, inferring proteins identified from the\nmatched peptide sequences and generates outputs that can be visualized by users to interpret\nresults. PeptideShaker has been wrapped in Galaxy to work in combination with SearchGUI\noutputs.</p>\n\n<blockquote class=\"comment\">\n  <comment-title></comment-title>\n  <p>There are a number of choices for different data files that can be generated using\nPeptideShaker. A compressed file can be made containing all information needed to view the\nresults in the standalone PeptideShaker viewer. A <code class=\"language-plaintext highlighter-rouge\">mzidentML</code> file can be created that contains\nall peptide sequence matching information and can be utilized by compatible downstream\nsoftware. Other outputs are focused on the inferred proteins identified from the PSMs, as well\nas phosphorylation reports, relevant if a phosphoproteomics experiment has been undertaken.\nMore detailed information on peptide inference using SearchGUI and PeptideShaker can be found in our tutorial on <a href=\"/training-material/topics/proteomics/tutorials/protein-id-sg-ps/tutorial.html\">Peptide and Protein ID</a>.</p>\n</blockquote>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>PeptideShaker</hands-on-title>\n\n  <ol>\n    <li><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/galaxyp/peptideshaker/peptide_shaker/1.16.36.3\" title=\"Peptide Shaker tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Peptide Shaker</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 1.16.36.3)</span> with the following parameters:\n      <ul>\n        <li><strong>Compressed SearchGUI results</strong>: The SearchGUI archive file</li>\n        <li><strong>Specify Advanced PeptideShaker Processing Options</strong>: <code class=\"language-plaintext highlighter-rouge\">Default Processing Options</code></li>\n        <li><strong>Specify Advanced Filtering Options</strong>: <code class=\"language-plaintext highlighter-rouge\">Advanced Filtering Options</code></li>\n        <li><strong>Maximum Precursor Error Type</strong>: <code class=\"language-plaintext highlighter-rouge\">Daltons</code></li>\n        <li><strong>Specify Contact Information for mzIdendML</strong>: You can leave the default dummy options for now, but feel free to enter custom contact information.</li>\n        <li><strong>Include the protein sequences in mzIdentML</strong>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n        <li><strong>Output options</strong>: Select the <code class=\"language-plaintext highlighter-rouge\">PSM Report</code> (Peptide-Spectral Match) and the <code class=\"language-plaintext highlighter-rouge\">Certificate of Analysis</code></li>\n      </ul>\n\n      <blockquote class=\"comment\">\n        <comment-title></comment-title>\n\n        <p>The <strong>Certificate of Analysis</strong> provides details on all the parameters\nused by both SearchGUI and PeptideShaker in the analysis. This can be downloaded from the\nGalaxy instance to your local computer in a text file if desired.</p>\n      </blockquote>\n    </li>\n    <li>Click <strong>Run Tool</strong> and inspect the resulting files after they turned green with the <strong>View data</strong> icon:\n <a href=\"../../images/view_data_icon.png\" rel=\"noopener noreferrer\"><img src=\"../../images/view_data_icon.png\" alt=\"View data button. \" width=\"281\" height=\"78\" loading=\"lazy\" /></a></li>\n  </ol>\n\n</blockquote>\n\n<p>A number of new items will appear in your history, each corresponding to the outputs selected\nin the PeptideShaker parameters. Most relevant for this tutorial is the PSM report:</p>\n\n<figure id=\"figure-1\" style=\"max-width: 90%;\"><img src=\"../../images/psm_report.png\" alt=\"Display of the PSM report tabular file. \" width=\"1268\" height=\"690\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/psm_report.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 1</strong>:</span> The PSM report</figcaption></figure>\n\n<p>Scrolling towards left will show the sequence for the PSM that matched to these\nmetapeptide entries. Column 3 is the sequence matched for each PSM entry. Every identified PSM is a\nnew row in the tabular output.</p>\n\n<p>In the following steps of this tutorial, selected portions of this output will be extracted and used for\nanalysis of the taxonomic make-up of the sample as well as the biochemical functions\nrepresented by the proteins identified.</p>\n\n<h2 id=\"taxonomy-analysis\">Taxonomy analysis</h2>\n\n<p>In the previous section, the genome sequencing and mass spectrometry data from\nprocessing of biological samples was used to identify peptides present in those samples.\nNow those peptides are used as evidence to infer which organisms are represented in the sample,\nand what biological functions those peptides and associated proteins suggest are occurring.</p>\n\n<p>The UniProt organization collects and annotates all known proteins for organisms. A UniProt\nentry includes the protein amino acid sequence, the NCBI taxonomy, and any annotations\nabout structure and function of the protein. The UniPept web resource developed\nby Ghent University will be used to match the sample peptides to proteins. UniPept indexes all Uniprot\nproteins and provides a fast matching algorithm for peptides.</p>\n\n<blockquote class=\"comment\">\n  <comment-title>Unipept</comment-title>\n\n  <p>Users can access UniPept via a <a href=\"https://unipept.ugent.be\">web page</a> and paste peptide\nsequences into the search form to retrieve protein information. But we’ll use the Galaxy\n<em>Unipept</em> tool to automate the process. The <em>Unipept</em> tool sends the peptide list to the\nUniPept REST API service, then transforms the results into datasets that can be further analyzed\nor operated on within Galaxy.</p>\n</blockquote>\n\n<h3 id=\"recieving-the-list-of-peptides-query-tabular\">Recieving the list of peptides: Query Tabular</h3>\n\n<p>In order to use <em>Unipept</em>, a list containing the peptide sequences has to be generated.\nThe tool <strong>Query Tabular</strong> can load tabular data (the PSM report in this case) into a SQLite data base.\nAs a tabular file is being read, line filters may be applied and an SQL query can be performed.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Query Tabular</hands-on-title>\n\n  <ol>\n    <li>\n      <p><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/iuc/query_tabular/query_tabular/3.0.0\" title=\"Query Tabular tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Query Tabular</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 3.0.0)</span> with the following parameters:</p>\n\n      <ul>\n        <li><strong>Database Table</strong>: Click on <code class=\"language-plaintext highlighter-rouge\">+ Insert Database Table</code>:</li>\n        <li><strong>Tabular Dataset for Table</strong>: The PSM report</li>\n      </ul>\n\n      <p>Section <strong>Filter Dataset Input</strong>:</p>\n\n      <ul>\n        <li><strong>Filter Tabular Input Lines</strong>: Click on <code class=\"language-plaintext highlighter-rouge\">+ Insert Filter Tabular Input Lines</code>:</li>\n        <li><strong>Filter By</strong>: Select <code class=\"language-plaintext highlighter-rouge\">by regex expression matching</code>\n          <ul>\n            <li><strong>regex pattern</strong>: <code class=\"language-plaintext highlighter-rouge\">^\\d</code></li>\n            <li><strong>action for regex match</strong>: <code class=\"language-plaintext highlighter-rouge\">include line on pattern match</code></li>\n          </ul>\n        </li>\n      </ul>\n\n      <p>Section <strong>Table Options</strong>:</p>\n\n      <ul>\n        <li><strong>Specify Name for Table</strong>: <code class=\"language-plaintext highlighter-rouge\">psm</code></li>\n        <li>\n          <p><strong>Specify Column Names (comma-separated list)</strong>: <code class=\"language-plaintext highlighter-rouge\">id,,sequence,,,,,,,,,,,,,,,,,,,,confidence,validation</code></p>\n\n          <blockquote class=\"comment\">\n            <comment-title></comment-title>\n\n            <p>By default, table columns will be named: c1,c2,c3,…,cn (column names for a table must be unique).\nYou can override the default names by entering a comma separated list of names, e.g. <code class=\"language-plaintext highlighter-rouge\">,name1,,,name2</code>\nwould rename the second and fifth columns.</p>\n\n            <p>Check your input file to find the settings which best fits your needs.</p>\n          </blockquote>\n        </li>\n        <li>\n          <p><strong>Only load the columns you have named into database</strong>: <code class=\"language-plaintext highlighter-rouge\">Yes</code></p>\n        </li>\n        <li>\n          <p><strong>Save the sqlite database in your history</strong>: <code class=\"language-plaintext highlighter-rouge\">Yes</code></p>\n\n          <blockquote class=\"comment\">\n            <comment-title>Querying SQLite Databases</comment-title>\n\n            <ul>\n              <li><strong>Query Tabular</strong> can also use an existing SQLite database. Activating <code class=\"language-plaintext highlighter-rouge\">Save the sqlite database in your history</code>\nwill store the created database in the history, allowing to reuse it directly.</li>\n            </ul>\n\n          </blockquote>\n        </li>\n        <li>\n          <p><strong>SQL Query to generate tabular output</strong>:</p>\n\n          <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT distinct sequence\n\nFROM psm\n\nWHERE confidence &gt;= 95\n\nORDER BY sequence\n</code></pre></div>          </div>\n        </li>\n      </ul>\n\n      <blockquote class=\"question\">\n        <question-title></question-title>\n\n        <p>The SQL query might look confusing at first, but having a closer look should clarify a lot.</p>\n\n        <ol>\n          <li>What does <code class=\"language-plaintext highlighter-rouge\">FROM psm</code> mean?</li>\n          <li>What need to be changed if we only want peptides with a confidence higher then 98%?</li>\n        </ol>\n\n        <blockquote class=\"solution\">\n          <solution-title></solution-title>\n          <ol>\n            <li>We want to read from table “psm”. We defined the name before in the “Specify Name for Table” option.</li>\n            <li>We need to change the value in line 3: “WHERE validation IS NOT ‘Confident’ AND confidence &gt;= 98”</li>\n          </ol>\n        </blockquote>\n      </blockquote>\n\n      <ul>\n        <li><strong>include query result column headers</strong>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n      </ul>\n    </li>\n    <li>\n      <p>Click <strong>Run Tool</strong> and inspect the query results file after it turned green. If everything went well, it should look similiar:</p>\n\n      <figure id=\"figure-2\" style=\"max-width: 90%;\"><img src=\"../../images/query_tabular_1.png\" alt=\"Query Tabular output showing the peptides. \" width=\"590\" height=\"460\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/query_tabular_1.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 2</strong>:</span> Query Tabular output</figcaption></figure>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>While we can proceed with this list of peptides, let’s practice using the created SQLite database for further queries.\nWe might not only be interested in all the distinct peptides, but also on how many PSMs a single peptide had.\nTherefore we can search the database for the peptides and count the occurrence without configuring the tables and columns again:</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>SQLite to tabular</hands-on-title>\n\n  <ol>\n    <li>\n      <p><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/iuc/sqlite_to_tabular/sqlite_to_tabular/2.0.0\" title=\"SQLite to tabular tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>SQLite to tabular</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 2.0.0)</span> with the following parameters:</p>\n\n      <ul>\n        <li>\n          <p><strong>SQL Query</strong>:</p>\n\n          <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT sequence as \"peptide\", count(id) as \"PSMs\"\n\nFROM psm\n\nWHERE confidence &gt;= 95\n\nGROUP BY sequence\n\nORDER BY sequence\n</code></pre></div>          </div>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <p>Click <strong>Run Tool</strong>. The resulting file should have two columns, one with the distinct peptides, the other with the count number of PSMs.</p>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h3 id=\"retrieve-taxonomy-for-peptides-unipept\">Retrieve taxonomy for peptides: Unipept</h3>\n\n<p>The generated list of peptides can now be used to search via <em>Unipept</em>.\nWe do a taxonomy analysis using the UniPept pept2lca function to return the taxonomic lowest common ancestor for each peptide:</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Unipept</hands-on-title>\n\n  <ol>\n    <li>\n      <p><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/galaxyp/unipept/unipept/4.3.0\" title=\"Unipept tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Unipept</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 4.3.0)</span> with the following parameters:</p>\n\n      <ul>\n        <li><strong>Unipept application</strong>: <code class=\"language-plaintext highlighter-rouge\">pept2lca: lowest common ancestor</code></li>\n        <li><strong>Peptides input format</strong>: <code class=\"language-plaintext highlighter-rouge\">tabular</code></li>\n        <li><strong>Tabular Input Containing Peptide column</strong>: The query results file.</li>\n        <li><strong>Select column with peptides</strong>: <code class=\"language-plaintext highlighter-rouge\">Column 1</code></li>\n        <li><strong>Choose outputs</strong>: Select <code class=\"language-plaintext highlighter-rouge\">tabular</code> and <code class=\"language-plaintext highlighter-rouge\">JSON taxonomy tree</code></li>\n      </ul>\n    </li>\n    <li>\n      <p>Click <strong>Run Tool</strong>. The history should grow by two files. View each to see the difference.</p>\n\n      <blockquote class=\"comment\">\n        <comment-title></comment-title>\n\n        <p>The JSON (JavaScript Object Notation) file contains the same information as the tabular file but is not comfortably human readable.\nInstead, we can use it to use JavaScript libraries to visualize this data.</p>\n      </blockquote>\n    </li>\n    <li>\n      <p>Visualize the data:</p>\n\n      <ul>\n        <li>\n          <p>Click on the JSON output file from the <em>Unipept</em> tool to expand it. Click on the <strong>Visualize</strong> button and select <strong>Unipept Tree viewer</strong>:</p>\n\n          <p><a href=\"../../images/visualize_button.png\" rel=\"noopener noreferrer\"><img src=\"../../images/visualize_button.png\" alt=\"Visualize button. \" width=\"289\" height=\"223\" loading=\"lazy\" /></a></p>\n        </li>\n        <li>\n          <p>A new window should appear with a visualization of the taxonomy tree of your data. Use the mouse wheel to scroll in and out and click on nodes to expand or collapse them:</p>\n\n          <figure id=\"figure-3\" style=\"max-width: 90%;\"><img src=\"../../images/unipept_tree_viewer.png\" alt=\"Unipept Tree viewer visual output. \" width=\"1263\" height=\"665\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/unipept_tree_viewer.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 3</strong>:</span> Interactive visualization from the Unipept Tree viever plugin</figcaption></figure>\n        </li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"genus-taxonomy-level-summary\">Genus taxonomy level summary</h2>\n\n<p>The tabular <em>Unipept</em> output lists the taxonomy assignments for each peptide. To create a meaningful summary, the <strong>Query Tabular</strong> tool is\nonce again used, aggregating the number of peptides and PSMs for each genus level taxonomy assignment:</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Query Tabular</hands-on-title>\n\n  <ol>\n    <li>\n      <p><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/iuc/query_tabular/query_tabular/3.0.0\" title=\"Query Tabular tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Query Tabular</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 3.0.0)</span> with the following parameters:</p>\n\n      <ul>\n        <li><strong>Database Table</strong>: Click on <code class=\"language-plaintext highlighter-rouge\">+ Insert Database Table</code></li>\n        <li><strong>Tabular Dataset for Table</strong>: The PSM report</li>\n      </ul>\n\n      <p>Section <strong>Filter Dataset Input</strong>:</p>\n\n      <ul>\n        <li><strong>Filter Tabular Input Lines</strong>: Click on <code class=\"language-plaintext highlighter-rouge\">+ Insert Filter Tabular Input Lines</code>:</li>\n        <li><strong>Filter By</strong>: Select <code class=\"language-plaintext highlighter-rouge\">by regex expression matching</code>\n          <ul>\n            <li><strong>regex pattern</strong>: <code class=\"language-plaintext highlighter-rouge\">^\\d</code></li>\n            <li><strong>action for regex match</strong>: <code class=\"language-plaintext highlighter-rouge\">include line on pattern match</code></li>\n          </ul>\n        </li>\n      </ul>\n\n      <p>Section <strong>Table Options</strong>:</p>\n\n      <ul>\n        <li><strong>Specify Name for Table</strong>: <code class=\"language-plaintext highlighter-rouge\">psm</code></li>\n        <li>\n          <p><strong>Specify Column Names (comma-separated list)</strong>: <code class=\"language-plaintext highlighter-rouge\">,,sequence,,,,,,,,,,,,,,,,,,,,confidence,validation</code></p>\n        </li>\n        <li><strong>Only load the columns you have named into database</strong>: <code class=\"language-plaintext highlighter-rouge\">Yes</code></li>\n      </ul>\n    </li>\n    <li>\n      <p>Repeat this step to have a second <strong>Database Table</strong>:</p>\n\n      <ul>\n        <li><strong>Database Table</strong>: Click on <code class=\"language-plaintext highlighter-rouge\">+ Insert Database Table</code></li>\n        <li><strong>Tabular Dataset for Table</strong>: The <strong>Unipept</strong> <code class=\"language-plaintext highlighter-rouge\">tabular</code>/<code class=\"language-plaintext highlighter-rouge\">tsv</code> output</li>\n      </ul>\n\n      <p>Section <strong>Filter Dataset Input</strong>:</p>\n\n      <ul>\n        <li><strong>Filter Tabular Input Lines</strong>: Click on <code class=\"language-plaintext highlighter-rouge\">+ Insert Filter Tabular Input Lines</code>:</li>\n        <li><strong>Filter By</strong>: Select <code class=\"language-plaintext highlighter-rouge\">by regex expression matching</code>\n          <ul>\n            <li><strong>regex pattern</strong>: <code class=\"language-plaintext highlighter-rouge\">#peptide</code></li>\n            <li><strong>action for regex match</strong>: <code class=\"language-plaintext highlighter-rouge\">exclude line on pattern match</code></li>\n          </ul>\n        </li>\n      </ul>\n\n      <p>Section <strong>Table Options</strong>:</p>\n\n      <ul>\n        <li><strong>Specify Name for Table</strong>: <code class=\"language-plaintext highlighter-rouge\">lca</code></li>\n        <li>\n          <p><strong>Specify Column Names (comma-separated list)</strong>: <code class=\"language-plaintext highlighter-rouge\">peptide,,,,,,,,,,,,,,,,,,,,,genus</code></p>\n        </li>\n        <li>\n          <p><strong>Only load the columns you have named into database</strong>: <code class=\"language-plaintext highlighter-rouge\">Yes</code></p>\n        </li>\n        <li>\n          <p><strong>Save the sqlite database in your history</strong>: <code class=\"language-plaintext highlighter-rouge\">Yes</code></p>\n        </li>\n        <li>\n          <p><strong>SQL Query to generate tabular output</strong>:</p>\n\n          <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT lca.genus,count(psm.sequence) as \"PSMs\",count(distinct psm.sequence) as \"DISTINCT PEPTIDES\"\n\nFROM psm LEFT JOIN lca ON psm.sequence = lca.peptide\n\nWHERE confidence &gt;= 95\n\nGROUP BY lca.genus\n\nORDER BY PSMs desc, 'DISTINCT PEPTIDES' desc\n</code></pre></div>          </div>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <p>Click <strong>Run Tool</strong> and inspect the query results file after it turned green:</p>\n\n      <figure id=\"figure-4\" style=\"max-width: 90%;\"><img src=\"../../images/metaproteomics_summary.png\" alt=\"Query Tabular output showing gene, PSMs and distinct peptides. \" width=\"399\" height=\"495\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/metaproteomics_summary.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 4</strong>:</span> Query Tabular output</figcaption></figure>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"functional-analysis\">Functional Analysis</h2>\n\n<p>Recent advances in microbiome research indicate that functional characterization via metaproteomics analysis has the potential to accurately\nmeasure the microbial response to perturbations. In particular, metaproteomics enables the estimation of the function of the microbial\ncommunity based on expressed microbial proteome.</p>\n\n<p>In the following chapter, a functional analysis will be performed using the <strong>UniPept</strong> application <code class=\"language-plaintext highlighter-rouge\">pept2prot</code> in order to match the list of peptides with the correlated Gene Ontology terms.\nThis allows to get an insight of the <strong>biological process</strong>, the <strong>molecular function</strong> and the <strong>cellular component</strong> related to the sample data.</p>\n\n<blockquote class=\"comment\">\n  <comment-title>Gene Ontology (GO) Consortium</comment-title>\n\n  <p>The <a href=\"http://www.geneontology.org/\">Gene Ontology Consortium</a> provides with its Ontology a framework for the model of biology.\nThe GO defines concepts/classes used to describe gene function, and relationships between these concepts. It classifies functions along three aspects:</p>\n\n  <ul>\n    <li>\n      <p><strong>molecular function</strong></p>\n\n      <ul>\n        <li>molecular activities of gene products</li>\n      </ul>\n    </li>\n    <li>\n      <p><strong>cellular component</strong></p>\n\n      <ul>\n        <li>where gene products are active</li>\n      </ul>\n    </li>\n    <li>\n      <p><strong>biological process</strong></p>\n\n      <ul>\n        <li>pathways and larger processes made up of the activities of multiple gene products.</li>\n      </ul>\n    </li>\n  </ul>\n\n  <p><a href=\"http://geneontology.org/page/ontology-documentation\">more information</a></p>\n\n</blockquote>\n\n<h3 id=\"data-upload-1\">Data upload</h3>\n\n<p>For this tutorial, a tabular file containing the relevant GO terms has been created. It contains the GO aspect, the ID and the name.\nIt is available at Zenodo: <a href=\"https://doi.org/10.5281/zenodo.839701\"><a href=\"https://zenodo.org/badge/DOI/10.5281/zenodo.839701.svg\" rel=\"noopener noreferrer\"><img src=\"https://zenodo.org/badge/DOI/10.5281/zenodo.839701.svg\" alt=\"DOI. \" loading=\"lazy\" /></a></a>.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Data upload</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Import the file <code class=\"language-plaintext highlighter-rouge\">Gene_Ontology_Terms.tabular</code> from Zenodo.</p>\n\n      <blockquote class=\"tip\">\n        <tip-title>Setting file metadata on upload</tip-title>\n\n        <p>In the upload window of Galaxy you can set the filetype and related genome of the file you’re uploading in the corresponding columns beforehand.\nThis might be handy if the automatic detection of the filetype didn’t work out perfectly or if you want to avoid setting the genome later on, especially for multiple files.</p>\n\n      </blockquote>\n\n      <p>As default, Galaxy takes the link as name.</p>\n\n      <blockquote class=\"comment\">\n        <comment-title></comment-title>\n        <ul>\n          <li>Rename the datasets to a more descriptive name, e.g. <code class=\"language-plaintext highlighter-rouge\">Gene Ontology Terms</code></li>\n        </ul>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<blockquote class=\"details\">\n  <details-title>Creating your own Gene Ontology list</details-title>\n\n  <p>The latest Gene Ontology can be downloaded <a href=\"http://geneontology.org/page/download-ontology\">the GO website</a> as a text file in the <code class=\"language-plaintext highlighter-rouge\">OBO</code> format.\n<code class=\"language-plaintext highlighter-rouge\">OBO</code> files are human-readable (in addition to machine-readable) and can be opened in any text editor. They contain more information than just the name and aspect.</p>\n\n  <p>In order to receive a file like we use in the tutorial for your own analysis, different tools are available to extract information from <code class=\"language-plaintext highlighter-rouge\">OBO</code> files,\none of them being ONTO-PERL (<span class=\"citation\"><a href=\"#Antezana_2008\">Antezana <i>et al.</i> 2008</a></span>).\nAn example file with all GO terms from 08.07.2017 named <code class=\"language-plaintext highlighter-rouge\">Gene_Ontology_Terms_full_07.08.2017.tabular</code> can be found on the <a href=\"https://doi.org/10.5281/zenodo.839701\">Zenodo repository</a> of this tutorial as well.\nYou could also upload the Gene Ontology Terms by copying this link on to the Upload Data - Paste/Fetch data <code class=\"language-plaintext highlighter-rouge\">https://zenodo.org/record/839701/files/Gene_Ontology_Terms_full_07.08.2017.tabular</code></p>\n\n</blockquote>\n\n<h3 id=\"retrieve-go-ids-for-peptides-unipept\">Retrieve GO IDs for peptides: Unipept</h3>\n\n<p>The <strong>UniPept</strong> application <code class=\"language-plaintext highlighter-rouge\">pept2prot</code> can be used to return the list of proteins containing each peptide.\nThe option <code class=\"language-plaintext highlighter-rouge\">retrieve extra information</code> option is set to <code class=\"language-plaintext highlighter-rouge\">yes</code> so that we retrieve Gene Ontology assignments (<code class=\"language-plaintext highlighter-rouge\">go_references</code>)\nfor each protein.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Unipept</hands-on-title>\n\n  <ol>\n    <li>\n      <p><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/galaxyp/unipept/unipept/4.3.0\" title=\"Unipept tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Unipept</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 4.3.0)</span> with the following parameters:</p>\n\n      <ul>\n        <li><strong>Unipept application</strong>: <code class=\"language-plaintext highlighter-rouge\">pept2prot: UniProt entries containing a given tryptic peptide</code></li>\n        <li><strong>retrieve extra information</strong>: <code class=\"language-plaintext highlighter-rouge\">Yes</code></li>\n        <li><strong>Peptides input format</strong>: <code class=\"language-plaintext highlighter-rouge\">tabular</code></li>\n        <li><strong>Tabular Input Containing Peptide column</strong>: The first query results file.</li>\n        <li><strong>Select column with peptides</strong>: <code class=\"language-plaintext highlighter-rouge\">Column 1</code></li>\n        <li><strong>Choose outputs</strong>: Select <code class=\"language-plaintext highlighter-rouge\">tabular</code></li>\n      </ul>\n    </li>\n    <li>\n      <p>Click <strong>Run Tool</strong>.</p>\n    </li>\n    <li>\n      <p>inspect the result:</p>\n\n      <ul>\n        <li>The output should be a tabular file containing a column labeled <code class=\"language-plaintext highlighter-rouge\">go_references</code>. This is what we’re looking for.</li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h3 id=\"combine-all-information-to-quantify-the-go-results\">Combine all information to quantify the GO results</h3>\n\n<p>As a final step we will use <strong>Query Tabular</strong> in a more sophisticated way to combine all information to quantify the GO analysis. The three used file and the extracted information are:</p>\n\n<ul>\n  <li><strong>Gene Ontology Terms</strong>:\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">go_id</code> to match with <strong>Normalized UniPept output</strong></li>\n      <li>The GO <code class=\"language-plaintext highlighter-rouge\">aspect</code> to group the results in three separate files</li>\n      <li>The GO <code class=\"language-plaintext highlighter-rouge\">description</code> to annotate the results</li>\n    </ul>\n  </li>\n  <li><strong>Normalized UniPept output</strong>:\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">peptide</code> to match with <strong>PSM Report</strong> and to count distinct peptides per GO term</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">go_reference</code> to match with <strong>Gene Ontology Terms</strong></li>\n    </ul>\n  </li>\n  <li><strong>PSM Report</strong>:\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">sequence</code> to match with <strong>Normalized UniPept output</strong></li>\n      <li><code class=\"language-plaintext highlighter-rouge\">id</code> to count distinct PSM’s per GO term</li>\n    </ul>\n  </li>\n</ul>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Query Tabular</hands-on-title>\n\n  <ol>\n    <li>\n      <p><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/iuc/query_tabular/query_tabular/3.0.0\" title=\"Query Tabular tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Query Tabular</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 3.0.0)</span> with the following parameters:</p>\n\n      <ul>\n        <li><strong>Database Table</strong>: Click on <code class=\"language-plaintext highlighter-rouge\">+ Insert Database Table</code></li>\n        <li><strong>Tabular Dataset for Table</strong>: The <code class=\"language-plaintext highlighter-rouge\">Gene Ontology Terms</code> file</li>\n      </ul>\n\n      <p>Section <strong>Filter Dataset Input</strong>:</p>\n\n      <ul>\n        <li><strong>Filter Tabular Input Lines</strong>: Click on <code class=\"language-plaintext highlighter-rouge\">+ Insert Filter Tabular Input Lines</code>:</li>\n        <li><strong>Filter By</strong>: Select <code class=\"language-plaintext highlighter-rouge\">skip leading lines</code>\n          <ul>\n            <li><strong>Skip lines</strong>: <code class=\"language-plaintext highlighter-rouge\">1</code></li>\n          </ul>\n        </li>\n      </ul>\n\n      <p>Section <strong>Table Options</strong>:</p>\n\n      <ul>\n        <li><strong>Specify Name for Table</strong>: <code class=\"language-plaintext highlighter-rouge\">go</code></li>\n        <li><strong>Specify Column Names (comma-separated list)</strong>: <code class=\"language-plaintext highlighter-rouge\">aspect,go_id,description</code></li>\n        <li><strong>Table Index</strong>: Click on <code class=\"language-plaintext highlighter-rouge\">+ Insert Table Index</code>:\n          <ul>\n            <li><strong>This is a unique index</strong>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n            <li><strong>Index on Columns</strong>: <code class=\"language-plaintext highlighter-rouge\">aspect,go_id</code></li>\n          </ul>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <p>Repeat this step to have a second <strong>Database Table</strong>:</p>\n\n      <ul>\n        <li><strong>Database Table</strong>: Click on <code class=\"language-plaintext highlighter-rouge\">+ Insert Database Table</code></li>\n        <li><strong>Tabular Dataset for Table</strong>: The <strong>Unipept</strong> <code class=\"language-plaintext highlighter-rouge\">tabluar</code>/<code class=\"language-plaintext highlighter-rouge\">tsv</code> output</li>\n      </ul>\n\n      <p>Section <strong>Filter Dataset Input</strong>:</p>\n\n      <ul>\n        <li><strong>Filter Tabular Input Lines</strong>: Click on <code class=\"language-plaintext highlighter-rouge\">+ Insert Filter Tabular Input Lines</code>:</li>\n        <li><strong>Filter By</strong>: Select <code class=\"language-plaintext highlighter-rouge\">skip leading lines</code>\n          <ul>\n            <li><strong>Skip lines</strong>: <code class=\"language-plaintext highlighter-rouge\">1</code></li>\n          </ul>\n        </li>\n        <li>Add another Filter: Click on <code class=\"language-plaintext highlighter-rouge\">+ Insert Filter Tabular Input Lines</code>:</li>\n        <li><strong>Filter By</strong>: Select <code class=\"language-plaintext highlighter-rouge\">prepend a line number column</code></li>\n      </ul>\n\n      <p>Section <strong>Table Options</strong>:</p>\n\n      <ul>\n        <li><strong>Specify Name for Table</strong>: <code class=\"language-plaintext highlighter-rouge\">bering_prot</code></li>\n        <li><strong>Specify Column Names (comma-separated list)</strong>: <code class=\"language-plaintext highlighter-rouge\">id,peptide,uniprot_id,taxon_id,taxon_name,ec_references,go_references,refseq_ids,refseq_protein_ids,insdc_ids,insdc_protein_ids</code></li>\n        <li><strong>Table Index</strong>: Click on <code class=\"language-plaintext highlighter-rouge\">+ Insert Table Index</code>:\n          <ul>\n            <li><strong>This is a unique index</strong>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n            <li><strong>Index on Columns</strong>: <code class=\"language-plaintext highlighter-rouge\">id,peptide</code></li>\n          </ul>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <p>Repeat this step to have another <strong>Database Table</strong>:</p>\n\n      <ul>\n        <li><strong>Database Table</strong>: Click on <code class=\"language-plaintext highlighter-rouge\">+ Insert Database Table</code></li>\n        <li><strong>Tabular Dataset for Table</strong>: The same <strong>Unipept</strong> <code class=\"language-plaintext highlighter-rouge\">tabluar</code>/<code class=\"language-plaintext highlighter-rouge\">tsv</code> output</li>\n      </ul>\n\n      <p>Section <strong>Filter Dataset Input</strong>:</p>\n\n      <ul>\n        <li><strong>Filter Tabular Input Lines</strong>: Click on <code class=\"language-plaintext highlighter-rouge\">+ Insert Filter Tabular Input Lines</code>:</li>\n        <li><strong>Filter By</strong>: Select <code class=\"language-plaintext highlighter-rouge\">skip leading lines</code>\n          <ul>\n            <li><strong>Skip lines</strong>: <code class=\"language-plaintext highlighter-rouge\">1</code></li>\n          </ul>\n        </li>\n        <li>Add another Filter: Click on <code class=\"language-plaintext highlighter-rouge\">+ Insert Filter Tabular Input Lines</code>:</li>\n        <li><strong>Filter By</strong>: Select <code class=\"language-plaintext highlighter-rouge\">prepend a line number column</code></li>\n        <li>Add another Filter: Click on <code class=\"language-plaintext highlighter-rouge\">+ Insert Filter Tabular Input Lines</code>:</li>\n        <li><strong>Filter By</strong>: Select <code class=\"language-plaintext highlighter-rouge\">select columns</code>\n          <ul>\n            <li><strong>enter column numbers to keep</strong>: <code class=\"language-plaintext highlighter-rouge\">1,7</code></li>\n          </ul>\n        </li>\n        <li>Add another Filter: Click on <code class=\"language-plaintext highlighter-rouge\">+ Insert Filter Tabular Input Lines</code>:</li>\n        <li><strong>Filter By</strong>: Select <code class=\"language-plaintext highlighter-rouge\">normalize list columns, replicates row for each item in list</code>\n          <ul>\n            <li><strong>enter column numbers to normalize</strong>: <code class=\"language-plaintext highlighter-rouge\">2</code></li>\n            <li><strong>List item delimiter in column</strong>: ` ` (a single blank character)</li>\n          </ul>\n        </li>\n      </ul>\n\n      <blockquote class=\"comment\">\n        <comment-title></comment-title>\n        <ul>\n          <li>The UniPept result file can contain multiple GO IDs in a single row. In order to create a normalized table of this data, these rows will be split so each record contains only one GO ID.</li>\n        </ul>\n      </blockquote>\n\n      <p>Section <strong>Table Options</strong>:</p>\n\n      <ul>\n        <li><strong>Specify Name for Table</strong>: <code class=\"language-plaintext highlighter-rouge\">bering_prot_go</code></li>\n        <li><strong>Specify Column Names (comma-separated list)</strong>: <code class=\"language-plaintext highlighter-rouge\">id,go_reference</code></li>\n        <li><strong>Table Index</strong>: Click on <code class=\"language-plaintext highlighter-rouge\">+ Insert Table Index</code>:\n          <ul>\n            <li><strong>This is a unique index</strong>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n            <li><strong>Index on Columns</strong>: <code class=\"language-plaintext highlighter-rouge\">go_reference,id</code></li>\n          </ul>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <p>Repeat this step to have another <strong>Database Table</strong>:</p>\n\n      <ul>\n        <li><strong>Database Table</strong>: Click on <code class=\"language-plaintext highlighter-rouge\">+ Insert Database Table</code></li>\n        <li><strong>Tabular Dataset for Table</strong>: The <code class=\"language-plaintext highlighter-rouge\">PSM Report</code></li>\n      </ul>\n\n      <p>Section <strong>Filter Dataset Input</strong>:</p>\n\n      <ul>\n        <li><strong>Filter Tabular Input Lines</strong>: Click on <code class=\"language-plaintext highlighter-rouge\">+ Insert Filter Tabular Input Lines</code>:</li>\n        <li><strong>Filter By</strong>: Select <code class=\"language-plaintext highlighter-rouge\">by regex expression matching</code>\n          <ul>\n            <li><strong>regex pattern</strong>: <code class=\"language-plaintext highlighter-rouge\">^\\d</code></li>\n            <li><strong>action for regex match</strong>: <code class=\"language-plaintext highlighter-rouge\">include line on pattern match</code></li>\n          </ul>\n        </li>\n        <li>Add another Filter: Click on <code class=\"language-plaintext highlighter-rouge\">+ Insert Filter Tabular Input Lines</code>:</li>\n        <li><strong>Filter By</strong>: Select <code class=\"language-plaintext highlighter-rouge\">select columns</code>\n          <ul>\n            <li><strong>enter column numbers to keep</strong>: <code class=\"language-plaintext highlighter-rouge\">1,3,23,24</code></li>\n          </ul>\n        </li>\n      </ul>\n\n      <p>Section <strong>Table Options</strong>:</p>\n\n      <ul>\n        <li><strong>Specify Name for Table</strong>: <code class=\"language-plaintext highlighter-rouge\">bering_psms</code></li>\n        <li><strong>Specify Column Names (comma-separated list)</strong>: <code class=\"language-plaintext highlighter-rouge\">id,sequence,confidence,validation</code></li>\n        <li><strong>Only load the columns you have named into database</strong>: <code class=\"language-plaintext highlighter-rouge\">Yes</code></li>\n        <li><strong>Table Index</strong>: Click on <code class=\"language-plaintext highlighter-rouge\">+ Insert Table Index</code>:\n          <ul>\n            <li><strong>This is a unique index</strong>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n            <li><strong>Index on Columns</strong>: <code class=\"language-plaintext highlighter-rouge\">sequence,id</code></li>\n          </ul>\n        </li>\n        <li>\n          <p><strong>Save the sqlite database in your history</strong>: <code class=\"language-plaintext highlighter-rouge\">Yes</code></p>\n        </li>\n        <li>\n          <p><strong>SQL Query to generate tabular output</strong>:</p>\n\n          <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT sequence as \"peptide\", count(id) as \"PSMs\"\n\nFROM bering_psms\n\nWHERE confidence &gt;= 95\n\nGROUP BY sequence\n\nORDER BY sequence\n</code></pre></div>          </div>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <p>Click <strong>Run Tool</strong>.</p>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>With this we have combined all the data into a single database which we can now query to extract the desired information with <strong>SQLite to tabular</strong>:</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>SQLite to tabular</hands-on-title>\n\n  <ol>\n    <li>\n      <p><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/iuc/sqlite_to_tabular/sqlite_to_tabular/2.0.0\" title=\"SQLite to tabular tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>SQLite to tabular</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 2.0.0)</span> with the following parameters:</p>\n\n      <ul>\n        <li><strong>SQLite Database</strong>: The created SQLite database from the former step</li>\n        <li>\n          <p><strong>SQL Query</strong>:</p>\n\n          <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT go.description,\n\ncount(distinct bering_psms.sequence) as \"bering_peptides\", count(distinct bering_psms.id) as \"bering_psms\"\n\nFROM go JOIN bering_prot_go ON go.go_id = bering_prot_go.go_reference JOIN bering_prot on bering_prot_go.id = bering_prot.id JOIN\n\nbering_psms ON bering_prot.peptide = bering_psms.sequence\n\nWHERE go.aspect = 'molecular_function'\n\nGROUP BY go.description\n\nORDER BY  bering_peptides desc,bering_psms desc\n</code></pre></div>          </div>\n        </li>\n      </ul>\n    </li>\n    <li>Click <strong>Run Tool</strong>.</li>\n    <li>Repeat these steps two times by replacing <code class=\"language-plaintext highlighter-rouge\">molecular_function</code> in the fifth row of the SQL query by <code class=\"language-plaintext highlighter-rouge\">biological_process</code> and <code class=\"language-plaintext highlighter-rouge\">cellular_component</code>.</li>\n  </ol>\n\n</blockquote>\n\n<p>With these three output files the functional analysis of this tutorial is finished. Each record contains the name of a GO term, the amount of peptides related to it and the amount of PSMs for these peptides.</p>\n\n<blockquote class=\"comment\">\n  <comment-title>References</comment-title>\n\n  <ul>\n    <li>\n      <p><a href=\"https://www.ncbi.nlm.nih.gov/pubmed/27824341\">Dataset</a> and <a href=\"https://www.ncbi.nlm.nih.gov/pubmed/27396978\">SixGill software</a></p>\n    </li>\n    <li>\n      <p><a href=\"https://www.ncbi.nlm.nih.gov/pubmed/26058579\">Galaxy workflows for metaproteomics</a></p>\n    </li>\n    <li>\n      <p><a href=\"https://z.umn.edu/gcc2017mporal\">Metaproteomics community effort</a></p>\n    </li>\n    <li>\n      <p><a href=\"https://www.ncbi.nlm.nih.gov/pubmed/28552653\">Unipept</a></p>\n    </li>\n    <li>\n      <p><a href=\"http://z.umn.edu/mpvideo2018\">Metaproteomics video</a></p>\n    </li>\n  </ul>\n</blockquote>\n\n"],"ref_slides":[],"hands_on":true,"slides":false,"mod_date":"2024-05-29 14:28:52 +0000","pub_date":"2017-06-28 13:33:16 +0000","version":57,"workflows":[{"workflow":"workflow.ga","tests":false,"url":"https://training.galaxyproject.org/training-material/topics/proteomics/tutorials/metaproteomics/workflows/workflow.ga","path":"topics/proteomics/tutorials/metaproteomics/workflows/workflow.ga","wfid":"proteomics-metaproteomics","wfname":"workflow","trs_endpoint":"https://training.galaxyproject.org/training-material/api/ga4gh/trs/v2/tools/proteomics-metaproteomics/versions/workflow","license":null,"creators":[],"name":"Metaproteomics_GTN","title":"Metaproteomics_GTN","test_results":null,"modified":"2024-06-17 12:36:41 +0000","mermaid":"flowchart TD\n  0[\"ℹ️ Input Dataset\\nSixgill generated protein FASTA File\"];\n  style 0 stroke:#2c3143,stroke-width:4px;\n  1[\"ℹ️ Input Collection\\nDataset Collection of Bering Strait MGF Files\"];\n  style 1 stroke:#2c3143,stroke-width:4px;\n  2[\"ℹ️ Input Dataset\\nGene Ontology Terms Selected\"];\n  style 2 stroke:#2c3143,stroke-width:4px;\n  3[\"Search GUI\"];\n  0 -->|output| 3;\n  1 -->|output| 3;\n  7516674a-b5aa-45b5-b2e8-38c1889ad2e9[\"Output\\nSearch GUI on input dataset(s)\"];\n  3 --> 7516674a-b5aa-45b5-b2e8-38c1889ad2e9;\n  style 7516674a-b5aa-45b5-b2e8-38c1889ad2e9 stroke:#2c3143,stroke-width:4px;\n  4[\"Peptide Shaker\"];\n  3 -->|searchgui_results| 4;\n  ddfe8d62-a7b7-4e30-a84d-91c92fc60bd0[\"Output\\nPeptide Shaker on input dataset(s): mzidentML file\"];\n  4 --> ddfe8d62-a7b7-4e30-a84d-91c92fc60bd0;\n  style ddfe8d62-a7b7-4e30-a84d-91c92fc60bd0 stroke:#2c3143,stroke-width:4px;\n  5[\"Query Tabular Select Peptides\"];\n  4 -->|output_psm| 5;\n  6[\"Unipept pept2prot\"];\n  5 -->|output| 6;\n  7[\"Unipept lca\"];\n  5 -->|output| 7;\n  8[\"Go Pop2Prot DB\"];\n  2 -->|output| 8;\n  6 -->|output_tsv| 8;\n  6 -->|output_tsv| 8;\n  4 -->|output_psm| 8;\n  9[\"Genera | PSMs | Peptides\"];\n  4 -->|output_psm| 9;\n  7 -->|output_tsv| 9;\n  10[\"GO Terms: Biological Processes\"];\n  8 -->|sqlitedb| 10;\n  11[\"GO Terms: Molecular Functions\"];\n  8 -->|sqlitedb| 11;\n  12[\"GO Terms: Cellular Localization\"];\n  8 -->|sqlitedb| 12;"}],"api":"https://training.galaxyproject.org/training-material/api/topics/proteomics/tutorials/metaproteomics/tutorial.json","tools":["toolshed.g2.bx.psu.edu/repos/galaxyp/peptideshaker/peptide_shaker/1.16.36.3","toolshed.g2.bx.psu.edu/repos/galaxyp/peptideshaker/search_gui/3.3.10.1","toolshed.g2.bx.psu.edu/repos/galaxyp/unipept/unipept/4.3.0","toolshed.g2.bx.psu.edu/repos/iuc/query_tabular/query_tabular/3.0.0","toolshed.g2.bx.psu.edu/repos/iuc/sqlite_to_tabular/sqlite_to_tabular/2.0.0"],"supported_servers":{"exact":[{"url":"https://usegalaxy.eu","name":"UseGalaxy.eu","usegalaxy":true},{"url":"https://usegalaxy.no/","name":"UseGalaxy.no","usegalaxy":false},{"url":"https://usegalaxy.org","name":"UseGalaxy.org (Main)","usegalaxy":true},{"url":"https://usegalaxy.org.au","name":"UseGalaxy.org.au","usegalaxy":true}],"inexact":[{"url":"https://usegalaxy.be/","name":"UseGalaxy.be","usegalaxy":false},{"url":"https://usegalaxy.cz/","name":"UseGalaxy.cz","usegalaxy":false}]},"topic_name_human":"Proteomics","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[{"name":"peptideshaker","owner":"galaxyp","revisions":"7fdd9119cc4f","tool_panel_section_label":"Proteomics","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"peptideshaker","owner":"galaxyp","revisions":"7fdd9119cc4f","tool_panel_section_label":"Proteomics","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"unipept","owner":"galaxyp","revisions":"9aaa46d45472","tool_panel_section_label":"Get Data","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"query_tabular","owner":"iuc","revisions":"33d61c89fb8d","tool_panel_section_label":"Text Manipulation","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"sqlite_to_tabular","owner":"iuc","revisions":"b722161a845a","tool_panel_section_label":"Text Manipulation","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"}]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools:\n- name: peptideshaker\n  owner: galaxyp\n  revisions: 7fdd9119cc4f\n  tool_panel_section_label: Proteomics\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: peptideshaker\n  owner: galaxyp\n  revisions: 7fdd9119cc4f\n  tool_panel_section_label: Proteomics\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: unipept\n  owner: galaxyp\n  revisions: 9aaa46d45472\n  tool_panel_section_label: Get Data\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: query_tabular\n  owner: iuc\n  revisions: 33d61c89fb8d\n  tool_panel_section_label: Text Manipulation\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: sqlite_to_tabular\n  owner: iuc\n  revisions: b722161a845a\n  tool_panel_section_label: Text Manipulation\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n","tours":false,"video":false,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial"}