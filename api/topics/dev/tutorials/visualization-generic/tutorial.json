{"layout":"tutorial_hands_on","title":"Generic plugins","questions":["How can visualization plugins benefit science?"],"objectives":["Implement a first Galaxy visualization","Understand the client side vs. server side principle"],"requirements":[{"title":"Javascript knowledge","type":"none"}],"time_estimation":"90m","key_points":["Visualizations require a different way of thinking: server and client side; downloading files rather than system level access","Interactivity is what makes visualizations different from static tools","Requires understanding of both the Galaxy ecosystem as well as HTML5/JS","Performance is more important than for static Galaxy tools"],"subtopic":"viz","contributors":[{"name":"Saskia Hiltemann","maintainer_contact":"gitter","email":"saskia.hiltemann@gmail.com","fediverse":"https://mstdn.science/@shiltemann","fediverse_flavor":"mastodon","bluesky":"shiltemann.bsky.social","linkedin":"shiltemann","matrix":"shiltemann:matrix.org","orcid":"0000-0003-3803-468X","joined":"2017-09","bio":"Researcher at Erasmus Medical Center","elixir_node":"nl","contact_for_training":true,"affiliations":["CINECA-Project","gallantries","erasmusmc","elixir-europe","uni-freiburg"],"location":{"country":"NL","lat":51.912,"lon":4.462},"id":"shiltemann","url":"https://training.galaxyproject.org/training-material/api/contributors/shiltemann.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/shiltemann/"},{"name":"Youri Hoogstrate","joined":"2017-09","id":"yhoogstrate","url":"https://training.galaxyproject.org/training-material/api/contributors/yhoogstrate.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/yhoogstrate/"}],"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00121","url":"/topics/dev/tutorials/visualization-generic/tutorial.html","topic_name":"dev","tutorial_name":"visualization-generic","dir":"topics/dev/tutorials/visualization-generic","symlink":null,"id":"dev/visualization-generic","ref_tutorials":["<p>Visualizations may be very helpful in understanding data better. There is a whole\nrange of visualizations, from rather simple scatter and barplots up to projections\nof high dimensional data or even entire genomes. Many of these visualizations often\nrequire a lot of tweaking and changes in settings like zooming in and assigning colors, etc.\nTherefore, visualizations are ideally interactive, and changing settings is often\nan initial step in exploring data. For this reason it may be inconvenient to make use\nof static galaxy tools because it lacks these interactive features. For these situations Galaxy\noffers the option to create <em>visualizations plugins</em>, file format specific javascripts\nthat integrate with the history menu, without making redundant copies of data.</p>\n\n<p>In this tutorial we shall go through how this system works and create a simple visualization\nplugin. The tool will create a visualization of the number of aligned reads per\nchromosome of a BAM file, and we will discuss possible optimizations and advantages\nand disadvantages of the proposed implementation.</p>\n\n<p>If you want to make visualizations ready for production, it is essential to have a good\nunderstanding of HTML5 and JavaScript as these are the basic languages in which they are written.\nHowever, for this tutorial we will keep it basic.</p>\n\n<p>Additional documentation about Galaxy visualizations can be found here:</p>\n\n<ul>\n  <li><a href=\"https://galaxyproject.org/data-providers\">DataProviders</a></li>\n  <li><a href=\"https://galaxyproject.org/data-providers/cookbook\">DataProviders/Cookbook</a></li>\n</ul>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will deal with:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#part-1\" id=\"markdown-toc-part-1\">Part 1</a>    <ol>\n      <li><a href=\"#linking-the-plugin-with-galaxy\" id=\"markdown-toc-linking-the-plugin-with-galaxy\">Linking the plugin with Galaxy</a></li>\n      <li><a href=\"#creating-the-visualization\" id=\"markdown-toc-creating-the-visualization\">Creating the visualization</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#conclusion\" id=\"markdown-toc-conclusion\">Conclusion</a></li>\n</ol>\n\n</blockquote>\n\n<h1 id=\"part-1\">Part 1</h1>\n\n<p>The visualization we are going to create in this tutorial, is a tool that shows the number of aligned\nreads per chromosome of a BAM file. The first thing we need to do is to come up with a name.\nLet’s call it <em>alignment_rname_boxplot</em>. Note that the reference sequences (usually chromosomes)\nto which we align are named <code class=\"language-plaintext highlighter-rouge\">RNAME</code> in the BAM/SAM specification.</p>\n\n<p>The development of a Galaxy visualization takes place within the Galaxy codebase.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Data upload</hands-on-title>\n\n  <ol>\n    <li>Clone an instance of Galaxy in a path, further referred to as <code class=\"language-plaintext highlighter-rouge\">$GALAXY_ROOT</code></li>\n    <li>\n      <p>Explore the plugin directory as follows:</p>\n\n      <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span><span class=\"nb\">cd</span> <span class=\"nv\">$GALAXY_ROOT</span>/config/plugins/visualizations\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Create a new directory for our new plugin project</p>\n\n      <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span><span class=\"nb\">mkdir </span>alignment_rname_boxplot\n<span class=\"nv\">$ </span><span class=\"nb\">cd </span>alignment_rname_boxplot\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Make three (sub-)directories to complete the structure of the project:</p>\n\n      <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span><span class=\"nb\">mkdir </span>config\n<span class=\"nv\">$ </span><span class=\"nb\">mkdir </span>static\n<span class=\"nv\">$ </span><span class=\"nb\">mkdir </span>templates\n</code></pre></div>      </div>\n    </li>\n  </ol>\n</blockquote>\n\n<h2 id=\"linking-the-plugin-with-galaxy\">Linking the plugin with Galaxy</h2>\n\n<p>To create a bridge between our not-yet-written plugin and Galaxy, we need to write a\nconfiguration in XML format.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Data upload</hands-on-title>\n\n  <p>Create the file  <code class=\"language-plaintext highlighter-rouge\">config/alignment_rname_boxplot.xml</code> with the following contents:</p>\n\n  <div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"cp\">&lt;!DOCTYPE visualization SYSTEM \"../../visualization.dtd\"&gt;</span>\n<span class=\"nt\">&lt;visualization</span> <span class=\"na\">name=</span><span class=\"s\">\"alignment_rname_boxplot\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;data_sources&gt;</span>\n        <span class=\"nt\">&lt;data_source&gt;</span>\n            <span class=\"nt\">&lt;model_class&gt;</span>HistoryDatasetAssociation<span class=\"nt\">&lt;/model_class&gt;</span>\n\n            <span class=\"nt\">&lt;test</span> <span class=\"na\">type=</span><span class=\"s\">\"isinstance\"</span> <span class=\"na\">test_attr=</span><span class=\"s\">\"datatype\"</span> <span class=\"na\">result_type=</span><span class=\"s\">\"datatype\"</span><span class=\"nt\">&gt;</span>binary.Bam<span class=\"nt\">&lt;/test&gt;</span>\n            <span class=\"nt\">&lt;test</span> <span class=\"na\">type=</span><span class=\"s\">\"isinstance\"</span> <span class=\"na\">test_attr=</span><span class=\"s\">\"datatype\"</span> <span class=\"na\">result_type=</span><span class=\"s\">\"datatype\"</span><span class=\"nt\">&gt;</span>tabular.Sam<span class=\"nt\">&lt;/test&gt;</span>\n\n            <span class=\"nt\">&lt;to_param</span> <span class=\"na\">param_attr=</span><span class=\"s\">\"id\"</span><span class=\"nt\">&gt;</span>dataset_id<span class=\"nt\">&lt;/to_param&gt;</span>\n        <span class=\"nt\">&lt;/data_source&gt;</span>\n    <span class=\"nt\">&lt;/data_sources&gt;</span>\n    <span class=\"nt\">&lt;params&gt;</span>\n        <span class=\"nt\">&lt;param</span> <span class=\"na\">type=</span><span class=\"s\">\"dataset\"</span> <span class=\"na\">var_name_in_template=</span><span class=\"s\">\"hda\"</span> <span class=\"na\">required=</span><span class=\"s\">\"true\"</span><span class=\"nt\">&gt;</span>dataset_id<span class=\"nt\">&lt;/param&gt;</span>\n    <span class=\"nt\">&lt;/params&gt;</span>\n    <span class=\"nt\">&lt;template&gt;</span>alignment_rname_boxplot.mako<span class=\"nt\">&lt;/template&gt;</span>\n<span class=\"nt\">&lt;/visualization&gt;</span>\n</code></pre></div>  </div>\n\n</blockquote>\n\n<p>This configures the plugin’s name, which shall appear on pressing the visualization button in\nthe history menu. It also links the plugin to two file formats: BAM and SAM, which means that\nfor any history item of these file formats the plugin will automatically become available.</p>\n\n<p>It also includes a reference to a mako template file (HTML + Python syntax), to be found in the\n<code class=\"language-plaintext highlighter-rouge\">templates</code> directory (we will create this file in the next section). The <code class=\"language-plaintext highlighter-rouge\">var_name_in_template</code>\nparameter is set to the value <code class=\"language-plaintext highlighter-rouge\">hda</code>, which will be the name of the variable in the mako template\ncorresponding to the dataset to be visualized.</p>\n\n<h2 id=\"creating-the-visualization\">Creating the visualization</h2>\n\n<p>We have linked our visualization to a mako file (which we have not yet created). This file is a\nblueprint for the visualization. This means that for every invocation of the visualization, the\nmako file will be compiled to render an HTML file.</p>\n\n<p>Beause we would like the visualization to load quickly, computationally intensive tasks should\nnot be done prior to loading. A bit of server-side rendering in itself is not a problem, but the\nvisualizations (written in HTML and/or JS) should do most of the actual calculations and\nconversions on the client side (in the browser). Therefore, unlike regular Galaxy tools, parsing\nfiles does not take place on the server, but instead data will be downloaded by the client via an\nexposed Galaxy URL prior to client-side rendering.</p>\n\n<p>The most basic part of the mako file are the variables used for further web development, given\nbelow.</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;!DOCTYPE HTML&gt;</span>\n<span class=\"nt\">&lt;</span><span class=\"err\">%</span>\n    <span class=\"na\">import</span> <span class=\"na\">os</span>\n\n    <span class=\"na\">##</span> <span class=\"na\">Generates</span> <span class=\"na\">hash</span> <span class=\"err\">(</span><span class=\"na\">hdadict</span><span class=\"err\">['</span><span class=\"na\">id</span><span class=\"err\">'])</span> <span class=\"na\">of</span> <span class=\"na\">history</span> <span class=\"na\">item</span>\n    <span class=\"na\">hdadict = </span><span class=\"s\">trans.security.encode_dict_ids(</span> <span class=\"na\">hda.to_dict</span><span class=\"err\">()</span> <span class=\"err\">)</span>\n\n    <span class=\"na\">##</span> <span class=\"na\">Finds</span> <span class=\"na\">the</span> <span class=\"na\">parent</span> <span class=\"na\">directory</span> <span class=\"na\">of</span> <span class=\"na\">galaxy</span> <span class=\"err\">(/,</span> <span class=\"err\">/</span><span class=\"na\">galaxy</span><span class=\"err\">,</span> <span class=\"na\">etc.</span><span class=\"err\">)</span>\n    <span class=\"na\">root     = </span><span class=\"s\">h.url_for(</span> <span class=\"err\">'/'</span> <span class=\"err\">)</span>\n\n    <span class=\"na\">##</span> <span class=\"na\">Determines</span> <span class=\"na\">the</span> <span class=\"na\">exposed</span> <span class=\"na\">URL</span> <span class=\"na\">of</span> <span class=\"na\">the</span> <span class=\"err\">./</span><span class=\"na\">static</span> <span class=\"na\">directory</span>\n    <span class=\"na\">app_root = </span><span class=\"s\">root</span> <span class=\"err\">+</span> <span class=\"err\">'</span><span class=\"na\">plugins</span><span class=\"err\">/</span><span class=\"na\">visualizations</span><span class=\"err\">/'+</span><span class=\"na\">visualization_name</span><span class=\"err\">+'/</span><span class=\"na\">static</span><span class=\"err\">/'</span>\n\n    <span class=\"na\">##</span> <span class=\"na\">Actual</span> <span class=\"na\">file</span> <span class=\"na\">URL:</span>\n    <span class=\"na\">file_url = </span><span class=\"s\">os.path.join(root,</span> <span class=\"err\">'</span><span class=\"na\">datasets</span><span class=\"err\">',</span> <span class=\"na\">hdadict</span><span class=\"err\">['</span><span class=\"na\">id</span><span class=\"err\">'],</span> <span class=\"err\">\"</span><span class=\"na\">display</span><span class=\"err\">?</span><span class=\"na\">to_ext=</span><span class=\"s\">\"+hda.ext)\n%&gt;\n</span></code></pre></div></div>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">hdadict</code> is a variable that contains a file identifier that has been encoded to it’s\n exposed uid.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">root</code> indicates location of Galaxy on the webserver (e.g. <code class=\"language-plaintext highlighter-rouge\">/</code>, <code class=\"language-plaintext highlighter-rouge\">/galaxy/</code>, <code class=\"language-plaintext highlighter-rouge\">/galaxy-pub/</code>, etc).</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">app_root</code> contains the exposed url of the static files for this visualization.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">file_url</code> contains the exposed url of the dataset selected (by user) for visualization.</li>\n</ul>\n\n<p>We could obtain the BAM file client-side by downloading the BAM/SAM file in its entirety via\n<em>file_url</em>. However, BAM files can become quite large and it is usually not desired to transfer\nsuch datasets over the network. In our case it is also rather inconvenient to parse the BAM file\nwith Javascript, just to count the number of reads.</p>\n\n<p>Fortunately, BAM files have indices. These indices are brief summaries describing the\nnumber of entries per chromosome, in order to be able to access the data contained in them more\nquickly. In the mako template we can access a BAM index as <em>hda.metadata.bam_index</em>.\n(Note that this is a file path on the server, not an exposed URL).</p>\n\n<p>Samtools has a command named <code class=\"language-plaintext highlighter-rouge\">idxstats</code> which is able to leverage this BAM index you. However,\nsince visualizations do not have dependency management, it is very tricky to let the mako template\ndo a system call to samtools. Fortunately, the Galaxy ecosystem ships with a built-in <code class=\"language-plaintext highlighter-rouge\">pysam</code>\ndependency, a library that can do any native samtools command within python.</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">*.metadata.bam_index</code> is a special kind of file in the Galaxy ecosystem. It is actually an\ninvisible file in Galaxy, linked to another history item, but does have a unique filename.\nSo, for the BAM file <code class=\"language-plaintext highlighter-rouge\">./database/files/000/dataset_001.dat</code>, our BAI file (index) is <strong>not</strong>\n<code class=\"language-plaintext highlighter-rouge\">./database/files/000/dataset_001.dat.bai</code> but could be <code class=\"language-plaintext highlighter-rouge\">./database/files/000/dataset_002.dat</code> or\n<code class=\"language-plaintext highlighter-rouge\">./database/files/000/dataset_003.dat</code>. We can create a symlink to this index file to ensure the\nbam file and its index share the same prefix, as expected by samtools and pysam.</p>\n\n<p>We can create this symlink as follows in our mako template:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">## Ensure BAI index is symlinked\n</span><span class=\"n\">bai_target</span> <span class=\"o\">=</span> <span class=\"n\">hda</span><span class=\"p\">.</span><span class=\"n\">file_name</span><span class=\"o\">+</span><span class=\"sh\">'</span><span class=\"s\">.bai</span><span class=\"sh\">'</span>\n<span class=\"kn\">import</span> <span class=\"n\">os</span>\n\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">isfile</span><span class=\"p\">(</span><span class=\"n\">bai_target</span><span class=\"p\">):</span>\n   <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">symlink</span><span class=\"p\">(</span><span class=\"n\">hda</span><span class=\"p\">.</span><span class=\"n\">metadata</span><span class=\"p\">.</span><span class=\"n\">bam_index</span><span class=\"p\">.</span><span class=\"n\">file_name</span><span class=\"p\">,</span> <span class=\"n\">bai_target</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Now the BAM file has a <code class=\"language-plaintext highlighter-rouge\">.bai</code> file with the same prefix, and we can run the <code class=\"language-plaintext highlighter-rouge\">idxstats</code>\nas follows:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">## Extract idxstats\n</span><span class=\"kn\">import</span> <span class=\"n\">pysam</span>\n<span class=\"n\">bam_idxstats_data</span> <span class=\"o\">=</span> <span class=\"n\">pysam</span><span class=\"p\">.</span><span class=\"nf\">idxstats</span><span class=\"p\">(</span><span class=\"n\">hda</span><span class=\"p\">.</span><span class=\"n\">file_name</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>With the lines of python code above, the idxstats data is parsed into the RAM of python\nduring compilation on the server, but is not yet exported into the HTML page nor parsed by JS.\nTo do that, we add an HTML section to the end of the mako file.</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;html&gt;</span>\n    <span class=\"nt\">&lt;head&gt;</span>\n        <span class=\"nt\">&lt;title&gt;</span>${hda.name | h} | ${visualization_name | h}<span class=\"nt\">&lt;/title&gt;</span>\n    <span class=\"nt\">&lt;/head&gt;</span>\n    <span class=\"nt\">&lt;body&gt;</span>\n        ${bam_idxstats_data | h}\n    <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre></div></div>\n\n<p>Here you see <code class=\"language-plaintext highlighter-rouge\">${bam_idxstats_data | h}</code>, which prints the python variable into\nthe HTML page and also does HTML escaping by providing the ` | h`-flag (for security reasons).</p>\n\n<p>Let’s put this all together.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Data upload</hands-on-title>\n\n  <ol>\n    <li>Create the mako file <code class=\"language-plaintext highlighter-rouge\">templates/alignment_rname_boxplot.mako</code></li>\n    <li>\n      <p>Fill it with the following code:</p>\n\n      <div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;!DOCTYPE HTML&gt;</span>\n<span class=\"nt\">&lt;</span><span class=\"err\">%</span>\n    <span class=\"na\">import</span> <span class=\"na\">os</span>\n\n    <span class=\"na\">##</span> <span class=\"na\">Generates</span> <span class=\"na\">hash</span> <span class=\"err\">(</span><span class=\"na\">hdadict</span><span class=\"err\">['</span><span class=\"na\">id</span><span class=\"err\">'])</span> <span class=\"na\">of</span> <span class=\"na\">history</span> <span class=\"na\">item</span>\n    <span class=\"na\">hdadict = </span><span class=\"s\">trans.security.encode_dict_ids(</span> <span class=\"na\">hda.to_dict</span><span class=\"err\">()</span> <span class=\"err\">)</span>\n\n    <span class=\"na\">##</span> <span class=\"na\">Finds</span> <span class=\"na\">the</span> <span class=\"na\">parent</span> <span class=\"na\">directory</span> <span class=\"na\">of</span> <span class=\"na\">galaxy</span> <span class=\"err\">(/,</span> <span class=\"err\">/</span><span class=\"na\">galaxy</span><span class=\"err\">,</span> <span class=\"na\">etc.</span><span class=\"err\">)</span>\n    <span class=\"na\">root     = </span><span class=\"s\">h.url_for(</span> <span class=\"err\">'/'</span> <span class=\"err\">)</span>\n\n    <span class=\"na\">##</span> <span class=\"na\">Determines</span> <span class=\"na\">the</span> <span class=\"na\">exposed</span> <span class=\"na\">URL</span> <span class=\"na\">of</span> <span class=\"na\">the</span> <span class=\"err\">./</span><span class=\"na\">static</span> <span class=\"na\">directory</span>\n    <span class=\"na\">app_root = </span><span class=\"s\">root</span> <span class=\"err\">+</span> <span class=\"err\">'</span><span class=\"na\">plugins</span><span class=\"err\">/</span><span class=\"na\">visualizations</span><span class=\"err\">/'+</span><span class=\"na\">visualization_name</span><span class=\"err\">+'/</span><span class=\"na\">static</span><span class=\"err\">/'</span>\n\n    <span class=\"na\">##</span> <span class=\"na\">Actual</span> <span class=\"na\">file</span> <span class=\"na\">URL:</span>\n    <span class=\"na\">file_url = </span><span class=\"s\">os.path.join(root,</span> <span class=\"err\">'</span><span class=\"na\">datasets</span><span class=\"err\">',</span> <span class=\"na\">hdadict</span><span class=\"err\">['</span><span class=\"na\">id</span><span class=\"err\">'],</span> <span class=\"err\">\"</span><span class=\"na\">display</span><span class=\"err\">?</span><span class=\"na\">to_ext=</span><span class=\"s\">\"+hda.ext)\n\n    ## Ensure BAI index is symlinked\n    bai_target = hda.file_name+'.bai'\n\n    if not os.path.isfile(bai_target):\n        os.symlink(hda.metadata.bam_index.file_name, bai_target)\n\n    ## Extract idxstats\n    import pysam\n    bam_idxstats_data = pysam.idxstats(hda.file_name)\n%&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;${hda.name | h} | ${visualization_name | h}&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        ${bam_idxstats_data | h}\n    &lt;/body&gt;\n&lt;/html&gt;\n</span></code></pre></div>      </div>\n\n      <p>We are now ready to test this very basic visualization, we just need a (small) BAM file for it.</p>\n    </li>\n    <li>Download <a href=\"https://zenodo.org/record/248730/files/tutorial.bam\">the example BAM file</a></li>\n    <li>\n      <p>Go the galaxy root directory and start Galaxy:</p>\n\n      <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span><span class=\"nb\">cd</span> <span class=\"nv\">$GALAXY_ROOT</span>\n<span class=\"nv\">$ </span>./run.sh\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Upload the example BAM file to your history</p>\n\n      <p>If everything went well, our plugin has appeared as a visualization option for the dataset</p>\n\n      <blockquote class=\"comment\">\n        <comment-title></comment-title>\n        <p>You must be logged in to be able to use visualizations</p>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>All the visualization does at the moment, is show the contents of idxstats, compiled to HTML:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>['chrA\\t5386\\t2\\t0\\n', 'chrB\\t5386\\t4\\t0\\n', 'chrC\\t5386\\t1\\t0\\n', 'chrD\\t5386\\t6\\t1\\n',\n'chrE\\t5386\\t3\\t0\\n', 'chrF\\t5386\\t2\\t0\\n', 'chrG\\t5386\\t1\\t0\\n', '*\\t0\\t0\\t0\\n']\n</code></pre></div></div>\n\n<p>It contains eight entries, one for each of our (made-up) chromosomes and one to <code class=\"language-plaintext highlighter-rouge\">*</code>, which represents\nthe unmapped reads. Entries are tab delimited (<code class=\"language-plaintext highlighter-rouge\">\\t</code>) and for the <code class=\"language-plaintext highlighter-rouge\">chrA</code> entry it indicates that the\nlength of the RNAME (chromosome) is 5386 bases and 2 reads are aligned to it.</p>\n\n<p>To make the data a bit more usable for Javascript , we convert it into a simple dictionary\nof the following syntax:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">chrA</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">chrB</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">chrC</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">chrD</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">chrE</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">chrF</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">chrG</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">*</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Although it is possible to do this in python we recommend doing this in JS.\nThe var dump provided by python/pysam is actually a valid syntax for Javascript too,\nso getting the raw data into Javascript is rather easy:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;script&gt;</span>\n    <span class=\"nx\">bam_idxstats_data</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">{</span><span class=\"nx\">bam_idxstats_data</span><span class=\"p\">};</span>\n<span class=\"nt\">&lt;/script&gt;</span>\n</code></pre></div></div>\n\n<p>Converting the data is not the scope of the tutorial, so here we provide such a function:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;script&gt;</span>\n  <span class=\"nx\">bam_idxstats_data</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">{</span><span class=\"nx\">bam_idxstats_data</span><span class=\"p\">};</span>\n  <span class=\"kd\">function</span> <span class=\"nf\">parse_data</span><span class=\"p\">(</span><span class=\"nx\">bam_idxstats_data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">output</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">line</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">];</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">chunks</span> <span class=\"o\">=</span> <span class=\"nx\">line</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"se\">\\t</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">chunks</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">_</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">length</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// only if it does not contain underscore</span>\n        <span class=\"nx\">output</span><span class=\"p\">[</span><span class=\"nx\">chunks</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"nf\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">chunks</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]);</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n   <span class=\"k\">return</span> <span class=\"nx\">output</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nt\">&lt;/script&gt;</span>\n</code></pre></div></div>\n\n<p>The great thing about the mako system is that it does not require to restart galaxy in order to make\nfunctional changes to the mako files.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Data upload</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Change the mako file to the following:</p>\n\n      <div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;!DOCTYPE HTML&gt;</span>\n<span class=\"nt\">&lt;</span><span class=\"err\">%</span>\n    <span class=\"na\">import</span> <span class=\"na\">os</span>\n\n    <span class=\"na\">##</span> <span class=\"na\">Generates</span> <span class=\"na\">hash</span> <span class=\"err\">(</span><span class=\"na\">hdadict</span><span class=\"err\">['</span><span class=\"na\">id</span><span class=\"err\">'])</span> <span class=\"na\">of</span> <span class=\"na\">history</span> <span class=\"na\">item</span>\n    <span class=\"na\">hdadict = </span><span class=\"s\">trans.security.encode_dict_ids(</span> <span class=\"na\">hda.to_dict</span><span class=\"err\">()</span> <span class=\"err\">)</span>\n\n    <span class=\"na\">##</span> <span class=\"na\">Finds</span> <span class=\"na\">the</span> <span class=\"na\">parent</span> <span class=\"na\">directory</span> <span class=\"na\">of</span> <span class=\"na\">galaxy</span> <span class=\"err\">(/,</span> <span class=\"err\">/</span><span class=\"na\">galaxy</span><span class=\"err\">,</span> <span class=\"na\">etc.</span><span class=\"err\">)</span>\n    <span class=\"na\">root     = </span><span class=\"s\">h.url_for(</span> <span class=\"err\">'/'</span> <span class=\"err\">)</span>\n\n    <span class=\"na\">##</span> <span class=\"na\">Determines</span> <span class=\"na\">the</span> <span class=\"na\">exposed</span> <span class=\"na\">URL</span> <span class=\"na\">of</span> <span class=\"na\">the</span> <span class=\"err\">./</span><span class=\"na\">static</span> <span class=\"na\">directory</span>\n    <span class=\"na\">app_root = </span><span class=\"s\">root</span> <span class=\"err\">+</span> <span class=\"err\">'</span><span class=\"na\">plugins</span><span class=\"err\">/</span><span class=\"na\">visualizations</span><span class=\"err\">/'+</span><span class=\"na\">visualization_name</span><span class=\"err\">+'/</span><span class=\"na\">static</span><span class=\"err\">/'</span>\n\n    <span class=\"na\">##</span> <span class=\"na\">Actual</span> <span class=\"na\">file</span> <span class=\"na\">URL:</span>\n    <span class=\"na\">file_url = </span><span class=\"s\">os.path.join(root,</span> <span class=\"err\">'</span><span class=\"na\">datasets</span><span class=\"err\">',</span> <span class=\"na\">hdadict</span><span class=\"err\">['</span><span class=\"na\">id</span><span class=\"err\">'],</span> <span class=\"err\">\"</span><span class=\"na\">display</span><span class=\"err\">?</span><span class=\"na\">to_ext=</span><span class=\"s\">\"+hda.ext)\n\n    ## Ensure BAI index is symlinked\n    bai_target = hda.file_name+'.bai'\n\n    if not os.path.isfile(bai_target):\n        os.symlink(hda.metadata.bam_index.file_name, bai_target)\n\n    ## Extract idxstats\n    import pysam\n    bam_idxstats_data = pysam.idxstats(hda.file_name)\n\n%&gt;\n&lt;html&gt;\n    &lt;head&gt;\n       &lt;title&gt;${hda.name | h} | ${visualization_name | h}&lt;/title&gt;\n        &lt;script&gt;\n            bam_idxstats_data = ${bam_idxstats_data};\n            function parse_data(data) {\n                var output = {};\n                for(var i = 0; i &lt; data.length ; i++) {\n                    var line = data[i];\n                    var chunks = line.split(\"</span><span class=\"err\">\\</span><span class=\"na\">t</span><span class=\"err\">\");</span>\n\n                    <span class=\"na\">if</span><span class=\"err\">(</span><span class=\"na\">chunks</span><span class=\"err\">[0].</span><span class=\"na\">split</span><span class=\"err\">(\"</span><span class=\"na\">_</span><span class=\"err\">\"</span><span class=\"na\">).length =</span><span class=\"s\">=</span> <span class=\"err\">1)</span> <span class=\"err\">{</span> <span class=\"err\">//</span> <span class=\"na\">only</span> <span class=\"na\">if</span> <span class=\"na\">it</span> <span class=\"na\">does</span> <span class=\"na\">not</span> <span class=\"na\">contain</span> <span class=\"na\">underscore</span>\n                        <span class=\"na\">output[chunks[0]] = </span><span class=\"s\">parseInt(chunks[2]);</span>\n                    <span class=\"err\">}</span>\n                <span class=\"err\">}</span>\n                <span class=\"na\">return</span> <span class=\"na\">output</span><span class=\"err\">;</span>\n            <span class=\"err\">}</span>\n        <span class=\"err\">&lt;/</span><span class=\"na\">script</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;/head&gt;</span>\n    <span class=\"nt\">&lt;body</span> <span class=\"na\">onload=</span><span class=\"s\">\"bam_idxstats = parse_data(bam_idxstats_data);\"</span><span class=\"nt\">&gt;</span>\n        ${bam_idxstats_data | h}\n    <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Retrigger the visualization and open the developers console of your browser: In the console, type: <code class=\"language-plaintext highlighter-rouge\">bam_idxstats_data</code> and press <kbd>Enter</kbd>\n  This should give the parsed contents as a dictionary, which can directly be used in Javascript.</p>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>From this point forward you are encouraged to continue on your own to see if you are able to create\na simple visualization from this dictionary. Think of tables, DIVs or even more complicated\nsolutions :).</p>\n\n<p>Below is an example visualization, which creates a bar plot showing the number of reads per\nchromosome.</p>\n\n<p><a href=\"../../images/vis_plugins_example.png\" rel=\"noopener noreferrer\"><img src=\"../../images/vis_plugins_example.png\" alt=\"Example visualization. \" width=\"567\" height=\"321\" loading=\"lazy\" /></a></p>\n\n<p>The full contents of this plugin are provided in the <a href=\"https://github.com/galaxyproject/training-material/tree/main/topics/dev/files/hands_on-visualizations/alignment_rname_boxplot\">GitHub repository related to this material in <code class=\"language-plaintext highlighter-rouge\">tree/master/topics/dev/files/hands_on-visualizations/alignment_rname_boxplot</code></a>.\nTo try out this example, simply copy this folder to the <code class=\"language-plaintext highlighter-rouge\">$GALAXY_ROOT/config/plugins/visualizations/</code> folder\non your (local) Galaxy and restart Galaxy.</p>\n\n<p>The contents of the mako file for this example are given below.</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;!DOCTYPE HTML&gt;</span>\n<span class=\"nt\">&lt;</span><span class=\"err\">%</span>\n    <span class=\"na\">import</span> <span class=\"na\">os</span>\n\n    <span class=\"na\">##</span> <span class=\"na\">Generates</span> <span class=\"na\">hash</span> <span class=\"err\">(</span><span class=\"na\">hdadict</span><span class=\"err\">['</span><span class=\"na\">id</span><span class=\"err\">'])</span> <span class=\"na\">of</span> <span class=\"na\">history</span> <span class=\"na\">item</span>\n    <span class=\"na\">hdadict = </span><span class=\"s\">trans.security.encode_dict_ids(</span> <span class=\"na\">hda.to_dict</span><span class=\"err\">()</span> <span class=\"err\">)</span>\n\n    <span class=\"na\">##</span> <span class=\"na\">Finds</span> <span class=\"na\">the</span> <span class=\"na\">parent</span> <span class=\"na\">directory</span> <span class=\"na\">of</span> <span class=\"na\">galaxy</span> <span class=\"err\">(/,</span> <span class=\"err\">/</span><span class=\"na\">galaxy</span><span class=\"err\">,</span> <span class=\"na\">etc.</span><span class=\"err\">)</span>\n    <span class=\"na\">root     = </span><span class=\"s\">h.url_for(</span> <span class=\"err\">'/'</span> <span class=\"err\">)</span>\n\n    <span class=\"na\">##</span> <span class=\"na\">Determines</span> <span class=\"na\">the</span> <span class=\"na\">exposed</span> <span class=\"na\">URL</span> <span class=\"na\">of</span> <span class=\"na\">the</span> <span class=\"err\">./</span><span class=\"na\">static</span> <span class=\"na\">directory</span>\n    <span class=\"na\">app_root = </span><span class=\"s\">root</span> <span class=\"err\">+</span> <span class=\"err\">'</span><span class=\"na\">plugins</span><span class=\"err\">/</span><span class=\"na\">visualizations</span><span class=\"err\">/'+</span><span class=\"na\">visualization_name</span><span class=\"err\">+'/</span><span class=\"na\">static</span><span class=\"err\">/'</span>\n\n    <span class=\"na\">##</span> <span class=\"na\">Actual</span> <span class=\"na\">file</span> <span class=\"na\">URL:</span>\n    <span class=\"na\">file_url = </span><span class=\"s\">os.path.join(root,</span> <span class=\"err\">'</span><span class=\"na\">datasets</span><span class=\"err\">',</span> <span class=\"na\">hdadict</span><span class=\"err\">['</span><span class=\"na\">id</span><span class=\"err\">'],</span> <span class=\"err\">\"</span><span class=\"na\">display</span><span class=\"err\">?</span><span class=\"na\">to_ext=</span><span class=\"s\">\"+hda.ext)\n\n    ## Ensure BAI index is symlinked\n    bai_target = hda.file_name+'.bai'\n\n    if not os.path.isfile(bai_target):\n        os.symlink(hda.metadata.bam_index.file_name, bai_target)\n\n    ## Extract idxstats\n    import pysam\n    bam_idxstats_data = pysam.idxstats(hda.file_name)\n%&gt;\n&lt;html&gt;\n     &lt;head&gt;\n        &lt;title&gt;${hda.name | h} | ${visualization_name | h}&lt;/title&gt;\n\n        &lt;style&gt;\n             .chart div {\n               font: 10px sans-serif;\n               background-color: steelblue;\n               text-align: right;\n               padding: 3px;\n               margin: 1px;\n               color: white;\n             }\n        &lt;/style&gt;\n        &lt;script&gt;\n            bam_idxstats_data = ${bam_idxstats_data};\n            function parse_data(data) {\n                 /*\n                  Data comes in as tuple of unsplit lines:\n                  [\"</span><span class=\"na\">chr1</span><span class=\"err\">\\</span><span class=\"na\">t1000</span><span class=\"err\">\\</span><span class=\"na\">t0</span><span class=\"err\">\\</span><span class=\"na\">t0</span><span class=\"err\">\",</span> <span class=\"err\">\"</span><span class=\"na\">chr2</span><span class=\"err\">\\</span><span class=\"na\">t2500</span><span class=\"err\">\\</span><span class=\"na\">t0</span><span class=\"err\">\\</span><span class=\"na\">t0</span><span class=\"err\">\"]</span>\n\n                  <span class=\"na\">We</span> <span class=\"na\">need</span> <span class=\"na\">to</span> <span class=\"na\">split</span> <span class=\"na\">it</span> <span class=\"na\">up</span><span class=\"err\">,</span> <span class=\"na\">and</span> <span class=\"na\">ideally</span> <span class=\"na\">only</span> <span class=\"na\">keep</span> <span class=\"na\">reference</span> <span class=\"na\">names</span> <span class=\"na\">without</span> <span class=\"na\">an</span> <span class=\"na\">underscore</span>\n                 <span class=\"na\">*</span><span class=\"err\">/</span>\n                 <span class=\"na\">var</span> <span class=\"na\">output = </span><span class=\"s\">{};</span>\n\n                 <span class=\"na\">for</span><span class=\"err\">(</span><span class=\"na\">var</span> <span class=\"na\">i = </span><span class=\"s\">0;</span> <span class=\"na\">i</span> <span class=\"err\">&lt;</span> <span class=\"na\">data.length</span> <span class=\"err\">;</span> <span class=\"na\">i</span><span class=\"err\">++)</span> <span class=\"err\">{</span>\n                     <span class=\"na\">var</span> <span class=\"na\">line = </span><span class=\"s\">data[i];</span>\n                     <span class=\"na\">var</span> <span class=\"na\">chunks = </span><span class=\"s\">line.split(\"\\t\");</span>\n\n                     <span class=\"na\">if</span><span class=\"err\">(</span><span class=\"na\">chunks</span><span class=\"err\">[0].</span><span class=\"na\">split</span><span class=\"err\">(\"</span><span class=\"na\">_</span><span class=\"err\">\"</span><span class=\"na\">).length =</span><span class=\"s\">=</span> <span class=\"err\">1)</span> <span class=\"err\">{</span> <span class=\"err\">//</span> <span class=\"na\">only</span> <span class=\"na\">if</span> <span class=\"na\">it</span> <span class=\"na\">does</span> <span class=\"na\">not</span> <span class=\"na\">contain</span> <span class=\"na\">underscore</span>\n                         <span class=\"na\">output[chunks[0]] = </span><span class=\"s\">parseInt(chunks[2]);</span>\n                     <span class=\"err\">}</span>\n                 <span class=\"err\">}</span>\n\n                 <span class=\"na\">return</span> <span class=\"na\">output</span><span class=\"err\">;</span>\n            <span class=\"err\">}</span>\n\n            <span class=\"na\">function</span> <span class=\"na\">calc_stats</span><span class=\"err\">(</span><span class=\"na\">parsed</span><span class=\"err\">)</span> <span class=\"err\">{</span>\n                <span class=\"na\">max = </span><span class=\"s\">0;</span>\n                <span class=\"na\">sum = </span><span class=\"s\">0;</span>\n                <span class=\"na\">for</span> <span class=\"err\">(</span><span class=\"na\">var</span> <span class=\"na\">key</span> <span class=\"na\">in</span> <span class=\"na\">parsed</span><span class=\"err\">)</span> <span class=\"err\">{</span>\n                    <span class=\"na\">if</span> <span class=\"err\">(</span><span class=\"na\">parsed</span><span class=\"err\">[</span><span class=\"na\">key</span><span class=\"err\">]</span> <span class=\"nt\">&gt;</span> max){\n                        max = parsed[key];\n                    }\n                    sum += parsed[key]\n                }\n                return [max, sum];\n            }\n\n            function plot_data(parsed) {\n                var max = calc_stats(parsed)[0];\n                var sum = calc_stats(parsed)[1];\n\n                for (var key in parsed) {\n                     var value = parsed[key];\n                     var ratio = 100.0 * value / sum;\n                     var ratio2 = 100.0 * value / max;\n\n                     var div = document.createElement(\"div\");\n                     div.innerHTML = '<span class=\"nt\">&lt;nobr&gt;</span>'+key+'<span class=\"nt\">&lt;/nobr&gt;</span>';\n                     document.getElementById(\"chart_names\").appendChild(div);\n\n                     var div = document.createElement(\"div\");\n                     div.innerHTML = '<span class=\"nt\">&lt;nobr&gt;</span>'+value+\" (\"+Math.round(ratio*100)/100+\"%)<span class=\"nt\">&lt;/nobr&gt;</span>\";\n                     div.title = key+': '+value+\" (\"+Math.round(ratio*100)/100+\"%)\";\n                     div.style.width =  ratio2+'%';\n                     document.getElementById(\"chart\").appendChild(div);\n                }\n            }\n        <span class=\"nt\">&lt;/script&gt;</span>\n     <span class=\"nt\">&lt;/head&gt;</span>\n     <span class=\"nt\">&lt;body</span> <span class=\"na\">onload=</span><span class=\"s\">\"plot_data(parse_data(bam_idxstats_data));\"</span><span class=\"nt\">&gt;</span>\n         <span class=\"nt\">&lt;center&gt;</span>\n             <span class=\"nt\">&lt;h1&gt;</span>Bam contents of ${hda.name | h}<span class=\"nt\">&lt;/h1&gt;</span>\n\n             <span class=\"nt\">&lt;table</span> <span class=\"na\">border=</span><span class=\"s\">\"0\"</span> <span class=\"na\">borderpadding=</span><span class=\"s\">\"0\"</span> <span class=\"na\">borderpanning=</span><span class=\"s\">\")\"</span> <span class=\"na\">style=</span><span class=\"s\">\"width: 500px;\"</span><span class=\"nt\">&gt;</span>\n                 <span class=\"nt\">&lt;tr&gt;</span>\n                     <span class=\"nt\">&lt;td</span> <span class=\"na\">style=</span><span class=\"s\">\"width:50px;\"</span><span class=\"nt\">&gt;</span>\n                         <span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"chart_names\"</span> <span class=\"na\">class=</span><span class=\"s\">\"chart\"</span> <span class=\"na\">style=</span><span class=\"s\">\"width: 100%; border: 1px dashed gray;text-align: left;\"</span> <span class=\"nt\">/&gt;</span>\n                     <span class=\"nt\">&lt;/td&gt;</span>\n                     <span class=\"nt\">&lt;td</span> <span class=\"na\">style=</span><span class=\"s\">\"width:450px;\"</span><span class=\"nt\">&gt;</span>\n                         <span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"chart\"</span> <span class=\"na\">class=</span><span class=\"s\">\"chart\"</span> <span class=\"na\">style=</span><span class=\"s\">\"width:100%; border: 1px dashed gray;text-align: left;\"</span> <span class=\"nt\">/&gt;</span>\n                     <span class=\"nt\">&lt;/td&gt;</span>\n                 <span class=\"nt\">&lt;/tr&gt;</span>\n             <span class=\"nt\">&lt;/table&gt;</span>\n         <span class=\"nt\">&lt;/center&gt;</span>\n     <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n\n</code></pre></div></div>\n\n<p>In the given example, the <code class=\"language-plaintext highlighter-rouge\">RNAME</code> queries containing an underscore were removed.\nThis is because there are many alternative chromosomes, making the list very large\nfor certain reference genomes. However, for certain studies it might be desired to\njust look at those.</p>\n\n<p>The current plot is a box plot, but one can imagine a pie-chart may be convenient too.\nAll of those additional settings can be implemented for interactive behaviour,\ncontributing to quicker understanding of the data which is generally not so convenient\nusing static Galaxy tools.</p>\n\n<blockquote class=\"comment\">\n  <comment-title>Static files</comment-title>\n\n  <p>In the example we included Javascript and CSS into the HTML website.\nRemember that for every new invocation of the visualization the entire CSS en JS are copied\nand transferred as well. This is a waste of (redundant) bandwidth as we could save the\nfiles in the static directory and refer to them within the HTML. The browser shall check\nit’s cache for the presence of libs and style sheets and only update them if they have changed.</p>\n</blockquote>\n\n<h3 id=\"improvements\">Improvements</h3>\n\n<p>Another thing you may realize is that we still do the calculation (pysam.idxstats) server side.\nAlthough this is a marginal calculation, it is causing delay and the bigger the files, the worse\nthis delay becomes. The underlying problem is that we did not obtain and parse the BAI file via\nJavascript. This would be a more elaborate solution, but requires more development time as we\nneed to develop a function able to parse the binary file.</p>\n\n<p>Another thing we could do is create a static <code class=\"language-plaintext highlighter-rouge\">samtools idxstats</code> tool, that creates a file of\ndatatype <code class=\"language-plaintext highlighter-rouge\">tabular.Idxstats</code> and include that datatype into Galaxy. We then make the visualization\nspecific for that datatype, just plotting the results of the <code class=\"language-plaintext highlighter-rouge\">idxstats</code>.</p>\n\n<p>A fundamental and more complicated problem is that BAM files are simply too big to transfer for\nthese kind of applications. It would be ideal to have web server integration that allows querying\nof specific locations or metadata within or from a BAM file where indexing operations are taken\ncare of at the server side. This is what has been done in Trackster.</p>\n\n<h3 id=\"more-examples\">More examples</h3>\n\n<p>For more examples of visualization plugins, you can browse this\n<a href=\"https://github.com/bgruening/galaxytools/tree/master/visualisations\">GitHub repo</a></p>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>We have just created a visualization plugin in Galaxy to visualize the number of alignments\nper <code class=\"language-plaintext highlighter-rouge\">RNAME</code> (chromosome) in a BAM file.</p>\n"],"ref_slides":["## Why visualizations?\n\n\n![Animated gif cycling through Anscombe's quartet and various variations that all have the same mean, SD, and correlation but look vastly different to someone's eyes.](../../images/anscombe-quartet-animated.gif)\n\n```python\nX mean: 54.26, X SD: 16.76\nY mean: 47.83, Y SD: 26.93\nCorr: -0.06\n```\n\n???\nAnscombes quartet, all these datasets have same mean, standard deviation and correlation,\nyet when visualizing them it is revealed they have vastly different structures.\n\n---\n\n## Why visualizations?\n\nBam files - textual\n\n![Screenshot of a terminal showing a wall of text with lines from a BAM file](../../images/vis_alignment_plaintext.png)\n\n---\n\n## Why visualizations?\n\nBam files - visualized\n\n![Screenshot of IGV with presumably the same bam file from before showing a large gap in the alignment, now clear due to a visualisation.](../../images/vis_alignment.png)\n\n---\n\n## Types of visualizations in Galaxy\n\n- **Trackster** - built-in genome browser\n- **Display applications**\n  - UCSC Genome Browser\n  - IGV\n- **Galaxy tools**\n  - JBrowse\n  - Krona\n- **Visualization plugins**\n  - Charts\n  - Generic\n- **Interactive Environments**\n  - Jupyter/Rstudio\n  - IOBIO (bam/vcf visualizations)\n  - Phinch (metagenomics visualizations)\n\n---\n\n## Which should I use?\n\n![Flowchart. Only available on an external website? If yes use a display application. Does it need to be served (e.g. python), if yes use an interactive tool. Is it computationally intensive, then it needs to be a regular tool. Is it written in javascript? Then it shold be a generic plugin. If it passes all these tests it can be a charts plugin.](../../images/which_viz_flowchart.png)\n\n---\n\n## Plugins\n\n- Visualizations button on history items\n- Different options depending on file type\n\n![Screenshot of the history in galaxy with viz dropdown clicked. On one dataset the options are charts and scatterplots for a tabular dataset. On the other is 'visualise in trackster' for a BAM dataset](../../images/vis_plugin_menu.png)\n\n---\n\n.enlarge120[\n## Plugins: Charts\n]\n.pull-left[\n![Charts selection interface showing a number of chart types that can be selected](../../images/vis_charts_02.png)\n]\n\n.pull-right[\n![Montage of several charts, bar, dot, stacked bar/line, box and whisker, and doughnut charts.](../../images/charts_examples.png)\n]\n\n---\n\n## Plugins: Charts\n\n- Allows exporting screenshots\n\n![A screenshot button is clicked providing optinos to save as PNG, SVG, or PDF](../../images/vis_charts_05.png)\n\n- For more information, see the charts plugin development\n[slides](/training-material/topics/dev/tutorials/visualization-charts/slides.html) and [tutorial](/training-material/topics/dev/tutorials/visualization-charts/tutorial.html)\n---\n\n## Plugins: Generic\n\n- Elements of visualization plugin:\n    * Configuration (name, description, datatype)\n    * Template\n    * Static resources (js, css, images)\n\n- Project Structure\n    * located in `$GALAXY_ROOT/config/plugins/$PLUGIN_NAME`\n\n```\n                myviz\n                ├── config\n                │   └── myviz.xml\n                ├── static\n                │   ├── css\n                │   ├── img\n                │   └── js\n                └── templates\n                    └── myviz.mako\n```\n---\n\n## Plugins: XML file\n\n```bash\n$ touch $GALAXY_ROOT/config/plugins/$PLUGIN_NAME/config/$PLUGIN_NAME.xml\n```\n\n- Hooks visualizations into Galaxy\n\n![Screenshot of code with boxes highlighting Draw RNA.js and the datatypes that it can accept. A template drawrnajs.mako is also highlighted](../../images/vis_plugin_conf_xml.png)\n\n* Data types must match with class names in `$GALAXY_ROOT/lib/galaxy/datatypes/`\n\n---\n\n## Plugins: Mako file\n\n- For templates of HTML files:\n```bash\n$ touch $GALAXY_ROOT/config/plugins/$PLUGIN_NAME/templates/$PLUGIN_NAME.mako\n```\n- Link to data types and HTML template file\n    * Every invocation of visualization: template compiled\n\n![Screenshot of more code showing a mako template being rendered](../../images/vis_mako_hello_world_dual.png)\n\n---\n\n## Plugins: Mako file\n\n- Access to the history item (*hda*) **pre** template compilation:\n    * `$hda.file_name`\n    * `$hda.metadata.dbkey`\n    * Avoid (unnecessary) copies of whole files\n- Access to *hda* **post** template compilation -> via URLs\n    * Download data file by browser (client side)\n        - Inconvenient for large files:\n            * Indices and query protocols (e.g. DAS protocol)\n    * Resolving history uid to hash\n    * Correction for extended root URLs:\n\n![Screenshot of a URL bar reading https://bioinf-galaxian.erasmusmc.nl/galaxy/](../../images/vis_nested_url.png)\n\n---\n\n## Plugins: Mako syntax\n\n- Access to *hda* **post** template compilation:\n    - Obtain hash value used in urls *hdadict['id']*\n    - Essential Python variables:\n\n![A mako template with a python codeblock section highlighting hdadict, root, app_root, file_url](../../images/vis_important_variables.png)\n\n---\n\n## Plugins:  Javascript and jQuery\n\n- HTML / JS implementation make often use of jQuery\n    * Galaxy ships with jQuery\n\n```html\n<script type=\"text/javascript\" src=\"${root}/static/scripts/libs/jquery/jquery.js\" />\n```\n\n---\n\n## Plugins: Generic template\n\n![Another code screenshot showing a generic template that can be used for viz.](../../images/vis_generic_template.png)\n\n---\n\n### Plugins: Static files\n\n- External libraries and static files go in `./static` dir:\n\n![Code screenshot showing a cool_vis_plugin.js being loaded](../../images/vis_generic_template_static.png)\n![Screenshot of its location in the static directory.](../../images/vis_static_dir.png)\n\n---\n\n## Plugins: Summary\n\n- Galaxy visualization plugins:\n    * Datatype-specific\n    * Written in HTML5 / JS\n    * Require minor python / Galaxy ecosystem knowledge\n    * Have access to the whole Galaxy system\n        - pre-compilation: python\n        - post-compilation: JS / API\n    * Can be installed without additional configuration\n    * Can not be connected to workflows\n    * Can not (out of the box) save and share\n\n---\n\n## Plugins: More tips and tricks\n\n- Galaxy has UI guidelines with corresponding CSS (https://wiki.galaxyproject.org/VisualizationsRegistry/Cookbook)\n- Look at existing plugins:\n    * Galaxy mainline\n    * https://github.com/bgruening/galaxytools/tree/master/visualisations\n- API is now very extensive, everything is accessible with jQuery!\n"],"hands_on":true,"slides":true,"mod_date":"2023-11-03 14:30:27 +0000","pub_date":"2016-09-30 10:05:09 +0000","version":26,"api":"https://training.galaxyproject.org/training-material/api/topics/dev/tutorials/visualization-generic/tutorial.json","tools":[],"supported_servers":[],"topic_name_human":"Development in Galaxy","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial"}