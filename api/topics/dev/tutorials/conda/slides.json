{"layout":"tutorial_slides","logo":"GTN","title":"Tool Dependencies and Conda","subtopic":"dependencies","questions":["How can I connect tools to applications and libraries?","What are the advantages of declaring dependencies for my tool?","What are Conda and Bioconda?","What are Conda recipes and environments?","How do I find and use existing Conda recipes?","How do I develop Conda recipes for use within Galaxy tools?"],"objectives":["Learn to use existing Conda recipes to enable best practice tool dependency management in Galaxy.","Learn the basics of building Conda recipes and contributing to Bioconda.","Learn to use Planemo to assist in developing Galaxy tools from existing and new Conda recipes."],"time_estimation":"75m","requirements":[{"type":"internal","topic_name":"dev","tutorials":["tool-integration","conda_sys"]}],"key_points":["Conda and Bioconda are Galaxy best practices for connecting Galaxy tools to underlying applications and libraries.","Leveraging Conda allows easy installation of your tool's dependencies by Galaxy deployers.","The Planemo commands `conda_search`, `conda_init`, `conda_install`, `lint`, `test`, and `serve` make it easy to search and use existing Conda recipes when developing tools.","Conda recipe skeletons, `conda build`, and with `planemo conda_install --conda_use_local` allow easy development of new Conda recipes at the same time as Galaxy tools that wrap them.","Bioconda is a Galaxy best practice Conda channel for recipe publication.","Bioconda has easy to follow contribution guidelines and is very welcoming to new contributors."],"contributors":["nsoranzo","jmchilton","bgruening","hmenager"],"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"S00045","url":"/topics/dev/tutorials/conda/slides.html","topic_name":"dev","tutorial_name":"conda","dir":"topics/dev/tutorials/conda","symlink":null,"id":"dev/conda","ref_tutorials":[],"ref_slides":["## Planemo\n\nThese slides mirror the section on \"Dependencies and Conda\" in the [Planemo Documentation](https://planemo.readthedocs.io/en/latest/writing_advanced.html#dependencies-and-conda).\n\n---\n\n## Galaxy Dependencies\n\n---\n\nclass: left, enlarge120\n\n### Example Tool (1 / 2)\n\nFrom Planemo docs - the following example builds a tool for the `seqtk seq` command.\n\n```sh\n$ planemo tool_init --force \\\n                    --id 'seqtk_seq' \\\n                    --name 'Convert to FASTA (seqtk)' \\\n                    --requirement seqtk@1.2 \\\n                    --example_command 'seqtk seq -a 2.fastq > 2.fasta' \\\n                    --example_input 2.fastq \\\n                    --example_output 2.fasta \\\n                    --test_case \\\n                    --cite_url 'https://github.com/lh3/seqtk' \\\n                    --help_from_command 'seqtk seq'\n```\n\nNotice the `--requirement seqtk@1.2`.\n\n---\n\nclass: left, enlarge120\n\n### Example Tool (2 / 2)\n\nThe `--requirement seqtk@1.2` gets translated into the following Galaxy tool XML:\n\n```xml\n<requirements>\n    <requirement type=\"package\" version=\"1.2\">seqtk</requirement>\n</requirements>\n```\n\n---\n\n## Dependency Resolution\n\n![schematic of a galaxy server with dependency resolution via requirement tags at the top. On the left is the tool box with a number of xml files listed like seqtk_seq and seqtk_subseq. On the right is applications & libraries showing only a few tools like seqtk, all of the 3 multipoe subtools were collapsed](../../images/galaxy_instance.png)\n\n???\n\n- Notice that multiple tools may be mapped to the same requirements and\n  any tools may use multiple Conda recipes.\n- There are few different ways to populate Applications and Libraries\n  on the right - we will talk about Conda which is what we consider the\n  \"community best practice\".\n\n---\n\nclass: enlarge120\n\n![Conda logo](../../../../shared/images/conda_logo.png)\n\nPackage, dependency and environment management\n\n---\n\nclass: enlarge120\n\n###.image-25[![Conda logo](../../../../shared/images/conda_logo.png)] <br/> Conda Terminology\n\nConda **recipes** build **packages** that are published to **channels**.\n\n---\n\nclass: enlarge120\n\n### .image-25[![Conda logo](../../../../shared/images/conda_logo.png)] <br /> Conda Key Features for Galaxy\n\n- No compilation at install time - *binaries* with their dependencies, libraries...\n\n- Support for all operating systems Galaxy targets\n\n- Easy to manage *multiple versions* of the same recipe\n\n- HPC-ready: no root privileges needed\n\n- Easy-to-write YAML recipes\n\n- Vibrant Communities\n\n???\n\n- Recipes: independent of the programming language in which software is written\n- Support for multiple versions at the same time is needed for reproducibility\n\nCompared with the Tool Shed dependency management (`tool_dependencies.xml`), BioConda is:\n\n- More popular!\n- Easier to develop.\n- Easier to install and test.\n\n---\n\n###.image-25[![Conda logo](../../../../shared/images/conda_logo.png)] <br/> Conda Distributions\n\n```\n\n\n```\n![Schematic showing conda as a small circle, miniconda encompasses it and adds python and base packages. Anaconda encompasses all of it, adding 150 high quality packages.](../../images/miniconda_vs_anaconda.png)\n\n---\n\nclass: enlarge120\n\n###.image-25[![conda logo](../../../../shared/images/conda_logo.png)] <br/> Best Practice Channels\n\n- Packages through channels within Continuum.\n\n- Conda channels searched by Galaxy for packages\n    - iuc (legacy)\n    - conda-forge\n    - bioconda\n    - defaults\n\n.footnote[If you are interested in Natural Language Processing or Cheminformatics you may be asking if these channels can still work for your tools. Despite the name [Bioconda](https://bioconda.github.io/) - it is really more about community and a set of best practices than about bioinformatics purity - many diverse packages have been integrated.]\n\n---\n\nclass: left, enlarge120\n\n###.image-25[![conda logo](../../../../shared/images/conda_logo.png)] <br/> Install and Configure\n\n```bash\n$ planemo conda_init\n$ export PATH=$PATH:~/miniconda3/bin\n$ which conda\n/Users/john/miniconda3/bin/conda\n```\n\nPlanemo installs Conda using miniconda and configured defaults designed to easy development.\n\nThis has already been done on [Planemo machine](https://github.com/galaxyproject/planemo-machine).\n\n---\n\nclass: enlarge120\n\n###.image-25[![conda logo](../../../../shared/images/conda_logo.png)] <br/> Quickstart\n#### Using Conda outside Planemo\n\n- Install some packages within an isolated environment\n\n```bash\n$ conda create -n yaml pyyaml\n$ conda env list\nbase        *  ~/miniconda3\nyaml           ~/miniconda3/envs/yaml\n$ conda activate yaml\n(yaml) $\n```\n\n- Install a package in the current environment\n\n```bash\n$ conda install pyyaml\n```\n\n---\n\nclass: enlarge150\n\n## Conda and Galaxy\n\nGalaxy now automatically installs Conda when first launched and will use [Bioconda](https://bioconda.github.io/) and other channels for package resolution.\n\n---\n\n### Installing Tools with Conda\n\n![Screenshot of tool installation menu](../../images/tool_install.png)\n\n---\n\n### Managing Tool Dependencies\n\n![Screenshot of the galaxy page for managing tool dependencies](../../images/dependency_manage.png)\n\n---\n\nclass: enlarge150\n\n## Conda and Planemo\n\nUsing Conda directly is generally package-centric, Planemo provides abstractions that are tool-centric.\n\n---\n\nclass: left, enlarge120\n\nThe next few slides will use the seqtk example from Planemo's documentation - this can be downloaded to\nfollow along using the following command:\n\n```bash\n$ planemo project_init --template=seqtk_complete seqtk_example\n$ cd seqtk_example\n```\n\n---\n\nclass: left\n\n### Linting Conda Dependencies\n\n.enlarge120[Planemo can check if the requirements of a tool are available in best practice Conda channels using the `--conda_requirements` flag of `planemo lint`.]\n\n<br>\n\n```bash\n$ planemo lint --conda_requirements seqtk_seq.xml\nLinting tool /Users/john/workspace/planemo/docs/writing/seqtk_seq_v6.xml\n  ...\nApplying linter requirements_in_conda... CHECK\n.. INFO: Requirement [seqtk@1.2] matches target in best practice Conda channel [bioconda].\n```\n\n<br>\n\n.enlarge120[*Notice Planemo indicates this tool is available and shows the channel it is available in.*]\n\n---\n\nclass: left\n\n### The Planemo `conda_install` command\n\n\n.reduce70[```sh\n$ planemo conda_install seqtk_seq.xml\nInstall conda target CondaTarget[seqtk,version=1.2]\n/home/john/miniconda3/bin/conda create -y --name __seqtk@1.2 seqtk=1.2\nFetching package metadata ...............\nSolving package specifications: ..........\nPackage plan for installation in environment /home/john/miniconda3/envs/__seqtk@1.2:\nThe following packages will be downloaded:\n    package                    |            build\n    ---------------------------|-----------------\n    seqtk-1.2                  |                0          29 KB  bioconda\nThe following NEW packages will be INSTALLED:\n    seqtk: 1.2-0   bioconda\n    zlib:  1.2.8-3\nFetching packages ...\n....\n#\n# To deactivate this environment, use:\n# > source deactivate __seqtk@1.2\n#\n$ which seqtk\nseqtk not found\n```]\n\nNotice seqtk hasn't been placed on the `PATH`, an environment has been setup that Galaxy (when\nused through Planemo) can leverage.\n\n---\n\nclass: enlarge120\n\n### The Planemo `conda_env` command\n\n.reduce70[```sh\n$ . <(planemo conda_env seqtk_seq.xml)\nDeactivate environment with conda_env_deactivate\n(seqtk_seq) $ which seqtk\n/home/planemo/miniconda2/envs/jobdepsiJClEUfecc6d406196737781ff4456ec60975c137e04884e4f4b05dc68192f7cec4656/bin/seqtk\n(seqtk_seq) $ seqtk seq\n\nUsage:   seqtk seq [options] <in.fq>|<in.fa>\n\nOptions: -q INT    mask bases with quality lower than INT [0]\n         -X INT    mask bases with quality higher than INT [255]\n         -n CHAR   masked bases converted to CHAR; 0 for lowercase [0]\n         -l INT    number of residues per line; 0 for 2^32-1 [0]\n...\n         -V        shift quality by '(-Q) - 33'\n         -U        convert all bases to uppercases\n         -S        strip of white spaces in sequences\n(seqtk_seq) $ conda_env_deactivate\n$\n```]\n\n---\n\n## Using the Tool Environment\n\nNow that we have verified the Conda environment setup with `conda_install` works properly on the\ncommand-line, we can use our tool!\n\n`planemo test` and `planemo serve` will use this environment by default now for this tool.\n\n---\n\nclass: left\n\n### Planemo `test`\n\n.reduce70[```sh\n$ planemo test seqtk_seq.xml\n...\nINFO  [galaxy.tools.actions] Handled output named output1 for tool seqtk_seq (20.136 ms)\nINFO  [galaxy.tools.actions] Added output datasets to history (12.782 ms)\nINFO  [galaxy.tools.actions] Verified access to datasets for Job[unflushed,tool_id=seqtk_seq] (10.954 ms)\nINFO  [galaxy.tools.actions] Setup for job Job[unflushed,tool_id=seqtk_seq] complete, ready to flush (21.053 ms)\nINFO  [galaxy.tools.actions] Flushed transaction for job Job[id=2,tool_id=seqtk_seq] (26.510 ms)\nINFO  [galaxy.jobs.handler] (2) Job dispatched\nDEBUG [galaxy.tools.deps] Using dependency seqtk version 1.2 of type conda\nDEBUG [galaxy.tools.deps] Using dependency seqtk version 1.2 of type conda\nINFO  [galaxy.jobs.command_factory] Built script [/tmp/tmpLvKwta/job_working_directory/000/2/tool_script.sh] for tool command [[ \"$CONDA_DEFAULT_ENV\" = \"/Users/john/miniconda2/envs/__seqtk@1.2\" ] || . /Users/john/miniconda2/bin/activate '/Users/john/miniconda2/envs/__seqtk@1.2' >conda_activate.log 2>&1 ; seqtk seq -a '/tmp/tmpLvKwta/files/000/dataset_1.dat' > '/tmp/tmpLvKwta/files/000/dataset_2.dat']\nDEBUG [galaxy.tools.deps] Using dependency samtools version None of type conda\nDEBUG [galaxy.tools.deps] Using dependency samtools version None of type conda\nok\n\n----------------------------------------------------------------------\nXML: /private/tmp/tmpLvKwta/xunit.xml\n----------------------------------------------------------------------\nRan 1 test in 15.936s\n\nOK\n```]\n\n.enlarge120[\nThe following line indicates the seqtk package was found:\n\n```\n[galaxy.tools.deps] Using dependency seqtk version 1.2 of type conda\n```\n]\n\n---\n\n<hands-on-title>Hands-on</hands-on-title>\n\n![Cartoon of people jumping.](../../images/exercise.png)\n\n---\n\n<hands-on-title>Hands-on</hands-on-title>\n\n#### The Goal\n- Use the Planemo commands `conda_install`, `conda_env`, and `test` to practice the Galaxy tool dependency development lifecycle.\n\n---\n\n<hands-on-title>Hands-on</hands-on-title>\n\n#### Steps\n\nRun the following commands to practice working with Galaxy tools, Planemo, and Conda.\n\n\n```bash\n$ planemo project_init --template=seqtk_complete seqtk_example\n```\n```bash\n$ cd seqtk_example\n```\n```bash\n$ planemo conda_install seqtk_seq.xml\n```\n```bash\n$ . &lt;(planemo conda_env seqtk_seq.xml)\n```\n```bash\n$ planemo test seqtk_seq.xml\n```\n---\n\nclass: enlarge120\n\n## Finding the Correct Requirements & Packages\n\nThe previous example worked because a published Bioconda recipe named `seqtk` at version `1.2`\nwas previously published, but how can these be found?\n\nTwo easy approaches are using `planemo conda_search` and using the Anaconda web search.\n\n---\n\nclass: left\n\n### Using the Planemo `conda_search` Command\n\nThe Planemo `conda_search` command is a shortcut around `conda search` that searches best\npractice channels that Galaxy is configured to work with:\n\n```sh\n$ planemo conda_search seqt\nFetching package metadata ...............\nseqtk                        r75                           0  bioconda\n                             r82                           0  bioconda\n                             r93                           0  bioconda\n                             1.2                           0  bioconda\n```\n\nAlternatively, `conda` can be used directly:\n\n```sh\n$ $HOME/miniconda3/bin/conda search -c iuc -c conda-forge -c bioconda seqtk\n```\n\n---\n\n### Using Anaconda Search - https://anaconda.org\n\n![screensho of the anaconda homepage](../../images/anaconda_landing.png)\n\n---\n\n### Using Anaconda Search - https://anaconda.org\n\n![Screenshot of an anaconda search for the term seqtk](../../images/anaconda_result.png)\n\n???\n\nNotice that only one of these results is a best practice channel and so that is the\nonly one that will be used by Galaxy by default.\n\n---\n\n<hands-on-title>Hands-on</hands-on-title>\n\n![Cartoon of people jumping.](../../images/exercise.png)\n\n---\n\n<hands-on-title>Hands-on</hands-on-title>\n\n#### The Goal\n- Find the correct package and version for a tool in a best practice channel.\n- Add a requirement to a tool to allow Galaxy to find, install, and use a Conda package.\n\n---\n\n<hands-on-title>Hands-on</hands-on-title>\n\n#### Steps\n\n1. Run the following commands to download an example tool to modify.\n```sh\n$ planemo project_init --template conda_exercises conda_exercises\n$ cd conda_exercises/exercise1\n$ ls\npear.xml              test-data\n```\n2. Run `planemo test pear.xml` to verify the tool does not function without dependencies defined.\n3. Use `--conda_requirements` flag with `planemo lint` to verify it does indeed lack requirements.\n4. Use `planemo conda_search` or the [Anaconda](https://anaconda.org/) website to search for the correct package and version in a best practice channel.\n5. Update pear.xml with the correct requirement tags.\n6. Re-run the `lint` command from above to verify the tool now has the correct dependency definition.\n7. Re-run the `test` command from above to verify the tool test now works properly.\n\n\n---\n\n## Writing a Conda recipe\n\n- If searching best practice channels fails, you may need to build a Conda recipe.\n\n- A Conda recipe is defined by a directory, the two most important files in this directory are:\n  - `meta.yaml`: contains all the metadata of the recipe\n  - `build.sh`: the (optional) Unix script that installs the files\n\n.footnote[[conda-build user guide](https://conda.io/projects/conda-build/en/latest/user-guide/index.html) <br/> [Bioconda guidelines](https://bioconda.github.io/contributor/index.html)]\n\n---\n\nclass: left\n\n## `meta.yaml`\n\n`meta.yaml` contains basic metadata about the recipe.\n\n\n```yaml\n{% set version = \"0.7.17\" %}\n{% set sha256 = \"980b9591b61c60042c4a39b9e31ccaad8d17ff179d44d347997825da3fdf47fd\" %}\n\npackage:\n  name: bwa\n  version: {{ version }}\nsource:\n  url: https://github.com/lh3/bwa/archive/v{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n  patches:\n    - Makefile.patch\nbuild:\n  number: 7\nabout:\n  home: https://github.com/lh3/bwa\n  license: GPL3\n  license_file: COPYING\n  summary: The BWA read mapper.\n```\n\n\n---\n\n## `meta.yaml` > `requirements`\n\n\n```yaml\nrequirements:\n  build:\n    - {{ compiler('c') }}\n  host:\n    - zlib\n  run:\n    - zlib\n    - perl\n\n```\n<small>\n- `build`: requirements needed to perform the compilation (if any)\n- `host`: requirements needed during the build step (here compilation)\n- `run`: requirements needed at runtime\n</small>\n\n---\n\n## Preprocessing Selectors\n\n- Common selectors include `linux`, `osx`, `py2k`, `py3k`.\n- Evaluated as Python expressions - feel free to use `and`, `or`, etc.\n\n\n```yaml\nrequirements:\n  build:\n    - bz2file  # [py < 33]\n    - typing  # [py27 or py34]\n\n```\n\n```yaml\nbuild:\n  skip: True  # [osx]\n```\n\n.footer[.center[https://conda.io/projects/conda-build/en/latest/source/define-metadata.html#preprocessing-selectors ]]\n\n---\n\nclass: left\n\n## Tests\n\n`meta.yaml` should contain simple tests. These are commands executed at the end of `conda build` and expected to return `0` on success.\n\n```yaml\ntest:\n  commands:\n    - bowtie2 --version\n```\n\n```yaml\ntest:\n  commands:\n    - bwa 2>&1 | grep 'index sequences in the'\n```\n\n```yaml\ntest:\n  commands:\n    - '$R -e \"library(''xcms'')\"'\n```\n\nPlease note that the Conda tests run inside the runtime environment and not in the build environment.\n\n.footnote[.center[https://conda.io/projects/conda-build/en/latest/source/define-metadata.html#test-section ]]\n\n---\n\nFrom the [Bioconda Guidelines](https://bioconda.github.io/contributor/guidelines.html):\n\n> An adequate test must be included in the recipe. An \"adequate\" test depends on the recipe, but must be able to detect a successful installation. While many packages may ship their own test suite (unit tests or otherwise), including these in the recipe is not recommended since it may timeout the build system on CircleCI. We especially want to avoid including any kind of test data in the repository.\n\n---\n\n## `build.sh`\n\n```bash\n#!/bin/bash\n./configure --prefix=$PREFIX\nmake\nmake install\n```\n\n```bash\n#!/bin/bash\nmkdir -p $PREFIX/bin\ncp *.py $PREFIX/bin\n```\n<small>\n- `$PREFIX` is a variable defined by conda when building the package.\n- `$PREFIX` usually contains `bin/`, `lib/`, and `include/` that are filled with the package files.\n- `$PREFIX` will be loaded in the user environment at runtime: `PATH`, `LD_LIBRARY_PATH`, `PYTHONPATH`, ...\n</small>\n\n.footnote[[http://training.galaxyproject.org/training-material/topics/dev/tutorials/conda_sys/slides.html](/training-material/topics/dev/tutorials/conda_sys/slides.html)]\n\n---\n\n## Skeletons\n\n```bash\n$ conda skeleton pypi <packagename>\n```\n```bash\n$ conda skeleton cran <packagename>\n```\n```bash\n$ bioconductor_skeleton.py <packagename>\n```\n```bash\n$ conda skeleton cpan <packagename>`\n```\n\nThese generate pre-filled recipes <small>(not guaranteed to work out of the box)</small> for specific programming environments.\n\n.footnote[[Building conda packages with conda skeleton](https://docs.conda.io/projects/conda-build/en/latest/user-guide/tutorials/build-pkgs-skeleton.html)]\n\n---\n\n## Building\n\nOnce the recipe is ready to go, the `conda build` command can be used to build it.\n\n```bash\n$ $HOME/miniconda3/bin/conda build .\n```\n\n1. BUILD START: Builds/Compiles the package\n2. BUILD START: Provides a .tar.bz2\n3. TEST START: Installs the .tar.bz2 previously generated\n4. TEST START: Launches the functional tests\n5. (Provides the .tar.bz2 path)\n\n\n.footnote[If miniconda wasn't configured with `planemo conda_init`, you may have <br/> to run `conda install conda-build` before using the above command.]\n\n---\n\n.image-75[![bioconda logo](../../../../shared/images/bioconda_logo.png)]\n\n\n- A channel dedicated to bioinformatics (and other informatics) packages\n- https://bioconda.github.io\n- https://anaconda.org/bioconda\n- Open to [contribution](https://bioconda.github.io/contributing.html)\n- GitHub repository: https://github.com/bioconda/bioconda-recipes\n\n---\n\n###.image-25[![bioconda logo](../../../../shared/images/bioconda_logo.png)] contributing 1/2\n\n- Fork [Bioconda](https://github.com/bioconda/bioconda-recipes/fork).\n- Clone your fork:\n\n  ```bash\n  $ git clone https://github.com/ <myuser> /bioconda-recipes\n  ```\n\n- Create a new branch `package`\n\n  ```bash\n  $ git checkout -b package\n  ```\n\n- Fill two files `meta.yaml` and `build.sh` in a new recipe directory\n\n- Build your new package and test it using `conda build`\n\n---\n\n###.image-25[![bioconda logo](../../../../shared/images/bioconda_logo.png)] contributing 2/2\n\n- Commit and push to GitHub\n\n  ```bash\n  $ git add recipe\n  ```\n\n  ```bash\n  $ git commit -m 'my recipe description'\n  ```\n\n  ```bash\n  $ git push origin package\n  ```\n\n- Create a [Pull Request](https://github.com/bioconda/bioconda-recipes)\n\n- After the PR is merged, wait for the functional tests to pass on the master branch\n\n- Enjoy your new Conda package at https://anaconda.org/bioconda\n\n\nSee [Contributing with GitHub](/training-material/topics/contributing/tutorials/github-command-line-contribution/slides.html).\n\n---\n\n### Planemo and `--conda_use_local`\n\nBy default, Galaxy and Planemo will ignore locally built packages.\n\nSimply pass `--conda_use_local` to various Planemo commands (e.g. `test`, `conda_install`, or `serve`) to use the local package\ncache.\n\n*Enables developing Galaxy tools and Conda recipes in parallel.*\n\n---\n\n<hands-on-title>Hands-on</hands-on-title>\n\n![Cartoon of people jumping.](../../images/exercise.png)\n\n---\n\n<hands-on-title>Hands-on</hands-on-title>\n\n#### The Goal\n- Implement and test a local Conda recipe.\n- Use Planemo and Galaxy with a locally built package.\n\n---\n\nclass: left\n\n<hands-on-title>Hands-on</hands-on-title>\n\n#### Before\n\nIf you have completed `exercise1`, open `exercise2`.\n\n```sh\n$ cd ../exercise2\n$ ls\nfleeqtk_seq.xml              test-data\n```\n\nThis directory contains the outline of a tool for [fleeqtk](https://github.com/jmchilton/fleeqtk). fleeqtk is a fork of the project seqtk that many Planemo tutorials are built around and the example tool `fleeqtk_seq.xml` should be fairly familiar.\n\n---\n\nclass: left\n\n<hands-on-title>Hands-on</hands-on-title>\n\n#### Steps\n\n1. Clone and branch Bioconda (https://github.com/bioconda/bioconda-recipes)\n2. Build a recipe for fleeqtk version 1.3. You may wish to use conda skeleton, start from scratch, or copy the recipe of seqtk and work from there - any of these strategies should work\n  * fleeqtk 1.3 can be downloaded using the URL https://github.com/jmchilton/fleeqtk/archive/v1.3.tar.gz\n  * fleeqtk can be built using `make` and installed with `make install`\n3. Use `conda build` to build the recipe\n4. Add a `requirement` for this new package in the example tool.\n5. Run `planemo conda_install --conda_use_local fleeqtk_seq.xml` to install the package for Galaxy\n6. Run `planemo test fleeqtk_seq.xml` to verify the tool and package work together\n\n---\n\n# Advanced Topics in Conda Development\n\n---\n\n## Jinja Templating\n\n\n```yaml\n{% set name = \"seqtk\" %}\n{% set version = \"1.15.1\" %}\n\npackage:\n  name: {{ name }}\n  version: {{ version }}\n\nsource:\n    url: http://coolsoftware.com/{{ name }}/{{ version }}/{{ name }}-{{ version }}.zip\n```\n\n\nhttps://conda.io/projects/conda-build/en/latest/source/define-metadata.html#templating-with-jinja\n\n---\n\nclass: left\n\n## Stable URLs\n\n```yaml\nsource:\n  url: https://github.com/lh3/bwa/archive/v0.7.15.tar.gz\n  md5: 54fdee953c5c256d36885a1c5c6b118c\n```\n\n> While supported by Conda, `git_url` and `git_rev` are not as stable as a git tarball. Ideally a github repo should have tagged releases that are accessible as tarballs from the “releases” section of the github repo. In addition tarballs can be easily mirrored and Bioconda is saving a copy of every tarball so the recipe can be rebuild at any time.\n\n---\n\nclass: left\n\n## Python\n\nFor PyPI packages\n\n```sh\nconda skeleton pypi <package_name>\n```\n\n- Builds likely correct `build.sh` and `meta.yaml`.\n- The test automatically added is probably sufficient for library, may need to write extra tests for command-line tools.\n- Recipes requiring `python` should build on Python 2.7, 3.5, and 3.6 by default, preprocessing selectors can be used with `build: skip` to skip targets.\n\n---\n\n## Python - pysam's `build.sh`\n\n```sh\n#!/bin/bash\n# Remove gcc statements that do not work on older compilers for CentOS5\n# support\nsed -i'' -e 's/\"-Wno-error=declaration-after-statement\",//g' setup.py\nsed -i'' -e 's/\"-Wno-error=declaration-after-statement\"//g' setup.py\n# linking htslib, see:\n# https://pysam.readthedocs.org/en/latest/installation.html#external\n# https://github.com/pysam-developers/pysam/blob/v0.9.0/setup.py#L79\nexport CFLAGS=\"-I$PREFIX/include\"\nexport CPPFLAGS=\"-I$PREFIX/include\"\nexport LDFLAGS=\"-L$PREFIX/lib\"\n\nexport HTSLIB_LIBRARY_DIR=$PREFIX/lib\nexport HTSLIB_INCLUDE_DIR=$PREFIX/include\n$PYTHON setup.py install\n```\n\n---\n\n## Python - pysam's `meta.yaml`\n\n.reduce50[\n```yaml\n{% set version = \"0.15.2\" %}\n{% set samtools_version = \"1.9\" %}\n{% set bcftools_version = \"1.9\" %}\n\npackage:\n  name: pysam\n  version: '{{ version }}'\n\nsource:\n  url: https://github.com/pysam-developers/pysam/archive/v{{ version }}.tar.gz\n  sha256: 8cb3dd70f0d825086ac059ec2445ebd2ec5f14af73e7f1f4bd358966aaee5ed3\n\nbuild:\n  number: 3\n  binary_relocation: False # [linux]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n  host:\n    - htslib\n    - samtools {{ samtools_version }}\n    - bcftools {{ bcftools_version }}\n    - cython\n    - python\n    - setuptools\n    - zlib\n    - curl\n    - libdeflate\n  run:\n    - samtools {{ samtools_version }}\n    - bcftools {{ bcftools_version }}\n    - python\n    - curl\n    - libdeflate\n\ntest:\n  imports:\n    - pysam\n```]\n\n---\n\n## R\n\nFor CRAN packages\n\n```sh\nconda skeleton cran <packagename>\n```\n\n- Builds likely correct `build.sh` and `meta.yaml`.\n- The recipe name will have an `r-` prefix and will be converted to lowercase.\n\n<i class=\"fas fa-exclamation-triangle\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">warning</span> _The majority of R packages on CRAN are generic and should therefore be submitted at Conda-Forge.\nExceptions are r-\\* packages that depends on bioconductor-\\* packages._\n\n[Conda-Forge contribution guidelines](https://conda-forge.org/docs/maintainer/adding_pkgs.html)\n\n---\n\n## Java\n\n- Recipes should use the `openjdk` package from [conda-forge](https://github.com/conda-forge/openjdk-feedstock).\n- Add a wrapper script if the software is typically called via `java -jar`.\n- JAR files should go in `$PREFIX/share/$PKG_NAME-$PKG_VERSION-$PKG_BUILDNUM`\n- A wrapper script should be placed here as well, and symlinked to $PREFIX/bin.\n\nhttps://bioconda.github.io/guidelines.html#java\n\n---\n\n## Java - PeptideShaker's `build.sh`\n\n```sh\n#!/bin/bash\nset -eu -o pipefail\n\noutdir=$PREFIX/share/$PKG_NAME-$PKG_VERSION-$PKG_BUILDNUM\nmkdir -p $outdir\nmkdir -p $PREFIX/bin\ncp -R * $outdir/\ncp $RECIPE_DIR/peptide-shaker.py $outdir/peptide-shaker\nls -l $outdir\nln -s $outdir/peptide-shaker $PREFIX/bin\nchmod 0755 \"${PREFIX}/bin/peptide-shaker\"\n```\n\n---\n\nclass: reduce70\n\n## Java - PeptideShaker's `meta.yaml`\n\n\n```yaml\n...\n\nsource:\n    url: http://genesis.ugent.be/maven2/eu/isas/peptideshaker/{{ name }}/{{ version }}/{{ name }}-{{ version }}.zip\n    md5: 14a48413e28a25614f5fda2b381d7197\n\nrequirements:\n  build:\n  run:\n    - openjdk >=6\n    - python\n\ntest:\n    commands:\n      - peptide-shaker eu.isas.peptideshaker.cmd.PeptideShakerCLI\n      - peptide-shaker eu.isas.peptideshaker.cmd.PeptideShakerCLI -Xms512m -Xmx1g\n```\n\n\n---\n\n## Perl\n\nFor CPAN packages\n\n```sh\nconda skeleton cpan <packagename>\n```\n\n- Builds likely correct `build.sh` and `meta.yaml`.\n- The recipe will have the `perl-` prefix.\n\n---\n\nclass: reduce70\n\n## Perl - Module-Build\n\n```yaml\npackage:\n  name: perl-module-build\n  version: \"0.4214\"\n\nsource:\n  url: https://cpan.metacpan.org/authors/id/L/LE/LEONT/Module-Build-0.4214.tar.gz\n  md5: 7b7ca5a47bef48c50c8b5906ca3ac7fb\n\nbuild:\n  number: 0\n\nrequirements:\n  host:\n    - perl\n    - perl-cpan-meta-yaml\n    - perl-extutils-parsexs\n    - perl-data-dumper\n    # [...]\n  run:\n    - perl\n    - perl-text-parsewords\n    - perl-cpan-meta\n    - perl-version\n    # [...]\n\ntest:\n  # Perl 'use' tests\n  imports:\n    - Module::Build\n    - Module::Build::Base\n    - Module::Build::Compat\n    - Module::Build::Config\n    # [...]\n\nabout:\n  home: https://metacpan.org/pod/Module::Build\n  license: perl_5\n  summary: 'Build and install Perl modules\n```\n\n---\n\nclass: left\n\n## Metapackages\n\n> Metapackages tie together other packages. All they do is define dependencies. For example, the hubward-all metapackage specifies the various other conda packages needed to get full hubward installation running just by installing one package.\n\n> Other metapackages might tie together conda packages with a theme. For example, all UCSC utilities related to bigBed files, or a set of packages useful for variant calling.\n\nhttps://bioconda.github.io/guidelines.html#metapackages\n\n---\n\nclass: left\n\n## CircleCI Continuous Building\n\n.image-70[![circle ci logo](../../images/circleci-logo.png)]\n\n- Lint recipes.\n- Build and run tests.\n- Build and publish Docker container.\n- Publish to anaconda.org.\n\n---\n\n## CircleCI Command Line Interface (CLI)\n\n- Installation:\n\n.reduce70[```bash\n$ curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci\n```]\n\n.reduce70[```bash\n$ chmod +x /usr/local/bin/circleci\n```]\n\n- The extended building and testing done by CircleCI can be executed locally using the CircleCI CLI in the root directory of Bioconda\n\n- It should be run from the top-level dir of the repo.\n\n- Build and test recipes:\n\n.reduce70[```bash\n$ circleci build\n```]\n"],"video_library":{"tutorial":null,"slides":null,"demo":null,"both":null,"session":null},"hands_on":false,"slides":true,"mod_date":"2023-04-14 14:14:17 +0000","pub_date":"2017-06-20 21:12:27 +0000","version":52,"api":"https://training.galaxyproject.org/training-material/api/topics/dev/tutorials/conda/tutorial.json","tools":[],"supported_servers":[],"topic_name_human":"Development in Galaxy","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial","redirect_from":["/short/dev/conda/slides","/short/S00045"]}