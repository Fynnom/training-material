{"layout":"tutorial_slides","title":"Visualizations: JavaScript Plugins","questions":["How can I make a custom JavaScript plugin?"],"objectives":["Learn how to add custom JavaScript plugins using the Galaxy Charts framework"],"time_estimation":"1h","key_points":["Charts is a pluggable extension system for JS-only visualizations","With three key files we can integrate any JS-only visualization into Galaxy"],"subtopic":"viz","contributors":["shiltemann","yhoogstrate","bgruening","guerler","dannon"],"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"S00053","url":"/topics/dev/tutorials/visualization-charts/slides.html","topic_name":"dev","tutorial_name":"visualization-charts","dir":"topics/dev/tutorials/visualization-charts","symlink":null,"id":"dev/visualization-charts","ref_tutorials":["<p>In this tutorial we are going to demonstrate how to add a third party\nJavaScript-based visualization to Galaxy, and we’ll talk about what the benefits\nare. The plugin we’ve selected for this exercise is the <a href=\"https://biasmv.github.io/pv/\"><em>PV-Javascript Protein\nViewer</em></a>. It is an open source protein structure\nviewer for <code class=\"language-plaintext highlighter-rouge\">PDB</code>-files. There are many other popular protein structure viewers\navailable for the visualization of <code class=\"language-plaintext highlighter-rouge\">PDB</code>-files such as e.g.\n<a href=\"https://arose.github.io/ngl/\">NGL</a> (also available in Galaxy) and\n<a href=\"https://chemapps.stolaf.edu/jmol/jsmol/jsmol.htm\">JSMol</a>.</p>\n\n<blockquote class=\"details\">\n  <details-title>Background: What is the PDB (Protein Data Bank) file format?</details-title>\n\n  <p>The <code class=\"language-plaintext highlighter-rouge\">PDB</code>-file format contains atomic coordinates of biomolecules derived through a range of experimental and computational methods. Most commonly the file contains a spatial crystallographic snapshot of a protein. There are 100s of thousands of protein structures publicly available at the Protein Data Bank (<a href=\"https://www.rcsb.org\">https://www.rcsb.org</a>). Proteins are usually labeled by a four-letter code.\nHere is an example of a <code class=\"language-plaintext highlighter-rouge\">PDB</code>-file for a hydrolase bond to its inhibitor (PDB: <a href=\"https://www.rcsb.org/pdb/explore/explore.do?structureId=1acb\">1ACB</a>):</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>HEADER    HYDROLASE/HYDROLASE INHIBITOR           08-NOV-91   1ACB\nTITLE     CRYSTAL AND MOLECULAR STRUCTURE OF THE BOVINE ALPHA-CHYMOTRYPSIN-EGLIN\nTITLE    2 C COMPLEX AT 2.0 ANGSTROMS RESOLUTION\n...\nKEYWDS    SERINE PROTEASE, HYDROLASE-HYDROLASE INHIBITOR COMPLEX\nAUTHOR    R.Z.KRAMER,L.VITAGLIANO,J.BELLA,R.BERISIO,L.MAZZARELLA,\nAUTHOR   2 B.BRODSKY,A.ZAGARI,H.M.BERMAN\n...\nREMARK   1 REFERENCE 1\nREMARK   1  AUTH   M.BOLOGNESI,L.PUGLIESE,G.GATTI,F.FRIGERIO,A.CODA,L.ANTOLINI,\nREMARK   1  AUTH 2 H.P.SCHNEBLI,E.MENEGATTI,G.AMICONI,P.ASCENZI\nREMARK   1  TITL   X-RAY CRYSTAL STRUCTURE OF THE BOVINE\nREMARK   1  TITL 2 ALPHA-CHYMOTRYPSIN(SLASH)EGLIN C COMPLEX AT 2.6 ANGSTROMS\n...\nSEQRES   1 E  245  CYS GLY VAL PRO ALA ILE GLN PRO VAL LEU SER GLY LEU\nSEQRES   2 E  245  SER ARG ILE VAL ASN GLY GLU GLU ALA VAL PRO GLY SER\nSEQRES   3 E  245  TRP PRO TRP GLN VAL SER LEU GLN ASP LYS THR GLY PHE\n...\nATOM      1  N   CYS E   1       2.323 -16.405  18.812  1.00 43.48           N\nATOM      2  CA  CYS E   1       3.017 -15.136  18.786  1.00 35.11           C\nATOM      3  C   CYS E   1       4.134 -15.068  19.799  1.00 32.90           C\nATOM      4  O   CYS E   1       4.173 -15.810  20.772  1.00 41.38           O\nATOM      5  CB  CYS E   1       2.052 -13.969  19.139  1.00 31.14           C\nATOM      6  SG  CYS E   1       1.246 -14.085  20.788  1.00 34.72           S\nATOM      7  N   GLY E   2       4.993 -14.081  19.607  1.00 21.94           N\n...\nHETATM 2292  O   HOH E 406      12.343   1.842  12.901  0.86 18.70           O\nHETATM 2293  O   HOH E 407      -4.767  17.237  10.630  1.00 59.78           O\nHETATM 2294  O   HOH E 408      11.489  -6.278  18.740  0.96 20.00           O\n...\n</code></pre></div>  </div>\n\n  <p>More resources on this file format:</p>\n\n  <ul>\n    <li><a href=\"https://en.wikipedia.org/wiki/Protein_Data_Bank_(file_format)\">https://en.wikipedia.org/wiki/Protein_Data_Bank_(file_format) </a></li>\n    <li><a href=\"http://www.wwpdb.org/documentation/file-format\">https://www.wwpdb.org/documentation/file-format </a></li>\n  </ul>\n</blockquote>\n\n<p>As mentioned above we will be focusing on the <em>PV-Javascript Protein Viewer</em> in\nthis tutorial. Now that we have learned about the underlying file format, let us\ncontinue by visiting the protein viewer developer site at\n<a href=\"https://biasmv.github.io/pv/\">https://biasmv.github.io/pv/</a> to get familiar\nwith the plugin.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title></hands-on-title>\n\n  <ol>\n    <li>\n      <p>View the plugin in action, rotate the molecule and change its style.</p>\n    </li>\n    <li>\n      <p>Under which license is this plugin distributed?</p>\n    </li>\n    <li>\n      <p>Can you find the minified code file of this plugin?</p>\n    </li>\n  </ol>\n\n</blockquote>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will deal with:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#section-1---basic-plugin-setup\" id=\"markdown-toc-section-1---basic-plugin-setup\">Section 1 - Basic plugin setup</a></li>\n  <li><a href=\"#section-2---allow-different-rendering-modes\" id=\"markdown-toc-section-2---allow-different-rendering-modes\">Section 2 - Allow different rendering modes</a></li>\n  <li><a href=\"#conclusion\" id=\"markdown-toc-conclusion\">Conclusion</a></li>\n</ol>\n\n</blockquote>\n\n<h2 id=\"section-1---basic-plugin-setup\">Section 1 - Basic plugin setup</h2>\n\n<h3 id=\"directory-and-plugin-preparations\">Directory and plugin preparations</h3>\n\n<p>In this section we will download the viewer and add it to a local <em>Galaxy</em>\ninstance. All development takes place within the <em>Galaxy</em> codebase. The first\nthing we are going to do is to clone a <em>Galaxy</em> instance and prepare the\ndirectory structure for the new visualization plugin.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title></hands-on-title>\n\n  <ol>\n    <li>Clone an instance of <em>Galaxy</em> in a path, further referred to as <code class=\"language-plaintext highlighter-rouge\">$GALAXY_ROOT</code>:\n      <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git clone https://github.com/galaxyproject/galaxy\n</code></pre></div>      </div>\n    </li>\n    <li>Navigate to the visualization plugin directory:\n      <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span><span class=\"nb\">cd</span> <span class=\"nv\">$GALAXY_ROOT</span>/config/plugins/visualizations\n</code></pre></div>      </div>\n    </li>\n    <li>Copy the existing example into a new directory:\n      <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span><span class=\"nb\">cp</span> <span class=\"nt\">-r</span> example myviz\n</code></pre></div>      </div>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>This example visualization provides a great place to start with most of the\nbasics already in place.  Now that the directory structure is in place, let us\nreview the example visualization. Each visualization contains a set of <b>3</b>\nfiles:</p>\n\n<ul>\n  <li>Logo (<code class=\"language-plaintext highlighter-rouge\">static/logo.png</code>) which will appear in <em>Chart</em>’s plugin selection interface.</li>\n  <li>Configuration (<code class=\"language-plaintext highlighter-rouge\">config/example.xml</code>) describing input parameters and options.</li>\n  <li>Wrapper (<code class=\"language-plaintext highlighter-rouge\">src/script.js</code>) which serves as a bridge between <em>Galaxy</em> and our 3rd-party plugin.</li>\n</ul>\n\n<p>In the following sections we are going to discuss these files in more detail and\nmodify them to incorporate a new visualization. Let’s start with the logo for\nour visualization.</p>\n\n<h3 id=\"your-visualization-needs-a-logo\">Your visualization needs a logo</h3>\n\n<p>Each visualization is represented by a logo in the Galaxy interface. This makes\nit easier for users to find and configure their visualization. The logo should\nbe in the <code class=\"language-plaintext highlighter-rouge\">png</code>-file format. It will appear with a width of 120 pixels.</p>\n\n<p>Here’s an example <a href=\"../../files/charts-plugins/pdb/logo.png\">logo</a>:</p>\n\n<p><a href=\"../../files/charts-plugins/pdb/logo.png\" rel=\"noopener noreferrer\"><img src=\"../../files/charts-plugins/pdb/logo.png\" alt=\"Logo. \" width=\"120\" height=\"120\" loading=\"lazy\" /></a></p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title></hands-on-title>\n\n  <ol>\n    <li>\n      <p>Find an arbitrary image in <code class=\"language-plaintext highlighter-rouge\">PNG</code>-file format. Possibly using <em>Google</em>’s <a href=\"https://images.google.com\">image search</a>.</p>\n    </li>\n    <li>\n      <p>Copy it to the <code class=\"language-plaintext highlighter-rouge\">myviz/static</code> directory and name it <code class=\"language-plaintext highlighter-rouge\">logo.png</code>.</p>\n    </li>\n  </ol>\n</blockquote>\n\n<h3 id=\"configure-the-visualization\">Configure the visualization</h3>\n\n<p>Each visualization has a configuration file. In this case it is named\n<code class=\"language-plaintext highlighter-rouge\">example.xml</code>. This file has conceptual similarities with a Tool’s XML-file. It\nallows developers to specify a variety of attributes and input parameters for\ntheir visualization. Throughout this tutorial we are going to gradually augment\nthis file but for now we keep it simple.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title></hands-on-title>\n\n  <ol>\n    <li>\n      <p>Rename the file to <code class=\"language-plaintext highlighter-rouge\">config/myviz.xml</code></p>\n    </li>\n    <li>\n      <p>Edit the file named <code class=\"language-plaintext highlighter-rouge\">config/myviz.xml</code> and change the name and description.</p>\n    </li>\n    <li>Go to the Galaxy root directory to install dependencies, activate the virtual environment, and invoke the Galaxy client build.\n      <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span><span class=\"nb\">cd</span> <span class=\"nv\">$GALAXY_ROOT</span>\n<span class=\"nv\">$ </span>make setup-venv\n<span class=\"nv\">$ </span><span class=\"nb\">source</span> .venv/bin/activate\n<span class=\"nv\">$ </span>make client\n</code></pre></div>      </div>\n    </li>\n    <li>Run Galaxy\n      <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>./run.sh\n</code></pre></div>      </div>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>Your visualization should now be loaded.  You can verify that now by clicking\non <code class=\"language-plaintext highlighter-rouge\">Visualize &gt; Create Visualization</code> in the top menu bar of Galaxy and finding\nyour plugin with its new logo in the list there.</p>\n\n<h3 id=\"assign-a-new-datatype-to-your-visualization\">Assign a new datatype to your visualization</h3>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title></hands-on-title>\n\n  <ol>\n    <li>\n      <p>Open the file named <code class=\"language-plaintext highlighter-rouge\">config/myviz.xml</code> and find the <code class=\"language-plaintext highlighter-rouge\">&lt;data_source&gt;</code> section.</p>\n    </li>\n    <li>\n      <p>Replace the existing two <code class=\"language-plaintext highlighter-rouge\">&lt;test&gt;</code> sections with:</p>\n\n      <p><code class=\"language-plaintext highlighter-rouge\">&lt;test type=\"isinstance\" test_attr=\"datatype\" result_type=\"datatype\"&gt;molecules.PDB&lt;/test&gt;</code></p>\n    </li>\n    <li>\n      <p>Remove the <code class=\"language-plaintext highlighter-rouge\">&lt;settings&gt;</code> and <code class=\"language-plaintext highlighter-rouge\">&lt;groups&gt;</code> sections.</p>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>This links the plugins to the <code class=\"language-plaintext highlighter-rouge\">PDB</code>-file format, which means that for any\nhistory item of this file type the plugin will automatically be available.</p>\n\n<h3 id=\"modifying-the-wrapper\">Modifying the wrapper</h3>\n\n<p>Now let’s take a look at the wrapper which connects our visualization with\nGalaxy. The wrapper consists of a module written in <em>JavaScript</em> and is\navailable at <code class=\"language-plaintext highlighter-rouge\">src/script.js</code>:</p>\n\n<p>The wrapper receives an <code class=\"language-plaintext highlighter-rouge\">options</code> dictionary with the following <b>four</b> components:</p>\n<ul>\n  <li><em>charts</em>: The model of the current visualization with attributes, settings etc.</li>\n  <li><em>process</em>: A <a href=\"https://api.jquery.com/jquery.deferred/\">jQuery.Deferred()</a> object to allow asynchronous data requests within the wrapper</li>\n  <li><em>dataset</em>: Details on the selected datasets such as url, ids etc. which can be used to access the dataset</li>\n  <li><em>targets</em>: The DOM ids of the container elements to draw into</li>\n</ul>\n\n<p>In this tutorial we will implement the <em>PV-Viewer</em> plugin. In order to execute a\n3rd-party plugin we need to figure out how it works. This can be done by finding\na working example or documentation. Fortunately the <em>PV-Viewer</em> comes with both.\nLet’s take a look at the <a href=\"https://pv.readthedocs.io/\">documentation</a>.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Exploring the PV-Viewer</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Identify the parameter which is needed to initialize the plugin when calling <a href=\"https://pv.readthedocs.io/en/v1.8.1/viewer.html#pv.Viewer\"><em>pv.Viewer()</em></a>.</p>\n    </li>\n    <li>\n      <p>Which of the wrapper option components represents this parameter?</p>\n    </li>\n    <li>\n      <p>Can you identify which <code class=\"language-plaintext highlighter-rouge\">mode</code> settings are valid to render the structure with <a href=\"https://pv.readthedocs.io/en/v1.8.1/viewer.html#pv.Viewer.renderAs\"><em>pv.Viewer.renderAs()</em></a>?</p>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>Now that we have learned the basics on how the viewer plugin works, we can edit it and adjust  <code class=\"language-plaintext highlighter-rouge\">script.js</code>.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title></hands-on-title>\n\n  <ol>\n    <li>Access your visualization’s <code class=\"language-plaintext highlighter-rouge\">myviz/src</code> directory.\n      <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span><span class=\"nb\">cd</span> <span class=\"nv\">$GALAXY_ROOT</span>/config/plugins/visualizations/myviz\n</code></pre></div>      </div>\n    </li>\n    <li>Install the package for the <em>PV-Viewer</em>:\n      <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>yarn add bio-pv\n</code></pre></div>      </div>\n    </li>\n    <li>Modify your plugin’s entrypoint script <code class=\"language-plaintext highlighter-rouge\">src/script.js</code> to import the new <code class=\"language-plaintext highlighter-rouge\">bio-pv</code> library we just added, add this at the top of the file:\n      <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">pv</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">bio-pv</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n</code></pre></div>      </div>\n    </li>\n    <li>Lastly, replace the <code class=\"language-plaintext highlighter-rouge\">load</code> function contents in the same entrypoint file with the following code that will set up the protein viewer:\n      <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"kd\">var</span> <span class=\"nx\">viewer</span> <span class=\"o\">=</span> <span class=\"nx\">pv</span><span class=\"p\">.</span><span class=\"nc\">Viewer</span><span class=\"p\">(</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nf\">getElementById</span><span class=\"p\">(</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">targets</span><span class=\"p\">[</span> <span class=\"mi\">0</span> <span class=\"p\">]</span> <span class=\"p\">),</span> <span class=\"p\">{</span>\n     <span class=\"na\">width</span>       <span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">auto</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n     <span class=\"na\">height</span>      <span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">auto</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n     <span class=\"na\">antialias</span>   <span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n     <span class=\"na\">outline</span>     <span class=\"p\">:</span> <span class=\"kc\">true</span>\n <span class=\"p\">});</span>\n <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nf\">ajax</span><span class=\"p\">(</span> <span class=\"p\">{</span>\n     <span class=\"na\">url</span>     <span class=\"p\">:</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">dataset</span><span class=\"p\">.</span><span class=\"nx\">download_url</span><span class=\"p\">,</span>\n     <span class=\"na\">success</span> <span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span> <span class=\"nx\">response</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n         <span class=\"kd\">var</span> <span class=\"nx\">structure</span> <span class=\"o\">=</span> <span class=\"nx\">pv</span><span class=\"p\">.</span><span class=\"nx\">io</span><span class=\"p\">.</span><span class=\"nf\">pdb</span><span class=\"p\">(</span> <span class=\"nx\">response</span> <span class=\"p\">);</span>\n         <span class=\"nx\">viewer</span><span class=\"p\">.</span><span class=\"nf\">clear</span><span class=\"p\">();</span>\n         <span class=\"nx\">viewer</span><span class=\"p\">.</span><span class=\"nf\">renderAs</span><span class=\"p\">(</span> <span class=\"dl\">'</span><span class=\"s1\">protein</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">structure</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">cartoon</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{}</span> <span class=\"p\">);</span>\n         <span class=\"nx\">viewer</span><span class=\"p\">.</span><span class=\"nf\">centerOn</span><span class=\"p\">(</span> <span class=\"nx\">structure</span> <span class=\"p\">);</span>\n         <span class=\"nx\">viewer</span><span class=\"p\">.</span><span class=\"nf\">autoZoom</span><span class=\"p\">();</span>\n         <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">chart</span><span class=\"p\">.</span><span class=\"nf\">state</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">ok</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">Chart drawn.</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n         <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nf\">resolve</span><span class=\"p\">();</span>\n     <span class=\"p\">}</span>\n <span class=\"p\">});</span>\n</code></pre></div>      </div>\n    </li>\n  </ol>\n</blockquote>\n\n<h3 id=\"build-the-package\">Build the package</h3>\n\n<p>Now that we have completed the basic plugin definition, it is time to build the\nscripts and libraries into a single bundle that Galaxy can use.  Galaxy\nvisualizations typically use <a href=\"https://parceljs.org\"><em>Parcel</em></a> for this due to\nits simplicity, and this is how the example project is already configured.  If\nyou’re interested in more details, take a look at the <code class=\"language-plaintext highlighter-rouge\">package.json</code> file in\nyour <code class=\"language-plaintext highlighter-rouge\">myviz</code> plugin directory.</p>\n\n<p>After it has been built and staged the plugin will be accessible through\n<em>Galaxy</em>’s user interface. This process not require restarting your <em>Galaxy</em>\ninstance, just make sure to properly refresh your browser.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title></hands-on-title>\n\n  <ol>\n    <li>Navigate to your visualization’s root directory:\n      <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span><span class=\"nb\">cd</span> <span class=\"nv\">$GALAXY_ROOT</span>/config/plugins/visualizations/myviz\n</code></pre></div>      </div>\n    </li>\n    <li>Install any necessary JavaScript dependencies:\n      <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>yarn <span class=\"nb\">install</span>\n</code></pre></div>      </div>\n    </li>\n    <li>Run the plugin build process using yarn:\n      <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>yarn run build\n</code></pre></div>      </div>\n    </li>\n    <li>Stage the scripts and run Galaxy:\n      <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span><span class=\"nb\">cd</span> <span class=\"nv\">$GALAXY_ROOT</span>\n<span class=\"nv\">$ </span>make client\n<span class=\"nv\">$ </span>./run.sh\n</code></pre></div>      </div>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>Lets test this.</p>\n\n<h3 id=\"test-the-visualization\">Test the visualization</h3>\n\n<p>In this section we will select a <code class=\"language-plaintext highlighter-rouge\">PDB</code>-file from the Protein Data Bank and visualize it with our new plugin.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title></hands-on-title>\n\n  <ol>\n    <li>\n      <p>Visit <a href=\"http://www.rcsb.org\">https://www.rcsb.org </a> and select a protein structure e.g. <a href=\"http://www.rcsb.org/pdb/explore/explore.do?structureId=1acb\">1ACB</a></p>\n    </li>\n    <li>\n      <p>Copy the link to the raw <code class=\"language-plaintext highlighter-rouge\">PDB</code>-file e.g.</p>\n\n      <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://files.rcsb.org/view/1ACB.pdb\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Start your Galaxy instance</p>\n\n      <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span><span class=\"nb\">cd</span> <span class=\"nv\">$GALAXY_ROOT</span>\n<span class=\"nv\">$ </span>./run.sh\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Open the upload dialog, paste the above link and click on <em>Start</em>.</p>\n    </li>\n    <li>\n      <p>Close the upload dialog, and select the file from the history panel on the right.</p>\n    </li>\n    <li>\n      <p>Click on the <em>diagram</em> icon. (You must be logged in)</p>\n    </li>\n    <li>\n      <p>Find your visualization and click on its logo.</p>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p><a href=\"../../images/pv_1.png\" rel=\"noopener noreferrer\"><img src=\"../../images/pv_1.png\" alt=\"First view. \" width=\"1346\" height=\"1260\" loading=\"lazy\" /></a></p>\n\n<h2 id=\"section-2---allow-different-rendering-modes\">Section 2 - Allow different rendering modes</h2>\n\n<p>In this section we are going to augment the visualization such that users may\nselect different rendering modes. Similar to a Tool’s XML file, developers may\nspecify input parameters which then will be presented to the user. The\ndefinition of Tool and Visualization input parameters are similar, however the\nlatter is provided in <em>JavaScript</em> and not as XML.</p>\n\n<p>More information on parameters can be found in the <a href=\"https://docs.galaxyproject.org/en/latest/dev/schema.html\">wiki</a>.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title></hands-on-title>\n\n  <ol>\n    <li>Add the following block into the <code class=\"language-plaintext highlighter-rouge\">myviz.xml</code> file:\n      <div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;settings&gt;</span>\n   <span class=\"nt\">&lt;input&gt;</span>\n       <span class=\"nt\">&lt;name&gt;</span>mode<span class=\"nt\">&lt;/name&gt;</span>\n       <span class=\"nt\">&lt;label&gt;</span>Display mode<span class=\"nt\">&lt;/label&gt;</span>\n       <span class=\"nt\">&lt;type&gt;</span>select<span class=\"nt\">&lt;/type&gt;</span>\n       <span class=\"nt\">&lt;display&gt;</span>radio<span class=\"nt\">&lt;/display&gt;</span>\n       <span class=\"nt\">&lt;value&gt;</span>cartoon<span class=\"nt\">&lt;/value&gt;</span>\n       <span class=\"nt\">&lt;help&gt;</span>Select the rendering mode.<span class=\"nt\">&lt;/help&gt;</span>\n       <span class=\"nt\">&lt;data&gt;</span>\n           <span class=\"nt\">&lt;data&gt;</span>\n               <span class=\"nt\">&lt;value&gt;</span>cartoon<span class=\"nt\">&lt;/value&gt;</span>\n               <span class=\"nt\">&lt;label&gt;</span>Cartoon<span class=\"nt\">&lt;/label&gt;</span>\n           <span class=\"nt\">&lt;/data&gt;</span>\n           <span class=\"nt\">&lt;data&gt;</span>\n               <span class=\"nt\">&lt;value&gt;</span>lines<span class=\"nt\">&lt;/value&gt;</span>\n               <span class=\"nt\">&lt;label&gt;</span>Lines<span class=\"nt\">&lt;/label&gt;</span>\n           <span class=\"nt\">&lt;/data&gt;</span>\n           <span class=\"nt\">&lt;data&gt;</span>\n                <span class=\"nt\">&lt;value&gt;</span>points<span class=\"nt\">&lt;/value&gt;</span>\n                <span class=\"nt\">&lt;label&gt;</span>Points<span class=\"nt\">&lt;/label&gt;</span>\n           <span class=\"nt\">&lt;/data&gt;</span>\n       <span class=\"nt\">&lt;/data&gt;</span>\n   <span class=\"nt\">&lt;/input&gt;</span>\n<span class=\"nt\">&lt;/settings&gt;</span>\n</code></pre></div>      </div>\n    </li>\n    <li>Change the following line in <code class=\"language-plaintext highlighter-rouge\">script.js</code>:\n      <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">viewer</span><span class=\"p\">.</span><span class=\"nf\">renderAs</span><span class=\"p\">(</span> <span class=\"dl\">'</span><span class=\"s1\">protein</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">structure</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">cartoon</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{}</span> <span class=\"p\">);</span>\n</code></pre></div>      </div>\n      <p>to</p>\n\n      <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">settings</span> <span class=\"o\">=</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">chart</span><span class=\"p\">.</span><span class=\"nx\">settings</span><span class=\"p\">;</span>\n<span class=\"nx\">viewer</span><span class=\"p\">.</span><span class=\"nf\">renderAs</span><span class=\"p\">(</span> <span class=\"dl\">'</span><span class=\"s1\">protein</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">structure</span><span class=\"p\">,</span> <span class=\"nx\">settings</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span> <span class=\"dl\">'</span><span class=\"s1\">mode</span><span class=\"dl\">'</span> <span class=\"p\">),</span> <span class=\"p\">{}</span> <span class=\"p\">);</span>\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Rebuild the plugin</p>\n\n      <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>yarn run build\n<span class=\"nv\">$ </span><span class=\"nb\">cd</span> <span class=\"nv\">$GALAXY_ROOT</span>\n<span class=\"nv\">$ </span>make client\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Refresh your browser.</p>\n    </li>\n    <li>Load your visualization and test different rendering modes in the <em>Customization</em> tab of your visualization.</li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>First of all, thank you for completing this tutorial. We have learned how to add\nJavaScript visualizations to Galaxy utilizing the Charts framework.</p>\n"],"ref_slides":["# Javascript Plugin Development in Galaxy\n\n---\n\n## Tutorial Overview\n\n- Why visualization?\n\n- What are the available visualization types and which one should I use?\n\n- Introduction to Charts\n\n- Step-by-step guide to adding new visualizations\n\n---\n\n## Why visualizations?\n\n\n![Animated gif cycling through Anscombe's quartet and various variations that all have the same mean, SD, and correlation but look vastly different to someone's eyes.](../../images/anscombe-quartet-animated.gif)\n\n```python\nX mean: 54.26, X SD: 16.76\nY mean: 47.83, Y SD: 26.93\nCorr: -0.06\n```\n\n???\nAnscombe's quartet, all these datasets have same mean, standard deviation and correlation,\nyet when visualizing them it is revealed they have vastly different structures.\n\n---\n\n## Types of visualizations in Galaxy\n\n- **Trackster** - built-in genome browser\n- **Display applications**\n  - UCSC Genome Browser\n  - IGV\n- **Galaxy tools**\n  - JBrowse\n  - Krona\n- **Visualization plugins**\n  - Charts\n  - Generic\n- **Interactive Environments**\n  - Jupyter/Rstudio\n  - IOBIO (bam/vcf visualizations)\n  - Phinch (metagenomics visualizations)\n\n---\n\n## Which should I use?\n\n![Flowchart. Only available on an external website? If yes use a display application. Does it need to be served (e.g. python), if yes use an interactive tool. Is it computationally intensive, then it needs to be a regular tool. Is it written in javascript? Then it shold be a generic plugin. If it passes all these tests it can be a charts plugin.](../../images/which_viz_flowchart.png)\n\n\n---\n\n## Charts Visualization Framework\n\n---\n\n## Charts\nA shared interface for a wide range of pure JavaScript visualization types i.e.\nbar diagrams, pie charts, scatter plots, heat maps and others.\n\n![Montage of several charts, bar, dot, stacked bar/line, box and whisker, and doughnut charts.](../../images/charts_examples.png)\n\nReference: [https://www.nvd3.org ](https://www.nvd3.org), [https://www.jqplot.com ](https://www.jqplot.com)\n\n---\n\n## Chart Configuration - Bar chart example\n\n![A tool form with bar chart options shown on left and right.](../../images/charts_bar_config.png)\n\n---\n\nIf a plugin is unavailable, custom visualization types like this heat map here can be added.\n\n![A large zoomed out heatmap is shown with an inset highlighting a small portion.](../../images/charts_heatmap.png)\n\nCharts is able to pre-process large-scale data behind the scenes.\n\nShowing Protein-Protein Interaction data from [http://www.compsysbio.org/bacteriome/ ](http://www.compsysbio.org/bacteriome/).\n\n---\n\n## Charts - PDB viewer example\n\n![Configuration for the protein viewer is shown on the left, a 3d structure of a protein shown on the right](../../images/charts_pdbviewer.png)\n\n---\n\n![Examples of 6 different visualisations in galaxy features an MSA, a couple graphs, RNA structure, and 3d visualisations of proteins](../../images/charts_examples2.png)\n\n---\n\n## Community-driven plugins\n\n![Montage of several logos include D3, jqPlot, BioJS, Cytoscape, and NVD3.](../../images/charts_community.png)\n\n---\n\n## Video Example\n\n[![Video demonstrating several viz plugins.](../../images/charts_video.png)](https://vimeo.com/222709200)\n\n\n???\nclick the image to run the video\n"],"video_library":{"tutorial":null,"slides":null,"demo":null,"both":null,"session":null},"hands_on":true,"slides":true,"mod_date":"2023-11-03 14:30:27 +0000","pub_date":"2017-06-22 17:42:15 +0000","version":29,"api":"https://training.galaxyproject.org/training-material/api/topics/dev/tutorials/visualization-charts/tutorial.json","tools":[],"supported_servers":[],"topic_name_human":"Development in Galaxy","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial","logo":"GTN","redirect_from":["/short/dev/visualization-charts/slides","/short/S00053"]}