{"layout":"tutorial_hands_on","title":"Scripting Galaxy using the API and BioBlend","level":"Introductory","requirements":[],"follow_up_training":[],"questions":["What is a REST API?","How to interact with Galaxy programmatically?","Why and when should I use BioBlend?"],"objectives":["Interact with Galaxy via BioBlend."],"time_estimation":"2h","key_points":["The API allows you to use Galaxy's capabilities programmatically.","BioBlend makes using the Galaxy API from Python easier.","BioBlend objects is an object-oriented interface for interacting with Galaxy."],"subtopic":"api","contributions":{"authorship":["nsoranzo"],"editing":["claresloggett","nturaga","hexylena"]},"notebook":{"language":"python"},"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00111","url":"/topics/dev/tutorials/bioblend-api/tutorial.html","topic_name":"dev","tutorial_name":"bioblend-api","dir":"topics/dev/tutorials/bioblend-api","symlink":null,"id":"dev/bioblend-api","ref_tutorials":["<p>BioBlend (<span class=\"citation\"><a href=\"#Sloggett2013\">Sloggett <i>et al.</i> 2013</a></span>) is a Python library to enable simple interaction with Galaxy (<span class=\"citation\"><a href=\"#Afgan2018\">Afgan <i>et al.</i> 2018</a></span>) via the command line or scripts.</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#interacting-with-histories-in-galaxy-api\" id=\"markdown-toc-interacting-with-histories-in-galaxy-api\">Interacting with histories in Galaxy API</a>    <ol>\n      <li><a href=\"#exercise-galaxy-api\" id=\"markdown-toc-exercise-galaxy-api\">Exercise: Galaxy API</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#interacting-with-histories-in-bioblend\" id=\"markdown-toc-interacting-with-histories-in-bioblend\">Interacting with histories in BioBlend</a>    <ol>\n      <li><a href=\"#exercise-bioblend\" id=\"markdown-toc-exercise-bioblend\">Exercise: BioBlend</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#interacting-with-histories-in-bioblendobjects\" id=\"markdown-toc-interacting-with-histories-in-bioblendobjects\">Interacting with histories in BioBlend.objects</a>    <ol>\n      <li><a href=\"#exercise-bioblendobjects\" id=\"markdown-toc-exercise-bioblendobjects\">Exercise: BioBlend.objects</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#optional-extra-exercises\" id=\"markdown-toc-optional-extra-exercises\">Optional Extra Exercises</a></li>\n</ol>\n\n</blockquote>\n\n<h1 id=\"interacting-with-histories-in-galaxy-api\">Interacting with histories in Galaxy API</h1>\n\n<p>We are going to use the <a href=\"https://requests.readthedocs.io/\">requests</a> Python library to communicate via HTTP with the Galaxy server. To start, let’s define the connection parameters.</p>\n\n<p><strong>You need to insert the API key for your Galaxy server in the cell below</strong>:</p>\n<ol>\n  <li>Open the Galaxy server in another browser tab</li>\n  <li>Click on “User” on the top menu, then “Preferences”</li>\n  <li>Click on “Manage API key”</li>\n  <li>Generate an API key if needed, then copy the alphanumeric string and paste it as the value of the <code class=\"language-plaintext highlighter-rouge\">api_key</code> variable below.</li>\n</ol>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">json</span>\n<span class=\"kn\">from</span> <span class=\"n\">pprint</span> <span class=\"kn\">import</span> <span class=\"n\">pprint</span>\n<span class=\"kn\">from</span> <span class=\"n\">urllib.parse</span> <span class=\"kn\">import</span> <span class=\"n\">urljoin</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">requests</span>\n\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">https://usegalaxy.eu/</span><span class=\"sh\">'</span>\n<span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"sh\">''</span>\n<span class=\"n\">base_url</span> <span class=\"o\">=</span> <span class=\"nf\">urljoin</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">api</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">base_url</span>\n</code></pre></div></div>\n\n<p>We now make a GET request to retrieve all histories owned by a user:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">Content-Type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">application/json</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">x-api-key</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">api_key</span><span class=\"p\">}</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">base_url</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">/histories</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"n\">hists</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">hists</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>As you can see, GET requests in Galaxy API return JSON strings, which need to be <strong>deserialized</strong> into Python data structures. In particular, GETting a resource collection returns a list of dictionaries.</p>\n\n<p>Each dictionary returned when GETting a resource collection gives basic info about a resource, e.g. for a history you have:</p>\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">id</code>: the unique <strong>identifier</strong> of the history, needed for all specific requests about this resource</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">name</code>: the name of this history as given by the user</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">deleted</code>: whether the history has been deleted.</li>\n</ul>\n\n<p>There is no readily-available filtering capability, but it’s not difficult to filter histories <strong>by name</strong>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">pprint</span><span class=\"p\">([</span><span class=\"n\">_</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">hists</span> <span class=\"k\">if</span> <span class=\"n\">_</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">Unnamed history</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>If you are interested in more <strong>details</strong> about a given resource, you just need to append its <code class=\"language-plaintext highlighter-rouge\">id</code> to the previous collection request, e.g. to the get more info for a history:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">hist0_id</span> <span class=\"o\">=</span> <span class=\"n\">hists</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">id</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">hist0_id</span><span class=\"p\">)</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">base_url</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">/histories/</span><span class=\"sh\">\"</span> <span class=\"o\">+</span> <span class=\"n\">hist0_id</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">())</span>\n</code></pre></div></div>\n\n<p>As you can see, there are much more entries in the returned dictionary, e.g.:</p>\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">create_time</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">size</code>: total disk space used by the history</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">state_ids</code>: ids of history datasets for each possible state.</li>\n</ul>\n\n<p>To get the list of <strong>datasets contained</strong> in a history, simply append <code class=\"language-plaintext highlighter-rouge\">/contents</code> to the previous resource request.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">base_url</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">/histories/</span><span class=\"sh\">\"</span> <span class=\"o\">+</span> <span class=\"n\">hist0_id</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">/contents</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n<span class=\"n\">hdas</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">hdas</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>The dictionaries returned when GETting the history content give basic info about each dataset, e.g.: <code class=\"language-plaintext highlighter-rouge\">id</code>, <code class=\"language-plaintext highlighter-rouge\">name</code>, <code class=\"language-plaintext highlighter-rouge\">deleted</code>, <code class=\"language-plaintext highlighter-rouge\">state</code>, <code class=\"language-plaintext highlighter-rouge\">url</code>…</p>\n\n<p>To get the details about a specific dataset, you can use the <code class=\"language-plaintext highlighter-rouge\">datasets</code> controller:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">hda0_id</span> <span class=\"o\">=</span> <span class=\"n\">hdas</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">id</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">hda0_id</span><span class=\"p\">)</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">base_url</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">/datasets/</span><span class=\"sh\">\"</span> <span class=\"o\">+</span> <span class=\"n\">hda0_id</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">())</span>\n</code></pre></div></div>\n\n<p>Some of the interesting additional dictionary entries are:</p>\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">create_time</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">creating job</code>: id of the job which created this dataset</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">download_url</code>: URL to download the dataset</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">file_ext</code>: the Galaxy data type of this dataset</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">file_size</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">genome_build</code>: the genome build (dbkey) associated to this dataset.</li>\n</ul>\n\n<p><strong>New resources</strong> are created with POST requests. The uploaded <strong>data needs to be serialized</strong> in a JSON string. For example, to create a new history:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">New history</span><span class=\"sh\">'</span><span class=\"p\">}</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"n\">base_url</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">/histories</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">dumps</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">),</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n<span class=\"n\">new_hist</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">new_hist</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>The return value of a POST request is a dictionary with detailed info about the created resource.</p>\n\n<p>To <strong>update</strong> a resource, make a PUT request, e.g. to change the history name:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">Updated history</span><span class=\"sh\">'</span><span class=\"p\">}</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">put</span><span class=\"p\">(</span><span class=\"n\">base_url</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">/histories/</span><span class=\"sh\">\"</span> <span class=\"o\">+</span> <span class=\"n\">new_hist</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">],</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">dumps</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">),</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">status_code</span><span class=\"p\">)</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">())</span>\n</code></pre></div></div>\n\n<p>The return value of a PUT request is usually a dictionary with detailed info about the updated resource.</p>\n\n<p>Finally to <strong>delete</strong> a resource, make a DELETE request, e.g.:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"n\">base_url</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">/histories/</span><span class=\"sh\">\"</span> <span class=\"o\">+</span> <span class=\"n\">new_hist</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">],</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">status_code</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"exercise-galaxy-api\">Exercise: Galaxy API</h2>\n\n<p><strong>Goal</strong>: Upload a file to a new history, import a workflow and run it on the uploaded dataset.</p>\n\n<blockquote class=\"question\">\n  <question-title>Initialise</question-title>\n  <p>First, define the connection parameters. What variables do you need?</p>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">json</span>\n<span class=\"kn\">from</span> <span class=\"n\">pprint</span> <span class=\"kn\">import</span> <span class=\"n\">pprint</span>\n<span class=\"kn\">from</span> <span class=\"n\">urllib.parse</span> <span class=\"kn\">import</span> <span class=\"n\">urljoin</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">requests</span>\n\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">https://usegalaxy.eu/</span><span class=\"sh\">'</span>\n<span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"sh\">''</span>\n<span class=\"n\">base_url</span> <span class=\"o\">=</span> <span class=\"nf\">urljoin</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">api</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try it out here!\n</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>New History</question-title>\n  <p>Next, create a new Galaxy history via POST to the correct API.</p>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">Content-Type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">application/json</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">x-api-key</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">api_key</span><span class=\"p\">}</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">New history</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"n\">base_url</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">/histories</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">dumps</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">),</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n<span class=\"n\">new_hist</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">new_hist</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try it out here!\n</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Upload a dataset</question-title>\n  <p><strong>Upload</strong> the local file <code class=\"language-plaintext highlighter-rouge\">1.txt</code> to the new history. You need to run the special <code class=\"language-plaintext highlighter-rouge\">upload1</code> tool by making a <code class=\"language-plaintext highlighter-rouge\">POST</code> request to <code class=\"language-plaintext highlighter-rouge\">/api/tools</code>. You don’t need to pass any inputs to it apart from attaching the file as <code class=\"language-plaintext highlighter-rouge\">files_0|file_data</code>. Also, note that when attaching a file the payload should <strong>not</strong> be serialized to a JSON string and you need to drop <code class=\"language-plaintext highlighter-rouge\">Content-Type</code> from the request headers.</p>\n\n  <p>You can obtain the <code class=\"language-plaintext highlighter-rouge\">1.txt</code> file from the following URL, you’ll need to download it first.</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://raw.githubusercontent.com/nsoranzo/bioblend-tutorial/main/test-data/1.txt\n</code></pre></div>  </div>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"sh\">\"</span><span class=\"s\">history_id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">new_hist</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">],</span>\n    <span class=\"sh\">\"</span><span class=\"s\">tool_id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">upload1</span><span class=\"sh\">\"</span>\n<span class=\"p\">}</span>\n<span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">1.txt</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">rb</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">files_0|file_data</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">f</span><span class=\"p\">}</span>\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"n\">base_url</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">/tools</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">files</span><span class=\"o\">=</span><span class=\"n\">files</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">x-api-key</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">api_key</span><span class=\"p\">})</span>\n<span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try it out here!\n</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Find the dataset in your history</question-title>\n  <p>Find the new uploaded dataset, either from the dict returned by the POST request above or from the history contents.</p>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">hda</span> <span class=\"o\">=</span> <span class=\"n\">ret</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">outputs</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">hda</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try it out here!\n</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Import a workflow</question-title>\n  <p><strong>Import a workflow</strong> from the local file <code class=\"language-plaintext highlighter-rouge\">convert_to_tab.ga</code> by making a <code class=\"language-plaintext highlighter-rouge\">POST</code> request to <code class=\"language-plaintext highlighter-rouge\">/api/workflows</code>. The only needed data is <code class=\"language-plaintext highlighter-rouge\">workflow</code>, which must be a deserialized JSON representation of the workflow <code class=\"language-plaintext highlighter-rouge\">.ga</code> file.</p>\n\n  <p>You can obtain the <code class=\"language-plaintext highlighter-rouge\">convert_to_tab.ga</code> file from the following URL, you’ll need to download it first.</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://raw.githubusercontent.com/nsoranzo/bioblend-tutorial/main/test-data/convert_to_tab.ga\n</code></pre></div>  </div>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">convert_to_tab.ga</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">r</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">workflow_dict</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">workflow</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">workflow_dict</span><span class=\"p\">}</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"n\">base_url</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">/workflows</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">dumps</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">),</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n<span class=\"n\">wf</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">wf</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try it out here!\n</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>View the workflow details</question-title>\n  <p>View the details of the imported workflow by making a GET request to <code class=\"language-plaintext highlighter-rouge\">/api/workflows</code>.</p>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">base_url</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">/workflows/</span><span class=\"sh\">\"</span> <span class=\"o\">+</span> <span class=\"n\">wf</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">],</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n<span class=\"n\">wf</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">wf</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try it out here!\n</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Invoke the workflow</question-title>\n  <p><strong>Run</strong> the imported workflow on the uploaded dataset <strong>inside the same history</strong> by making a <code class=\"language-plaintext highlighter-rouge\">POST</code> request to <code class=\"language-plaintext highlighter-rouge\">/api/workflows/WORKFLOW_ID/invocations</code>. The only needed data are <code class=\"language-plaintext highlighter-rouge\">history</code> and <code class=\"language-plaintext highlighter-rouge\">inputs</code>.</p>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">inputs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">id</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">hda</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">id</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"sh\">'</span><span class=\"s\">src</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">hda</span><span class=\"sh\">'</span><span class=\"p\">}}</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"sh\">'</span><span class=\"s\">history</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">hist_id=</span><span class=\"sh\">'</span> <span class=\"o\">+</span> <span class=\"n\">new_hist</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">id</span><span class=\"sh\">'</span><span class=\"p\">],</span>\n    <span class=\"sh\">'</span><span class=\"s\">inputs</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">inputs</span><span class=\"p\">}</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"n\">base_url</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">/workflows/</span><span class=\"sh\">\"</span> <span class=\"o\">+</span> <span class=\"n\">wf</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">/invocations</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">dumps</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">),</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">())</span>\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try it out here!\n</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>View the results</question-title>\n  <p>View the results on the Galaxy server with your web browser. Were you successful? Did it run?</p>\n</blockquote>\n\n<h1 id=\"interacting-with-histories-in-bioblend\">Interacting with histories in BioBlend</h1>\n\n<p>If you need to install BioBlend into your Jupyter environment, you can execute:</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">python\nimport sys\n!{sys.executable} -m pip install bioblend\n</code></p>\n\n<p><strong>You need to insert the API key for your Galaxy server in the cell below</strong>:</p>\n<ol>\n  <li>Open the Galaxy server in another browser tab</li>\n  <li>Click on “User” on the top menu, then “Preferences”</li>\n  <li>Click on “Manage API key”</li>\n  <li>Generate an API key if needed, then copy the alphanumeric string and paste it as the value of the <code class=\"language-plaintext highlighter-rouge\">api_key</code> variable below.</li>\n</ol>\n\n<p>The user interacts with a Galaxy server through a <code class=\"language-plaintext highlighter-rouge\">GalaxyInstance</code> object:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">pprint</span> <span class=\"kn\">import</span> <span class=\"n\">pprint</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">bioblend.galaxy</span>\n\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">https://usegalaxy.eu/</span><span class=\"sh\">'</span>\n<span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"sh\">''</span>\n<span class=\"n\">gi</span> <span class=\"o\">=</span> <span class=\"n\">bioblend</span><span class=\"p\">.</span><span class=\"n\">galaxy</span><span class=\"p\">.</span><span class=\"nc\">GalaxyInstance</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"n\">server</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">api_key</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">GalaxyInstance</code> object gives you access to the various controllers, i.e. the resources you are dealing with, like <code class=\"language-plaintext highlighter-rouge\">histories</code>, <code class=\"language-plaintext highlighter-rouge\">tools</code> and <code class=\"language-plaintext highlighter-rouge\">workflows</code>.\nTherefore, method calls will have the format <code class=\"language-plaintext highlighter-rouge\">gi.controller.method()</code>. For example, the call to retrieve all histories owned by the current user is:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">gi</span><span class=\"p\">.</span><span class=\"n\">histories</span><span class=\"p\">.</span><span class=\"nf\">get_histories</span><span class=\"p\">())</span>\n</code></pre></div></div>\n\n<p>As you can see, methods in BioBlend do not return JSON strings, but <strong>deserialize</strong> them into Python data structures. In particular, <code class=\"language-plaintext highlighter-rouge\">get_</code> methods return a list of dictionaries.</p>\n\n<p>Each dictionary gives basic info about a resource, e.g. for a history you have:</p>\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">id</code>: the unique <strong>identifier</strong> of the history, needed for all specific requests about this resource</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">name</code>: the name of this history as given by the user</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">deleted</code>: whether the history has been deleted.</li>\n</ul>\n\n<p><strong>New resources</strong> are created with <code class=\"language-plaintext highlighter-rouge\">create_</code> methods, e.g. the call to create a new history is:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">new_hist</span> <span class=\"o\">=</span> <span class=\"n\">gi</span><span class=\"p\">.</span><span class=\"n\">histories</span><span class=\"p\">.</span><span class=\"nf\">create_history</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">BioBlend test</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">new_hist</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>As you can see, to make POST requests in BioBlend it is <strong>not necessary to serialize data</strong>, you just pass them explicitly as parameters. The return value is a dictionary with detailed info about the created resource.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">get_</code> methods usually have <strong>filtering</strong> capabilities, e.g. it is possible to filter histories <strong>by name</strong>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">gi</span><span class=\"p\">.</span><span class=\"n\">histories</span><span class=\"p\">.</span><span class=\"nf\">get_histories</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">BioBlend test</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>To <strong>upload</strong> the local file <code class=\"language-plaintext highlighter-rouge\">1.txt</code> to the new history, you can run the special upload tool by calling the <code class=\"language-plaintext highlighter-rouge\">upload_file</code> method of the <code class=\"language-plaintext highlighter-rouge\">tools</code> controller.</p>\n\n<p>You can obtain the <code class=\"language-plaintext highlighter-rouge\">1.txt</code> file from the following URL, you’ll need to download it first.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://raw.githubusercontent.com/nsoranzo/bioblend-tutorial/main/test-data/1.txt\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">hist_id</span> <span class=\"o\">=</span> <span class=\"n\">new_hist</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">gi</span><span class=\"p\">.</span><span class=\"n\">tools</span><span class=\"p\">.</span><span class=\"nf\">upload_file</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">1.txt</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">hist_id</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>If you are interested in more <strong>details</strong> about a given resource for which you know the id, you can use the corresponding <code class=\"language-plaintext highlighter-rouge\">show_</code> method. For example, to the get more info for the history we have just populated:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">gi</span><span class=\"p\">.</span><span class=\"n\">histories</span><span class=\"p\">.</span><span class=\"nf\">show_history</span><span class=\"p\">(</span><span class=\"n\">history_id</span><span class=\"o\">=</span><span class=\"n\">hist_id</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>As you can see, there are much more entries in the returned dictionary, e.g.:</p>\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">create_time</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">size</code>: total disk space used by the history</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">state_ids</code>: ids of history datasets for each possible state.</li>\n</ul>\n\n<p>To get the list of <strong>datasets contained</strong> in a history, simply add <code class=\"language-plaintext highlighter-rouge\">contents=True</code> to the previous call.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">hdas</span> <span class=\"o\">=</span> <span class=\"n\">gi</span><span class=\"p\">.</span><span class=\"n\">histories</span><span class=\"p\">.</span><span class=\"nf\">show_history</span><span class=\"p\">(</span><span class=\"n\">history_id</span><span class=\"o\">=</span><span class=\"n\">hist_id</span><span class=\"p\">,</span> <span class=\"n\">contents</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">hdas</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>The dictionaries returned when showing the history content give basic info about each dataset, e.g.: <code class=\"language-plaintext highlighter-rouge\">id</code>, <code class=\"language-plaintext highlighter-rouge\">name</code>, <code class=\"language-plaintext highlighter-rouge\">deleted</code>, <code class=\"language-plaintext highlighter-rouge\">state</code>, <code class=\"language-plaintext highlighter-rouge\">url</code>…</p>\n\n<p>To get the details about a specific dataset, you can use the <code class=\"language-plaintext highlighter-rouge\">datasets</code> controller:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">hda0_id</span> <span class=\"o\">=</span> <span class=\"n\">hdas</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">id</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">hda0_id</span><span class=\"p\">)</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">gi</span><span class=\"p\">.</span><span class=\"n\">datasets</span><span class=\"p\">.</span><span class=\"nf\">show_dataset</span><span class=\"p\">(</span><span class=\"n\">hda0_id</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>Some of the interesting additional dictionary entries are:</p>\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">create_time</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">creating job</code>: id of the job which created this dataset</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">download_url</code>: URL to download the dataset</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">file_ext</code>: the Galaxy data type of this dataset</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">file_size</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">genome_build</code>: the genome build (dbkey) associated to this dataset.</li>\n</ul>\n\n<p>To <strong>update</strong> a resource, use the <code class=\"language-plaintext highlighter-rouge\">update_</code> method, e.g. to change the name of the new history:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">gi</span><span class=\"p\">.</span><span class=\"n\">histories</span><span class=\"p\">.</span><span class=\"nf\">update_history</span><span class=\"p\">(</span><span class=\"n\">new_hist</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">id</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">Updated history</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>The return value of <code class=\"language-plaintext highlighter-rouge\">update_</code> methods is usually a dictionary with detailed info about the updated resource.</p>\n\n<p>Finally to <strong>delete</strong> a resource, use the <code class=\"language-plaintext highlighter-rouge\">delete_</code> method, e.g.:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">gi</span><span class=\"p\">.</span><span class=\"n\">histories</span><span class=\"p\">.</span><span class=\"nf\">delete_history</span><span class=\"p\">(</span><span class=\"n\">new_hist</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">id</span><span class=\"sh\">'</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n\n<h2 id=\"exercise-bioblend\">Exercise: BioBlend</h2>\n\n<p><strong>Goal</strong>: Upload a file to a new history, import a workflow and run it on the uploaded dataset.</p>\n\n<blockquote class=\"question\">\n  <question-title>Initialise</question-title>\n  <p>Create a <code class=\"language-plaintext highlighter-rouge\">GalaxyInstance</code> object.</p>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">pprint</span> <span class=\"kn\">import</span> <span class=\"n\">pprint</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">bioblend.galaxy</span>\n\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">https://usegalaxy.eu/</span><span class=\"sh\">'</span>\n<span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"sh\">''</span>\n<span class=\"n\">gi</span> <span class=\"o\">=</span> <span class=\"n\">bioblend</span><span class=\"p\">.</span><span class=\"n\">galaxy</span><span class=\"p\">.</span><span class=\"nc\">GalaxyInstance</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"n\">server</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">api_key</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try it out here!\n</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>New History</question-title>\n  <p>Create a new Galaxy history.</p>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">new_hist</span> <span class=\"o\">=</span> <span class=\"n\">gi</span><span class=\"p\">.</span><span class=\"n\">histories</span><span class=\"p\">.</span><span class=\"nf\">create_history</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">New history</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">new_hist</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try it out here!\n</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Upload a dataset</question-title>\n  <p><strong>Upload</strong> the local file <code class=\"language-plaintext highlighter-rouge\">1.txt</code> to the new history using <code class=\"language-plaintext highlighter-rouge\">tools.upload_file()</code> .</p>\n\n  <p>You can obtain the <code class=\"language-plaintext highlighter-rouge\">1.txt</code> file from the following URL, you’ll need to download it first.</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://raw.githubusercontent.com/nsoranzo/bioblend-tutorial/main/test-data/1.txt\n</code></pre></div>  </div>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">gi</span><span class=\"p\">.</span><span class=\"n\">tools</span><span class=\"p\">.</span><span class=\"nf\">upload_file</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">1.txt</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">new_hist</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">id</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try it out here!\n</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Find the dataset in your history</question-title>\n  <p>Find the new uploaded dataset, either from the dict returned by <code class=\"language-plaintext highlighter-rouge\">tools.upload_file()</code> or from the history contents.</p>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">hda</span> <span class=\"o\">=</span> <span class=\"n\">ret</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">outputs</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">hda</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try it out here!\n</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Import a workflow</question-title>\n  <p><strong>Import a workflow</strong> from the local file <code class=\"language-plaintext highlighter-rouge\">convert_to_tab.ga</code> using <code class=\"language-plaintext highlighter-rouge\">workflows.import_workflow_from_local_path()</code> .</p>\n\n  <p>You can obtain the <code class=\"language-plaintext highlighter-rouge\">convert_to_tab.ga</code> file from the following URL, you’ll need to download it first.</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://raw.githubusercontent.com/nsoranzo/bioblend-tutorial/main/test-data/convert_to_tab.ga\n</code></pre></div>  </div>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">wf</span> <span class=\"o\">=</span> <span class=\"n\">gi</span><span class=\"p\">.</span><span class=\"n\">workflows</span><span class=\"p\">.</span><span class=\"nf\">import_workflow_from_local_path</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">convert_to_tab.ga</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">wf</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try it out here!\n</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>View the workflow details</question-title>\n  <p>View the details of the imported workflow using <code class=\"language-plaintext highlighter-rouge\">workflows.show_workflow()</code></p>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">wf</span> <span class=\"o\">=</span> <span class=\"n\">gi</span><span class=\"p\">.</span><span class=\"n\">workflows</span><span class=\"p\">.</span><span class=\"nf\">show_workflow</span><span class=\"p\">(</span><span class=\"n\">wf</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">id</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">wf</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try it out here!\n</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Invoke the workflow</question-title>\n  <p><strong>Run</strong> the imported workflow on the uploaded dataset <strong>inside the same history</strong> using <code class=\"language-plaintext highlighter-rouge\">workflows.invoke_workflow()</code> .</p>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">inputs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">id</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">hda</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">id</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"sh\">'</span><span class=\"s\">src</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">hda</span><span class=\"sh\">'</span><span class=\"p\">}}</span>\n<span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">gi</span><span class=\"p\">.</span><span class=\"n\">workflows</span><span class=\"p\">.</span><span class=\"nf\">invoke_workflow</span><span class=\"p\">(</span><span class=\"n\">wf</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">id</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"n\">inputs</span><span class=\"p\">,</span> <span class=\"n\">history_id</span><span class=\"o\">=</span><span class=\"n\">new_hist</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">id</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try it out here!\n</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>View the results</question-title>\n  <p>View the results on the Galaxy server with your web browser. Were you successful? Did it run?</p>\n</blockquote>\n\n<h1 id=\"interacting-with-histories-in-bioblendobjects\">Interacting with histories in BioBlend.objects</h1>\n\n<p><strong>You need to insert the API key for your Galaxy server in the cell below</strong>:</p>\n<ol>\n  <li>Open the Galaxy server in another browser tab</li>\n  <li>Click on “User” on the top menu, then “Preferences”</li>\n  <li>Click on “Manage API key”</li>\n  <li>Generate an API key if needed, then copy the alphanumeric string and paste it as the value of the <code class=\"language-plaintext highlighter-rouge\">api_key</code> variable below.</li>\n</ol>\n\n<p>The user interacts with a Galaxy server through a <code class=\"language-plaintext highlighter-rouge\">GalaxyInstance</code> object:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">pprint</span> <span class=\"kn\">import</span> <span class=\"n\">pprint</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">bioblend.galaxy.objects</span>\n\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">https://usegalaxy.eu/</span><span class=\"sh\">'</span>\n<span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"sh\">''</span>\n<span class=\"n\">gi</span> <span class=\"o\">=</span> <span class=\"n\">bioblend</span><span class=\"p\">.</span><span class=\"n\">galaxy</span><span class=\"p\">.</span><span class=\"n\">objects</span><span class=\"p\">.</span><span class=\"nc\">GalaxyInstance</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"n\">server</span><span class=\"p\">,</span> <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">api_key</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>All <code class=\"language-plaintext highlighter-rouge\">GalaxyInstance</code> method calls have the <code class=\"language-plaintext highlighter-rouge\">client.method()</code> format, where <code class=\"language-plaintext highlighter-rouge\">client</code> is the name of the resources you dealing with. There are 2 methods to get the list of resources:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">get_previews()</code>: lightweight (one GET request), retrieves basic resources’ info, returns a list of <strong>preview</strong> objects</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">list()</code>: one GET request for each resource, retrieves full resources’ info, returns a list of <strong>full</strong> objects.</li>\n</ul>\n\n<p>For example, the call to retrieve previews of all histories owned by the current user is:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">gi</span><span class=\"p\">.</span><span class=\"n\">histories</span><span class=\"p\">.</span><span class=\"nf\">get_previews</span><span class=\"p\">())</span>\n</code></pre></div></div>\n\n<p><strong>New resources</strong> are created with <code class=\"language-plaintext highlighter-rouge\">create()</code> methods, e.g. to create a new history:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">new_hist</span> <span class=\"o\">=</span> <span class=\"n\">gi</span><span class=\"p\">.</span><span class=\"n\">histories</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">BioBlend test</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">new_hist</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>As you can see, the <code class=\"language-plaintext highlighter-rouge\">create()</code> methods in BioBlend.objects returns an object, not a dictionary.</p>\n\n<p>Both <code class=\"language-plaintext highlighter-rouge\">get_previews()</code> and <code class=\"language-plaintext highlighter-rouge\">list()</code> methods usually have <strong>filtering</strong> capabilities, e.g. it is possible to filter histories <strong>by name</strong>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">gi</span><span class=\"p\">.</span><span class=\"n\">histories</span><span class=\"p\">.</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">BioBlend test</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>To <strong>upload</strong> the local file <code class=\"language-plaintext highlighter-rouge\">1.txt</code> to the new history, you can run the special upload tool by calling the <code class=\"language-plaintext highlighter-rouge\">upload_file</code> method of the <code class=\"language-plaintext highlighter-rouge\">History</code> object.</p>\n\n<p>You can obtain the <code class=\"language-plaintext highlighter-rouge\">1.txt</code> file from the following URL, you’ll need to download it first.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://raw.githubusercontent.com/nsoranzo/bioblend-tutorial/main/test-data/1.txt\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">hda</span> <span class=\"o\">=</span> <span class=\"n\">new_hist</span><span class=\"p\">.</span><span class=\"nf\">upload_file</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">1.txt</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">hda</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Please note that with BioBlend.objects there is no need to find the upload dataset, since <code class=\"language-plaintext highlighter-rouge\">upload_file()</code> already returns a <code class=\"language-plaintext highlighter-rouge\">HistoryDatasetAssociation</code> object.</p>\n\n<p>Both <code class=\"language-plaintext highlighter-rouge\">HistoryPreview</code> and <code class=\"language-plaintext highlighter-rouge\">History</code> objects have many of their properties available as <strong>attributes</strong>, e.g. the id.</p>\n\n<p>If you need to specify the unique <strong>id</strong> of the resource to retrieve, you can use the <code class=\"language-plaintext highlighter-rouge\">get()</code> method, e.g. to get back the history we created before:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">gi</span><span class=\"p\">.</span><span class=\"n\">histories</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">new_hist</span><span class=\"p\">.</span><span class=\"nb\">id</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>To get the list of <strong>datasets contained</strong> in a history, simply look at the <code class=\"language-plaintext highlighter-rouge\">content_infos</code> attribute of the <code class=\"language-plaintext highlighter-rouge\">History</code> object.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">new_hist</span><span class=\"p\">.</span><span class=\"n\">content_infos</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>To get the details about one dataset, you can use the <code class=\"language-plaintext highlighter-rouge\">get_dataset()</code> method of the <code class=\"language-plaintext highlighter-rouge\">History</code> object:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">new_hist</span><span class=\"p\">.</span><span class=\"nf\">get_dataset</span><span class=\"p\">(</span><span class=\"n\">hda</span><span class=\"p\">.</span><span class=\"nb\">id</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>You can also filter history datasets by name using the <code class=\"language-plaintext highlighter-rouge\">get_datasets()</code> method of <code class=\"language-plaintext highlighter-rouge\">History</code> objects.</p>\n\n<p>To <strong>update</strong> a resource, use the <code class=\"language-plaintext highlighter-rouge\">update()</code> method of its object, e.g. to change the history name:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">new_hist</span><span class=\"p\">.</span><span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">Updated history</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>The return value of <code class=\"language-plaintext highlighter-rouge\">update()</code> methods is the updated object.</p>\n\n<p>Finally to <strong>delete</strong> a resource, you can use the <code class=\"language-plaintext highlighter-rouge\">delete()</code> method of the object, e.g.:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">new_hist</span><span class=\"p\">.</span><span class=\"nf\">delete</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<h2 id=\"exercise-bioblendobjects\">Exercise: BioBlend.objects</h2>\n\n<p><strong>Goal</strong>: Upload a file to a new history, import a workflow and run it on the uploaded dataset.</p>\n\n<blockquote class=\"question\">\n  <question-title>Initialise</question-title>\n  <p>Create a <code class=\"language-plaintext highlighter-rouge\">GalaxyInstance</code> object.</p>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">pprint</span> <span class=\"kn\">import</span> <span class=\"n\">pprint</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">bioblend.galaxy</span>\n\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">https://usegalaxy.eu/</span><span class=\"sh\">'</span>\n<span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"sh\">''</span>\n<span class=\"n\">gi</span> <span class=\"o\">=</span> <span class=\"n\">bioblend</span><span class=\"p\">.</span><span class=\"n\">galaxy</span><span class=\"p\">.</span><span class=\"n\">objects</span><span class=\"p\">.</span><span class=\"nc\">GalaxyInstance</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"n\">server</span><span class=\"p\">,</span> <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">api_key</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try it out here!\n</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>New History</question-title>\n  <p>Create a new Galaxy history.</p>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">new_hist</span> <span class=\"o\">=</span> <span class=\"n\">gi</span><span class=\"p\">.</span><span class=\"n\">histories</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">New history</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">new_hist</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try it out here!\n</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Upload a dataset</question-title>\n  <p><strong>Upload</strong> the local file <code class=\"language-plaintext highlighter-rouge\">1.txt</code> to the new history using the <code class=\"language-plaintext highlighter-rouge\">upload_file()</code> method of <code class=\"language-plaintext highlighter-rouge\">History</code> objects.</p>\n\n  <p>You can obtain the <code class=\"language-plaintext highlighter-rouge\">1.txt</code> file from the following URL, you’ll need to download it first.</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://raw.githubusercontent.com/nsoranzo/bioblend-tutorial/main/test-data/1.txt\n</code></pre></div>  </div>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">hda</span> <span class=\"o\">=</span> <span class=\"n\">new_hist</span><span class=\"p\">.</span><span class=\"nf\">upload_file</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">1.txt</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">hda</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try it out here!\n</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Import a workflow</question-title>\n  <p><strong>Import a workflow</strong> from the local file <code class=\"language-plaintext highlighter-rouge\">convert_to_tab.ga</code> using <code class=\"language-plaintext highlighter-rouge\">workflows.import_new()</code></p>\n\n  <p>You can obtain the <code class=\"language-plaintext highlighter-rouge\">convert_to_tab.ga</code> file from the following URL, you’ll need to download it first.</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://raw.githubusercontent.com/nsoranzo/bioblend-tutorial/main/test-data/convert_to_tab.ga\n</code></pre></div>  </div>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">convert_to_tab.ga</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">r</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">wf_string</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">read</span><span class=\"p\">()</span>\n<span class=\"n\">wf</span> <span class=\"o\">=</span> <span class=\"n\">gi</span><span class=\"p\">.</span><span class=\"n\">workflows</span><span class=\"p\">.</span><span class=\"nf\">import_new</span><span class=\"p\">(</span><span class=\"n\">wf_string</span><span class=\"p\">)</span>\n<span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">wf</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try it out here!\n</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>View the workflow inputs</question-title>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">wf</span><span class=\"p\">.</span><span class=\"n\">inputs</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try it out here!\n</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>Invoke the workflow</question-title>\n  <p><strong>Run</strong> the imported workflow on the uploaded dataset <strong>inside the same history</strong> using the <code class=\"language-plaintext highlighter-rouge\">invoke()</code> method of <code class=\"language-plaintext highlighter-rouge\">Workflow</code> objects.</p>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">inputs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">0</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">hda</span><span class=\"p\">}</span>\n<span class=\"n\">wf</span><span class=\"p\">.</span><span class=\"nf\">invoke</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"n\">inputs</span><span class=\"p\">,</span> <span class=\"n\">history</span><span class=\"o\">=</span><span class=\"n\">new_hist</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n  </blockquote>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Try it out here!\n</span>\n</code></pre></div></div>\n\n<blockquote class=\"question\">\n  <question-title>View the results</question-title>\n  <p>View the results on the Galaxy server with your web browser. Were you successful? Did it run?</p>\n</blockquote>\n\n<h1 id=\"optional-extra-exercises\">Optional Extra Exercises</h1>\n\n<p>If you have completed the exercise, you can try to perform these extra tasks with the help of the online documentation:</p>\n\n<ol>\n  <li>Download the workflow result to your computer</li>\n  <li>Publish your history</li>\n</ol>\n\n<!--SNIPPET-->\n<blockquote class=\"comment\">   <div class=\"box-title comment-title\" id=\"comment-galaxy-admin-training-path\"><i class=\"far fa-comment-dots\" aria-hidden=\"true\"></i> Comment: Galaxy Admin Training Path</div>   <p>The yearly Galaxy Admin Training follows a specific ordering of tutorials. Use this timeline to help keep track of where you are in Galaxy Admin Training.</p>   <ol id=\"git-gat-timeline\">                    <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/ansible-galaxy/tutorial.html\">             <div>Step 1</div>             <div>ansible-galaxy</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/backup-cleanup/tutorial.html\">             <div>Step 2</div>             <div>backup-cleanup</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/customization/tutorial.html\">             <div>Step 3</div>             <div>customization</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/tus/tutorial.html\">             <div>Step 4</div>             <div>tus</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/cvmfs/tutorial.html\">             <div>Step 5</div>             <div>cvmfs</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/apptainer/tutorial.html\">             <div>Step 6</div>             <div>apptainer</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/tool-management/tutorial.html\">             <div>Step 7</div>             <div>tool-management</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/reference-genomes/tutorial.html\">             <div>Step 8</div>             <div>reference-genomes</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/data-library/tutorial.html\">             <div>Step 9</div>             <div>data-library</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"active\">         <a href=\"/training-material/topics/dev/tutorials/bioblend-api/tutorial.html\">             <div>Step 10</div>             <div>dev/bioblend-api</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/connect-to-compute-cluster/tutorial.html\">             <div>Step 11</div>             <div>connect-to-compute-cluster</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/job-destinations/tutorial.html\">             <div>Step 12</div>             <div>job-destinations</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/pulsar/tutorial.html\">             <div>Step 13</div>             <div>pulsar</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/celery/tutorial.html\">             <div>Step 14</div>             <div>celery</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/gxadmin/tutorial.html\">             <div>Step 15</div>             <div>gxadmin</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/reports/tutorial.html\">             <div>Step 16</div>             <div>reports</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/monitoring/tutorial.html\">             <div>Step 17</div>             <div>monitoring</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/tiaas/tutorial.html\">             <div>Step 18</div>             <div>tiaas</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/sentry/tutorial.html\">             <div>Step 19</div>             <div>sentry</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/ftp/tutorial.html\">             <div>Step 20</div>             <div>ftp</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/beacon/tutorial.html\">             <div>Step 21</div>             <div>beacon</div>         </a>     </li>           </ol> </blockquote>\n<p><!--END_SNIPPET--></p>\n"],"ref_slides":["## Galaxy API\n\n- **Application Programming Interface (API)**: the protocol defined by a software for how it can be controlled by an external program\n- Galaxy provides a rich API:\n  - Over the HTTP protocol\n  - The Galaxy UI is being migrated on top of the Galaxy API\n\n???\n\n- An Application Programming Interface provides software developers with a definition of the methods to interact with a program or a library.\n- When the program is a remote web server like Galaxy, the methods are represented by URIs and the communication is through the HTTP protocol.\n- Nowadays, most of the Galaxy user interface makes use of the backend API to implement an asynchronous web application.\n\n---\n\n## Interacting with Galaxy: UI vs. API\n\n- The Galaxy UI is good for:\n  - exploring and visualizing data\n  - experimenting\n  - graphically designing workflows\n  - people not comfortable with the command line\n\n- The Galaxy API is good for:\n  - interact programmatically with the server\n    - complex control: **branching** and **looping** (not yet possible in workflows)\n  - automate repetitive tasks\n  - integration with external resources\n\n???\n\n- The Galaxy user interface is a better choice for explorative analysis, visualising data and drawing workflows.\n- The API instead allows you to automate tasks using Galaxy's capabilities programmatically.\n- A typical use case is to upload FASTQ files as soon as your sequencer finishes writing them, and running a quality control workflow.\n- Importantly, however you interact with Galaxy, you can equally benefit from features like reproducibility of the analysis and data sharing.\n- In fact, all the work done via the API is still accessible when you return to the UI.\n\n---\n\n## Galaxy API functionalities\n\n- Users can:\n  - upload and download data\n  - run tools and workflows, ...\n  - manage histories and datasets\n\n- Admins can also manage:\n  - data libraries\n  - tools and dependencies\n  - users, quotas, roles...\n\n- Source code lives at https://github.com/galaxyproject/galaxy/tree/dev/lib/galaxy/webapps/galaxy/api/\n\n???\n\n- Most of the operations you would normally perform on the Galaxy UI are available via the API.\n- You can for example upload data, run tools and workflows, and manage your histories.\n- It is also possible to perform admin tasks, like manage data libraries and install tools.\n\n---\n\n## RESTful API\n\n.left[REpresentational State Transfer (REST) is the architectural style of the World Wide Web:]\n- client–server\n- API requests:\n  - standard HTTP request **methods** (GET, POST, PUT, DELETE,...) and status codes\n  - Uniform **Resource** Identifiers (URIs)\n  - Query and payload for parameters\n\n???\n\n- The Galaxy API follows the REST model typical of web applications.\n- A REST API specifies a protocol for the interaction between a client and a server.\n- The client sends requests composed by an HTTP method and a resource.\n- The main HTTP methods are: GET (to retrieve a resource); POST (to create); PUT (to replace); and DELETE.\n- Resources are identified by Uniform Resource Identifiers.\n- Examples of resources in the Galaxy API are: datasets, tools, jobs, histories, libraries, users; essentially anything that is recorded in the Galaxy database.\n- The client often need to pass additional parameters or data to specify how a request should be carried out.\n- The server replies to the request with a status code (to indicate if there was an error) and usually some data.\n\n---\n\n## API requests\n\n- **HTTP method + URI [+ payload]**\n\n  1. `GET https://usegalaxy.org/api/histories?order=name` -> ordered list of histories\n\n- URI parameters: IDs in path, others in the *query* (`?name=value&...`)\n\n???\n\n- Let's see some examples of possible API requests to a Galaxy server.\n- In the first example we use the GET method to retrieve a resource, in this case the list of histories.\n- The URI starts with the protocol and address of the server, followed by the resource we are interested in: the histories.\n- A URI may then include an optional query, preceded by a question mark, containing a sequence of request parameters specified as key-equal-value and separated by ampersands.\n- In this example, the query is used to ask that the list of histories is ordered by name.\n\n---\n\n## API requests\n\n- **HTTP method + URI [+ payload]**\n\n  1. `GET https://usegalaxy.org/api/histories?order=name` -> ordered list of histories\n  2. `POST /api/histories {\"name\": \"New analysis\"}` -> create a history named \"New analysis\"\n  3. `PUT /api/histories/<id> {\"published\": true}` -> publish a history\n  4. `DELETE /api/histories/<history_id>/contents/<id>` -> delete a history dataset\n\n- URI parameters: IDs in path, others in the *query* (`?name=value&...`)\n- POST/PUT payload as JSON\n\n???\n\n- In the second example, the POST method is used to create a resource on the server, in this case a new history.\n- Parameters for the POST request are passed as a payload in JSON format; more on this later.\n- In this example the payload contains the new name for the history to be created.\n- In the third example, we use the PUT method to update an existing resource, in this case to make a history public.\n- The history to modify is indentified by appending its ID to the histories URI.\n- The parameters for PUT requests are also passed in a payload.\n- In the fourth example, we use the DELETE method to remove a resource from the server.\n- In this case, we request the deletion of a particular dataset in a specific history, as indicated in the URI.\n\n---\n\n## JSON format\n\n.left[JavaScript Object Notation https://www.json.org/] <img style=\"float: right;\" height=\"80\" width=\"80\" alt=\"JSON logo\" src=\"../../images/json160.gif\" />\n  - Lightweight data-interchange text format\n  - Easy to read/write for both humans and machines\n  - ECMA-404 open standard (2013), [RFC 8259](https://tools.ietf.org/html/rfc8259) (2017)\n\n```json\n{\"history_id\": \"b5731bb49a17bf50\",\n \"id\": \"df06cc665d85b6ea\",\n \"inputs\": {\"0\": {\"id\": \"bbd44e69cb8906b51528b5d606d1fdd0\",\n                  \"src\": \"hda\"}},\n \"model_class\": \"WorkflowInvocation\",\n \"outputs\": [\"bbd44e69cb8906b528819eaaff340ecd\",\n             \"0ff30b4e2a4bed9e\"],\n \"state\": \"scheduled\",\n \"update_time\": \"2015-07-03T19:28:39.544574\",\n \"workflow_id\": \"56482e194d798eb6\"}\n```\n\n???\n\n- Request payloads passed to Galaxy and data returned by the API are encoded in the JSON format.\n- JSON is a standard format used to exchange text data and is supported in all major programming languages.\n- In JSON, strings are enclosed by double quotes, dictionaries by curly braces, and arrays by square brackets.\n- Dictionaries and arrays can be nested at will, as shown in the example.\n\n---\n\n## Status codes and errors\n\n- HTTP status codes:\n  - 200 OK, 400 your error, 500 server error, ...<br>\n    https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n- Galaxy error codes and messages: [`lib/galaxy/exceptions/`](https://github.com/galaxyproject/galaxy/tree/dev/lib/galaxy/exceptions)\n  - Still a work in progress\n\n???\n\n- In REST APIs, the server should use the standardised HTTP status codes in its responses to indicate either a successful request or the type of error encountered.\n- In the Galaxy API, error status codes and messages are returned to the client by raising specific Python exceptions in the backend.\n\n---\n\n## How to access a REST API\n\n.left[With anything that can communicate over HTTP:]\n- Command line:\n  - `curl`\n- GUI:\n  - Browsers: only GET\n  - [RESTClient](https://addons.mozilla.org/firefox/addon/restclient/) add-on for Firefox\n  - [Advanced REST Client](https://advancedrestclient.com/)\n- Software libraries:\n  - General HTTP libraries (e.g. [requests](https://requests.readthedocs.io/) for Python)\n  - Service-specific libraries (e.g. *BioBlend* to access Galaxy using Python)\n\n???\n\n- A REST API can be accessed via the HTTP protocol. There are 3 main ways to do that.\n- On the command line, the curl tool can perform any type of HTTP request; look at its manual for details.\n- For graphical user interfaces, you can perform GET requests directly on your browser by simply entering the URI on the address bar.\n- For more complex requests, you can use the Advanced REST Client open source app.\n- The third and most common way is to write a program.\n- All programming languages have some general library to communicate over HTTP.\n- For Python, requests is probably the best library to do that.\n- Many web services provide dedicated higher-level libraries to access their REST API.\n- In particular, BioBlend is a Python library to interact with Galaxy that we will describe later.\n\n---\n\n## Security\n\n- Most API calls require authentication\n  - When the UI accesses the API, session auth is used\n  - Other callers needs an **API key**: alphanumeric string (32 chars) identifying a registered user<br>\n    Keep it secure, it’s the same as a username+password!\n- Always use HTTPS:\n  - **https**://example.org/api?key=foo is safer due to the encryption of the transmitted data\n\n???\n\n- A note about security.\n- When programmatically performing requests that require authentication, the client need to pass an API key.\n- An API key is an alphanumeric string uniquely identifying a user on a server.\n- Since it is equivalent to the combination of your username and password, keep it secure!\n- In particular, always use the HTTPS protocol to make requests, not HTTP which sends data unencrypted.\n\n---\n\n## Advanced Galaxy API config\n\n.left[Options in `config/galaxy.yml`:]\n- User impersonation by adding `run_as` in the payload\n  ```yaml\n  # Optional list of email addresses of API users who can make calls on\n  # behalf of other users.\n  api_allow_run_as: foo@foo.com\n  ```\n\n- Bootstrapping Galaxy\n\n  ```yaml\n  # API key that allows performing some admin actions without actually\n  # having a real admin user in the database and config. Only set this\n  # if you need to bootstrap Galaxy, in particular to create a real\n  # admin user account via API. You should probably not set this on a\n  # production server.\n  bootstrap_admin_api_key: MASTERLOCK\n  ```\n\n  This option was called ``master_api_key`` in Galaxy 22.05 and earlier.\n\n???\n\n- There are 2 options in the Galaxy configuration file that are relevant for the API.\n- api_allow_run_as allows the specified user to impersonate any other user on the Galaxy instance.\n- bootstrap_admin_api_key instead is an optional special API key that can be used to bootstrap a Galaxy instance, in particular to create an initial admin account.\n\n---\n\n## Galaxy API Modernization\n\n.left[Moving to [FastAPI](https://fastapi.tiangolo.com/)]\n\n- Main advantages:\n  - [Async requests](https://fastapi.tiangolo.com/async/)\n  - Subscriptions via [websockets](https://fastapi.tiangolo.com/advanced/websockets/)\n  - Integrated [OpenAPI](https://spec.openapis.org/oas/v3.1.0) interactive documentation, e.g. https://usegalaxy.org/api/docs\n  - Reduce maintenance burden\n  - Simplify client code generation\n\n???\n\n- The Galaxy API is currently in the process of migrating towards FastAPI, which is a modern framework for building REST APIs in Python with really interesting features.\n- For example, FastAPI can serve requests with better performances using asynchronous coroutines.\n- Another performance advantage is the ability to avoid inefficient polling by using WebSockets subscriptions.\n- In addition to the performance benefits, by using FastAPI in combination with type annotations, the Galaxy API can comply with the OpenAPI standard.\n- This standard can greatly enhance interoperability with other systems and reduce the maintenance burden of documentation and client code generation.\n\n---\n\n## Galaxy API pros and cons\n\n- Pros:\n  - Integrated with Galaxy\n  - Well tested\n  - Language agnostic\n- Cons:\n  - Very low-level\n\n???\n\n- To summarise this first part, Galaxy has an extensive REST API that allows users and admins to interact programmatically with a server.\n- It can be accessed with any programming language, but it's also very low level.\n- For example, you need to construct complex URIs, encode payloads and decode returned data.\n\n---\n\n## BioBlend\n\n- BioBlend is a **Python library** that wraps the functionality of Galaxy and CloudMan APIs\n- Started by Enis Afgan, Nuwan Goonasekera and Clare Sloggett in 2012. Contributions by the Galaxy Team and the community\n- Open source (MIT license)\n- Available via PyPI and from https://github.com/galaxyproject/bioblend\n\n???\n\n- A Python library called BioBlend was created in 2012 to make it easier to interact with the Galaxy API.\n- BioBlend is open source and developed by a community of contributors.\n- It is hosted on GitHub and can be installed via pip.\n\n---\n\n## BioBlend features\n\n- Stable procedural API\n- Supported under Python >=3.7\n- Wraps all main Galaxy API controllers\n- Extensive Continuous Integration testing:\n  - on Galaxy release_17.09 and later\n  - \\>240 unit tests\n- Well-documented on https://bioblend.readthedocs.io\n\n???\n\n- BioBlend has a very stable procedural API and works on all supported Python versions.\n- It provides methods wrapping all the important Galaxy API endpoints.\n- The library uses Continuous Integration to perform a large number of tests on a wide range of Galaxy releases.\n- The documentation of BioBlend is very well curated and is often more accurate than the corresponding Galaxy API one.\n\n---\n\n## BioBlend limitations\n\n- Python-only (but separate *blend4j* and *blend4php* exist)\n- Its methods just deserialize the JSON response\n  - No isolation from changes in the Galaxy API\n  - Need to extract the entity ID for further processing\n- No explicit modeling of Galaxy entities and their relationships\n- Complex operations still need many function calls\n  - Need for higher-level functionality\n\n???\n\n- Although easier to use than the Galaxy API, BioBlend has some limitations.\n- First of all, it's only available for Python.\n- There are alternative libraries for Java and PHP, but they are less complete.\n- Another limitation of BioBlend is that it doesn't shield the caller from possible changes in responses from the Galaxy API.\n- It can also be annoying to have to constantly keep track of entity IDs.\n- This happens because BioBlend does not try to model Galaxy entities and how they are connected.\n\n---\n\n## BioBlend.objects\n\n- BioBlend.objects is an extra layer which adds an **object-oriented interface** for the Galaxy API\n- Started by Simone Leo, Luca Pireddu and Nicola Soranzo at CRS4 in 2013\n- Distributed with BioBlend\n- Presently limited to datasets, histories, invocations, jobs, libraries, tools and workflows\n\n???\n\n- To implement this modelling of Galaxy entities, some years ago an object-oriented interface was added on top of BioBlend: BioBlend objects\n- This is developed and distributed together with BioBlend itself.\n- When using this interface, methods will return objects encapsulating the dictionaries returned by the Galaxy API.\n- The user can then invoke further methods on these objects, for example the download method for a Dataset object.\n- Only a subset of BioBlend is available through the object interface, but most of the common user functionalities are included.\n\n---\n\n## References\n\n- Galaxy API docs: https://docs.galaxyproject.org/en/master/api_doc.html\n- BioBlend docs: https://bioblend.readthedocs.io/\n- BioBlend chat: https://matrix.to/#/#galaxyproject_bioblend:gitter.im\n- C. Sloggett, N. Goonasekera, E. Afgan. BioBlend: automating pipeline analyses within Galaxy and CloudMan. *Bioinformatics* 29(13), 1685-1686, 2013, doi:[10.1093/bioinformatics/btt199](https://doi.org/10.1093/bioinformatics/btt199)\n- S. Leo, L. Pireddu, G. Cuccuru, L. Lianas, N. Soranzo, E. Afgan, G. Zanetti. BioBlend.objects: metacomputing with Galaxy. *Bioinformatics* 30 (19), 2816-2817, 2014, doi:[10.1093/bioinformatics/btu386](https://doi.org/10.1093/bioinformatics/btu386)\n\n???\n\n- Here you can find the links to the documentation of the Galaxy API and of BioBlend.\n- We have a dedicated Gitter channel to chat about BioBlend.\n- If you use BioBlend or BioBlend objects, please cite these papers.\n"],"hands_on":true,"slides":true,"mod_date":"2023-11-15 11:27:38 +0000","pub_date":"2017-01-17 17:40:36 +0000","version":35,"api":"https://training.galaxyproject.org/training-material/api/topics/dev/tutorials/bioblend-api/tutorial.json","tools":[],"supported_servers":[],"topic_name_human":"Development in Galaxy","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":true,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":true},"license":"CC-BY-4.0","type":"tutorial","contributors":[{"name":"Nicola Soranzo","matrix":"nsoranzo:matrix.org","orcid":"0000-0003-3627-5340","twitter":"NicolaSoranzo","joined":"2017-09","elixir_node":"uk","fediverse":"https://mstdn.science/@nsoranzo","fediverse_flavor":"mastodon","linkedin":"nicola-soranzo-7884125","affiliations":["earlham","elixir-europe"],"id":"nsoranzo","url":"https://training.galaxyproject.org/training-material/api/contributors/nsoranzo.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/nsoranzo/"},{"name":"Clare Sloggett","joined":"2018-07","elixir_node":"au","affiliations":["elixir-europe"],"id":"claresloggett","url":"https://training.galaxyproject.org/training-material/api/contributors/claresloggett.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/claresloggett/"},{"name":"Nitesh Turaga","joined":"2017-09","id":"nturaga","url":"https://training.galaxyproject.org/training-material/api/contributors/nturaga.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/nturaga/"},{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"}]}