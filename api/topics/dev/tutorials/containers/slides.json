{"layout":"tutorial_slides","logo":"GTN","title":"Tool Dependencies and Containers","subtopic":"dependencies","questions":["What are the advantages of running my Galaxy tool inside of a container?","How does Galaxy find a container to run my tool in?","What are BioContainers and how are they related to Galaxy?"],"objectives":["Explore the differences between containerizing Galaxy and tool execution.","Discuss the advantages of containerizing tools.","Learn to build best practice tools ready to be containerized."],"time_estimation":"45m","requirements":[{"type":"internal","topic_name":"dev","tutorials":["tool-integration"]}],"key_points":["It is becoming easier, more advantageous, and more common for Galaxy admins to run all tools within their own container.","You can explicitly define a container for your tool - but it is easier and more reproducible to let Galaxy find or build one using your tool's best practice requirements.","The Galaxy community will infrastructure to automatically build and/or publish containers for your tool as long as it defines best practice Conda dependencies.","Planemo makes it easy to test your tool inside of containers."],"contributors":["jmchilton","bgruening"],"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"S00047","url":"/topics/dev/tutorials/containers/slides.html","topic_name":"dev","tutorial_name":"containers","dir":"topics/dev/tutorials/containers","symlink":null,"id":"dev/containers","ref_tutorials":[],"ref_slides":["## Planemo\n\nThese slides mirror the section on \"Dependencies and Docker\" in the [Planemo Documentation](https://planemo.readthedocs.io/en/latest/writing_advanced.html#dependencies-and-docker).\n\n---\n\n## Generic Containers are Good Slide\n\n.image-75[![A cartoon comparing containers vs VMs. On the left the VMs are presented as a layer of server, host os, and hypervisor (type 2) followed by several tall pillars of guest OS, bin/libs and finally their respective apps. Everything is siloed. On the right is containers where the layers are server, host os, and docker engine. Above those are very short pillars of each different app, and when duplicate apps are run, the bin/libs are shown as shared. Text reads: containers are isolated but share OS and where appropriate, bins/libraries.](../../images/containers.png)]\n\n* Isolation and Security\\*\n* Reproducibility\n* Flexibility\\*\n\n.footnote[\\* the industry is getting there]\n\n???\n\n---\n\n## Galaxy in Containers?\n\n.image-75[![Screenshot of docker-galaxy-stable readme showing the scheme with a lot of different galaxy container flavours shown as layers atop one another.](../../images/docker-galaxy-stable-github.png)]\n\n???\n\nWhen people think Galaxy and containers I think this project comes to mind.\nThree years ago Bj√∂rn created this docker-galaxy-stable project and it has\nbeen wildly successful. It has proven to be a useful toolkit for advanced\ndeployment options, an extremely portable way to bring Galaxy to new domains,\nand a brilliant tool for training users.\n\nhttps://github.com/bgruening/docker-galaxy-stable/commit/27ef7966508958dfec9ce35ff1c5f076ffccf80f\n\nAlso mention Galaxy KickStart as a way to run Galaxy itself in a container.\n\n---\n\n## Containerizing Galaxy vs Tools\n\nWe are going to discuss containerizing tool execution instead - executing just jobs in containers.\n\nContainers for the particular job's tool.\n\nHowever you deploy Galaxy, including in a container, tool execution can still be containerized.\n\n???\n\n---\n\nclass: left\n\n### Containerizing Tools is Still Important\n\n* Isolated tool execution.\n* Isolate file system access.\n* Added layer of security.\n* Increased re-computability.\n* New deployment options - Kubernetes, Mesos Chronos, AWS Batch, etc.\n\n---\n\nclass: left\n\n### Containerizing Tool Execution\n\nDecomposes to basic problems:\n\n* <i class=\"fa fa-square-o\" aria-hidden=\"true\"></i> Instruct Galaxy where to find a container for the tool.\n* <i class=\"fa fa-square-o\" aria-hidden=\"true\"></i> Instruct Galaxy to run the tool in a container.\n\n---\n\nclass: left\n\n### Configuring Galaxy to Use Containers\n\nJust configure the destination. For instance, transform the cluster destination:\n\n```\n<destination id=\"short_fast\" runner=\"slurm\">\n    <param id=\"nativeSpecification\">--time=00:05:00 --nodes=1</param>\n</destination>\n```\n\nas follows:\n\n\n```\n<destination id=\"short_fast\" runner=\"slurm\">\n    <param id=\"nativeSpecification\">--time=00:05:00 --nodes=1</param>\n    <param id=\"docker_enabled\">true</parma>\n    <param id=\"docker_sudo\">false</param>\n</destination>\n```\n\nThat is it!\n\nFor development, the Planemo flag `--docker` does this for `test`, `serve`, and related commands.\n\n---\n\nclass: left\n\n### Containerizing Tool Execution\n\n#### Decomposes to basic problems\n\n* <i class=\"fa fa-square-o\" aria-hidden=\"true\"></i> Instruct Galaxy where to find a container for the tool.\n* <i class=\"fa fa-check-square-o\" aria-hidden=\"true\"></i> Instruct Galaxy to run the tool in a container.\n\n---\n\nclass: left\n\n## Explicit Container Dependencies\n\nReturning to the seqtk example, lets change the `requirements` from:\n\n```\n<requirements>\n    <requirement type=\"package\" version=\"1.2\">seqtk</requirement>\n</requirements>\n```\n\ninto\n\n```\n<requirements>\n    <container type=\"docker\">quay.io/biocontainers/seqtk:1.2--1</container>\n    <requirement type=\"package\" version=\"1.2\">seqtk</requirement>\n</requirements>\n```\n\nNow run Planemo `test` and `serve` with the `--docker` flag and as a tool developer you are done!\n\n---\n\n### Containerizing Tool Execution\n\n#### Decomposes to basic problems\n\n* <i class=\"fa fa-check-square-o\" aria-hidden=\"true\"></i> Instruct Galaxy where to find a container for the tool.\n* <i class=\"fa fa-check-square-o\" aria-hidden=\"true\"></i> Instruct Galaxy to run the tool in a container.\n\nWe're done... right?\n\n???\n\n---\n\nclass: left\n\n## The Problems with Making Docker Explicit\n\n* Setting up a `Dockerfile` and publishing a Docker image more process for the tool even though the dependencies have already been completely defined.\n* An arbitrary Docker image is a blackbox and there is no guarantee Galaxy will execute the same binaries as the Conda requirements.\n\n---\n\nclass: left\n\n## To Put it Another Way\n\nThis:\n\n```\n<requirements>\n    <requirement type=\"package\" version=\"1.2\">seqtk</requirement>\n</requirements>\n```\n\nshould have been sufficient!\n\nAnd the good news is that now it is (mostly)!\n\n---\n\nclass: left\n\n### .image-10[![biocontainers logo](../../images/biocontainers.png)] BioContainers - The Magic\n\nGalaxy can now automatically find or build containers for best practice tools.\n\nPlanemo will check if such a container has been published with the `--biocontainers` flag to `planemo lint`.\n\n```\n$ planemo lint --biocontainers seqtk_seq.xml\n...\nApplying linter biocontainer_registered... CHECK\n.. INFO: BioContainer best-practice container found [quay.io/biocontainers/seqtk:1.2--1].\n```\n\n???\n\nBut we didn't do anything - where did this magic seqtk container come from.\n\n---\n\n## The Mystery quay.io/biocontainers/seqtk Container\n\n![screenshot of quay.io showing the repository tags for the seqtk repo](../../images/quayioseqtk.png)\n\n???\n\nI swear Planemo did not just create that with `tool_init` or `lint`, maybe we should try using it...\n\n---\n\nclass: left\n\n### .image-05[![biocontainers logo](../../images/biocontainers.png)] BioContainers - Using the Container\n\nRun Planemo `test` or `serve` with `--biocontainers` to try mystery container.\n\n.reduce70[\n\n```\n$ planemo test --biocontainers seqtk_seq.xml\n...\n[galaxy.tools.actions] Setup for job Job[unflushed,tool_id=seqtk_seq] complete, ready to flush (20.380 ms)\n[galaxy.tools.actions] Flushed transaction for job Job[id=2,tool_id=seqtk_seq] (15.191 ms)\n...\n[galaxy.tools.deps.containers] Checking with container resolver [ExplicitDockerContainerResolver[]] found description [None]\n[galaxy.tools.deps.containers] Checking with container resolver [CachedMulledDockerContainerResolver[namespace=None]] found description [None]\n[galaxy.tools.deps.containers] Checking with container resolver [MulledDockerContainerResolver[namespace=biocontainers]] found description [ContainerDescription[identifier=quay.io/biocontainers/seqtk:1.2--1,type=docker]]\n[galaxy.jobs.command_factory] Built script [/tmp/tmpw8_UQm/job_working_directory/000/2/tool_script.sh] for tool command [seqtk seq -a '/tmp/tmpw8_UQm/files/000/dataset_1.dat' > '/tmp/tmpw8_UQm/files/000/dataset_2.dat']\n...\nok\n\n----------------------------------------------------------------------\nXML: /private/tmp/tmpw8_UQm/xunit.xml\n----------------------------------------------------------------------\nRan 1 test in 11.926s\nOK\n```\n]\n\nThe important line here is - `Checking with container resolver [MulledDockerContainerResolver[namespace=biocontainers]] found description [ContainerDescription[identifier=quay.io/biocontainers/seqtk:1.2--1,type=docker]]`.\n\n---\n\n### .image-05[![biocontainers logos](../../images/biocontainers.png)] BioContainers - The Community\n\n![screenshot of biocontainers github page](../../images/biocontainers_org.png)\n\n???\n\nBioContainers is a big community of informatics minded individuals trying to work\ntogether on building container and Docker based solutions for problems like ours.\nPreviously the project was called BioDocker.\n\nWe are exploiting and contributing to one aspect of BioContainers, in particular\nBioConda for Containers.\n\n---\n\n### .image-10[![biocontainers logo](../../images/biocontainers.png)] BioContainers - Bioconda for Containers\n\nAll Bioconda packages are built into minimal containers.\n\nThis setup allows the same binaries to be used within the container or on traditional/HPC resources.\nWithout any extra work by tool authors, Galaxy can automatically find or build ‚Äúthe correct‚Äù container for a best-practice tool.\n\nOver 4,000 containers already published.\n\n---\n\n### .image-05[![biocontainers logo](../../images/biocontainers.png)] BioContainers - Lots of Containers\n\n![screenshot of biocontainers on quay.io with lots of containers](../../images/quay_list.png)\n\n???\n\nTODO: Zoom in on the image a bit more ideally.\n\n---\n\n### .image-05[![biocontainers logo](../../images/biocontainers.png)] BioContainers - On Demand Creation\n\nGalaxy can be configured to attempt to build containers on demand for containers that haven't\nbeen published to the BioContainers namespace on quay.io.\n\nThese containers will have same names as would be published to quay.io (e.g. `quay.io/biocontainers/seqtk:1.2--0`).\n\n---\n\n### Containerizing Tool Execution\n\n#### Decomposes to basic problems\n\n* <i class=\"fa fa-check-square-o\" aria-hidden=\"true\"></i><i class=\"fa fa-check-square-o\" aria-hidden=\"true\"></i> Instruct Galaxy where to find a container for the tool.\n* <i class=\"fa fa-check-square-o\" aria-hidden=\"true\"></i> Instruct Galaxy to run the tool in a container.\n\nWe're done this time now right?\n\n???\n\n---\n\n## Revisiting Galaxy Requirements\n\n![schematic of a galaxy server with dependency resolution via requirement tags at the top. On the left is the tool box with a number of xml files listed like seqtk_seq and seqtk_subseq. On the right is applications & libraries showing only a few tools like seqtk, all of the 3 multipoe subtools were collapsed](../../images/galaxy_instance.png)\n\nMany tools have multiple requirements, these need containers also!\n\n???\n\n---\n\n## An Example\n\nThe BWA tool is an example of one such tool that has multiple requirements - because samtools is used to sort BAMs after mapping. The Planemo `conda_testing` project is distributed with a simple tool to simulate this containing both `bwa` and `samtools` requirements.\n\n.reduce90[\n```\n$ planemo project_init --template=conda_testing conda_testing\n$ cd conda_testing/\n$ grep -r require bwa_and_samtools.xml\nbwa_and_samtools.xml:    <requirements>\nbwa_and_samtools.xml:        <requirement type=\"package\" version=\"0.7.15\">bwa</requirement>\nbwa_and_samtools.xml:        <requirement type=\"package\" version=\"1.3.1\">samtools</requirement>\nbwa_and_samtools.xml:    </requirements>\n```\n]\n\n---\n\n## Container Hashing\n\nGalaxy finds containers based on the names and versions of requirements, so far we have seen\nthe hash for single requirements is just the name and the version.\n\nIf multiple requirements are present, the hash looks more like a hash. For bwa @ 0.7.15 and samtools @ 1.3.1,\nGalaxy will look for a container called:\n\n.reduce50[`quay.io/biocontainers/mulled-v2-fe8faa35dbf6dc65a0f7f5d4ea12e31a79f73e40:03dc1d2818d9de56938078b8b78b82d967c1f820-0`]\n\n\n---\n\n## Galaxy Terminology - Mulled\n\nTo *mull* is to create an environment (either in the Conda sense or globally\ninside a container) for one or more Conda packages. The result of this is a\n*mulled* environment.\n\nFixed naming schemes for the resulting environments ensure that different tools\nwith the same set of requirements can reuse a previously created environment or\ncontainer.\n\nIf more than one package is included in the resulting environment, a complicated\nhash is used as this name.\n\n---\n\n## Mulled Hashing\n\nBack to the example of bwa at version 0.7.15 and samtools at version 1.3.1,\nwe said the resulting container will be\n\n.reduce50[`quay.io/biocontainers/mulled-v2-fe8faa35dbf6dc65a0f7f5d4ea12e31a79f73e40:03dc1d2818d9de56938078b8b78b82d967c1f820-0`]\n\nThis can be broken into these parts:\n\n```\nquay.io/ <namespace> /mulled-v2-<package_hash>:<version_hash>-<build>\n```\n\n???\n\nExplain the different parts.\n\n---\n\n## Exploring Mulled Hashes - by Evgeny Anatskiy\n\n![Screenshot of biocontainers page showing an information page for multi-package containers](../../images/multi-package-containers.png)\n\n???\n\n---\n\nclass: left\n\n## The Planemo `mull` command (1 / 2)\n\nWhile Galaxy can be configured to auto-build BioContainers as they are needed, the Planemo `mull` command\ncan be used to manually build them for your local Docker host.\n\n---\n\nclass: reduce70\n\n## The `mull` command (2 / 2)\n\n```\n$ planemo mull bwa_and_samtools.xml\n/Users/john/.planemo/involucro -v=3 -f /Users/john/workspace/planemo/.venv/lib/python2.7/site-packages/galaxy_lib-17.9.0-py2.7.egg/galaxy/tools/deps/mulled/invfile.lua -set CHANNELS='iuc,bioconda,r,defaults,conda-forge' -set TEST='true' -set TARGETS='samtools=1.3.1,bwa=0.7.15' -set REPO='quay.io/biocontainers/mulled-v2-fe8faa35dbf6dc65a0f7f5d4ea12e31a79f73e40:03dc1d2818d9de56938078b8b78b82d967c1f820' -set BINDS='build/dist:/usr/local/' -set PREINSTALL='conda install --quiet --yes conda=4.3' build\n/Users/john/.planemo/involucro -v=3 -f /Users/john/workspace/planemo/.venv/lib/python2.7/site-packages/galaxy_lib-17.9.0-py2.7.egg/galaxy/tools/deps/mulled/invfile.lua -set CHANNELS='iuc,bioconda,r,defaults,conda-forge' -set TEST='true' -set TARGETS='samtools=1.3.1,bwa=0.7.15' -set REPO='quay.io/biocontainers/mulled-v2-fe8faa35dbf6dc65a0f7f5d4ea12e31a79f73e40:03dc1d2818d9de56938078b8b78b82d967c1f820' -set BINDS='build/dist:/usr/local/' -set PREINSTALL='conda install --quiet --yes conda=4.3' build\nDEBU Run file [/Users/john/workspace/planemo/.venv/lib/python2.7/site-packages/galaxy_lib-17.9.0-py2.7.egg/galaxy/tools/deps/mulled/invfile.lua]\nSTEP Run image [continuumio/miniconda:latest] with command [[rm -rf /data/dist]]\nDEBU Creating container [step-730a02d79e]\nDEBU Created container [5e4b5f83c455 step-730a02d79e], starting it\nDEBU Container [5e4b5f83c455 step-730a02d79e] started, waiting for completion\nDEBU Container [5e4b5f83c455 step-730a02d79e] completed with exit code [0] as expected\nDEBU Container [5e4b5f83c455 step-730a02d79e] removed\nSTEP Run image [continuumio/miniconda:latest] with command [[/bin/sh -c conda install --quiet --yes conda=4.3 && conda install  -c iuc -c bioconda -c r -c defaults -c conda-forge  samtools=1.3.1 bwa=0.7.15 -p /usr/local --copy --yes --quiet]]\nDEBU Creating container [step-e95bf001c8]\nDEBU Created container [72b9ca0e56f8 step-e95bf001c8], starting it\nDEBU Container [72b9ca0e56f8 step-e95bf001c8] started, waiting for completion\nSOUT Fetching package metadata .........\nSOUT Solving package specifications: .\nSOUT\nSOUT Package plan for installation in environment /opt/conda:\nSOUT\nSOUT The following packages will be UPDATED:\nSOUT\nSOUT conda: 4.3.11-py27_0 --> 4.3.22-py27_0\nSOUT\nSOUT Fetching package metadata .................\nSOUT Solving package specifications: .\n...\nSOUT\nDEBU Container [72b9ca0e56f8 step-e95bf001c8] completed with exit code [0] as expected\nDEBU Container [72b9ca0e56f8 step-e95bf001c8] removed\nSTEP Wrap [build/dist] as [quay.io/biocontainers/mulled-v2-fe8faa35dbf6dc65a0f7f5d4ea12e31a79f73e40:03dc1d2818d9de56938078b8b78b82d967c1f820-0]\nDEBU Creating container [step-6f1c176372]\nDEBU Packing succeeded\n```\n\nThis built `quay.io/biocontainers/mulled-v2-fe8faa35dbf6dc65a0f7f5d4ea12e31a79f73e40:03dc1d2818d9de56938078b8b78b82d967c1f820-0`!\n\n???\n\n---\n\nclass: reduce70\n\n## Testing locally `mull`ed containers\n\n```\n$ planemo test --galaxy_branch dev --biocontainers bwa_and_samtools.xml\n...\n[galaxy.tools.actions] Handled output named output_2 for tool bwa_and_samtools (17.443 ms)\n[galaxy.tools.actions] Added output datasets to history (12.935 ms)\n[galaxy.tools.actions] Verified access to datasets for Job[unflushed,tool_id=bwa_and_samtools] (0.021 ms)\n[galaxy.tools.actions] Setup for job Job[unflushed,tool_id=bwa_and_samtools] complete, ready to flush (5.755 ms)\n[galaxy.tools.actions] Flushed transaction for job Job[id=1,tool_id=bwa_and_samtools] (19.582 ms)\n[galaxy.jobs.handler] (1) Job dispatched\n[galaxy.tools.deps] Using dependency bwa version 0.7.15 of type conda\n[galaxy.tools.deps] Using dependency samtools version 1.3.1 of type conda\n[galaxy.tools.deps] Using dependency bwa version 0.7.15 of type conda\n[galaxy.tools.deps] Using dependency samtools version 1.3.1 of type conda\n[galaxy.tools.deps.containers] Checking with container resolver [ExplicitContainerResolver[]] found description [None]\n[galaxy.tools.deps.containers] Checking with container resolver [CachedMulledContainerResolver[namespace=None]] found description [ContainerDescription[identifier=quay.io/ biocontainers/mulled-v1-01afc412d1f216348d85970ce5f88c984aa443f3:latest,type=docker]]\n[galaxy.jobs.command_factory] Built script [/tmp/tmpQs0gyp/job_working_directory/000/1/tool_script.sh] for tool command [bwa > /tmp/tmpQs0gyp/files/000/dataset_1.dat 2>&1 ; samtools > /tmp/tmpQs0gyp/files/000/dataset_2.dat 2>&1]\n[galaxy.tools.deps] Using dependency samtools version None of type conda\n[galaxy.tools.deps] Using dependency samtools version None of type conda\nok\n\n----------------------------------------------------------------------\nXML: /private/tmp/tmpQs0gyp/xunit.xml\n----------------------------------------------------------------------\nRan 1 test in 7.553s\n\nOK\n[test_driver] Shutting down\n[test_driver] Shutting down embedded galaxy web server\n[test_driver] Embedded web server galaxy stopped\n[test_driver] Stopping application galaxy\n...\n[galaxy.jobs.handler] job handler stop queue stopped\nTesting complete. HTML report is in \"/home/planemo/workspace/planemo/tool_test_output.html\".\nAll 1 test(s) executed passed.\nbwa_and_samtools[0]: passed\n```\n\n---\n\n<hands-on-title>Hands-on</hands-on-title>\n\n![cartoon of two people jumping](../../images/exercise.png)\n\n---\n\n<hands-on-title>Hands-on</hands-on-title>\n\n#### The Goal\n\n- Use `--biocontainers` to build a container on-demand for a test tool.\n\n---\n\nclass: left\n\n<hands-on-title>Hands-on</hands-on-title>\n\n#### Steps\n\n- Run through the bwa_and_samtools.xml test tool and verify container creation.\n\n```\n$ planemo project_init --project_template=conda_testing conda_testing\n$ cd conda_testing/\n$ planemo mull bwa_and_samtools.xml\n$ docker images # verify the container was built\n$ # use docker run to verify the container has samtools and bwa.\n$ planemo test --biocontainers bwa_and_samtools.xml\n```\n\n---\n\n### Publishing Multi-Package Containers\n\n![screenshot of a mulled biocontainer in quay.io. Nothing useful is depicted.](../../images/multi-package-repo.png)\n\n???\n\nWe are currently monitoring tools-iuc, tools-devteam, and a half a dozen other repositories\ndaily for package combinations to publish.\n\n---\n\n### Publishing **Your** Multi-Package Containers\n\n![Screenshot of the text editor in github, editing monitor.sh in galaxyproject/planemo-monitor](../../images/planemo-monitor.png)\n"],"video_library":{"tutorial":null,"slides":null,"demo":null,"both":null,"session":null},"hands_on":false,"slides":true,"mod_date":"2022-09-28 13:13:58 +0000","pub_date":"2017-06-20 21:12:27 +0000","version":20,"api":"https://training.galaxyproject.org/training-material/api/topics/dev/tutorials/containers/tutorial.json","tools":[],"supported_servers":[],"topic_name_human":"Development in Galaxy","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial","redirect_from":["/short/dev/containers/slides","/short/S00047"]}