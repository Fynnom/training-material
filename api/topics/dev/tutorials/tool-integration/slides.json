{"layout":"tutorial_slides","logo":"GTN","title":"Tool development and integration into Galaxy","hands_on":"external","hands_on_url":"http://planemo.readthedocs.io/en/latest/writing_standalone.html","questions":["What is a tool for Galaxy?","How to write a best-practice tool?","How to deal with the tool environment?"],"objectives":["Learn what a tool is and its structure","Use the Planemo utilities to develop a tool","Deal with the dependencies","Write functional tests","Make a tool ready for publishing in a ToolShed"],"time_estimation":"6h","subtopic":"tooldev","key_points":["Galaxy Tool Syntax","Use Planemo","Use Conda","Use GitHub","Use GitHub Actions","No more excuse to develop crappy Galaxy tools"],"follow_up_training":[{"type":"internal","topic_name":"dev","tutorials":["conda"]}],"contributors":["shiltemann","bebatut","abretaud","jmchilton","nsoranzo","bgruening","lecorguille"],"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"S00051","url":"/topics/dev/tutorials/tool-integration/slides.html","topic_name":"dev","tutorial_name":"tool-integration","dir":"topics/dev/tutorials/tool-integration","symlink":null,"id":"dev/tool-integration","ref_tutorials":[],"ref_slides":["# Galaxy tools\n\n---\n\n## Tools in the Galaxy UI\n\n![Screenshot of galaxy with the three main panels labelled list of available tools on left, 'wrapper' in center, and history with results as datasets on right](../../images/galaxy_instance_detailed_screenshot.png)\n\n---\n\n## Galaxy tool / wrapper\n\n![Screenshot of tool interface in Galaxy for GraPhlAn showing a variety of input types like file selection, select, text, numbers.](../../images/graphlan_screenshot.png)\n\n```bash\ngraphlan.py --format png --size 7 'input_tree.txt' 'png_image.png'\n```\n\n---\nclass: left\n\n## So what is a tool?\n\nLink between the Galaxy UI and the underlying tool:\n- Description of the user interface\n- How to invoke the tool\n- Which files and options to pass\n- Which files the tool will produce as output\n\n---\n\n## Tool execution\n\n![A flowchart is depicated with the galaxy interface pointing to a bowtie2-wrapper.xml file which has a command, inputs, and outputs. Inputs points back to the tool interface. The command block points to the Operating System with an image of servers and the bowtie2 binary. This points back to outputs, and back to the history within the galaxy interface](../../images/wrapper_layers.png)\n\n???\n\n1. `<inputs>` (datasets and parameters) specified in the tool XML are exposed in the Galaxy tool UI\n2. When the user fills the form and click the `Execute` button, Galaxy fills the `<command>` template in the XML with the inputs entered by the user and execute the Cheetah code, producing a script as output\n3. Galaxy creates a job for the generated script and executes it somewhere (bowtie2 is run in this case)\n4. Some (not necessarily all) output files become new history datasets, as specified in the `<outputs>` XML tag set\n\n---\n\n## Tool execution\n\n![An XML file as an image. The tool id is on the first line, then a description element, a command block running \"echo Hello World $mystring to $output\", an inputs section with a mystring text input, and an output1 tabular data file. A help block is shown last.](../../images/wrapper_big_picture_1.png)\n\n???\n\n- CDATA tags are used to prevent the interpretation of ampersands and less-than signs as XML special characters\n- The tool name and description are combined in the left panel (tool menu), keep them short!\n\n---\n\n## Tool execution\n\n![The previous image, but the input parameter named 'mystring' is shown pointing to its place in the command block. Same for the output pointing to the command block. An overlay shows the Job Command Line /bin/echo Hello world you are amazing > a/path.dat](../../images/wrapper_big_picture_2.png)\n\n---\n\n## Tool execution\n\n![The previous image but now there is an overlay showing the output text Hello world you are amazing](../../images/wrapper_big_picture_3.png)\n\n---\n\n## Tool XML\n\nGalaxy tool XML format is formally defined in a XML Schema Definition (XSD), used to generate the corresponding [online documentation](https://docs.galaxyproject.org/en/latest/dev/schema.html)\n\n---\n\n## XML Editor\n\nYou are free to use your prefered code editor to write Galaxy tools.\n\nIf you use Visual Studio Code (or Codium), we recommend to install the [dedicated extension](https://marketplace.visualstudio.com/items?itemName=davelopez.galaxy-tools).\n\nIt provides XML validation, tags and attributes completion, help/documentation on hover, and other smart features to assist in following best practices.\n\n![An animation showing someone writing a tool XML file, while being assisted by the VSCode extension.](../../images/vscode_tool.gif)\n\n---\n\n## `tool`\n\n```xml\n<tool id=\"graphlan\" name=\"GraPhlAn\" version=\"1.1.3+galaxy2\" profile=\"22.05\">\n```\n- `id`: unique identifier of your tool, should contain only `[a-z0-9_-]`\n- `name`: shown to the user, displayed in the tool box\n- `version`: the version of the wrapped tool, followed by a `+galaxyX` suffix for wrapper version\n- `profile`: minimum Galaxy version that should be required to run this tool (IUC recommends not older than 1 year)\n\n???\n\n- The top level `tool` tag defines the tool naming and version\n- The `id` attribute is the unique identifier of your tool, it should contain only letters, digits, underscores or dashes\n- The `name` attribute is shown to the user and displayed in the tool box\n- The `version` attribute contains the version of the wrapped tool, followed by a `+galaxyX` suffix for wrapper version\n- The `profile` attribute should be set to the minimum Galaxy version that should be required to run this tool (IUC recommends not older than 1 year)\n\n---\n\n## `command`\n\nHow to invoke the tool?\n\n```xml\n<requirements>\n    <requirement type=\"package\" version=\"1.1.3\">graphlan</requirement>\n</requirements>\n<command><![CDATA[\ngraphlan.py\n--format $format\n...\n]]></command>\n```\n\nIf the script is provided with the tool xml:\n\n```xml\n<requirements>\n    <requirement type=\"package\" version=\"2.7\">python</requirement>\n</requirements>\n<command><![CDATA[\npython '$__tool_directory__/graphlan.py'\n--format $format\n...\n]]></command>\n```\n\n???\n\n- In the first case, `graphlan.py` is expected to be on the PATH and executable when the job executes. This is usually accomplished by specifying some `<requirement/>` tags.\n- In the second case, `$__tool_directory__` is a special variable which is substituted by Galaxy with the directory where the tool XML is\n\n---\n\n## `inputs` > `param` to `command`\n\nParameters are directly linked to variables in `<command>` by the `name` or `argument` attribute\n\nParameters can be optional or required.\n\n```xml\n<command><![CDATA[\ngraphlan.py\n...\n#if str($dpi):\n    --dpi $dpi\n#end if\n'$input_tree'\n...\n]]></command>\n<inputs>\n    <param name=\"input_tree\" type=\"data\" label=\"...\"/>\n\n    <param argument=\"--dpi\" type=\"integer\" optional=\"true\" label=\"...\"\n        help=\"For non vectorial formats\" />\n</inputs>\n```\n\n- The `#if ... #end if` syntax comes from the [Cheetah](https://cheetahtemplate.org/) template language, which has a Python-like syntax\n\n???\n\n- The `name` or `argument` attribute identifies a parameter (details of `argument` later).\n- Parameters have different types (`data`, `data_collection`, `integer`, `float`, `text`, `select`, `boolean`, `color`, `data_column`,...)\n  and can be optional.\n\n---\n\n## `inputs` > `param` > `data`\n\n![Screenshot of the file selection input in Galaxy permitting selection of a single file, multiple files, or a collection. In bold text a label appears above the component describing its use. Below the component in light grey is a help message. This applies to every input in Galaxy](../../images/input_data.png)\n\n```xml\n<param name=\"...\" type=\"data\" format=\"txt\" label=\"...\" help=\"...\" />\n```\n\n.footnote[[List of possible formats](https://github.com/galaxyproject/galaxy/blob/dev/config/datatypes_conf.xml.sample)]\n\n---\n\n## `inputs` > `param` > `integer` | `float`\n\n![Screenshot of an integer input, it's just an input field set to 7.](../../images/input_integer.png)\n\n```xml\n<param name=\"...\" type=\"integer\" value=\"7\" label=\"...\" help=\"...\"/>\n```\n\n![Screenshot of a float input from the cd_hit tool. This time also a slider appears due to addition of min and max](../../images/input_float_range.png)\n\n```xml\n<param name=\"...\" type=\"float\" min=\"0.4\" max=\"1.0\" value=\"0.9\" label=\"...\" help=\"...\"/>\n```\n\n???\n\n- In the first case, Galaxy creates a text box which accepts only integer values\n- In the second case, since *both* `min` and `max` are specified, a slider is shown in addition\n\n---\n\n## `inputs` > `param` > `text`\n\n![Screenshot of a textbox from the cd_hit tool.](../../images/input_text.png)\n\n```xml\n<param name=\"...\" type=\"text\" value=\"...\" label=\"...\" help=\"...\"/>\n```\n\n---\n\n## `inputs` > `param` > `select`\n\n![Screenshot of a select drop down with several image formats from the bedtools_bedtoigv tool.](../../images/input_select.png)\n\n```xml\n<param name=\"...\" type=\"select\" label=\"...\">\n    <option value=\"png\" selected=\"true\">PNG</option>\n    <option value=\"eps\">EPS</option>\n    <option value=\"svg\">SVG</option>\n</param>\n```\n\nIf no `option` has `selected=\"true\"`, the first one is selected by default.\n\n---\n\n## `inputs` > `param` > `select`\n\n![The select is now a set of checkboxes.](../../images/input_select_checkboxes.png)\n\n```xml\n<param name=\"...\" type=\"select\" display=\"radio\" label=\"...\" help=\"...\">\n    <option value=\"min\" selected=\"true\">Minimum</option>\n    <option value=\"mean\">Mean</option>\n    <option value=\"max\">Max</option>\n    <option value=\"sum\">Sum</option>\n</param>\n```\n\n---\n\n## `inputs` > `param` > `select`\n\n![A select/unselect all checkbox appears before a box with numerous selections inside, appearing as badges that can be added or removed.](../../images/input_select_multiple.png)\n\n```xml\n<param name=\"...\" type=\"select\" multiple=\"true\" label=\"...\" help=\"...\">\n    <option value=\"ld\" selected=\"true\">Length distribution</option>\n    <option value=\"gc\" selected=\"true\">GC content distribution</option>\n    ...\n</param>\n```\n\n---\n\n## `inputs` > `param` > `boolean`\n\n![A yes/no switch from the bg_sortmerna tool.](../../images/input_boolean.png)\n\n```xml\n<param name=\"...\" type=\"boolean\" checked=\"false\" truevalue=\"--log\" falsevalue=\"\"\n    label=\"...\" help=\"...\" />\n```\n\n---\n\nclass: reduce70\n\n## `inputs` > `param` > `conditional`\n\n.pull-left[![Screenshot of a conditional select box set to Paired, and two file inputs appear below it.](../../images/input_conditional.png)]\n.pull-right[![Screenshot of a conditional select box set to Single, and only a single file input appears below it.](../../images/input_conditional_single.png)]\n\n<br style=\"clear:left;\"/>\n\n```xml\n<command><![CDATA[\n#if $fastq_input.selector == 'paired':\n    '$fastq_input.input1' '$fastq_input.input2'\n#else:\n    '$fastq_input.input'\n#end if\n]]></command>\n<inputs>\n    <conditional name=\"fastq_input\">\n        <param name=\"selector\" type=\"select\" label=\"Single or paired-end reads?\">\n            <option value=\"paired\">Paired-end</option>\n            <option value=\"single\">Single-end</option>\n        </param>\n        <when value=\"paired\">\n            <param name=\"input1\" type=\"data\" format=\"fastq\" label=\"Forward reads\" />\n            <param name=\"input2\" type=\"data\" format=\"fastq\" label=\"Reverse reads\" />\n        </when>\n        <when value=\"single\">\n            <param name=\"input\" type=\"data\" format=\"fastq\" label=\"Single reads\" />\n        </when>\n    </conditional>\n</inputs>\n```\n\n---\n\nclass: reduce70\n\n## `inputs` > `param` > `repeat`\n\n![Two boxes appear labelled 1: Series and 2: Series, with an insert series button below them. Each series box has two inputs in it, a file input and a select box.](../../images/input_repeat.png)\n\n```xml\n<command><![CDATA[\n#for $i, $s in enumerate($series):\n    rank_of_series=$i\n    input_path=${s.input}\n    x_column=${s.xcol}\n#end for\n]]></command>\n\n<inputs>\n    <repeat name=\"series\" title=\"Series\">\n        <param name=\"input\" type=\"data\" format=\"tabular\" label=\"Dataset\"/>\n        <param name=\"xcol\" type=\"data_column\" data_ref=\"input\" label=\"Column for x axis\"/>\n    </repeat>\n</inputs>\n```\n\n???\n\nIt makes sense to use a `<repeat>` block only if it contains multiple related parameters, otherwise adding `multiple=\"true\"` is preferable.\n\n---\n\n## `outputs`\n\n.image-25[![Screenshot of a galaxy history with two outputs.](../../images/output.png)]\n\n```xml\n<outputs>\n    <data name=\"tree\" format=\"txt\" label=\"${tool.name} on ${on_string}: Tree\" />\n    <data name=\"annotation\" format=\"txt\"\n        label=\"${tool.name} on ${on_string}: Annotation\" />\n</outputs>\n```\n\n???\n\n`${tool.name} on ${on_string}` is the default output label, need to modify this if the tool generates more than 1 output\n\n---\n\n## `outputs` > `filter`\n\nOutput is collected only if the `filter` evaluates to True\n\n```xml\n<inputs>\n    <param type=\"select\" name=\"format\" label=\"Output format\">\n        <option value=\"png\">PNG</option>\n        <option value=\"pdf\">PDF</option>\n    </param>\n</inputs>\n<outputs>\n    <data name=\"png_output\" format=\"png\" label=\"${tool.name} on ${on_string}: PNG\">\n        <filter>format == \"png\"</filter>\n    </data>\n    <data name=\"pdf_output\" format=\"pdf\" label=\"${tool.name} on ${on_string}: PDF\">\n        <filter>format == \"pdf\"</filter>\n    </data>\n</outputs>\n```\n\n???\n\nN.B. If the filter expression raises an Exception, the dataset will NOT be filtered out\n\n---\n\n## `detect_errors`\n\nLegacy tools (i.e. with `profile` unspecified or less than 16.04) by default fail only if the tool writes to stderr\n\nNon-legacy tools by default fail if the tool exit code is not 0, which is equivalent to specify:\n```xml\n<command detect_errors=\"exit_code\"> ... </command>\n```\n\nTo fail if either the tool exit code is not 0 or \"Exception:\"/\"Error:\" appears in standard error/output:\n```xml\n<command detect_errors=\"aggressive\"> ... </command>\n```\n\n---\n\n## `stdio`\n\nIf you need more precision:\n```xml\n<stdio>\n    <exit_code range=\":-2\" level=\"warning\" description=\"Low disk space\" />\n    <exit_code range=\"1:\" level=\"fatal\"  />\n    <regex match=\"Error:\"  level=\"fatal\" />\n</stdio>\n<command> ... </command>\n```\n\n<small>\"Warning\" level allows to add information to `stderr` without marking the dataset as failed</small>\n\n---\n\n## `help`\n\n![Screenshot of a help block in a galaxy tool, it shows the below text block rendered according to restructured text rules. What it does is bold, and user manual is a hyperlink to the bitbucket url.](../../images/help.png)\n\n```xml\n<help><![CDATA[\n**What it does**\nGraPhlAn is a software tool for producing high-quality circular\nrepresentations of taxonomic and phylogenetic trees. GraPhlAn focuses\non concise, integrative, informative, and publication-ready\nrepresentations of phylogenetically- and taxonomically-driven\ninvestigation.\n\nFor more information, check the `user manual\n<https://bitbucket.org/nsegata/graphlan/overview>`_.\n]]></help>\n```\n\nContent should be in [reStructuredText markup format](https://docutils.sourceforge.io/rst.html)\n\n---\n\n## `citations`\n\n![Screenshot of the citations box showing 5 nicely formatted citations with italics, and hyperlinked DOIs.](../../images/citations.png)\n\n```xml\n<citations>\n    <citation type=\"doi\">10.1093/bioinformatics/bts611</citation>\n    <citation type=\"doi\">10.1093/nar/gks1219</citation>\n    <citation type=\"doi\">10.1093/nar/gks1005</citation>\n    <citation type=\"doi\">10.1093/bioinformatics/btq461</citation>\n    <citation type=\"doi\">10.1038/nbt.2198</citation>\n</citations>\n```\n\n<small>If no DOI is available, a BibTeX citation can be specified with `type=\"bibtex\"`</small>\n\n---\n\n## Quoting params\n\nAlways quote `text` and `data` parameters and output `data` in `<command>`\n\n```xml\n<command><![CDATA[\ngraphlan.py\n...\n'$input_tree'\n'$png_output_image'\n]]></command>\n```\n\n- For security reasons\n- Paths may contain spaces\n- Prefer single quotes over double quotes\n\n---\n\n## Multiple commands\n\nUse `&&` to concatenate them\n\n```xml\n<command><![CDATA[\ngraphlan.py\n--format '$format'\n&&\necho \"Yeah it worked!\"\n]]></command>\n```\n\n<small>The job will exit on the first error encountered.</small>\n\n<small>You can use `&&` or `;` if using a `profile` >= 20.09 (the `set -e` shell directive is now used by default).</small>\n\n---\n\n## Param argument\n\nUse the `argument` tag when a `param` name reflects the command line argument\n\n```xml\n<param argument=\"--size\" type=\"integer\" value=\"7\" label=\"...\" help=\"...\"/>\n```\n\n- It will be appended at the end of the displayed param help\n- When `argument` is specified and `name` is not, `name` is derived from `argument` by removing the initial dashes and replacing internal dashes with underscores\n\n---\n\n## `section`\n\nUse sections to group related parameters\n\n![Screenshot of the same section twice, in the first it shows Additional Options and is collapsed. In the second it is expanded and an integer input can be seen.](../../images/input_section.png)\n\n```xml\n<section name=\"advanced\" title=\"Advanced options\" expanded=\"False\">\n    <param argument=\"--size\" type=\"integer\" value=\"7\" label=\"...\" help=\"...\"/>\n    ...\n</section>\n```\n\n---\n\n![Planemo logo, the E mimics the galaxy logo with three bars, the bottom most offset](../../images/planemo-logo.png)\n\n> Command-line utilities to assist in building and publishing Galaxy tools.\n\n- [Documentation](https://planemo.readthedocs.io/en/latest/)\n- [Tutorial](https://planemo.readthedocs.io/en/latest/writing_standalone.html)\n\n---\n\n##.image-25[![Planemo logo](../../images/planemo-logo.png)]\n\n![An overly complicated flowchart with 11 steps and a three level hierarchy. The gist is that planemo tool_init lets a wrapper be created, planemo lint is then used. Planemo conda installs packages from a conda repository. This is then run with planemo test and planemo serve. Afterwards planemo shed_test, shed_create, and shed_update upload the wrapper to the galaxy toolshed. Then it is installed to a galaxy instance where it can be tested, and fetches the conda env from conda.](../../images/big_picture.png)\n\n---\n\n##.image-25[![planemo logo again](../../images/planemo-logo.png)]\n\n`planemo tool_init`\n\nCreates a skeleton of xml file\n\n```bash\n$ mkdir new_tool\n$ cd new_tool\n$ planemo tool_init --id 'some_short_id' --name 'My super tool'\n```\n\nComplicated version:\n\n```bash\n$ planemo tool_init --id 'samtools_sort' --name 'Samtools sort' \\\n          --description 'order of storing aligned sequences' \\\n          --requirement 'samtools@1.3.1' \\\n          --example_command \"samtools sort -o '1_sorted.bam' '1.bam'\" \\\n          --example_input 1.bam \\\n          --example_output 1_sorted.bam \\\n          --test_case \\\n          --version_command 'samtools --version | head -1' \\\n          --help_from_command 'samtools sort' \\\n          --doi '10.1093/bioinformatics/btp352'\n```\n\n---\n\nclass: packed\n\n##.image-25[![planemo logo again](../../images/planemo-logo.png)]\n\n`planemo lint`: Checks the syntax of a tool\n\n```bash\n$ planemo lint\nLinting tool /opt/galaxy/tools/seqtk_seq.xml\nApplying linter tests... CHECK\n.. CHECK: 1 test(s) found.\nApplying linter output... CHECK\n.. INFO: 1 outputs found.\nApplying linter inputs... CHECK\n.. INFO: Found 1 input parameters.\nApplying linter help... CHECK\n.. CHECK: Tool contains help section.\n.. CHECK: Help contains valid reStructuredText.\nApplying linter general... CHECK\n.. CHECK: Tool defines a version [0.1.0].\n.. CHECK: Tool defines a name [Convert to FASTA (seqtk)].\n.. CHECK: Tool defines an id [seqtk_seq].\nApplying linter command... CHECK\n.. INFO: Tool contains a command.\nApplying linter citations... CHECK\n.. CHECK: Found 1 likely valid citations.\n```\n\n---\n\n##.image-25[![planemo logo again](../../images/planemo-logo.png)]\n\n`planemo serve`\n\nView your new tool in a local Galaxy instance\n\n```bash\n$ planemo serve\n```\n\nOpen http://127.0.0.1:9090/ in your web browser to view your new tool\n\n---\n\n##.image-25[![planemo logo again](../../images/planemo-logo.png)]\n\nBuilding Galaxy Tools\n\n![flowchart with planemo tool_init creating a wrapper tool.xml and planemo lint being run repeatedly.](../../images/planemo_tool_building_lint.png)\n\n---\n\n# Functional tests\n\n---\n\n## Functional tests\n\n- Functional testing is a quality assurance (QA) process.\n- The tests comfort developers and users that the tools can run across different servers/architectures. And that the latest modifications don't break older features.\n- Tools are tested by feeding them inputs and parameters and verifying the outputs (typically a diff)\n\n---\n\n## `tests`\n\n```xml\n<tests>\n    <test>\n        <param name=\"input_tree\" value=\"input_tree.txt\"/>\n        <param name=\"format\" value=\"png\"/>\n        <param name=\"dpi\" value=\"100\"/>\n        <param name=\"size\" value=\"7\"/>\n        <param name=\"pad\" value=\"2\"/>\n        <output name=\"png_output_image\" file=\"png_image.png\" />\n    </test>\n</tests>\n```\n\n<small>`input_tree.txt` and `png_image.png` must be in the `test-data/` directory</small>\n\n---\n\n## Tool directory tree\n\n```\ngraphlan/\n├── graphlan.xml\n├── graphlan.py\n└── test-data/\n    ├── input_tree.txt\n    └── png_image.png\n\n```\n\n---\n\n## Comparing to an expected result\n\n```xml\n<output ... compare=\"diff|re_match|sim_size|contains|re_match_multiline\" ... />\n```\n\n```xml\n<output name=\"out_file1\" file=\"cf_maf2fasta_concat.dat\" ftype=\"fasta\" />\n```\n\n```xml\n<output ... md5=\"68b329da9893e34099c7d8ad5cb9c940\" />\n```\n\n```xml\n<output ... lines_diff=\"4\" />\n```\n\n```xml\n<output ... compare=\"sim_size\" delta=\"1000\" />\n```\n\n.footnote[[Complete documentation](https://docs.galaxyproject.org/en/latest/dev/schema.html#tool-tests-test-output)]\n\n???\n\n- `diff` is the default\n- `ftype` also checks the output datatype\n- With `md5` the test output file doesn't need to be distributed (useful for big output files)\n- `lines_diff` is useful for tools that output version number, current date, ...\n- `sim_size` is useful for binary files that vary at each execution (e.g. PDF)\n\n---\n\n## Checking the output content\n\n```xml\n<output name=\"out_file1\">\n    <assert_contents>\n        <has_text text=\"chr7\" />\n        <not_has_text text=\"chr8\" />\n        <has_text_matching expression=\"1274\\d+53\" />\n        <has_line_matching expression=\".*\\s+127489808\\s+127494553\" />\n        <!-- &#009; is XML escape code for tab -->\n        <has_line line=\"chr7&#009;127471195&#009;127489808\" />\n        <has_n_columns n=\"3\" />\n    </assert_contents>\n</output>\n```\n\n.footnote[[Complete documentation](https://docs.galaxyproject.org/en/latest/dev/schema.html#tool-tests-test-output-assert-contents)]\n\n---\n\n## Checking tool stdout/stderr\n\n```xml\n<assert_stdout>\n    <has_text text=\"Step 1... determine cutoff point\" />\n    <has_text text=\"Step 2... estimate parameters of null distribution\" />\n</assert_stdout>\n```\n\n.footnote[[Complete documentation](https://docs.galaxyproject.org/en/latest/dev/schema.html#tool-tests-test-output-assert-contents)]\n\n---\n\n## Nested inputs in `test`\n\n```xml\n<tests>\n    <test>\n        <section name=\"advanced\">\n            <repeat name=\"names\">\n                <param name=\"first\" value=\"Abraham\"/>\n                <param name=\"last\" value=\"Lincoln\"/>\n            </repeat>\n            <repeat name=\"names\">\n                <param name=\"first\" value=\"Donald\"/>\n                <param name=\"last\" value=\"Trump\"/>\n            </repeat>\n            <conditional name=\"image\">\n                <param name=\"output_image\" value=\"yes\"/>\n                <param name=\"format\" value=\"png\"/>\n            </conditional>\n        </section>\n        ...\n    </test>\n</tests>\n```\n\n---\n\n##.image-25[![planemo logo yet again](../../images/planemo-logo.png)]\n\n`planemo test`\n\nRuns all functional tests\n\n```bash\n$ planemo test\n```\n\nAn HTML report (`tool_test_output.html`) is automatically created with logs in case of failing test\n\n---\n\n##.image-25[![planemo logo](../../images/planemo-logo.png)]\n\nTest Galaxy Tools\n\n![flowchart with planemo tool_init creating a wrapper tool.xml and planemo lint being run repeatedly, and now planemo test as well.](../../images/planemo_tool_building_test.png)\n\n---\n\n# Dependencies\n\n---\n\n## Dependencies\n\nHow Galaxy will deal with dependencies?\n\n![schematic of a galaxy server with dependency resolution via requirement tags at the top. On the left is the tool box with a number of xml files listed like seqtk_seq and seqtk_subseq. On the right is applications & libraries showing only a few tools like seqtk, all of the 3 multipoe subtools were collapsed](../../images/galaxy_instance.png)\n\n---\n\n## `requirements`\n\n```xml\n<requirements>\n    <requirement type=\"package\" version=\"1.66\">biopython</requirement>\n    <requirement type=\"package\" version=\"1.0.0\">graphlan</requirement>\n</requirements>\n```\n\nLocal installation using Conda packages\n\n---\n\n.image-50[![Conda logo, the C is textured.](../../../../shared/images/conda_logo.png)]\n\n- Package, dependency and environment manager\n- Based on recipes describing how to install the software which are then built for their distribution\n- No compilation at installation: binaries with their dependencies, libraries...\n- Not restricted to Galaxy\n\nSee [Tool Dependencies and Conda](../conda/slides.html)\n\n---\n\n# Advanced features\n\n---\n\n## `configfiles`\n\nA `configfile` creates a text file which can then be used inside the `command` as:\n\n- A script or a module\n- A file needed to run the tool (e.g. a config file)\n\nCheetah code and param/output variables can be used inside `configfile` (like\ninside `command`).\n\n---\n\nclass: packed\n\n## `configfiles`\n\n```xml\n<command><![CDATA[ mb $script_nexus ]]></command>\n\n<configfiles>\n    <configfile name=\"script_nexus\"><![CDATA[\nset autoclose = yes;\nexecute $input_data;\n#if str($data_type.type) == \"nuc“\n    lset nst=$data_type.lset_params.lset_Nst;\n#end if\nmcmcp ngen=$mcmcp_ngen;\nmcmc;\nquit\n    ]]></configfile>\n</configfiles>\n```\n\n```bash\nset autoclose = yes;\nexecute dataset_42.dat;\nlset nst=2 ;\nmcmcp ngen=100000;\nmcmc;\nquit\n```\n\n---\n\n## `macros`\n\n![Another schemating with many arrows. Macros.xml is on the left with token and xml blocks. The token block points to examples like @THREADS@ and @HELP_ABOUT@. The xml block points to examples like <expand macro=\"requirements\">. Both of these examples point to three blast tools which make use of the macros.](../../images/macro.png)\n\n.footnote[[Planemo documentation about macros](https://planemo.readthedocs.io/en/latest/writing_advanced.html#macros-reusable-elements)]\n\n---\n\nclass: packed\n\n## `macros` > `xml`\n\nmacros.xml\n\n```xml\n<macros>\n    <xml name=\"requirements\">\n        <requirements>\n            <requirement type=\"package\" version=\"2.5.0\">blast</requirement>\n        </requirements>\n    </xml>\n    <xml name=\"stdio\">\n        <stdio>\n            <exit_code range=\"1\" level=\"fatal\" />\n        </stdio>\n    </xml>\n</macros>\n```\n\nncbi_blastn_wrapper.xml\n\n```xml\n<macros>\n    <import>macros.xml</import>\n</macros>\n<expand macro=\"requirements\"/>\n<expand macro=\"stdio\"/>\n```\n\n---\n\n## `macros` > `token`\n\nmacros.xml\n\n```xml\n<macros>\n    <token name=\"@THREADS@\">-num_threads \"\\${GALAXY_SLOTS:-8}\"</token>\n</macros>\n```\n\nncbi_blastn_wrapper.xml\n\n```xml\n<command>\nblastn -query '$query' @THREADS@ [...]\n</command>\n```\n\n---\n\n## `macros` > `xml` > `yield`\n\nmacros.xml\n\n```xml\n<macros>\n    <xml name=\"requirements\">\n        <requirements>\n            <requirement type=\"package\" version=\"2.2.0\">trinity</requirement>\n            <yield/>\n        </requirements>\n    </xml>\n</macros>\n```\n\ntrinity.xml\n\n```xml\n<expand macro=\"requirements\">\n    <requirement type=\"package\" version=\"1.1.2\">bowtie</requirement>\n</expand>\n```\n\n---\n\n## `@TOOL_VERSION@` token\n\n```xml\n<macros>\n    <token name=\"@TOOL_VERSION@\">1.2</token>\n    <token name=\"@VERSION_SUFFIX@\">3</token>\n</macros>\n```\n\n```xml\n<tool id=\"seqtk_seq\" name=\"Convert to FASTA\" version=\"@TOOL_VERSION@+galaxy@VERSION_SUFFIX@\">\n    <requirements>\n        <requirement type=\"package\" version=\"@TOOL_VERSION@\">seqtk</requirement>\n    </requirements>\n```\n\nThis means: the 3rd revision of the Galaxy tool for Seqtk 1.2 .\n\n[Best practice documentation](https://galaxy-iuc-standards.readthedocs.io/en/latest/best_practices/tool_xml.html#tool-versions)\n\n---\n\n## `command` > Reserved variables\n\n```xml\n<command><![CDATA[\n# Email’s numeric ID (id column of galaxy_user table in the database)\necho '$__user_id__'\n\n# User’s email address\necho '$__user_email__'\n\n# The galaxy.app.UniverseApplication instance, gives access to all other configuration file variables.\n# Should be used as a last resort, may go away in future releases.\necho '$__app__.config.user_library_import_dir'\n\n# Check a dataset type\n#if $input1.is_of_type('gff'):\n    echo 'input1 type is ${input1.datatype}'\n#end if\n]]></command>\n```\n.footnote[[Reserved Variables List](https://docs.galaxyproject.org/en/latest/dev/schema.html#reserved-variables)]\n\n---\n\n## Multiple inputs - Mapping over\n\n```xml\n<param name=\"...\" type=\"data\" format=\"txt\" label=\"...\" help=\"...\" />\n```\n\n![File selector input](../../images/input_data.png)\n\nPossible to select multiple dataset:\n\n![File selector input screenshot, but now the middle \"multiple files\" button is checked.](../../images/input_data_multiple.png)\n\n- Useful to launch the same tool on multiple datasets independently\n- One job per dataset\n\n---\n\n## Multiple inputs - Single execution\n\n```xml\n<param name=\"...\" type=\"data\" format=\"txt\" multiple=\"true\" label=\"...\" help=\"...\" />\n```\n\n![A multi-select file input field is shown, different than the normal file input there is no single file option.](../../images/input_data_multiple2.png)\n\nIn the command:\n\n```xml\n<command><![CDATA[\n...\n#for $input in $inputs\n    --input \"$input\"\n#end for\n]]></command>\n```\n\nOne job for all selected dataset\n\n---\n\n## Multiple outputs\n\n```xml\n<outputs>\n    <data name=\"output\" format=\"txt\">\n        <discover_datasets pattern=\"__designation_and_ext__\"\n            directory=\"output_dir\" visible=\"true\" />\n    </data>\n</outputs>\n```\n\n- `__designation_and_ext__`: a predefined regexp,\n\n- catches the dataset identifier + the datatype\n\nIf the output file extension is not present/usable:\n\n```xml\n<outputs>\n    <data name=\"output\" format=\"txt\">\n        <discover_datasets pattern=\"__designation__\" format=\"txt\"\n            directory=\"output_dir\" visible=\"true\" />\n    </data>\n</outputs>\n```\n\n---\n\n## Dataset collections\n\nA dataset collection combines numerous datasets in a single entity that can be manipulated together\n\n- `list`: a simple list of datasets\n- `paired`: a pair of datasets, `forward` and `reverse` for NGS\n- composite: e.g. `list:paired` for a list of dataset pairs\n\nUsage\n\n- Useful to launch a workflow on many samples\n- Sample names are kept along the workflow: `element_identifier`\n- Galaxy tools are available to manipulate collections\n\n---\n\n## Dataset collections as input\n\nMapping over (1 job per collection element):\n\n```xml\n<param name=\"inputs\" type=\"data\" format=\"bam\" label=\"Input BAM(s)\" />\n```\n\n![The normal file selector is shown however now the collection input is clicked.](../../images/input_data_collection.png)\n\nSingle execution:\n- accepted with `multiple=\"true\"` as described in previous slides\n- or you can accept only collections:\n\n```xml\n<param name=\"inputs\" type=\"data_collection\" collection_type=\"list|paired|list:paired|...\"\n    format=\"bam\" label=\"Input BAM(s)\" />\n```\n\n```xml\n<command><![CDATA[ ...\n#for $input in $inputs\n    --input '$input'\n    --sample_name '$input.element_identifier'\n#end for\n]]></command>\n```\n\n---\n\n## Dataset collections as output\n\nA single paired collection:\n\n```xml\n<collection name=\"paired_output\" type=\"paired\" label=\"Split Pair\">\n    <data name=\"forward\" format=\"txt\" />\n    <data name=\"reverse\" format_source=\"input1\" from_work_dir=\"reverse.txt\" />\n</collection>\n```\n\nUnknown number of files:\n\n```xml\n<collection name=\"output\" type=\"list\" label=\"Unknown number of files\">\n    <discover_datasets pattern=\"__name_and_ext__\" directory=\"outputs\" />\n</collection>\n```\n\n\n- `__name_and_ext__`: a predefined regexp,\n- catches the dataset identifier + the datatype\n\n---\n\n## Using multiple CPUs\n\n![Screenshot of two xml files. In the top is the jb_conf.xml where a command line job submission specification indicates that it will be submitted with 4 threads. A single tool, ncbi blastn wrapper is assigned to that destination. In the second xml file the blastn command uses the GALAXY_SLOTS variable to control how many threads are supplied to the tool.](../../images/job_conf.xml_2.png)\n\n```bash\nblastn -query foo_bar -num_threads 4\n```\n8 is the default value if not set in destination\n\n---\n\n## Data tables\n\n- They list all reference data used by tools\n- e.g.: Blast databases, BWA indexes, Fasta files\n- Stored in `.loc` files\n- Populated by hand or using Data Managers\n- Data Managers are dedicated kind of Galaxy tools\n\n---\n\n## Using a data table in a tool\n\n![Three xml files are shown. At the top is the tool data table conf which mentions a tool-data/bowtie2_indices.loc. Below is that bowtie2 loc file which indicates that hg19 will be found at a specific location in the /db directory. And the third is the bowtie2 wrapper which loads options from a data table, and points to the bowtie2_indexes named table in the first xml.](../../images/tool_data_table_conf.xml.png)\n\n---\n\n## Datatypes\n\n- Every Galaxy dataset is associated with a datatype\n- Datatype can be detected or user specified\n- Gain of usability\n\n.footnote[[Documentation: Adding Datatypes](https://galaxyproject.org/admin/datatypes/adding-datatypes/)]\n\n---\n\n# Publishing tools\n\n---\n\n## Contributing to a community\n\nMany tools developed by the community on GitHub repositories\n- [Intergalactic Utilities Commission](https://github.com/galaxyproject/tools-iuc)\n- [GalaxyP](https://github.com/galaxyproteomics/tools-galaxyp)\n- ...\n\nAdded value:\n- Easier development\n- Easier contribution for user\n- Avoid duplications of efforts\n- Automated tests on each contribution\n- Automated publishing to ToolShed\n- Principle of many eyes: if something is visible to many people then, collectively, they are more likely to find errors in it\n---\n\n## IUC: Intergalactic Utilities Commission\n\n.image-50[![IUC logo](../../images/iuc_logo.png)]\n\n- A team maintaining high quality tools\n- Establishing and following [best practices](https://galaxy-iuc-standards.readthedocs.io/) for tool development\n- Open to contributions: bug fixes, new tools, ...\n\nhttps://github.com/galaxyproject/tools-iuc\n\n---\n\n## How should I publish my tool?\n\nAdding to an existing GitHub repository (IUC, GalaxyP, ...)\n\n- Read the guidelines\n- Open a pull request\n- Respond to review comments\n\n---\n\n## How should I publish my tool?\n\nUsing your own GitHub repository\n\n- Reasons: ownership, specific practices, exotic tools\n- Follow the same structure as IUC\n- Automate tests and ToolShed publishing by reusing `.github/` configuration\n\n---\n\n## How should I publish my tool?\n\nUsing planemo by hand\n\n- Ok for few tools\n- Makes contributing harder\n- Not recommended\n\n[Check out our tutorial to publish to the ToolShed using Planemo](/training-material/topics/dev/tutorials/toolshed/slides.html)\n\n---\n\n## Continuous Integration\n\n.image-50[![Github logo](../../images/github_logo.png)]\n\n.image-50[![Planemo logo](../../images/planemo-logo.png)]\n\n.image-50[![Conda logo](../../../../shared/images/conda_logo.png)]\n\n---\n\n## Continuous Integration\n\n- Create a Pull Request on a GitHub repository\n- Tests are automatically run on GitHub Actions\n- Other contributors review your tool\n- The Pull Request is accepted when all the lights are green\n- The tool is automatically uploaded to the ToolShed\n\n---\n\n## GitHub Actions configuration\n\nGitHub Actions configured in the `.github/` directory\n\n![Screenshot of a CI configuration file. It runs several planemo commands during before install, install, and script portions.](../../images/github_actions_iuc.png)\n\nUses a standard GitHub Action developed on https://github.com/galaxyproject/planemo-ci-action\n\n---\n\n## GitHub Actions execution\n\n![Screenshot of a CI execution showing a tool test passing.](../../images/github_actions_executed1.png)\n![Screenshot of a CI execution showing details of test logs.](../../images/github_actions_executed2.png)\n\n---\n\n## GitHub Actions: test reports\n\nDownloadable HTML report, open it with a web browser to see the details\n\n.pull-left[![Screenshot of a CI execution artifacts, with a link to download an HTML report of the tests.](../../images/github_actions_artifacts.png)]\n\n.pull-right[![Screenshot of an example of HTML report of the tests.](../../images/github_actions_artifacts2.png)]\n\n---\n\n## ToolShed\n\n- Need to create a `.shed.yml` file in the tool directory of the GitHub repository:\n\n```yml\ncategories: [Sequence Analysis]\ndescription: Tandem Repeats Finder description\nlong_description: A long long description.\nname: tandem_repeats_finder_2\nowner: gandres\n```\n\n```bash\nplanemo shed_init --name=\"tandem_repeats_finder_2\"\n                     --owner=\"gandres\"\n                     --description=\"Tandem Repeats Finder description\"\n                     --long_description=\"A long long description.\"\n                     --category=\"Sequence Analysis\"\n                     [--remote_repository_url=<URL to .shed.yml on github>]\n                     [--homepage_url=<Homepage for tool.>]\n```\n\n---\n\n## Tool suites\n\nA tool suite is a group of related tools that can all be installed at once.\n\nDefined in `.shed.yml`: implicitly define repositories for each individual tool in the directory and build a suite for those tools.\n\nExample: `trinity/.shed.yml`\n\n```yml\n[...]\nauto_tool_repositories:\n    name_template: \"\"\n    description_template: \" (from the Trinity tool suite)\"\nsuite:\n    name: \"suite_trinity\"\n    description: Trinity tools to assemble transcript sequences from Illumina RNA-Seq data.\n```\n\n---\n\n## Check\n\n```bash\nplanemo shed_lint --tools --ensure_metadata\n```\n```bash\nLinting repository […]/tandem_repeats_finder\nApplying linter expansion... CHECK\n.. INFO: Included files all found.\nApplying linter tool_dependencies_xsd... CHECK\n.. INFO: tool_dependencies.xml found and appears to be valid XML\nApplying linter tool_dependencies_actions... CHECK\n.. INFO: Parsed tool dependencies.\nApplying linter repository_dependencies... CHECK\n.. INFO: No repository_dependencies.xml, skipping.\nApplying linter shed_yaml... CHECK\n.. INFO: .shed.yml found and appears to be valid YAML.\nApplying linter readme... CHECK\n.. INFO: No README found skipping.\n+Linting tool […]/tandem_repeats_finder/tandem_repeats_finder_wrapper.xml\n[…]\n```\n"],"slides":true,"mod_date":"2023-04-21 09:13:05 +0000","pub_date":"2016-09-30 10:05:09 +0000","version":37,"api":"https://training.galaxyproject.org/training-material/api/topics/dev/tutorials/tool-integration/tutorial.json","tools":[],"supported_servers":[],"topic_name_human":"Development in Galaxy","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial","redirect_from":["/short/dev/tool-integration/slides","/short/S00051"]}