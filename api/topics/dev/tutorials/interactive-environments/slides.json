{"layout":"tutorial_slides","logo":"GTN","title":"Galaxy Interactive Environments","draft":true,"questions":["What are Galaxy Interactive Environments (GIEs)?","How to enable GIEs in Galaxy?","How to develop your own GIE?"],"objectives":["Implement a Hello-World Galaxy Interactive Environment"],"requirements":[{"title":"Docker basics","type":"none"}],"time_estimation":"90m","key_points":["Interactive Environments offer access to third-party applications within Galaxy","Interactive Environments run in a docker images for sandboxing and easy dependency management"],"contributors":["shiltemann","bgruening","hexylena"],"subtopic":"advanced","js_requirements":{"mathjax":null,"mermaid":false},"short_id":"S00048","url":"/topics/dev/tutorials/interactive-environments/slides.html","topic_name":"dev","tutorial_name":"interactive-environments","dir":"topics/dev/tutorials/interactive-environments","symlink":null,"id":"dev/interactive-environments","ref_tutorials":[],"ref_slides":["# Interactive Environments\n\n---\n\n### Why IEs?\n\n- Embedded access to third-party application inside of Galaxy\n- Interactively analyze data, access analysis products within Galaxy\n\n![Ipython is shown in the center pane of galaxy](../../images/vis_IE_ipython0.png)\n\n- Bring external analysis platform to the data instead of vice-versa\n  - no need to download/re-upload your data\n\n---\n\n### Who should use IEs?\n\n- Everyone!\n- Programming Environments for Bioinformaticians and Data Scientists\n  - Jupyter\n  - Rstudio\n- Visualization IEs are great for life scientists\n  - IOBIO (bam/vcf visualizations)\n  - Phinch (metagenomics visualizations)\n\n---\n\n## Types of visualizations in Galaxy\n\nGIE for visualization? Check that it is the right choice for your project\n\n- **Trackster** - built-in genome browser\n- **Display applications**\n  - UCSC Genome Browser\n  - IGV\n- **Galaxy tools**\n  - JBrowse\n  - Krona\n- **Visualization plugins**\n  - Charts\n  - Generic\n- **Interactive Environments**\n  - Jupyter/Rstudio\n  - IOBIO (bam/vcf visualizations)\n  - Phinch (metagenomics visualizations)\n\n---\n\n## Which should I use?\n\n![Flowchart. Only available on an external website? If yes use a display application. Does it need to be served (e.g. python), if yes use an interactive tool. Is it computationally intensive, then it needs to be a regular tool. Is it written in javascript? Then it shold be a generic plugin. If it passes all these tests it can be a charts plugin.](../../images/which_viz_flowchart.png)\n\n\n---\n\n### How to launch an IE?\n\n- Can be bound to specific datatypes\n  - Available under the visualizations button on the dataset\n\n.image-25[![visualisation button in galaxy is clicked on a dataset. Jupyter and Rstudio appear below charts.](../../images/vis_IE_button.png)]\n\n- Or more general-purpose applications (Jupyter/Rstudio)\n- IE launcher\n\n.image-25[![A drop down menu from the masthead of galaxy shows interactive environments as well.](../../images/vis_IE_launcher_menu.png)]\n---\n\n### IE Launcher\n\n- Choose between different available docker images\n- Attach one or more datasets from history\n\n.image-75[![An IE launcher is shown with select boxes for the GIE, image, and datasets. Launch is shown below.](../../images/vis_IE_launcher.png)]\n\n---\n\n### How does it work?\n\n- Docker Containers are launched on-demand by users..\n- ..and killed automatically when users stop using them\n\n![schematic of request flow. A users requests an IE session with galaxy which connects to a docker host, launches the IE, and communicates this to a NodeJS proxy living next to galaxy. The user opens the connection through the proxy to access the container.](../../images/vis_IE_infra.png)\n\n.footnote[ Admin Docs: https://docs.galaxyproject.org/en/master/admin/interactive_environments.html ]\n\n---\n\n### Jupyter\n\n  - General purpose/ multi-dataset\n  - Provides special functions to interact with the Galaxy history (get/put datasets)\n  - Ability to save and load notebooks\n\n.image-75[![jupyter seen in the main panel of galaxy](../../images/vis_IE_ipython1.png)]\n\n---\n\n### Jupyter\n\n![the above screenshot but they have scrolled to show embedded plots computed in jupyter in galaxy](../../images/vis_IE_ipython2.png)\n\n---\n\n### Jupyter\n\n![Another screenshot of jupyter in galaxy, this time fetching datasets from galaxy and running samtools.](../../images/vis_IE_ipython3.png)\n\n---\n\n### Rstudio\n\n- General purpose/ multi-dataset\n- Provides special functions to interact with the Galaxy history\n- Ability to save and load workbook and R history object\n\n![default rstudio in galaxy, multiple panes are visible for computing, values, and files.](../../images/vis_IE_rstudio.png)\n\n---\n\n### IOBIO\n\n- Visualizes single dataset\n- Only available for datasets of specific formats\n\n![IOBIO are dynamic javascript-y visualisations with lots of constantly updating graphs that are recalculated on the fly. They are shown in two scratchbooks in Galaxy](../../images/vis_IE_iobio.png)\n\n---\n\n### IOBIO\n\n![a close up of iobio with several graphs and illegible text.](../../images/vis_IE_iobio2.png)\n\n---\n\n### Phinch\n\n![Phinch is shown inside galaxy, another visually intensive graphing application for metagenomics data.](../../images/vis_IE_phinch.png)\n\n---\n\n### Admin\n\n- Prerequisites: NodeJs (npm) and Docker; Galaxy user must be able to talk to the docker daemon\n- Enable IEs in `galaxy.yml`\n  ```bash\n  interactive_environment_plugins_directory = config/plugins/interactive_environments\n  ```\n- Install node proxy\n  ```bash\n  $ cd $GALAXY/lib/galaxy/web/proxy/js/\n  $ npm install .\n  ```\n- Can configure GIEs to run on another host\n\n.footnote[ Advanced configurations: https://docs.galaxyproject.org/en/master/admin/interactive_environments.html]\n\n---\n\n### Development\n\n- Not hard to build!\n- All the magic is in:\n  ```bash\n  $GALAXY/config/plugins/interactive_environments/$ie_name/\n  ```\n\n\n| Component                          | File                         |\n|------------------------------------|------------------------------|\n| Visualization Plugin Configuration | ../config/${ie_name}.xml     |\n| IE specific Configuration          | ../config/${ie_name}.ini     |\n| Mako Template                      | ../templates/${ie_name}.mako |\n\n---\n\n### Development\n\n![schematic of GIE with a box on the left labelled ipython.mako being invoked by a launch ipython notebook call. This has boxes for running a docker container and then proxying authentication. These point to a docker container with a config.yaml containing the history id, api key and password, the ipython galaxy notebook, and the ipython webservice which loops while the connection is active. This proxies the connection and points to a cartoon of ipython in galaxy's center panel.](../../images/vis_IE_ipython_components.png)\n\n---\n\n### Hello World Example\n\n- All files in this example available from\n  https://github.com/hexylena/hello-world-interactive-environment/\n- Create a GIE that shows the directory listing of `import` folder (datasets loaded into GIE by user)\n\n```bash\n$ tree $GALAXY_ROOT/config/plugins/interactive_environments/helloworld/\nconfig/plugins/interactive_environments/helloworld/\n├── config\n│   ├── helloworld.ini\n│   ├── helloworld.ini.sample\n│   └── helloworld.xml\n├── static\n│   └── js\n│       └── helloworld.js\n└── templates\n    └── helloworld.mako\n```\n\n---\n\nCreate GIE plugin XML file `config/helloworld.xml`\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE interactive_environment SYSTEM \"../../interactive_environments.dtd\">\n<!-- This is the name which will show up in the User's Browser -->\n<interactive_environment name=\"HelloWorld\">\n  <data_sources>\n    <data_source>\n      <model_class>HistoryDatasetAssociation</model_class>\n\n      <!-- filter which types of datasets are appropriate for this GIE -->\n      <test type=\"isinstance\" test_attr=\"datatype\"\n            result_type=\"datatype\">tabular.Tabular</test>\n      <test type=\"isinstance\" test_attr=\"datatype\"\n            result_type=\"datatype\">data.Text</test>\n      <to_param param_attr=\"id\">dataset_id</to_param>\n    </data_source>\n  </data_sources>\n  <params>\n    <param type=\"dataset\" var_name_in_template=\"hda\" required=\"true\">dataset_id</param>\n  </params>\n  <!-- Be sure that your entrypoint name is correct! -->\n  <entry_point entry_point_type=\"mako\">helloworld.mako</entry_point>\n</interactive_environment>\n```\n\n---\n\nSet up `.ini` file, which controls docker interaction `config/helloworld.ini.sample`\n\n```ini\n[main]\n# Unused\n\n[docker]\n# Command to execute docker. For example `sudo docker` or `docker-lxc`.\n#command = docker {docker_args}\n\n# The docker image name that should be started.\nimage = hello-ie\n\n# Additional arguments that are passed to the `docker run` command.\n#command_inject = --sig-proxy=true -e DEBUG=false\n\n# URL to access the Galaxy API with from the spawn Docker container, if empty\n# this falls back to galaxy.yml's galaxy_infrastructure_url and finally to the\n# Docker host of the spawned container if that is also not set.\n#galaxy_url =\n\n# The Docker hostname. It can be useful to run the Docker daemon on a different\n# host than Galaxy.\n#docker_hostname = localhost\n\n[..]\n```\n\n---\n\n- Create mako template `templates/helloworld.mako`\n  - Loads configuration from `ini` file\n  - launches docker container,\n  - builds a URL to the correct endpoint through Galaxy NodeJS proxy\n  - set environment variable `CUSTOM` to be passed to container\n  - attach dataset selected by user (`hda`)\n\n```mako\n<%namespace name=\"ie\" file=\"ie.mako\" />\n<%\n# Sets ID and sets up a lot of other variables\nie_request.load_deploy_config()\n\n# Define a volume that will be mounted into the container.\n# This is a useful way to provide access to large files in the container,\n# if the user knows ahead of time that they will need it.\nuser_file = ie_request.volume(\n    hda.file_name, '/import/file.dat', how='ro')\n\n# Launch the IE. This builds and runs the docker command in the background.\nie_request.launch(\n    volumes=[user_file],\n    env_override={\n        'custom': '42'\n    }\n)\n[..]\n```\n\n---\n\n(continued)\n\n```mako\n[..]\n# Only once the container is launched can we template our URLs. The ie_request\n# doesn't have all of the information needed until the container is running.\nurl = ie_request.url_template('${PROXY_URL}/helloworld/')\n%>\n\n<html>\n<head>\n${ ie.load_default_js() }\n</head>\n<body>\n<script type=\"text/javascript\">\n${ ie.default_javascript_variables() }\nvar url = '${ url }';\n${ ie.plugin_require_config() }\nrequirejs(['interactive_environments', 'plugin/helloworld'], function(){\n    load_notebook(url);\n});\n</script>\n<div id=\"main\" width=\"100%\" height=\"100%\">\n</div>\n</body>\n</html>\n```\n\n---\nLastly we must write the `load_notebook` function, `static/js/helloworld.js`\n\n```javascript\nfunction load_notebook(url){\n    $( document ).ready(function() {\n        test_ie_availability(url, function(){\n            append_notebook(url)\n        });\n    });\n}\n```\n\n---\n\n### Hello World Example\n\n- The only thing missing now is the GIE (Docker) container itself\n- Container typically consists of:\n  - Dockerfile\n  - Proxy configuration (e.g. nginx)\n  - Custom startup script/entrypoint\n  - Script to monitor traffic and kill unused containers\n  - The actual application for the users (here: simple python process which serves\n    directory contents of `/import` folder of container)\n\n---\n\n```dockerfile\nFROM ubuntu:14.04\n# These environment variables are passed from Galaxy to the container\n# and help you enable connectivity to Galaxy from within the container.\n# This means your user can import/export data from/to Galaxy.\nENV DEBIAN_FRONTEND=noninteractive \\\n    API_KEY=none \\\n    DEBUG=false \\\n    PROXY_PREFIX=none \\\n    GALAXY_URL=none \\\n    GALAXY_WEB_PORT=10000 \\\n    HISTORY_ID=none \\\n    REMOTE_HOST=none\n\nRUN apt-get -qq update && \\\n    apt-get install --no-install-recommends -y \\\n    wget procps nginx python python-pip net-tools nginx\n\n# Our very important scripts. Make sure you've run `chmod +x startup.sh\n# monitor_traffic.sh` outside of the container!\nADD ./startup.sh /startup.sh\nADD ./monitor_traffic.sh /monitor_traffic.sh\n\n# /import will be the universal mount-point for IPython\n# The Galaxy instance can copy in data that needs to be present to the\n# container\nRUN mkdir /import\n\n[..]\n```\n\n---\n\n(continued)\n\n```dockerfile\n[..]\n# Nginx configuration\nCOPY ./proxy.conf /proxy.conf\n\nVOLUME [\"/import\"]\nWORKDIR /import/\n\n# EXTREMELY IMPORTANT! You must expose a SINGLE port on your container.\nEXPOSE 80\nCMD /startup.sh\n```\n\n---\n\n- Proxy configuration (nginx)\n  - reverse proxy our directory listing process running on port 8000\n\n```nginx\nserver {\n    listen 80;\n    server_name localhost;\n\n    # Note the trailing slash used everywhere!\n    location PROXY_PREFIX/helloworld/ {\n        proxy_buffering off;\n        proxy_pass         http://127.0.0.1:8000/;\n        proxy_redirect     http://127.0.0.1:8000/ PROXY_PREFIX/helloworld/;\n    }\n}\n```\n\n---\n\n- Create the `startup.sh` file which starts our directory listing service\n\n```bash\n#!/bin/bash\n# First, replace the PROXY_PREFIX value in /proxy.conf with the value from\n# the environment variable.\nsed -i \"s|PROXY_PREFIX|${PROXY_PREFIX}|\" /proxy.conf;\n# Then copy into the default location for ubuntu+nginx\ncp /proxy.conf /etc/nginx/sites-enabled/default;\n\n# Here you would normally start whatever service you want to start. In our\n# example we start a simple directory listing service on port 8000\ncd /import/ && python -mSimpleHTTPServer &\n\n# Launch traffic monitor which will automatically kill the container if\n# traffic stops\n/monitor_traffic.sh &\n# And finally launch nginx in foreground mode. This will make debugging\n# easier as logs will be available from `docker logs ...`\nnginx -g 'daemon off;'\n```\n\n---\n\n- Lastly, the script to monitor traffic and shut down if user is no longer connected, `monitor_traffic.sh`\n\n```bash\n#!/bin/bash\nwhile true; do\n    sleep 60\n    if [ `netstat -t | grep -v CLOSE_WAIT | grep ':80' | wc -l` -lt 3 ]\n    then\n        pkill nginx\n    fi\ndone\n```\n\n---\n\n### Hello World Example\n\n- We are now ready to build our container, and try out our new GIE!\n- If the container is hosted on a service like Dockerhub or quay.io, it will be automatically\nfetched on first run.\n\n```bash\n$ cd hello-ie\n$ docker build -t hello-ie .\n```\n\n![A directory listing is shown in the center panel.](../../images/vis_IE_helloworld.png)\n\n.footnote[Try it yourself: https://github.com/hexylena/hello-world-interactive-environment]\n"],"video_library":{"tutorial":null,"slides":null,"demo":null,"both":null,"session":null},"hands_on":false,"slides":true,"mod_date":"2023-02-17 10:40:02 +0000","pub_date":"2017-02-05 17:49:59 +0000","version":24,"api":"https://training.galaxyproject.org/training-material/api/topics/dev/tutorials/interactive-environments/tutorial.json","tools":[],"supported_servers":[],"topic_name_human":"Development in Galaxy","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial","tags":["work-in-progress"],"redirect_from":["/short/dev/interactive-environments/slides","/short/S00048"]}