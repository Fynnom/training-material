{"layout":"tutorial_hands_on","title":"Galaxy Interactive Tools","questions":["What is an Interactive Tool on Galaxy (GxIT)?","How to set up a GxIT?"],"objectives":["Discover what Galaxy Interactive Tools (GxIT) are","Understand how GxITs are structured","Understand how GxITs work","Be able to dockerise a basic web application","Be able to wrap a dockerised application as a GxIT","Be able to test and debug a new GxIT locally and on a Galaxy server","Be able to distribute a new GxIT for others to use"],"requirements":[{"type":"internal","topic_name":"dev","tutorials":["tool-integration","tool-from-scratch"]},{"type":"none","title":"Docker basics"}],"time_estimation":"3h","subtopic":"tooldev","key_points":["Galaxy Interactive Tools (GxIT) provide an interface for external web applications to be embedded in Galaxy","GxITs require complex architecture, but most of this is handled by Galaxy core","Example GxITs are Jupyter notebooks, RStudio or R Shiny apps","GxITs are heavily dependant on container technologies like Docker","If a tool is containerized, it can be integrated rapidly into Galaxy as a GxIT","In theory, any containerized web application can be wrapped as a GxIT"],"contributors":[{"name":"Estelle Ancelet","email":"estelle.ancelet@inrae.fr","joined":"2021-01","elixir_node":"fr","affiliations":["elixir-europe"],"id":"eancelet","url":"https://training.galaxyproject.org/training-material/api/contributors/eancelet.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/eancelet/"},{"name":"Yvan Le Bras","email":"yvan.le-bras@mnhn.fr","twitter":"Yvan2935","matrix":"yvanlebras:matrix.org","orcid":"0000-0002-8504-068X","joined":"2017-09","elixir_node":"fr","affiliations":["pndb","gallantries","fairease","fnso2019","elixir-europe"],"id":"yvanlebras","url":"https://training.galaxyproject.org/training-material/api/contributors/yvanlebras.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/yvanlebras/"},{"name":"Cameron Hyde","email":"c.hyde@qcif.edu.au","orcid":"0000-0002-5913-9766","joined":"2022-02","elixir_node":"au","affiliations":["elixir-europe"],"id":"neoformit","url":"https://training.galaxyproject.org/training-material/api/contributors/neoformit.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/neoformit/"},{"name":"Lain Pavot","email":"lain.pavot@inrae.fr","joined":"2022-02","elixir_node":"fr","affiliations":["elixir-europe"],"id":"Lain-inrae","url":"https://training.galaxyproject.org/training-material/api/contributors/Lain-inrae.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/Lain-inrae/"},{"name":"Anthony Bretaudeau","email":"anthony.bretaudeau@inrae.fr","twitter":"abretau","matrix":"abretaud:matrix.org","orcid":"0000-0003-0914-2470","joined":"2017-09","elixir_node":"fr","contact_for_training":true,"location":{"country":"FR","lat":48.11,"lon":-1.64},"fediverse":"https://genomic.social/@abretaud","fediverse_flavor":"mastodon","affiliations":["gallantries","eurosciencegateway","elixir-europe"],"id":"abretaud","url":"https://training.galaxyproject.org/training-material/api/contributors/abretaud.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/abretaud/"},{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"}],"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00116","url":"/topics/dev/tutorials/interactive-tools/tutorial.html","topic_name":"dev","tutorial_name":"interactive-tools","dir":"topics/dev/tutorials/interactive-tools","symlink":null,"id":"dev/interactive-tools","ref_tutorials":["<!--\n\nNotes:\n\nRecommendations for version numbering?\n\nThere are 2 Docker repositories:\nhttps://github.com/abretaud/geoc_gxit_ansible/\nhub.docker.com and http://quay.io/\n\nContainer dependancies on Galaxy:\nhttps://docs.galaxyproject.org/en/latest/admin/special_topics/mulled_containers.html\n\nThe default port of dockerized RShiny app is 3838\n\nThe environment_variables would be needed to retrieve data from Galaxy History. In the example, this is therefore not necessary.\n\n-->\n\n<p>This tutorial demonstrates how to build and deploy a Galaxy Interactive Tool (GxIT). GxITs are accessible through the Galaxy tool panel, like any installed Galaxy tool. Our example application is a simple R Shiny app that we call <code class=\"language-plaintext highlighter-rouge\">Tabulator</code>.</p>\n\n<p>There are three elements to a GxIT - an application script, a Docker container and a Galaxy tool XML file. This tutorial will take you through creating those components, and installing them as a new Interactive Tool into a local Galaxy instance and an existing Galaxy instance.</p>\n\n<blockquote class=\"comment\">\n  <comment-title>If you plan to use an existing Galaxy instance</comment-title>\n  <p>The Galaxy server requires specific configuration in order to run Interactive Tools! Please refer to <a href=\"/training-material/topics/admin/tutorials/interactive-tools/tutorial.html\">this admin tutorial</a> for setting up a compatible Galaxy instance for development and testing of your GxIT.\nAs well as updating the Galaxy server configuration, you will also have to configure the server’s DNS provider to allow wildcard DNS records. This allows Galaxy to create unique host names (subdomains) for GxITs to be served over, separating them from the main Galaxy application.</p>\n</blockquote>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#how-do-interactive-tools-work\" id=\"markdown-toc-how-do-interactive-tools-work\">How do Interactive Tools work?</a></li>\n  <li><a href=\"#when-is-an-interactive-tool-appropriate\" id=\"markdown-toc-when-is-an-interactive-tool-appropriate\">When is an Interactive Tool appropriate?</a></li>\n  <li><a href=\"#the-development-process\" id=\"markdown-toc-the-development-process\">The development process</a></li>\n  <li><a href=\"#the-application\" id=\"markdown-toc-the-application\">The application</a>    <ol>\n      <li><a href=\"#the-r-scripts\" id=\"markdown-toc-the-r-scripts\">The R scripts</a></li>\n      <li><a href=\"#the-dockerfile\" id=\"markdown-toc-the-dockerfile\">The Dockerfile</a></li>\n      <li><a href=\"#test-the-image\" id=\"markdown-toc-test-the-image\">Test the image</a></li>\n      <li><a href=\"#push-the-image\" id=\"markdown-toc-push-the-image\">Push the image</a></li>\n      <li><a href=\"#the-tool-xml\" id=\"markdown-toc-the-tool-xml\">The tool XML</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#testing-locally\" id=\"markdown-toc-testing-locally\">Testing locally</a>    <ol>\n      <li><a href=\"#docker-installation\" id=\"markdown-toc-docker-installation\">Docker installation</a></li>\n      <li><a href=\"#galaxy-installation\" id=\"markdown-toc-galaxy-installation\">Galaxy installation</a></li>\n      <li><a href=\"#galaxy-configuration\" id=\"markdown-toc-galaxy-configuration\">Galaxy configuration</a></li>\n      <li><a href=\"#run-galaxy\" id=\"markdown-toc-run-galaxy\">Run Galaxy</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#deployment-in-a-running-galaxy-instancce\" id=\"markdown-toc-deployment-in-a-running-galaxy-instancce\">Deployment in a running Galaxy instancce</a></li>\n  <li><a href=\"#debugging\" id=\"markdown-toc-debugging\">Debugging</a></li>\n  <li><a href=\"#additional-components\" id=\"markdown-toc-additional-components\">Additional components</a>    <ol>\n      <li><a href=\"#run-script\" id=\"markdown-toc-run-script\">Run script</a></li>\n      <li><a href=\"#templated-config-files\" id=\"markdown-toc-templated-config-files\">Templated config files</a></li>\n      <li><a href=\"#reserved-environment-variables\" id=\"markdown-toc-reserved-environment-variables\">Reserved environment variables</a></li>\n      <li><a href=\"#galaxy-history-interaction\" id=\"markdown-toc-galaxy-history-interaction\">Galaxy history interaction</a></li>\n      <li><a href=\"#self-destruct-script\" id=\"markdown-toc-self-destruct-script\">Self-destruct script</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#troubleshooting\" id=\"markdown-toc-troubleshooting\">Troubleshooting</a></li>\n</ol>\n\n</blockquote>\n\n<h2 id=\"how-do-interactive-tools-work\">How do Interactive Tools work?</h2>\n\n<p>Interactive tools are a special breed of Galaxy tools, which is relatively\nnew to the Galaxy ecosystem - they are a work in progress!\nGxITs enable the user to run an entire web application through Galaxy, which\nopens as a new tab in the browser. This can enable users to explore and manipulate\ndata in a rich interface, such as Jupyter notebooks and RStudio. To see some\nexamples of GxITs in action, take a look at\n<a href=\"https://live.usegalaxy.eu/\">Galaxy EU “Live”</a>.</p>\n\n<p>Interactive tool development builds on the canonical tool-wrapping process.\nInstead of running a command, the tool feeds user input to a Docker container\nrunning the application. Once it’s up and running, the GxIT application can\nthen be accessed through a unique URL generated by the Galaxy server.\nThe user can then open the application, interact with their Galaxy data and\nthen terminate the tool. On termination, the Docker container is stopped and\nremoved, and the job is considered “complete”.</p>\n\n<h2 id=\"when-is-an-interactive-tool-appropriate\">When is an Interactive Tool appropriate?</h2>\n\n<p>In a regular Galaxy tool the user passes data to the tool and waits for it to\nrun. They then get some output file(s) when the tool run is complete. In an\nInteractive Tool, however, the users are provided with a graphical web interface\nallowing them to interact with their data in real time. This is great for\nvisualising data, but if it is possible to provide the same\nfunctionality with a regular tool (e.g. by rendering an HTML file as an output),\nthen an Interactive Tool might not be necessary.</p>\n\n<p>If you are sure that a static\noutput is not sufficient, then it’s time to start building your first\nInteractive Tool!</p>\n\n<blockquote class=\"comment\">\n  <comment-title>Interactive tool infrastructure</comment-title>\n  <p>Interactive tools require some rather complex infrastructure in order to work! However, most of the infrastructure requirements are taken care of by Galaxy core. As such, wrapping a new GxIT requires only three components:</p>\n  <ul>\n    <li>Application script(s)</li>\n    <li>Docker container image</li>\n    <li>Galaxy tool XML</li>\n  </ul>\n\n  <p>However, as we will see in the next section, testing and deploying a GxIT is not so simple.</p>\n</blockquote>\n\n<h1 id=\"the-development-process\">The development process</h1>\n\n<p>Since the infrastructure for building GxITs is not as well developed as regular\ntool wrapping, the development process is unfortunately not so streamlined.\nWhere Planemo is typically used for tool linting and testing, the complex\narchitecture of GxITs requires a local instance or a development server to be built to manually\ntest and run the tool.\nIn addition, they are currently not supported by the Galaxy ToolShed and have to be installed\nmanually. This means that distributed GxITs can be found in <a href=\"https://github.com/galaxyproject/galaxy/tree/dev/tools/interactive\">the Galaxy core codebase</a>,\nand they can be manually enabled by the Galaxy server administrator.</p>\n\n<p>However, the build process itself is not too complex!\nWe can break it down into just a few steps:</p>\n\n<ol>\n  <li>Find or create the application you wish to install on Galaxy</li>\n  <li>Find or create a Docker image containing this application</li>\n  <li>Write a Galaxy tool XML to pass IT details to Galaxy and pass user input to the Docker container</li>\n  <li>Add the tool XML to your Galaxy server (local or distant)</li>\n  <li>Try out the tool in the Galaxy interface. Error messages might appear in the Galaxy history.</li>\n  <li>If errors occur, revise the container or tool XML, and try again until the application is working.</li>\n</ol>\n\n<p>The last step is likely where the most time is spent - the process requires\niterative development of the Docker image and tool XML until they work together.\nAs such, reducing the iteration time is the key to quick development! Throughout\nthe tutorial, we’ll sprinkle in some tips on how to speed up the development\ncycle.</p>\n\n<blockquote class=\"comment\">\n  <comment-title>A note on architecture</comment-title>\n  <p>When building a GxIT, it is best to keep as much logic as possible in the tool XML, while keeping the Docker image as generic as possible. Why? Updating the tool XML is simple for Galaxy admins and developers in the future. They can view the tool XML directly on the server and understand how the tool works. The Docker image, meanwhile, is relatively opaque to other developers and administrators. To understand the container they must locate the original Dockerfile, which is not always available. Updating the container is more complex, as we will see later. Additionally, keeping the Docker container generic makes it testable outside of Galaxy.</p>\n\n  <p>In short: updating the Docker container is hard, but updating the tool XML is easy!</p>\n</blockquote>\n\n<h1 id=\"the-application\">The application</h1>\n\n<p>The application that we will wrap in this tutorial is a simple web tool which\nallows the user to upload <code class=\"language-plaintext highlighter-rouge\">csv</code> and <code class=\"language-plaintext highlighter-rouge\">tsv</code> files, manipulate them and download\nthem. Our application is based on an R Shiny App hosted with a Shiny server.</p>\n\n<p>Note that there is no link between this Interactive Tool and the Galaxy history.\nMore complex applications might be able to read and write outputs to the user’s\nhistory to create a more integrated experience - see the\n<a href=\"#galaxy-history-interaction\">Additional components section</a>\nto see an example of how this can be done.</p>\n\n<p>Our example application can already be found <a href=\"https://github.com/Lain-inrae/geoc-gxit\">online</a>.\nIn the following sections, we will study how it can be built into a GxIT.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title></hands-on-title>\n\n  <p>First, let’s clone the repository to take a quick look at it.</p>\n\n  <div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git clone https://github.com/Lain-inrae/geoc-gxit\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cd </span>geoc-gxit\n<span class=\"go\">\n</span><span class=\"gp\">$</span><span class=\"w\"> </span>tree <span class=\"nb\">.</span>\n<span class=\"go\">├── Dockerfile\n├── interactivetool_tabulator.xml\n├── gxit\n│   ├── app.R\n│   └── install.R\n├── Makefile\n└── README.md\n</span></code></pre></div>  </div>\n  <p>You’ll find a Galaxy tool XML, a Dockerfile and two R scripts that will be injected into the container image.</p>\n\n</blockquote>\n\n<h2 id=\"the-r-scripts\">The R scripts</h2>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">app.R</code> defines the R Shiny application.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">install.R</code> will be used by the docker container to install the R packages needed to run <code class=\"language-plaintext highlighter-rouge\">app.R</code>.</li>\n</ul>\n\n<p>These are specific to your container; these are required for an R-Shiny container, but won’t be for other containers like a Jupyter notebook container.</p>\n\n<h2 id=\"the-dockerfile\">The Dockerfile</h2>\n\n<blockquote class=\"tip\">\n  <tip-title>A brief primer on Docker</tip-title>\n  <p>Docker allows an entire application context to be containerized. A typical web application consists of an operating system, installed dependancies, web server configuration, database configuration and, of course, the codebase of the software itself. A Docker container can encapsulate all of these components in a single “image”, which can be run on any machine with Docker installed.</p>\n\n  <p><strong>Essentials of Docker:</strong></p>\n\n  <ol>\n    <li>Write an image recipe as a Dockerfile. This single file selects an OS, installs software, pulls code repositories and copies files from the host machine (your computer).</li>\n    <li>\n      <p>Build the image from your recipe:</p>\n\n      <p><code class=\"language-plaintext highlighter-rouge\">docker build -t &lt;image_name&gt; .</code></p>\n    </li>\n    <li>\n      <p>View existing images with</p>\n\n      <p><code class=\"language-plaintext highlighter-rouge\">docker image list</code></p>\n    </li>\n    <li>\n      <p>Run a container with a specified command:</p>\n\n      <p><code class=\"language-plaintext highlighter-rouge\">docker run &lt;image_name&gt; &lt;command&gt;</code></p>\n    </li>\n    <li>\n      <p>View running containers:</p>\n\n      <p><code class=\"language-plaintext highlighter-rouge\">docker ps</code></p>\n    </li>\n    <li>\n      <p>Stop a running container:</p>\n\n      <p><code class=\"language-plaintext highlighter-rouge\">docker stop &lt;container_name&gt;</code></p>\n    </li>\n    <li>\n      <p>Remove a stopped container:</p>\n\n      <p><code class=\"language-plaintext highlighter-rouge\">docker container rm &lt;container_name&gt;</code></p>\n    </li>\n    <li>\n      <p>Remove an image:</p>\n\n      <p><code class=\"language-plaintext highlighter-rouge\">docker image rm &lt;container_name&gt;</code></p>\n    </li>\n  </ol>\n</blockquote>\n\n<p>Let’s check out\n<a href=\"https://github.com/Lain-inrae/geoc-gxit/blob/master/Dockerfile\">the Dockerfile</a>\nthat we’ll use to containerize our application.</p>\n\n<p>This container recipe can be used to build a Docker image which can be pushed to a\ncontainer registry in the cloud, ready for consumption by our Galaxy instance:</p>\n\n<div class=\"language-dockerfile highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Set image to build upon</span>\n<span class=\"k\">FROM</span><span class=\"s\"> rocker/shiny</span>\n\n<span class=\"c\"># set author</span>\n<span class=\"k\">MAINTAINER</span><span class=\"s\"> Lain Pavot &lt;lain.pavot@inra.fr&gt;</span>\n\n<span class=\"c\">## we copy the installer and run it before copying the entire project to prevent</span>\n<span class=\"c\">## reinstalling everything each time the project has changed</span>\n\n<span class=\"k\">COPY</span><span class=\"s\"> ./gxit/install.R /tmp/</span>\n\n<span class=\"k\">RUN </span><span class=\"se\">\\\n</span>        apt-get update                                <span class=\"se\">\\\n</span>    <span class=\"o\">&amp;&amp;</span>  apt-get <span class=\"nb\">install</span> <span class=\"nt\">-y</span> <span class=\"nt\">--no-install-recommends</span>    <span class=\"se\">\\\n</span>        fonts-texgyre                                 <span class=\"se\">\\\n</span>    <span class=\"o\">&amp;&amp;</span>  Rscript /tmp/install.R                        <span class=\"se\">\\\n</span>    <span class=\"o\">&amp;&amp;</span>  apt-get clean autoclean                       <span class=\"se\">\\\n</span>    <span class=\"o\">&amp;&amp;</span>  apt-get autoremove <span class=\"nt\">--yes</span>                      <span class=\"se\">\\\n</span>    <span class=\"o\">&amp;&amp;</span>  <span class=\"nb\">rm</span> <span class=\"nt\">-rf</span> /var/lib/<span class=\"o\">{</span>apt,dpkg,cache,log<span class=\"o\">}</span>/         <span class=\"se\">\\\n</span>    <span class=\"o\">&amp;&amp;</span>  <span class=\"nb\">rm</span> <span class=\"nt\">-rf</span> /tmp/<span class=\"k\">*</span>                                 <span class=\"p\">;</span>\n\n\n<span class=\"c\"># ------------------------------------------------------------------------------</span>\n\n<span class=\"c\"># These default values can be overridden when we run the container:</span>\n<span class=\"c\">#     docker run -p 8080:8080 -e PORT=8080 -e LOG_PATH=/tmp/shiny/gxit.log &lt;container_name&gt;</span>\n\n<span class=\"c\"># We can also bind the container $LOG_PATH to a local directory in order to</span>\n<span class=\"c\"># follow the log file from the host machine as the container runs. This command</span>\n<span class=\"c\"># will create the log/ directory in our current working directory at runtime -</span>\n<span class=\"c\"># inside we will find our Shiny app log file:</span>\n<span class=\"c\">#     docker run -p 8888:8888 -e LOG_PATH=/tmp/shiny/gxit.log -v $PWD/log:/tmp/shiny &lt;container_name&gt;</span>\n\n<span class=\"k\">ARG</span><span class=\"s\"> PORT=8765</span>\n<span class=\"k\">ARG</span><span class=\"s\"> LOG_PATH=/tmp/gxit.log</span>\n\n<span class=\"k\">ENV</span><span class=\"s\"> LOG_PATH=$LOG_PATH</span>\n<span class=\"k\">ENV</span><span class=\"s\"> PORT=$PORT</span>\n\n<span class=\"c\"># ------------------------------------------------------------------------------</span>\n\n<span class=\"c\"># Edit shiny-server config to use our port</span>\n<span class=\"k\">RUN </span><span class=\"nb\">cat</span> /etc/shiny-server/shiny-server.conf <span class=\"se\">\\\n</span>    | <span class=\"nb\">sed</span> <span class=\"s2\">\"s/3838/</span><span class=\"k\">${</span><span class=\"nv\">PORT</span><span class=\"k\">}</span><span class=\"s2\">/\"</span> <span class=\"o\">&gt;</span> /etc/shiny-server/shiny-server.conf.1\n<span class=\"k\">RUN </span><span class=\"nb\">mv</span> /etc/shiny-server/shiny-server.conf.1 /etc/shiny-server/shiny-server.conf\n\n<span class=\"c\"># ------------------------------------------------------------------------------</span>\n\n<span class=\"k\">RUN </span><span class=\"nb\">mkdir</span> <span class=\"nt\">-p</span> <span class=\"si\">$(</span><span class=\"nb\">dirname</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">LOG_PATH</span><span class=\"k\">}</span><span class=\"s2\">\"</span><span class=\"si\">)</span>\n<span class=\"k\">EXPOSE</span><span class=\"s\"> $PORT</span>\n<span class=\"k\">COPY</span><span class=\"s\"> ./gxit/app.R /srv/shiny-server/</span>\n\n<span class=\"k\">CMD</span><span class=\"s\"> [\"/bin/sh\", \"-c\", \"shiny-server &gt; ${LOG_PATH} 2&gt;&amp;1\"]</span>\n</code></pre></div></div>\n\n<blockquote class=\"tip\">\n  <tip-title>Shiny-based interactive tools</tip-title>\n  <p>In a previous version of this tutorial, we ran the Shiny App with <code class=\"language-plaintext highlighter-rouge\">R -e \"shiny:runApp()\"</code>\nrather than using <code class=\"language-plaintext highlighter-rouge\">shiny-server</code>. The latter is better practice, because it ensures that\nports are mapped correctly for websocket functionality. With <code class=\"language-plaintext highlighter-rouge\">shiny::runApp()</code> you will\nprobably notice a websocket timeout in the app when run as a GxIT - the UI often greys\nout and becomes unresponsive after 20-30 seconds.</p>\n\n</blockquote>\n\n<p>This image is already hosted on <a href=\"https://hub.docker.com/r/ancelete/first-gxit\">Docker Hub</a>\n, but anyone can use this Dockerfile to rebuild the image if necessary.\nIf so, don’t forget to create a <code class=\"language-plaintext highlighter-rouge\">gxit</code> folder containing <code class=\"language-plaintext highlighter-rouge\">app.R</code> and <code class=\"language-plaintext highlighter-rouge\">install.R</code>\nnext to your Dockerfile.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title></hands-on-title>\n\n  <p>Let’s start working on this Docker container.</p>\n\n  <ol>\n    <li>\n      <p>Install Docker as described on the <a href=\"https://docs.docker.com/engine/install/\">docker website</a>. Click on your distribution name to get specific information.</p>\n    </li>\n    <li>\n      <p>Now let’s use the recipe to build our Docker image.</p>\n\n      <div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Build a container image from our Dockerfile</span>\n<span class=\"nv\">IMAGE_TAG</span><span class=\"o\">=</span><span class=\"s2\">\"myimage\"</span>\n<span class=\"nv\">LOG_PATH</span><span class=\"o\">=</span><span class=\"sb\">`</span><span class=\"nb\">pwd</span><span class=\"sb\">`</span>  <span class=\"c\"># Create log output in current directory</span>\n<span class=\"nv\">PORT</span><span class=\"o\">=</span>8765\ndocker build <span class=\"nt\">-t</span> <span class=\"nv\">$IMAGE_TAG</span> <span class=\"nt\">--build-arg</span> <span class=\"nv\">LOG_PATH</span><span class=\"o\">=</span><span class=\"nv\">$LOG_PATH</span> <span class=\"nt\">--build-arg</span> <span class=\"nv\">PORT</span><span class=\"o\">=</span><span class=\"nv\">$PORT</span> <span class=\"nb\">.</span>\n</code></pre></div>      </div>\n\n      <blockquote class=\"tip\">\n        <tip-title>Automating the build</tip-title>\n        <p>While developing the Docker container you may find yourself tweaking and rebuilding the container image many times.\nIn the GitHub repository linked above, you’ll notice that the author has used a <code class=\"language-plaintext highlighter-rouge\">Makefile</code> to accelerate the build and deploy process.\nThis allows the developer to simply run <code class=\"language-plaintext highlighter-rouge\">make docker</code> and <code class=\"language-plaintext highlighter-rouge\">make push_hub</code> to build and push the container, or <code class=\"language-plaintext highlighter-rouge\">make</code> to rebuild the container after making changes during development. Check out the <code class=\"language-plaintext highlighter-rouge\">Makefile</code> to see what commands can be run using <code class=\"language-plaintext highlighter-rouge\">make</code> in this repository.</p>\n\n      </blockquote>\n    </li>\n  </ol>\n</blockquote>\n\n<p>If you are lucky, you might find an available Docker image for the application you are trying to wrap. However, existing Docker images often require some “tweaking” before they will work as a GxIT. Some example configuration changes are:</p>\n\n<ol>\n  <li>Expose the correct port. The application, Docker and tool XML ports must be aligned!</li>\n  <li>Log output to an external file - useful for debugging.</li>\n  <li>Make the application callable from tool <code class=\"language-plaintext highlighter-rouge\">&lt;command&gt;</code> - this sometimes requires a wrapper script to interface the application inside the container (we’ll take a look at this later).</li>\n</ol>\n\n<h2 id=\"test-the-image\">Test the image</h2>\n\n<p>Before we go pushing our container to the cloud, we should give it a local test run to ensure that it’s working correctly on our development machine. Have a play and see how our little web app works!</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title></hands-on-title>\n  <div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Run our application in the container</span>\ndocker run <span class=\"nt\">-it</span> <span class=\"nt\">-p</span> 127.0.0.1:8765:<span class=\"nv\">$PORT</span> <span class=\"nv\">$IMAGE_TAG</span>\n\n<span class=\"c\"># Or to save time, take advantage of the Makefile</span>\nmake it\n\n<span class=\"c\"># Give it a few moments to start up, and the application should be available</span>\n<span class=\"c\"># in your browser at http://127.0.0.1:8765</span>\n</code></pre></div>  </div>\n</blockquote>\n\n<h2 id=\"push-the-image\">Push the image</h2>\n\n<p>If you are happy with the image, we are ready to push it to a container registry\nto make it accessible to our Galaxy server.</p>\n\n<p>During development, we suggest making an account on\n<a href=\"https://hub.docker.com/\">Docker Hub</a>\nif you don’t have one already. This can be used for hosting container images\nduring development.\n<a href=\"https://hub.docker.com/\">Docker Hub</a>\nhas great documentation on creating repositories, authenticating with tokens\nand pushing images.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title></hands-on-title>\n  <div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Set remote tag for your container. This should include your username and</span>\n<span class=\"c\"># repository name for Docker Hub.</span>\n<span class=\"nv\">REMOTE</span><span class=\"o\">=</span>&lt;DOCKERHUB_USERNAME&gt;/my-first-gxit\n\n<span class=\"c\"># Tag your image</span>\ndocker tag <span class=\"nv\">$IMAGE_TAG</span>:latest <span class=\"nv\">$REMOTE</span>:latest\n\n<span class=\"c\"># Authenticate your DockerHub account</span>\ndocker login  <span class=\"c\"># &gt;&gt;&gt; Enter username and token for your account</span>\n\n<span class=\"c\"># Push the image</span>\ndocker push <span class=\"nv\">$REMOTE</span>:latest\n</code></pre></div>  </div>\n\n  <blockquote class=\"tip\">\n    <tip-title>Production container hosting</tip-title>\n    <p>For production deployment, the\n<a href=\"https://docs.galaxyproject.org/en/latest/admin/special_topics/mulled_containers.html\">Galaxy standard</a>\nfor container image hosting is\n<a href=\"https://biocontainers.pro\">Biocontainers</a>.\nThis requires you to\n<a href=\"https://biocontainers-edu.readthedocs.io/en/latest/contributing.html\">make a pull request</a>\nagainst the Biocontainers GitHub repository, so this should only be done when an\nimage is considered production-ready. You can also push your image to a\nrepository on\n<a href=\"https://hub.docker.com\">hub.docker.com</a> or\n<a href=\"https://quay.io\">quay.io</a>\nbut please ensure that it links to a public code repository\n(e.g. GitHub) to enable maintenance of the image by the Galaxy community!</p>\n  </blockquote>\n</blockquote>\n\n<p>You should now have a container in the cloud, ready for action.\nCheck out your repo on Docker Hub and you should find the container image there.\nAwesome!</p>\n\n<p>Now we just need to write a tool XML that will enable Galaxy to pull and run\nour new Docker container as a Galaxy tool.</p>\n\n<h2 id=\"the-tool-xml\">The tool XML</h2>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title></hands-on-title>\n\n  <p>Create a Galaxy tool XML file named <code class=\"language-plaintext highlighter-rouge\">interactivetool_tabulator.xml</code>. The file is similar to a regular tool XML, but calls on our remote Docker image as a dependency. The tags that we are most concerned with are:</p>\n  <ul>\n    <li>A <code class=\"language-plaintext highlighter-rouge\">&lt;container&gt;</code> (under the <code class=\"language-plaintext highlighter-rouge\">&lt;requirements&gt;</code> tag)</li>\n    <li>A <code class=\"language-plaintext highlighter-rouge\">&lt;port&gt;</code> which matches our container</li>\n    <li>An <code class=\"language-plaintext highlighter-rouge\">&lt;input&gt;</code> file</li>\n    <li>The <code class=\"language-plaintext highlighter-rouge\">&lt;command&gt;</code> section</li>\n  </ul>\n\n  <blockquote class=\"comment\">\n    <comment-title>Writing the tool command</comment-title>\n\n    <p>This step can cause a lot of confusion. Here are a few pointer that you will find critical to understanding the process:</p>\n    <ul>\n      <li>The <code class=\"language-plaintext highlighter-rouge\">&lt;command&gt;</code> will be templated by Galaxy</li>\n      <li>The templated command will run <em>inside</em> the Docker container</li>\n    </ul>\n\n  </blockquote>\n\n  <blockquote class=\"tip\">\n    <tip-title>Writing the GxIT tool XML</tip-title>\n\n    <ul>\n      <li>Refer to the <a href=\"https://docs.galaxyproject.org/en/latest/dev/schema.html\">Galaxy tool XML docs</a>.</li>\n      <li>You can take inspiration from <a href=\"https://github.com/galaxyproject/galaxy/blob/dev/tools/interactive/interactivetool_askomics.xml\">Askomics</a>, and other <a href=\"https://github.com/galaxyproject/galaxy/blob/dev/tools/interactive\">existing Interactive Tools</a>.</li>\n      <li>Check XML syntax with <a href=\"https://www.xmlvalidation.com/\">xmlvalidation.com</a> or <a href=\"https://www.w3schools.com/xml/xml_validator.asp\">w3schools XML validator</a>, or use a linter in your code editor.</li>\n      <li><a href=\"https://planemo.readthedocs.io/en/latest/commands/lint.html\">planemo lint</a> can also be used for XML linting. But be aware that <code class=\"language-plaintext highlighter-rouge\">planemo test</code> won’t work.</li>\n      <li>When it comes to testing and debugging your tool XML, it can be easier to update the XML file directly on your Galaxy server between tests.</li>\n    </ul>\n  </blockquote>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;tool</span> <span class=\"na\">id=</span><span class=\"s\">\"interactive_tool_tabulator\"</span> <span class=\"na\">tool_type=</span><span class=\"s\">\"interactive\"</span> <span class=\"na\">name=</span><span class=\"s\">\"Tabulator\"</span> <span class=\"na\">version=</span><span class=\"s\">\"0.1\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;description&gt;</span>Tuto tool for Gxit<span class=\"nt\">&lt;/description&gt;</span>\n\n    <span class=\"nt\">&lt;requirements&gt;</span>\n        <span class=\"nt\">&lt;container</span> <span class=\"na\">type=</span><span class=\"s\">\"docker\"</span><span class=\"nt\">&gt;</span>ancelete/geoc-gxit:latest<span class=\"nt\">&lt;/container&gt;</span>\n    <span class=\"nt\">&lt;/requirements&gt;</span>\n\n    <span class=\"nt\">&lt;entry_points&gt;</span>\n        <span class=\"nt\">&lt;entry_point</span> <span class=\"na\">name=</span><span class=\"s\">\"first gxit\"</span> <span class=\"na\">requires_domain=</span><span class=\"s\">\"True\"</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;port&gt;</span>8765<span class=\"nt\">&lt;/port&gt;</span>\n\n            <span class=\"c\">&lt;!--\n                 Some apps have a non-root entrypoint.\n                 We can provide the URL with a &lt;url&gt; tag like this:\n                 &lt;url&gt;/my/entrypoint&lt;/url&gt;\n             --&gt;</span>\n            <span class=\"nt\">&lt;url&gt;</span>/<span class=\"nt\">&lt;/url&gt;</span>\n\n        <span class=\"nt\">&lt;/entry_point&gt;</span>\n    <span class=\"nt\">&lt;/entry_points&gt;</span>\n\n    <span class=\"nt\">&lt;environment_variables&gt;</span>\n        <span class=\"c\">&lt;!-- These will be accessible as environment variables inside the Docker container --&gt;</span>\n    <span class=\"nt\">&lt;/environment_variables&gt;</span>\n\n    <span class=\"nt\">&lt;command&gt;</span><span class=\"cp\">&lt;![CDATA[\n\n        ## The command will be templated by Cheetah within Galaxy, and\n        ## then run inside the Docker container!\n\n        ## This only works because Galaxy's user data directory is mapped\n        ## onto the Docker container at runtime - enabling access to\n        ## '$infile' and '$outfile' from inside the container.\n\n        shiny-server 2&gt;</span><span class=\"err\">&amp;</span>1 &gt; /var/log/tuto-gxit-01.log\n        ## The log file can be found inside the container, for debugging purposes\n\n    ]]&gt;\n    <span class=\"nt\">&lt;/command&gt;</span>\n\n    <span class=\"nt\">&lt;inputs&gt;</span>\n    <span class=\"nt\">&lt;/inputs&gt;</span>\n\n    <span class=\"nt\">&lt;outputs&gt;</span>\n        <span class=\"c\">&lt;!--\n            Even if our IT doesn't export to Galaxy history,\n            adding an output ensures to keep track of the IT\n            execution in the history\n        --&gt;</span>\n\n        <span class=\"nt\">&lt;data</span> <span class=\"na\">name=</span><span class=\"s\">\"file_output\"</span> <span class=\"na\">format=</span><span class=\"s\">\"txt\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/outputs&gt;</span>\n\n    <span class=\"nt\">&lt;tests&gt;</span>\n        <span class=\"c\">&lt;!-- Tests are difficult with GxITs! --&gt;</span>\n    <span class=\"nt\">&lt;/tests&gt;</span>\n\n    <span class=\"nt\">&lt;help&gt;</span> <span class=\"cp\">&lt;![CDATA[\n\n        Some help is always of interest ;)\n\n    ]]&gt;</span><span class=\"nt\">&lt;/help&gt;</span>\n    <span class=\"nt\">&lt;citations&gt;</span>\n       <span class=\"nt\">&lt;citation</span> <span class=\"na\">type=</span><span class=\"s\">\"bibtex\"</span><span class=\"nt\">&gt;</span>\n       @misc{\n            author       = {Lain Pavot - lain.pavot@inrae.fr},\n            title        = {first-gxit -  A tool to visualise tsv/csv files},\n            publisher    = {INRAE},\n            url          = {}\n        }\n        <span class=\"nt\">&lt;/citation&gt;</span>\n    <span class=\"nt\">&lt;/citations&gt;</span>\n<span class=\"nt\">&lt;/tool&gt;</span>\n</code></pre></div>    </div>\n\n  </blockquote>\n\n  <p>Don’t forget to change the image path (see the <code class=\"language-plaintext highlighter-rouge\">$REMOTE</code> variable above) and the citation to fit your project settings.</p>\n</blockquote>\n\n<h1 id=\"testing-locally\">Testing locally</h1>\n\n<p>You would like to check your GxIT integration in Galaxy but don’t have a development server or don’t want to disturb your sysadmin at this point?\nLet’s check this integration on your machine. You can use a VM if you prefer not to modify your machine environment.</p>\n\n<blockquote class=\"comment\">\n  <comment-title>A note on the OS</comment-title>\n  <p>This part of the tutorial has been tested on Ubuntu and Debian and there is no guaranteed success for other operating systems.\nIf you have another OS on your machine (i.e. Windows or MacOS), you may need to use an Ubuntu virtual machine or perhaps try <a href=\"https://docs.microsoft.com/en-us/windows/wsl/install\">Windows subsystem for Linux</a>.</p>\n</blockquote>\n\n<h2 id=\"docker-installation\">Docker installation</h2>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Install Docker</hands-on-title>\n  <p>Install Docker as described on the <a href=\"https://docs.docker.com/engine/install/\">docker website</a>. Click on your distribution name to get specific information.</p>\n</blockquote>\n\n<h2 id=\"galaxy-installation\">Galaxy installation</h2>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Install Galaxy</hands-on-title>\n\n  <p>For Ubuntu:</p>\n  <div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Install git to get Galaxy project</span>\n<span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>git\n<span class=\"c\"># Create a working directory and move to it</span>\n<span class=\"nb\">mkdir</span> ~/GxIT <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd</span> ~/GxIT\n<span class=\"c\"># Get the galaxy project. A new directory named \"galaxy\" will be created.</span>\n<span class=\"c\"># This directory contains the whole project</span>\ngit clone https://github.com/galaxyproject/galaxy\n<span class=\"c\"># Checkout the last stable version (v23.1 as the time of writing)</span>\n<span class=\"nb\">cd </span>galaxy <span class=\"o\">&amp;&amp;</span> git checkout release_23.1\n</code></pre></div>  </div>\n</blockquote>\n\n<h2 id=\"galaxy-configuration\">Galaxy configuration</h2>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title></hands-on-title>\n\n  <div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cd</span> ~/GxIT/galaxy/config\n<span class=\"c\"># Create custom config files</span>\n<span class=\"nb\">cat </span>galaxy.yml.interactivetools <span class=\"o\">&gt;</span> galaxy.yml\n<span class=\"nb\">cat </span>tool_conf.xml.sample <span class=\"o\">&gt;</span> tool_conf.xml\n</code></pre></div>  </div>\n  <p>In <code class=\"language-plaintext highlighter-rouge\">galaxy.yml</code>, ensure that the <code class=\"language-plaintext highlighter-rouge\">galaxy_infrastructure_url</code> parameter is present under the galaxy section:</p>\n  <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">galaxy</span><span class=\"pi\">:</span>\n  <span class=\"na\">galaxy_infrastructure_url</span><span class=\"pi\">:</span> <span class=\"s\">http://localhost:8080</span>\n</code></pre></div>  </div>\n  <p>This will make galaxy to provide your GxIT using links like <a href=\"http://your_gxit_identifier.localhost:8080\">http://your_gxit_identifier.localhost:8080</a>.</p>\n\n  <p>Configure the tool panel by adding a section in <code class=\"language-plaintext highlighter-rouge\">~/GxIT/galaxy/config/tool_conf.xml</code>:</p>\n  <div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"nt\">&lt;section</span> <span class=\"na\">id=</span><span class=\"s\">\"interactivetools\"</span> <span class=\"na\">name=</span><span class=\"s\">\"Interactive tools\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;tool</span> <span class=\"na\">file=</span><span class=\"s\">\"interactive/interactivetool_tabulator.xml\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/section&gt;</span>\n</code></pre></div>  </div>\n  <p>With these lines, Galaxy will create a new section named “Interactive tools” in the tool panel\nwith our interactive tabulator inside.\nChoose whatever name and id you want as long as the id is unique.\nAnd of course, you have no obligation to put your GxITs in this section.\nYou can put them in any section.</p>\n\n  <p>Next, create a simple <code class=\"language-plaintext highlighter-rouge\">job_conf.xml</code> with the following contents, which basically specifies how Galaxy should execute a job. It is also possible to execute the tools directly from the local environment, but here we would like the tool to make use of the container we have just made.</p>\n  <div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;?xml version=\"1.0\"?&gt;</span>\n<span class=\"nt\">&lt;job_conf&gt;</span>\n    <span class=\"nt\">&lt;plugins&gt;</span>\n        <span class=\"nt\">&lt;plugin</span> <span class=\"na\">id=</span><span class=\"s\">\"local\"</span> <span class=\"na\">type=</span><span class=\"s\">\"runner\"</span> <span class=\"na\">load=</span><span class=\"s\">\"galaxy.jobs.runners.local:LocalJobRunner\"</span> <span class=\"na\">workers=</span><span class=\"s\">\"4\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/plugins&gt;</span>\n    <span class=\"nt\">&lt;destinations</span> <span class=\"na\">default=</span><span class=\"s\">\"docker_dispatch\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;destination</span> <span class=\"na\">id=</span><span class=\"s\">\"local\"</span> <span class=\"na\">runner=</span><span class=\"s\">\"local\"</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;destination</span> <span class=\"na\">id=</span><span class=\"s\">\"docker_local\"</span> <span class=\"na\">runner=</span><span class=\"s\">\"local\"</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;param</span> <span class=\"na\">id=</span><span class=\"s\">\"docker_enabled\"</span><span class=\"nt\">&gt;</span>true<span class=\"nt\">&lt;/param&gt;</span>\n            <span class=\"nt\">&lt;param</span> <span class=\"na\">id=</span><span class=\"s\">\"docker_volumes\"</span><span class=\"nt\">&gt;</span>$defaults<span class=\"nt\">&lt;/param&gt;</span>\n            <span class=\"nt\">&lt;param</span> <span class=\"na\">id=</span><span class=\"s\">\"docker_sudo\"</span><span class=\"nt\">&gt;</span>false<span class=\"nt\">&lt;/param&gt;</span>\n            <span class=\"nt\">&lt;param</span> <span class=\"na\">id=</span><span class=\"s\">\"docker_net\"</span><span class=\"nt\">&gt;</span>bridge<span class=\"nt\">&lt;/param&gt;</span>\n            <span class=\"nt\">&lt;param</span> <span class=\"na\">id=</span><span class=\"s\">\"docker_auto_rm\"</span><span class=\"nt\">&gt;</span>true<span class=\"nt\">&lt;/param&gt;</span>\n            <span class=\"nt\">&lt;param</span> <span class=\"na\">id=</span><span class=\"s\">\"require_container\"</span><span class=\"nt\">&gt;</span>true<span class=\"nt\">&lt;/param&gt;</span>\n            <span class=\"nt\">&lt;param</span> <span class=\"na\">id=</span><span class=\"s\">\"container_monitor\"</span><span class=\"nt\">&gt;</span>true<span class=\"nt\">&lt;/param&gt;</span>\n            <span class=\"nt\">&lt;param</span> <span class=\"na\">id=</span><span class=\"s\">\"docker_set_user\"</span><span class=\"nt\">&gt;&lt;/param&gt;</span>\n            <span class=\"nt\">&lt;param</span> <span class=\"na\">id=</span><span class=\"s\">\"docker_run_extra_arguments\"</span><span class=\"nt\">&gt;</span>--add-host localhost:host-gateway<span class=\"nt\">&lt;/param&gt;</span>\n        <span class=\"nt\">&lt;/destination&gt;</span>\n        <span class=\"nt\">&lt;destination</span> <span class=\"na\">id=</span><span class=\"s\">\"docker_dispatch\"</span> <span class=\"na\">runner=</span><span class=\"s\">\"dynamic\"</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;param</span> <span class=\"na\">id=</span><span class=\"s\">\"type\"</span><span class=\"nt\">&gt;</span>docker_dispatch<span class=\"nt\">&lt;/param&gt;</span>\n            <span class=\"nt\">&lt;param</span> <span class=\"na\">id=</span><span class=\"s\">\"docker_destination_id\"</span><span class=\"nt\">&gt;</span>docker_local<span class=\"nt\">&lt;/param&gt;</span>\n            <span class=\"nt\">&lt;param</span> <span class=\"na\">id=</span><span class=\"s\">\"default_destination_id\"</span><span class=\"nt\">&gt;</span>local<span class=\"nt\">&lt;/param&gt;</span>\n        <span class=\"nt\">&lt;/destination&gt;</span>\n    <span class=\"nt\">&lt;/destinations&gt;</span>\n<span class=\"nt\">&lt;/job_conf&gt;</span>\n</code></pre></div>  </div>\n  <p>Finally, copy your GxIT wrapper to the Interactive Tool directory:</p>\n  <div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cp</span> ~/my_filepath/interactivetool_tabulator.xml ~/GxIT/galaxy/tools/interactive/\n</code></pre></div>  </div>\n</blockquote>\n\n<h2 id=\"run-galaxy\">Run Galaxy</h2>\n\n<p>Go to the Galaxy directory and:</p>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./run.sh\n</code></pre></div></div>\n\n<p>Galaxy is available at <a href=\"http://localhost:8080/\">http://localhost:8080/</a> and you should be able to use your GxIT.\nCongrats!</p>\n\n<h1 id=\"deployment-in-a-running-galaxy-instancce\">Deployment in a running Galaxy instancce</h1>\n\n<p>We now have all the required components and tested in a local Galaxy instance above, we can install the tool in our\nconfigured Galaxy instance for immediate production use.\nThis is as simple as dropping the tool XML in the right location inside\nthe Galaxy core application directory, and adding the tool to our\n<code class=\"language-plaintext highlighter-rouge\">tool_conf_interactive.xml</code> file.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Installing</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Add the tool XML</p>\n\n      <p>Access your Galaxy instance and take a look at the Galaxy application directory on to see the existing Interactive Tools:</p>\n\n      <div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Drop into the Galaxy application directory</span>\n<span class=\"nb\">cd</span> /srv/galaxy/server/\n\n<span class=\"c\"># Show the existing GxIT tool files</span>\n<span class=\"nb\">ls</span> <span class=\"nt\">-l</span> tools/interactive\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Now we can simply create our tools XML here by writing it with <code class=\"language-plaintext highlighter-rouge\">nano</code></p>\n\n      <div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Open a new file for editing</span>\n<span class=\"nb\">sudo </span>nano tools/interactive/interactivetool_tabulator.xml\n\n<span class=\"c\"># &gt;&gt;&gt;  paste the XML content from your code editor and save the file</span>\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Enable the new tool</p>\n\n      <p>This step is the same as activating any other existing Interactive Tool. See <a href=\"/training-material/topics/admin/tutorials/interactive-tools/tutorial.html\">the admin tutorial</a> for detailed instructions.</p>\n\n      <div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Open the Interactive Tools config file for editing:</span>\n<span class=\"nb\">sudo </span>nano /srv/galaxy/config/tool_conf.xml\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>This configuration file should have been created when\n<a href=\"/training-material/topics/admin/tutorials/interactive-tools/tutorial.html\">administering the Galaxy instance to serve Interactive Tools</a>\nWe just need to add a single line to this file to enable our tool. Can you figure it out?</p>\n\n      <blockquote class=\"solution\">\n        <solution-title></solution-title>\n        <div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;toolbox</span> <span class=\"na\">monitor=</span><span class=\"s\">\"true\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;section</span> <span class=\"na\">id=</span><span class=\"s\">\"interactivetools\"</span> <span class=\"na\">name=</span><span class=\"s\">\"Interactive Tools\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;tool</span> <span class=\"na\">file=</span><span class=\"s\">\"interactive/interactivetool_tabulator.xml\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/section&gt;</span>\n<span class=\"nt\">&lt;/toolbox&gt;</span>\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n    <li>\n      <p>Now we just need to restart the Galaxy server to refresh the tool registry</p>\n\n      <div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>galaxyctl restart\n</code></pre></div>      </div>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>Have a look in the web interface of your Galaxy instance. You should find the new tool under the “Interactive tools” section in the tool panel. If so, we are ready to start testing it out!</p>\n\n<blockquote class=\"tip\">\n  <tip-title>Distributing a new GxIT</tip-title>\n\n  <p>To release a GxIT for production use, we must distribute two components:</p>\n  <ul>\n    <li>the Galaxy tool XML</li>\n    <li>the Docker image</li>\n  </ul>\n\n  <p>We have already pushed the Docker image to the cloud (though it should be hosted on an <a href=\"#push-the-image\">approved registry</a> for production use).</p>\n\n  <p>All that’s left is to distribute the tool XML. This would conventionally be done through the ToolShed. But the ToolShed doesn’t support GxITs yet! This leaves us only two options for distributing the tool XML:</p>\n  <ul>\n    <li>Make a pull request against <a href=\"https://github.com/galaxyproject/galaxy\">Galaxy core</a> to include the XML file under <code class=\"language-plaintext highlighter-rouge\">tools/interactive/</code></li>\n    <li>Deploy the tool to specific Galaxy instance(s) in an Ansible Playbook</li>\n  </ul>\n\n</blockquote>\n\n<blockquote class=\"tip\">\n  <tip-title>Install a GxIT with an Ansible playbook</tip-title>\n\n  <p>The steps that we took in this section can be easily incorporated into an Ansible playbook for deploying GxITs to a Galaxy server. This means that you can manage and deploy a GxIT as part of your Galaxy instance without merging into the <code class=\"language-plaintext highlighter-rouge\">galaxyproject/galaxy</code> repository (or a fork of it).</p>\n\n  <p>The <a href=\"/training-material/topics/admin/tutorials/interactive-tools/tutorial.html\">Interactive Tools admin tutorial</a>\ndemonstrates how this can be acheived by adding our tool XML to the “local tools” section of the Ansible Playbook. However, for our GxIT to show up in the correct tool panel, we need to add an extra config file: <code class=\"language-plaintext highlighter-rouge\">local_tool_conf.xml</code>.</p>\n\n  <ol>\n    <li>\n      <p>Copy the GxIT tool XML to <code class=\"language-plaintext highlighter-rouge\">files/galaxy/tools/interactivetool_tabulator.xml</code> in your Ansible directory</p>\n    </li>\n    <li>\n      <p>Create the template <code class=\"language-plaintext highlighter-rouge\">templates/galaxy/local_tool_conf.xml.j2</code></p>\n\n      <div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;?xml version='1.0' encoding='utf-8'?&gt;</span>\n<span class=\"nt\">&lt;toolbox</span> <span class=\"na\">monitor=</span><span class=\"s\">\"true\"</span> <span class=\"na\">tool_path=</span><span class=\"s\">\"{{ galaxy_local_tools_dir }}\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;section</span> <span class=\"na\">id=</span><span class=\"s\">\"interactivetools\"</span> <span class=\"na\">name=</span><span class=\"s\">\"Interactive tools\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;tool</span> <span class=\"na\">file=</span><span class=\"s\">\"interactivetool_tabulator.xml\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/section&gt;</span>\n<span class=\"nt\">&lt;/toolbox&gt;</span>\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Create variables in the following sections of <code class=\"language-plaintext highlighter-rouge\">group_vars/galaxyservers.yml</code></p>\n\n      <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># ...</span>\n<span class=\"na\">galaxy_local_tools_dir</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">galaxy_server_dir</span><span class=\"nv\"> </span><span class=\"s\">}}/tools/local\"</span>\n<span class=\"na\">galaxy_tool_config_files</span><span class=\"pi\">:</span>\n  <span class=\"c1\"># ...</span>\n  <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">galaxy_config_dir</span><span class=\"nv\"> </span><span class=\"s\">}}/local_tool_conf.xml\"</span>\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Run the playbook and your Interactive Tool should be available at the bottom of the tool panel</p>\n\n      <div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook galaxy.yml\n</code></pre></div>      </div>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h1 id=\"debugging\">Debugging</h1>\n\n<p>The most obvious way to test a tool is simply to run it in the Galaxy UI, straight from the tool panel. If you are extremely lucky, you will find that the tool starts up and runs without error. But we all know that never happens! So this is where we start iteratively debugging our tool, until it functions as expected.</p>\n\n<blockquote class=\"comment\">\n  <comment-title>A successful tool run</comment-title>\n  <p>It is worth pointing out that the appearance of a GxIT in the Galaxy user history is not intuitive when you are used to running “regular” tool jobs. When the history item turns orange (“processing”), that’s when a GxIT is actually ready to use! At this point, the tool UI should refresh and display a link to the active GxIT. Remember, the history item doesn’t turn green until a job has terminated. With a GxIT, that only happens when the tool has been stopped by the user, or by wall time limits imposed by the Galaxy administrators.</p>\n</blockquote>\n\n<blockquote class=\"tip\">\n  <tip-title>GxIT testing infrastructure</tip-title>\n  <p>Testing and debugging is currently the trickiest part of GxIT development. Ideally, Galaxy core will be developed in the future to better support the process, but for the time being we have to make the most with what is available! In the future, we would like to see GxITs being tested with Planemo, and being installed and tested by Ephemeris from the ToolShed.</p>\n</blockquote>\n\n<h1 id=\"additional-components\">Additional components</h1>\n\n<p>The GxIT that we wrapped in this tutorial was a simple example, and you should now understand what is required to create an Interactive Tool for Galaxy. However, there are a few additional components that can enhance the reliability and user experience of the tool. In addition, more complex applications may require some additional components or workarounds the create the desired experience for the user.</p>\n\n<h2 id=\"run-script\">Run script</h2>\n<p>In the case of our <code class=\"language-plaintext highlighter-rouge\">Tabulator</code> application, the run script is simply the R script that renders our Shiny App. It is quite straightforward to call this from our Galaxy tool XML. However, some web apps might require more elaborate commands to be run. In this situation, there are a number of solutions demonstrated in the <code class=\"language-plaintext highlighter-rouge\">&lt;command&gt;</code> section of <a href=\"https://github.com/galaxyproject/galaxy/tree/dev/tools/interactive\">existing GxITs</a>:</p>\n<ul>\n  <li><a href=\"https://github.com/galaxyproject/galaxy/blob/dev/tools/interactive/interactivetool_guacamole_desktop.xml\">Guacamole Desktop</a>: application startup with <code class=\"language-plaintext highlighter-rouge\">startup.sh</code></li>\n  <li><a href=\"https://github.com/galaxyproject/galaxy/blob/dev/tools/interactive/interactivetool_hicbrowser.xml\">HiCBrowser</a>: application startup with <code class=\"language-plaintext highlighter-rouge\">supervisord</code></li>\n  <li><a href=\"https://github.com/galaxyproject/galaxy/blob/dev/tools/interactive/interactivetool_askomics.xml\">AskOmics</a>: configuration with Python and Bash scripts, followed by <code class=\"language-plaintext highlighter-rouge\">start_all.sh</code> to run the application.</li>\n</ul>\n\n<h2 id=\"templated-config-files\">Templated config files</h2>\n<p>Using the <code class=\"language-plaintext highlighter-rouge\">&lt;configfiles&gt;</code> section in the tool XML, we can enable complex user configuration for the application by templating a run script or configuration file to be read by the application. In this application, for example, we could use a <code class=\"language-plaintext highlighter-rouge\">&lt;configfiles&gt;</code> section to template user input into the <code class=\"language-plaintext highlighter-rouge\">app.R</code> script that runs the application within the Docker container. This could enable the user to customize the layout of the app before launch.</p>\n\n<h2 id=\"reserved-environment-variables\">Reserved environment variables</h2>\n\n<p>There are a few environment variables\nthat are accessible in the command section of the tool XML - these can be handy when writing your tool script.\n<a href=\"https://docs.galaxyproject.org/en/latest/dev/schema.html#reserved-variables\">Check the docs</a> for a full reference on the tool XML.</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$__tool_directory__</span>\n<span class=\"nv\">$__root_dir__</span>\n<span class=\"nv\">$__user_id__</span>\n<span class=\"nv\">$__user_email__</span>\n</code></pre></div></div>\n\n<p>It can also be useful to create and inject environment variables into the tool context. This can be acheived using the <code class=\"language-plaintext highlighter-rouge\">&lt;environment variables&gt;</code> tag in the tool XML. The <a href=\"https://github.com/galaxyproject/galaxy/blob/b180b7909dc3fe2750fbc8b90214e201eb276794/tools/interactive/interactivetool_rstudio.xml#L12\">RStudio GxIT</a> again provides an example of this:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;environment_variables&gt;</span>\n    <span class=\"nt\">&lt;environment_variable</span> <span class=\"na\">name=</span><span class=\"s\">\"HISTORY_ID\"</span> <span class=\"na\">strip=</span><span class=\"s\">\"True\"</span><span class=\"nt\">&gt;</span>${__app__.security.encode_id($jupyter_notebook.history_id)}<span class=\"nt\">&lt;/environment_variable&gt;</span>\n    <span class=\"nt\">&lt;environment_variable</span> <span class=\"na\">name=</span><span class=\"s\">\"REMOTE_HOST\"</span><span class=\"nt\">&gt;</span>${__app__.config.galaxy_infrastructure_url}<span class=\"nt\">&lt;/environment_variable&gt;</span>\n    <span class=\"nt\">&lt;environment_variable</span> <span class=\"na\">name=</span><span class=\"s\">\"GALAXY_WEB_PORT\"</span><span class=\"nt\">&gt;</span>8080<span class=\"nt\">&lt;/environment_variable&gt;</span>\n    <span class=\"nt\">&lt;environment_variable</span> <span class=\"na\">name=</span><span class=\"s\">\"GALAXY_URL\"</span><span class=\"nt\">&gt;</span>$__galaxy_url__<span class=\"nt\">&lt;/environment_variable&gt;</span>\n    <span class=\"nt\">&lt;environment_variable</span> <span class=\"na\">name=</span><span class=\"s\">\"DEBUG\"</span><span class=\"nt\">&gt;</span>true<span class=\"nt\">&lt;/environment_variable&gt;</span>\n    <span class=\"nt\">&lt;environment_variable</span> <span class=\"na\">name=</span><span class=\"s\">\"DISABLE_AUTH\"</span><span class=\"nt\">&gt;</span>true<span class=\"nt\">&lt;/environment_variable&gt;</span>\n    <span class=\"nt\">&lt;environment_variable</span> <span class=\"na\">name=</span><span class=\"s\">\"API_KEY\"</span> <span class=\"na\">inject=</span><span class=\"s\">\"api_key\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/environment_variables&gt;</span>\n</code></pre></div></div>\n\n<h2 id=\"galaxy-history-interaction\">Galaxy history interaction</h2>\n<p>We have demonstrated how to pass an input file to the Docker container. But what if the application needs to interact with the user’s Galaxy history? For example, if the user creates a file within the application. That’s where the environment variables created in the tool XML become useful.</p>\n\n<blockquote class=\"tip\">\n  <tip-title>Access histories in R</tip-title>\n  <p>From the <a href=\"https://github.com/galaxyproject/galaxy/blob/dev/tools/interactive/interactivetool_rstudio.xml\">R-Studio GxIT</a> we can see that there is <a href=\"https://github.com/hexylena/rGalaxyConnector\">an R library</a> that allows us to interact with Galaxy histories.</p>\n\n  <p>“The convenience functions <code class=\"language-plaintext highlighter-rouge\">gx_put()</code> and <code class=\"language-plaintext highlighter-rouge\">gx_get()</code> are available to you to interact with your current Galaxy history. You can save your workspace with <code class=\"language-plaintext highlighter-rouge\">gx_save()</code>”</p>\n\n  <p>Under the hood, this library uses <a href=\"https://github.com/bgruening/galaxy_ie_helpers\">galaxy_ie_helpers</a> - a Python interface to Galaxy histories written with <a href=\"https://github.com/galaxyproject/bioblend\">BioBlend</a>. You could also use BioBlend directly (or even the Galaxy REST API) if your GxIT requires a more flexible interface than these wrappers provide.</p>\n\n</blockquote>\n\n<h2 id=\"self-destruct-script\">Self-destruct script</h2>\n\n<p>Unlike regular tools that exit after the execution of the underlying command is complete, web applications will run indefinitely until terminated. With Galaxy’s legacy “Interactive Environments”, this used to result in “zombie” containers hanging around and clogging up the Galaxy server. You may notice a <code class=\"language-plaintext highlighter-rouge\">terminate.sh</code> script in some older GxITs as a workaround to this problem, but the new GxIT architecture handles container termination for you. This script is no longer required nor recommended.</p>\n\n<h1 id=\"troubleshooting\">Troubleshooting</h1>\n\n<p>Having issues with your Interactive Tool? Here are a few ideas for how to troubleshoot your application. Remember that Galaxy Interactive Tools are a work in progress, so feel free to get creative with your solutions here!</p>\n\n<ul>\n  <li>Getting an error in the Galaxy History? Click on the “view” icon to see details of the tool run, including the tool command, <code class=\"language-plaintext highlighter-rouge\">stdout</code> and <code class=\"language-plaintext highlighter-rouge\">stderr</code>.</li>\n  <li>If the tool’s <code class=\"language-plaintext highlighter-rouge\">stdout</code>/<code class=\"language-plaintext highlighter-rouge\">stderr</code> is not enough, consider modifying the Docker image to make it more verbose. Add print/log statements and assertions. Write an application log to a file that can be collected as Galaxy output.</li>\n  <li>Try running the container with Docker directly on your development machine. If the application doesn’t work independently, it certainly won’t work inside Galaxy!</li>\n  <li>If you need to debug the Docker container itself, it can be useful to write output/logging to a <a href=\"https://docs.docker.com/storage/volumes/\">mounted volume</a> that can be inspected after the tool has run.</li>\n  <li>You can also open a <code class=\"language-plaintext highlighter-rouge\">bash</code> terminal inside the container to check the container state while the application is running: <code class=\"language-plaintext highlighter-rouge\">docker exec -it mycontainer /bin/bash</code></li>\n</ul>\n"],"ref_slides":[],"video_library":{"tutorial":null,"slides":null,"demo":null,"both":null,"session":null},"hands_on":true,"slides":false,"mod_date":"2023-12-07 02:40:53 +0000","pub_date":"2022-03-02 09:20:19 +0000","version":68,"api":"https://training.galaxyproject.org/training-material/api/topics/dev/tutorials/interactive-tools/tutorial.json","tools":[],"supported_servers":[],"topic_name_human":"Development in Galaxy","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial"}