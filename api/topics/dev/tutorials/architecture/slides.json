{"layout":"tutorial_slides","logo":"GTN","title":"Galaxy Code Architecture","questions":["How is the Galaxy code structured?","What do the various other projects related to Galaxy do?","What happens when I start Galaxy?"],"objectives":["Explore various aspects of the Galaxy codebase.","Understand the various top-level files and modules in Galaxy.","Understand how dependencies work in Galaxy's frontend and backend."],"time_estimation":"150m","requirements":null,"key_points":["Galaxy runs out of the box and fetches all needed dependencies.","Running Galaxy in production requires configuration.","The architecture is designed to be pluggable and extensible.","Learn more about different Galaxy aspects in our [development section](/topics/dev/)."],"subtopic":"core","contributors":["jmchilton","bgruening"],"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"S00043","url":"/topics/dev/tutorials/architecture/slides.html","topic_name":"dev","tutorial_name":"architecture","dir":"topics/dev/tutorials/architecture","symlink":null,"id":"dev/architecture","ref_tutorials":[],"ref_slides":["layout: true\nname: left-aligned\nclass: left, middle\n\n---\n\nlayout: true\nclass: center, middle\n\n---\n\nlayout: introduction_slides\ntopic_name: Galaxy Architecture\n\n# Galaxy Architecture\n\n---\n\n### Please Interrupt!\n\nWe're here to answer your questions about Galaxy architecture!\n\n---\n\nclass: enlarge200\n\n**Chat:** [galaxyproject Lobby](https://matrix.to/#/#galaxyproject_Lobby:gitter.im)\n\n**GitHub:** [github.com/galaxyproject ](https://github.com/galaxyproject)\n\n**Twitter:** #usegalaxy, @galaxyproject\n\n---\n\n## The **/galaxyproject** projects\n\n*The architecture of the ecosystem.*\n\n???\n\nToo many to cover all but we'll cover some of the big ones in a few big\ncategories. User-facing applications, projects for Galaxy plugin developers,\nand projects for Galaxy administrators.\n\n---\n\n# Lots of Gitter actually\n\n![galaxyproject gitter landing](../../images/gitter_galaxyproject.png)\n\nhttps://gitter.im/galaxyproject\n\n---\n\nMore links we'll mention as we go through the slides:\n\n- https://matrix.to/#/#galaxyproject_Lobby:gitter.im\n- https://matrix.to/#/#galaxyproject_dev:gitter.im\n- https://matrix.to/#/#galaxyproject_admins:gitter.im\n- https://matrix.to/#/#galaxyproject_FederatedGalaxy:gitter.im\n- https://matrix.to/#/#galaxyproject_bioblend:gitter.im\n- https://matrix.to/#/#galaxyproject_ephemeris:gitter.im\n- https://matrix.to/#/#usegalaxy-eu_Lobby:gitter.im\n- https://matrix.to/#/#galaxy-iuc_iuc:gitter.im\n- https://matrix.to/#/#bgruening_docker-galaxy-stable:gitter.im\n- https://matrix.to/#/#Galaxy-Training-Network_Lobby:gitter.im\n- https://matrix.to/#/#biocontainers_Lobby:gitter.im\n- https://matrix.to/#/#bioconda_Lobby:gitter.im\n\nWorking group chats linked at https://galaxyproject.org/community/wg/.\n\n---\n\nclass: enlarge200\n\n**User-Facing Applications**\n\n---\n\nclass: enlarge150\n\n[galaxyproject/**galaxy** ](https://github.com/galaxyproject/galaxy)\n\nThe main Galaxy application.\n\nWeb interface, database model, job running, etc...\n\nAlso includes other web applications including the **ToolShed**.\n\n---\n\nclass: enlarge150\n\n[galaxyproject/**cloudlaunch** ](https://github.com/galaxyproject/cloudlaunch)\n\nCloudLaunch web application to make it easy to launch images on a cloud, drives *https://launch.usegalaxy.org*\n\n---\n\nclass: enlarge150\n\n[galaxyproject/**training-material** ](https://github.com/galaxyproject/training-material)\n\n![logo](/training-material/assets/images/GTNLogo1000.png)\n\nGalaxy training material for scientists, developers, and admins. Powers *https://training.galaxyproject.org/*.\n\n---\n\nclass: enlarge150\n\n[galaxyproject/**hub** ](https://github.com/galaxyproject/galaxy-hub)\n\nThe Galaxy Hub is the community and documentation hub for the Galaxy Project. It is maintained by the community through this GitHub repository. It is a static website built using the metalsmith static site generator.\n\nPowers *https://galaxyproject.org/*.\n\n---\n\nclass: enlarge150\n\n[galaxyproject/**bioblend** ](https://github.com/galaxyproject/bioblend)\n\nOfficial Python client for the Galaxy, ToolShed, and CloudMan APIs.\n\nBest documented path to scripting the Galaxy API.\n\n---\n\nclass: enlarge150\n\n- [galaxyproject/**blend4php**](https://github.com/galaxyproject/blend4php)\n- [galaxyproject/**blend4j**](https://github.com/galaxyproject/blend4j)\n- [**chapmanb/clj-blend**](https://github.com/chapmanb/clj-blend)\n\nGalaxy API bindings for other languages, less actively maintained.\n\n---\n\nclass: enlarge150\n\n[galaxyproject/**cloudman**](https://github.com/galaxyproject/cloudman)\n\nGalaxy CloudMan - a web application which manages a Galaxy Kubernetes cluster in\nthe cloud.\n\n---\n\nclass: enlarge150\n\n[**bgruening/docker-galaxy-stable** ](https://github.com/bgruening/docker-galaxy-stable)\n\nHigh quality Docker containers for stable Galaxy environments.\n\nReleases corresponding to each new version of Galaxy.\n\nMany flavors available.\n\n---\n\nclass: white\n![Docker](../../images/docker-chart.png)\n\n---\n\nclass: enlarge200\n\n**For Plugin Developers**\n\n---\n\n[galaxyproject/**tools-iuc** ](https://github.com/galaxyproject/tools-iuc)\n\nGalaxy tools maintained by the *IUC* (\"Intergalactic Utilities Commission\").\n\nA variety of tools, generally of high quality including many of the core tools for Galaxy main.\n\nDemonstrates *current tool development best practices* - development on\ngithub and then deployed to test/main ToolSheds\n\n[galaxyproject/**tools-devteam** ](https://github.com/galaxyproject/tools-devteam)\n\nMany older tools appearing on usegalaxy.org.\n\n---\n\n### Tools Aside - More Repositories\n\nOther repositories with high quality tools:\n\n * [Björn Grüning's repo](https://github.com/bgruening/galaxytools)\n * Peter Cock's repos:\n   * [blast repo](https://github.com/peterjc/galaxy_blast)\n   * [pico repo](https://github.com/peterjc/pico_galaxy)\n   * [mira repo](https://github.com/peterjc/galaxy_mira)\n * [ENCODE tools](https://github.com/modENCODE-DCC/Galaxy)\n * [Biopython repo](https://github.com/biopython/galaxy_packages)\n * [Galaxy Proteomics repo](https://github.com/galaxyproteomics/tools-galaxyp)\n * [Greg von Kuster's repo](https://github.com/gregvonkuster/galaxy-csg)\n * [TGAC repo](https://github.com/TGAC/tgac-galaxytools)\n * [AAFC-MBB Canada repo](https://github.com/AAFC-MBB/Galaxy/tree/master/wrappers)\n * [Mark Einon's repo](https://gitlab.com/einonm/galaxy-tools)\n\n---\n\n[galaxyproject/**iwc** ](https://github.com/galaxyproject/iwc)\n\nIntergalactic Workflow Commission. Hosting workflows and defining best practices for publishing workflows.\n\nhttps://matrix.to/#/#galaxyproject_iwc:gitter.im\n\n---\n\nclass: enlarge150\n\n[galaxyproject/**planemo** ](https://github.com/galaxyproject/planemo)\n\nCommand-line utilities to assist in the development of Galaxy tools and workflows.\nLinting, testing, deploying to ToolSheds...\n\n*The best practice approach for Galaxy tool development!*\n\n[galaxyproject/**planemo-machine** ](https://github.com/galaxyproject/planemo-machine)\n\nBuilds Galaxy environments for Galaxy tool development including Docker\ncontainer, virtual machines, Google compute images\n\n---\n\n[galaxyproject/**galaxy-language-server** ](https://github.com/galaxyproject/galaxy-language-server)\n\n![Galaxy Language Server](https://github.com/galaxyproject/galaxy-language-server/raw/assets/snippets.gif)\n\nLanguage server implementation for Galaxy tools. Visual Studio Code extension for tool development.\n\nTest execution, code completion, best practices, documentation tooltips, etc..\n\n---\n\nclass: enlarge150\n\n[galaxyproject/**starforge** ](https://github.com/galaxyproject/starforge)\n\n![StarForge logo](https://raw.githubusercontent.com/galaxyproject/starforge/master/docs/starforge_logo.png)\n\nBuild Galaxy framework dependencies as Python wheels when needed.\n\n---\n\nclass: enlarge150\n\n[galaxyproject/**cargo-port** ](https://github.com/galaxyproject/cargo-port)\n\n![Cargo Port Logo](https://raw.githubusercontent.com/galaxyproject/cargo-port/master/media/cpc-plain-small.png)\n\nProvides stable URLs and caching for application links, etc.. An important layer for reproducibility but largely transparent.\n\n---\n\nclass: enlarge200\n\n**For Deployers and Admins**\n\n---\n\nclass: enlarge150\n\ngalaxyproject/**{ansible-\\*, \\*-playbook}**<br>\nusegalaxy-eu/**{ansible-\\*, \\*-playbook}**\n\n[Ansible](https://www.ansible.com/) components to automate almost every aspect of Galaxy installation and maintenance.\n\nAnsible is an advanced configuration management system\n\nThese playbooks are used to maintain Galaxy main, cloud and Docker images, virtual machines, ...\n\n---\n\nclass: enlarge150\n\n[galaxyproject/**gravity** ](https://github.com/galaxyproject/gravity)\n\nA process manager (supervisor) and management tools for Galaxy servers.\n\n`galaxyctl` which is used to manage the starting, stopping, and logging of Galaxy's various processes.\n\n`galaxy` which can be used to run a Galaxy server in the foreground.\n\n---\n\nclass: enlarge150\n\n[galaxyproject/**galaxy-helm** ](https://github.com/galaxyproject/galaxy-helm)\n\nKubernetes helm chart for deploying Galaxy. Leveraged by cloudlaunch and CloudMan but usable standalone.\n\n---\n\nclass: enlarge150\n\n[galaxyproject/**pulsar** ](https://github.com/galaxyproject/pulsar)\n\n![Pulsar Logo](https://galaxyproject.org/images/galaxy-logos/pulsar_transparent.png)\n\nDistributed job execution engine for Galaxy.\n\nStages data, scripts, configuration.\n\nCan run jobs on Windows machines.\n\nCan act as its own queuing system or access an existing cluster DRM.\n\n---\n\nclass: enlarge150\n\n[galaxyproject/**ephemeris** ](https://github.com/galaxyproject/ephemeris)\n\nLibrary and CLI for managing Galaxy plugins - tools, index data, and workflows.\n\nLayer on top of BioBlend building useful utilities for working with the Galaxy API from an administrator perspective.\n\n---\n\nclass: enlarge150\n\n[galaxyproject/**gxadmin** ](https://github.com/galaxyproject/gxadmin)\n\nHandy command-line utility for Galaxy administrators.\n\n---\n\nclass: enlarge150\n\n### ephemeris vs gxadmin\n\nEphemeris generally talks to the Galaxy API and is a pure Python project, gxadmin talks directly to the Galaxy database and relevant files.\n\n---\n\n### Total Perspective Vortex\n\n[galaxyproject/total-perspective-vortex **](https://github.com/galaxyproject/total-perspective-vortex)\n\n![TPV Logo](https://raw.githubusercontent.com/galaxyproject/total-perspective-vortex/main/docs/images/tpv-logo-wide.png)\n\nTotalPerspectiveVortex (TPV) provides an installable set of dynamic rules for the Galaxy application that can route entities (Tools, Users, Roles) to appropriate job destinations based on a configurable yaml file.\n\n---\n\nclass: enlarge150\n\n[**usegalaxy-eu/tiaas2 **](https://github.com/usegalaxy-eu/tiaas2)\n\n![TIAAS Logo](https://raw.githubusercontent.com/usegalaxy-eu/tiaas2/master/images/tiaas-logo.png)\n\nDjango-based infrastructure for creating pools of users, etc.. for training events and connecting them to Galaxy.\n\n---\n\n### Some (out of many) friends of the project\n\n![Bioconda](../../../../shared/images/conda_logo.png)\n\n![Biocontainers](../../images/biocontainers.png)\n\nCheck out dev training materials \"Tool Dependencies and Conda\" and \"Tool Dependencies and Containers\"\nfor more context.\n\n---\n\n## Putting it all together\n\n![Large graphic showing different domains and where different portions of the Galaxy community can be found from Biology, Dev, Packaging, Deployment, Documentation, Training, and Support.](../../images/galaxy_main_scheme.png)\n\n???\n\nTODO: cover gxformat2\n\n---\n\nclass: enlarge200\n\n[galaxyproject/**galaxy** ](https://github.com/galaxyproject/galaxy)\n\nThe rest of the slides will focus on the core repository.\n\n---\n\n## Project Management\n\n*The social architecture of the project.*\n\n---\n\nclass: enlarge200\n\n### Contributing Quick Start\n\nContribution guidelines: https://bit.ly/gx-CONTRIBUTING-md\n\n---\n\nclass: enlarge200\n\n### Pull Requests\n\nNearly all changes should come in through GitHub Pull Requests.\n\nThe exceptions include security patches, packaging and release process artifacts, and backporting fixes to older releases.\n\n---\n\nclass: enlarge150\n\n### Security (SECURITY_POLICY.md)\n\nIn brief, to responsibly report security issues e-mail\n\n[`galaxy-committers@lists.galaxyproject.org`](mailto:galaxy-committers@lists.galaxyproject.org)\n\nCheck out the full policy in [SECURITY_POLICY.md](https://github.com/galaxyproject/galaxy/blob/dev/SECURITY_POLICY.md).\n\n---\n\n### Branches\n\n![Branches](../../images/core_branches.plantuml.svg)\n\n---\n\nclass: enlarge150\n\n### Committers & Open Goverance\n\nAll repository goverance is done in the open on GitHub via Pull Requests and voting. Galaxy goes beyond open source to open goverance.\n\n> \"The committers group is the group of trusted developers and advocates who manage the core Galaxy code base.\"\n\n> \"Galaxy Project committers are the only individuals who may commit to the core Galaxy code base.\"\n\n> \"Committers may participate in all formal votes, including votes to modify team membership, merge pull requests, and modify [policies].\"\n\n---\n\nclass: enlarge150\n\n### Working Groups\n\nhttps://galaxyproject.org/community/wg/\n\n> \"Galaxy has grown a lot over the years, going from a project at one university in 2005 to the global community it is today. Several parts of the Galaxy ecosystem have become avowedly and obviously community driven during that time, including tools, code, training, and several other international efforts. Galaxy Working Groups push this global model to other areas of Galaxy as well.\"\n\n---\n\nclass: enlarge200\n\n### Code of Conduct (CODE_OF_CONDUCT.md)\n\nDescribes expectations, encourages diversity, and describes how to report issues such as unacceptable behavior.\n\nCheck out the full policy in [CODE_OF_CONDUCT.md](https://github.com/galaxyproject/galaxy/blob/dev/CODE_OF_CONDUCT.md).\n\n---\n\nclass: enlarge150\n\n### Release Process\n\nNew large releases are issued roughly every 4 months. The process is guided by an auto-created\nself documenting release issue.\n\nCheck out the [21.05 release issue](https://github.com/galaxyproject/galaxy/issues/11770) as an example.\n\nWorking groups create roadmaps aligned with each release and coordinated with project leadership.\n\n---\n\nclass: enlarge150\n\n### Organizing Issues and Pull Requests\n\nExtensive use of Github tags are used to try to organize the numerous issues and\npull requests of the Galaxy repository.\n\nThe tags are described in detail in [issues.rst](https://github.com/galaxyproject/galaxy/blob/dev/doc/source/project/issues.rst).\n\n---\n\n### Continuous Integration (CI)\n\n![Galaxy CI](../../images/core_ci.png)\n\nIf you get Red Xs - take a second to ponder whether they make sense and don't be afraid to ask, it is a complex system with a lot of noise!\n\n---\n\n### Linting and Code Formatting\n\nPart of the Galaxy CI process includes linting and checking the format of both the backend Python and frontend ES 6 code.\nThis linting process captures many common problems as well as enforcing a common code style.\n\nThe output reports from the CI process are relatively straightforward, but it is a good process\nto lint changes and formatting your code before opening pull requests for them. \n\nExecute the `format` make command to format the backend code and then use `tox`\nto lint the formatted code.\n\n```\n$ make format\n$ tox -e lint\n```\n\nExecute the `client-format` make command to format the code and then the `client-lint` command\nto lint the formatted code.\n\n```\n$ make client-format\n$ make client-lint\n```\n\n---\n\n### mypy and Python Types\n\nStarting with release 21.01, portions of the Galaxy backend have\nPython 3 type annotations and static checking is performed as part of\nCI. Imported library types are not enforcing and\n[mypy](https://mypy.readthedocs.io/en/stable/) does a fair job\ninferring types in most situations, so this process should be\nrelatively transparent to contributors.\n\nIf there are problems with typing, the CI produces explicit output\nabout how to correct problems. These problems generally just require a\nsingle type annotation. Feel free to request help on a pull request\nfor what that should look like.\n\nTo run a subset of the python type checking locally, `tox` again can\nbe used:\n\n```\n$ tox -e mypy\n```\n\nA quick overview about why to add type annotations to Python code and how to use\nthem can be found on this [blog post](https://dev.to/dstarner/using-pythons-type-annotations-4cfe).\nAdditional useful resources include [this cheat sheet from mypy](https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html)\nand the Python docs for the [typing module](https://docs.python.org/3/library/typing.html).\n\n---\n\nclass: enlarge200\n\n### Development Environments\n\nGalaxy developers use a wide range of IDEs and we don't offer any formal recommendation of one over another.\n\nHowever, Marius has assembled some documentation on debugging the [Galaxy server](https://docs.galaxyproject.org/en/master/dev/debugging_galaxy.html) and [tests](https://docs.galaxyproject.org/en/master/dev/debugging_tests.html) using VS Code.\n\n---\n\n### Development Environment - Gitpod\n\nGalaxy does have a Gitpod configuration that is enabled to allow editing and testing PRs https://www.gitpod.io/.\n\nVideo from Marius presenting Gitpod at the Galaxy Developer Roundtable (https://www.youtube.com/watch?v=3e71DFg3gsw#t=39m0s)\n\n---\n\n### docs.galaxyproject.org\n\n![docs.galaxyproject.org](../../images/core_docs.png)\n\nAll these documents as well as versions code and deployment documentation and release notes\ncan be found at [docs.galaxyproject.org](https://docs.galaxyproject.org).\n\n---\n\n## Principles\n\n*The guiding principles of the core code architecture.*\n\n---\n\n### Aspirational Principles of Galaxy Architecture\n\nWhereas the architecture of the frontend (Web UI) aims for consistency and is\nhighly opinionated, the backend (Python server) is guided by flexibility and is meant to be driven by plugins whenever possible.\n\n???\n\nThough an imperfect abstraction... maybe it is beneficial to think of the organizational\nprinciples that guide frontend and backend development of Galaxy as\ndiametrically opposite.\n\nThe frontend architecture is guided by the principle that the end user experience\nshould be as simple and consistent as possible. The backend has been deployed at\nso many different sites and targeting so many different technologies - that\nflexibility is paramount.\n\n---\n\n### An Opinionated Frontend\n\n- The target audience is a *bench scientist* - no knowledge of programming, paths, or command lines should be assumed.\n- Consistent colors, fonts, themes, etc...\n- Reusable components for presenting common widgets - from the generic (forms and grids) to the specific (tools and histories).\n- Tied to specific technologies:\n  - Implemented in JavaScript (ES6)\n  - Built with [webpack](https://webpack.js.org/)\n  - [Vue.js](https://vuejs.org/) for component definitions\n\n---\n\n### A Plugin Driven Backend\n\nGalaxy's backend is in many ways driven by *pluggable interfaces* and\ncan be adapted to many different technologies.\n\n- SQLAlchemy allows using SQLite, PostgreSQL, or MySQL (sort of) for your database.\n- Many different cluster backends or job managers are supported.\n- Different frontend proxies (e.g. nginx) are supported as well as web\n  application containers (e.g. uWSGI, gunicorn).\n- Different storage strategies and technologies are supported (e.g. S3, iRODS).\n- Tool definitions, job metrics, stat middleware, tool dependency resolution, workflow modules,\n  datatype definitions are all plugin driven.\n\n???\n\nIf the chief architectural principle guiding the frontend is a fast and accessible\nexperience for the bench scientist, perhaps for the backend it is allowing\ndeployment on many different platforms and a different scales.\n\n---\n\n### A Plugin Driven Backend but...\n\nGalaxy has long been guided by the principle that cloning it and calling\nthe `run.sh` should \"just work\" and should work quickly.\n\nSo by default Galaxy does not require:\n\n - Compilation - it fetches *binary wheels* for your platform.\n - A job manager - Galaxy can act as one.\n - An external database server - Galaxy can use an sqlite database.\n - A web proxy or external Python web server.\n\n---\n\nclass: enlarge200\n\n### In other words...\n\nThe Galaxy frontend is architected with the bench scientist in mind first and foremost,\nthe Galaxy backend is architected with Galaxy administrators in mind first and foremost.\n\n???\n\nTODO: slide connecting architecture to people here\n\n---\n\n## Files and Directories\n\n*The physical architecture of the Galaxy code.*\n\n---\n\n### Project Docs\n\n![Project Files](../../images/core_files_project_docs.plantuml.svg)\n\n---\n\n### Code\n\n![Code](../../images/core_files_code.plantuml.svg)\n\n---\n\n### Scripts\n\n![Scripts](../../images/core_files_scripts.plantuml.svg)\n\n---\n\n### Test Sources\n\n![Test Source Files](../../images/core_files_test.plantuml.svg)\n\n---\n\n### Continuous Integration\n\n![Continuous Integration Files](../../images/core_files_ci.plantuml.svg)\n\n---\n\n### One Repository, Two Views of a Project\n\n![Two Views of Galaxy Python Project](../../images/core_files_code_python_2_views.plantuml.svg)\n\n`lib` contains a single monolithic view of the `galaxy` namespace.\n\nEach sub-directory of `packages` contains a logical subset of this `galaxy` namespace. Directory symbolic links are used to ensure the same files are used.\n\n???\n\nTODO: a slide before this one describing Python modules and how they map to files\nusing galaxy.util, galaxy.model.mapping, and galaxy.web.framework.\n\n---\n\n### Package Structure\n\n![package structure](../../images/core_packages.plantuml.svg)\n\n---\n\n### PyPI\n\n![galaxy-tool-util on PyPI](../../images/core_tool_util_pypi.png)\n\n---\n\n![Package Files](../../images/core_files_code_package.plantuml.svg)\n\n---\n\n## Web Frameworks\n\n*The architecture of an interaction.*\n\n---\n\nclass: reduce70\n\n![Client-Server Communications](../../images/server_client_vuejs.plantuml.svg)\n\nBits and pieces of older client technologies appear throughout - ranging from Python\nmako templates to generate HTML, lower-level jQuery, and lots of Backbone legacy MVC.\n\n---\n\n![Processing requests on the server](../../images/asgi_app.plantuml.svg)\n\nExpanding the right side of that diagram. We will move through the components left to right.\n\n---\n\nclass: enlarge120\ntemplate: left-aligned\n\n### ASGI - Application\n\nSpiritual successor to\n[WSGI](https://www.python.org/dev/peps/pep-0333/). An ASGI application\nis an async callable that takes in a `scope` (`dict` describing the\nconnection), `send` (an async callable to respond to events via),\nand `receive` (an async callable to receive messages).\n\n```python\nasync def application(scope, receive, send):\n    event = await receive()\n    ...\n    await send({\"type\": \"http.response.body\", ...})\n```\n\nCheckout [ASGI documentation](https://asgi.readthedocs.io/) for more details.\n\n---\n\ntemplate: left-aligned\n\n### ASGI & Starlette Low-level Example\n\nWe will talk a lot about Galaxy and FastAPI - but much of its\nplumbing is just aliases for starlette ASGI handling.\n\n```python\nfrom starlette.responses import PlainTextResponse\n\nasync def app(scope, receive, send):\n    assert scope['type'] == \"http\"\n    response = PlainTextResponse('Hello, world!')\n    await response(scope, receive, send)\n```\n\nIf this is placed in a file called `example.py` with Starlette on\nthe Python path, the application server uvicorn can then host this\napplication with the following shell command:\n\n```\n$ uvicorn example:app\nINFO: Started server process [11509]\nINFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n```\n\nExample from [starlette.io](https://www.starlette.io/).\n\n---\n\ntemplate: left-aligned\n\n### ASGI - Starlette High-level Example\n\nBuilding a higher-level `example.py` with Starlette.\n\n\n```python\nfrom starlette.applications import Starlette\nfrom starlette.responses import JSONResponse\nfrom starlette.routing import Route\n\n\nasync def homepage(request):\n    return JSONResponse({'hello': 'world'})\n\n\napp = Starlette(debug=True, routes=[\n    Route('/', homepage),\n])\n```\n\nA small framework for building web applications.\n\n---\n\ntemplate: left-aligned\n\n### ASGI - FastAPI\n\nFrom https://github.com/tiangolo/fastapi/blob/master/fastapi/applications.py\n\n```python\n...\nfrom starlette.applications import Starlette\n...\n\nclass FastAPI(Starlette):\n    ...\n```\n\nFastAPI (the library and the application base) extends starlette framework with features for building APIs. These include data\nvalidation, serialization, documentation generation.\n\n---\n\n![Processing requests on the server](../../images/asgi_app.plantuml.svg)\n\n---\n\ntemplate: left-aligned\n\n### FastAPI `__call__`\n\nhttps://github.com/tiangolo/fastapi/blob/master/fastapi/applications.py\n\n```python\nasync def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n    if self.root_path:\n        scope[\"root_path\"] = self.root_path\n    if AsyncExitStack:\n        async with AsyncExitStack() as stack:\n             scope[\"fastapi_astack\"] = stack\n             await super().__call__(scope, receive, send)\n    else:\n        await super().__call__(scope, receive, send)  # pragma: no cover\n```\n\nA light wrapper around Starlette's call entry point.\n\n---\n\ntemplate: left-aligned\n\n### Starlette `__call__`\n\nhttps://github.com/encode/starlette/blob/master/starlette/applications.py\n\n```python\nasync def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n   scope[\"app\"] = self\n   await self.middleware_stack(scope, receive, send)\n```\n\nWalks through Starlette middleware.\n\n---\n\ntemplate: left-aligned\n\n### Starlette `build_middleware_stack`\n\nhttps://github.com/encode/starlette/blob/master/starlette/applications.py\n\n```python\ndef build_middleware_stack(self) -> ASGIApp:\n    ...\n\n    app = self.router\n    for cls, options in reversed(middleware):\n        app = cls(app=app, **options)\n    return app\n```\n\nStart with the router and surround it with each layer of configured middleware.\n\n---\n\ntemplate: left-aligned\nclass: enlarge150\n\n### ASGI Middleware\n\n> It is possible to have ASGI “middleware” - code that plays the role of both server and application, taking in a scope and the send/receive awaitable callables, potentially modifying them, and then calling an inner application.\n\nhttps://asgi.readthedocs.io/en/latest/specs/main.html#middleware\n\n---\n\ntemplate: left-aligned\nclass: enlarge150\n\n### Starlette Middleware\n\n> Starlette includes several middleware classes for adding behavior that is applied across your entire application. These are all implemented as standard ASGI middleware classes, and can be applied either to Starlette or to any other ASGI application.\n\nhttps://www.starlette.io/middleware/\n\n---\n\ntemplate: left-aligned\n\n### Starlette `build_middleware_stack`\n\nhttps://github.com/encode/starlette/blob/master/starlette/applications.py\n\n```python\ndef build_middleware_stack(self) -> ASGIApp:\n    ...\n\n    app = self.router\n    for cls, options in reversed(middleware):\n        app = cls(app=app, **options)\n    return app\n```\n\nNotice the inner most layer is the router.\n\n---\n\ntemplate: left-aligned\n\n### FastAPI Router Initialization\n\nhttps://github.com/tiangolo/fastapi/blob/master/fastapi/applications.py\n\n```python\nclass FastAPI(Starlette):\n    def __init__(self, ...):\n        self.router: routing.APIRouter = routing.APIRouter(\n            routes=routes,\n        )\n```\n\n---\n\n### FastAPI Router\n\n```python\nfrom starlette import routing\n\nclass APIRouter(routing.Router):\n   ...\n```\n\n---\n\n### Starlette Router\n\nhttps://github.com/encode/starlette/blob/master/starlette/routing.py\n\n```python\nasync def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n   ...\n   for route in self.routes:\n       # Determine if any route matches the incoming scope,\n       # and hand over to the matching route if found.\n       match, child_scope = route.matches(scope)\n       if match == Match.FULL:\n           scope.update(child_scope)\n           await route.handle(scope, receive, send)\n           return\n       ...\n```\n\nhttps://www.starlette.io/routing/\n\n---\n\n![Router Class Diagram](../../images/routers.plantuml.svg)\n\n- https://www.starlette.io/routing/\n- https://fastapi.tiangolo.com/tutorial/bigger-applications/#apirouter\n- https://fastapi-utils.davidmontague.xyz/user-guide/inferring-router/\n\n---\n\nclass: enlarge200\n\nIn order to understand how the routing classes are setup within Galaxy,\nlets step back and look really quickly at how Galaxy's FastAPI\napplication (ASGI endpoint) is constructed.\n\n---\n\n### FastAPI Factory\n\n`lib/galaxy/webapps/galaxy/fast_factory.py`\n\n```python\ndef factory():\n    props = WebappSetupProps(\n        app_name='galaxy',\n        default_section_name=DEFAULT_CONFIG_SECTION,\n        env_config_file='GALAXY_CONFIG_FILE',\n        env_config_section='GALAXY_CONFIG_SECTION',\n        check_galaxy_root=True\n    )\n    config_provider = WebappConfigResolver(props)\n    config = config_provider.resolve_config()\n    gx_webapp, gx_app = app_pair(\n        global_conf=config.global_conf,\n        load_app_kwds=config.load_app_kwds,\n        wsgi_preflight=config.wsgi_preflight\n    )\n    return initialize_fast_app(gx_webapp, gx_app)\n```\n\n---\n\n### FastAPI Application\n\n`lib/galaxy/webapps/galaxy/fast_app.py`\n\n```python\ndef initialize_fast_app(gx_webapp, gx_app):\n    app = FastAPI(\n        title=\"Galaxy API\",\n        docs_url=\"/api/docs\",\n        openapi_tags=api_tags_metadata,\n    )\n    add_exception_handler(app)\n    add_galaxy_middleware(app, gx_app)\n    add_request_id_middleware(app)\n    include_all_package_routers(app, 'galaxy.webapps.galaxy.api')\n    wsgi_handler = WSGIMiddleware(gx_webapp)\n    app.mount('/', wsgi_handler)\n    return app\n```\n\n---\n\n### Finding API Routers\n\nFollowing this line:\n\n`include_all_package_routers(app, 'galaxy.webapps.galaxy.api')`\n\nto the file\n\n`lib/galaxy/webapps/base/api.py`\n\n```python\ndef include_all_package_routers(app: FastAPI, package_name: str):\n    for _, module in walk_controller_modules(package_name):\n        router = getattr(module, \"router\", None)\n        if router:\n            app.include_router(router)\n```\n\n---\n\nclass: reduce70\n\n### Routing inside the Application\n\n```python\nrouter = Router(tags=['tags'])\n\n\n@router.cbv\nclass FastAPITags:\n    manager: TagsManager = depends(TagsManager)\n\n    @router.put(\n        '/api/tags',\n        summary=\"Apply a new set of tags to an item.\",\n        status_code=status.HTTP_204_NO_CONTENT,\n    )\n    def update(\n        self,\n        trans: ProvidesUserContext = DependsOnTrans,\n        payload: ItemTagsPayload = Body(\n            ...,  # Required\n            title=\"Payload\",\n            description=\"Request body containing the item and the tags to be assigned.\",\n        ),\n    ):\n        \"\"\"Replaces the tags associated with an item with the new ones specified in the payload.\n\n        - The previous tags will be __deleted__.\n        - If no tags are provided in the request body, the currently associated tags will also be __deleted__.\n        \"\"\"\n        self.manager.update(trans, payload)\n```\n\n---\n\n![Router Class Diagram](../../images/routers.plantuml.svg)\n\n- https://www.starlette.io/routing/\n- https://fastapi.tiangolo.com/tutorial/bigger-applications/#apirouter\n- https://fastapi-utils.davidmontague.xyz/user-guide/inferring-router/\n\n\n---\n\n### WSGI Fallback\n\nBack to `initialize_fast_app`, two of the final lines were as follows:\n\n```python\nwsgi_handler = WSGIMiddleware(gx_webapp)\napp.mount('/', wsgi_handler)\n```\n\nThis effectively provides a fallback to our legacy WSGI application.\n\n---\n\n### WSGI\n\n- Python interface for web servers defined by PEP 333 - https://www.python.org/dev/peps/pep-0333/.\n- Galaxy tends to favor uWSGI, but other options such as Gunicorn and Paste can be used to host the application.\n  - https://uwsgi-docs.readthedocs.io/ (a million bells and whistles, highly performant, a bit brittle)\n  - https://gunicorn.org/ (simpler, more standard Python 3 WSGI server)\n  - https://bitbucket.org/ianb/paste (more of legacy interest, but still heavily used in testing for instance)\n\n---\n\n![Processing requests on the server](../../images/wsgi_app.plantuml.svg)\n\n---\n\ntemplate: left-aligned\n\n### WSGI Middleware\n\nA WSGI function:\n\n`def app(environ, start_response):`\n\n- Middleware act as filters, modify the `environ` and then pass through to the next webapp\n- Galaxy uses several middleware components defined in the `wrap_in_middleware`\n  function of `galaxy.webapps.galaxy.buildapp`.\n\n---\n\ntemplate: left-aligned\n\n### Galaxy's WSGI Middleware\n\nMiddleware configured in `galaxy.webapps.galaxy.buildapp#wrap_in_middleware`.\n\n- `paste.httpexceptions#make_middleware`\n- `galaxy.web.framework.middleware.remoteuser#RemoteUser` (if configured)\n- `paste.recursive#RecursiveMiddleware`\n- `galaxy.web.framework.middleware.sentry#Sentry` (if configured)\n- Various debugging middleware (linting, interactive exceptions, etc...)\n- `galaxy.web.framework.middleware.statsd#StatsdMiddleware` (if configured)\n- `galaxy.web.framework.middleware.xforwardedhost#XForwardedHostMiddleware`\n- `galaxy.web.framework.middleware.request_id#RequestIDMiddleware`\n\n---\n\n![Processing requests on the server (WSGI)](../../images/wsgi_app.plantuml.svg)\n\n---\n\n### Instances\n\n![webapp](../../images/webapp.plantuml.svg)\n\n---\n\n### Classes\n\n![GalaxyWebApplication class diagram](../../images/webapp_classes.plantuml.svg)\n\n---\n\ntemplate: left-aligned\n\n### Routes\n\nSetup on `webapp` in `galaxy.webapps.galaxy.buildapp.py`.\n\n```python\nwebapp.add_route(\n    '/datasets/:dataset_id/display/{filename:.+?}',\n    controller='dataset', action='display',\n    dataset_id=None, filename=None\n)\n```\n\nURL `/datasets/278043/display` matches this route, so `handle_request` will\n\n- lookup the controller named “dataset”\n- look for a method named “display” that is exposed\n- call it, passing dataset_id and filename as keyword arg\n\nUses popular Routes library (https://pypi.python.org/pypi/Routes).\n\n---\n\ntemplate: left-aligned\n\nSimplified `handle_request` from `lib/galaxy/web/framework/base.py`.\n\n```python\ndef handle_request(self, environ, start_response):\n    path_info = environ.get( 'PATH_INFO', '' )\n    map = self.mapper.match( path_info, environ )\n    if path_info.startswith('/api'):\n        controllers = self.api_controllers\n    else:\n        controllers = self.controllers\n\n    trans = self.transaction_factory( environ )\n\n    controller_name = map.pop( 'controller', None )\n    controller = controllers.get( controller_name, None )\n\n    # Resolve action method on controller\n    action = map.pop( 'action', 'index' )\n    method = getattr( controller, action, None )\n\n    kwargs = trans.request.params.mixed()\n    # Read controller arguments from mapper match\n    kwargs.update( map )\n\n    body = method( trans, **kwargs )\n    # Body may be a file, string, etc... respond with it.\n```\n\n---\n\nclass: enlarge150\n\n### Controllers\n\nThree varieties\n\n1. FastAPI ASGI API controllers\n2. WSGI API controllers\n3. Legacy WSGI web controllers.\n\nIdeally each of these are *thin*. Focused on \"web things\" - adapting parameters and responses and move\n\"business logic\" to components not bound to web functionality.\n\n---\n\nclass: enlarge150\n\n### FastAPI Controllers\n\n- Found in `lib/galaxy/webapps/galaxy/controllers/api/`.\n- Consume and produce typed data using Python 3 type annotations, FastAPI helpers, and Pydantic models.\n- Router specifies HTTP verb (GET, POST, PUT, etc..) and how to parse path.\n\n---\n\nclass: reduce70\n\n### FastAPI Controller Example\n\n`lib/galaxy/webapps/galaxy/controllers/api/roles.py`\n\n```python\n@router.cbv\nclass FastAPIRoles:\n    role_manager: RoleManager = depends(RoleManager)\n\n    @router.get('/api/roles')\n    def index(self, trans: ProvidesUserContext = DependsOnTrans) -> RoleListModel:\n        roles = self.role_manager.list_displayable_roles(trans)\n        return RoleListModel(__root__=[role_to_model(trans, r) for r in roles])\n\n    @router.get('/api/roles/{id}')\n    def show(self, id: EncodedDatabaseIdField, trans: ProvidesUserContext = DependsOnTrans) -> RoleModel:\n        role_id = trans.app.security.decode_id(id)\n        role = self.role_manager.get(trans, role_id)\n        return role_to_model(trans, role)\n\n    @router.post(\"/api/roles\", require_admin=True)\n    def create(self, trans: ProvidesUserContext = DependsOnTrans, role_definition_model: RoleDefinitionModel = Body(...)) -> RoleModel:\n        role = self.role_manager.create_role(trans, role_definition_model)\n        return role_to_model(trans, role)\n```\n\n---\n\nclass: reduce70\n\n### FastAPI and Pydantic\n\n```python\nRoleIdField = Field(title=\"ID\", description=\"Encoded ID of the role\")\nRoleNameField = Field(title=\"Name\", description=\"Name of the role\")\nRoleDescriptionField = Field(title=\"Description\", description=\"Description of the role\")\n\n\nclass BasicRoleModel(BaseModel):\n    id: EncodedDatabaseIdField = RoleIdField\n    name: str = RoleNameField\n    type: str = Field(title=\"Type\", description=\"Type or category of the role\")\n\n\nclass RoleModel(BasicRoleModel):\n    description: str = RoleDescriptionField\n    url: str = Field(title=\"URL\", description=\"URL for the role\")\n    model_class: str = Field(title=\"Model class\", description=\"Database model class (Role)\")\n\n\nclass RoleDefinitionModel(BaseModel):\n    name: str = RoleNameField\n    description: str = RoleDescriptionField\n    user_ids: Optional[List[EncodedDatabaseIdField]] = Field(title=\"User IDs\", default=[])\n    group_ids: Optional[List[EncodedDatabaseIdField]] = Field(title=\"Group IDs\", default=[])\n```\n\n---\n\n### FastAPI and OpenAPI\n\n`FastAPI(title=\"Galaxy API\", docs_url=\"/api/docs\", ...)`\n\n![OpenAPI Docs from FastAPI at api/docs](../../images/core_api_docs.png)\n\n---\n\n![OpenAPI Docs from FastAPI at api/docs for roles](../../images/core_api_docs_roles.png)\n\n---\n\nclass: enlarge150\n\n### WSGI API Controllers\n\n- Also in `lib/galaxy/webapps/galaxy/controllers/api/`\n- Mirroring FastAPI controllers until FastAPI required (likely 21.09)\n- Exposed method take `trans` and request parameters and return a JSON response (possibly including Pydantic objects)\n\n---\n\nclass: reduce70\n\n### WSGI API Controller Example\n\n`lib/galaxy/webapps/galaxy/controllers/api/roles.py`\n\n```python\nclass RoleAPIController(BaseGalaxyAPIController):\n    role_manager: RoleManager = depends(RoleManager)\n\n    @web.expose_api\n    def index(self, trans: ProvidesUserContext, **kwd):\n        \"\"\"\n        GET /api/roles\n        Displays a collection (list) of roles.\n        \"\"\"\n        roles = self.role_manager.list_displayable_roles(trans)\n        return RoleListModel(__root__=[role_to_model(trans, r) for r in roles])\n\n    @web.expose_api\n    def show(self, trans: ProvidesUserContext, id: str, **kwd):\n        \"\"\"\n        GET /api/roles/{encoded_role_id}\n        Displays information about a role.\n        \"\"\"\n        role_id = decode_id(self.app, id)\n        role = self.role_manager.get(trans, role_id)\n        return role_to_model(trans, role)\n\n    @web.expose_api\n    @web.require_admin\n    def create(self, trans: ProvidesUserContext, payload, **kwd):\n        \"\"\"\n        POST /api/roles\n        Creates a new role.\n        \"\"\"\n        expand_json_keys(payload, [\"user_ids\", \"group_ids\"])\n        role_definition_model = RoleDefinitionModel(**payload)\n        role = self.role_manager.create_role(trans, role_definition_model)\n        return role_to_model(trans, role)\n```\n\n---\n\nclass: enlarge150\n\n### Legacy WSGI Controllers\n\n- `lib/galaxy/webapps/galaxy/controllers/`\n- Return arbitrary content - JSON, HTML, etc...\n- Render HTML components using [mako](http://www.makotemplates.org/) templates (see `templates/`)\n- The usage of these should continue to decrease over time.\n\n---\n\n## `app` and Dependency Injection\n\n*The architecture of connecting Galaxy components.*\n\n---\n\n![Big Interconnected App Python 2](../../images/app_py2.plantuml.svg)\n\n---\n\n### A God object\n\n> \"a God object is an object that knows too much or does too much. The God object is an example of an anti-pattern and a code smell.\"\n\nhttps://en.wikipedia.org/wiki/God_object\n\nNot only does `app` know and do too much, it is also used way too many places. Every interesting component, every controller, the web transaction, etc.. has a reference to `app`.\n\n---\n\n### A Typical Usage\n\n```python\nclass DatasetCollectionManager:\n\n     def __init__(self, app):\n        self.type_registry = DATASET_COLLECTION_TYPES_REGISTRY\n        self.collection_type_descriptions = COLLECTION_TYPE_DESCRIPTION_FACTORY\n        self.model = app.model\n        self.security = app.security\n\n        self.hda_manager = hdas.HDAManager(app)\n        self.history_manager = histories.HistoryManager(app)\n        self.tag_handler = tags.GalaxyTagHandler(app.model.context)\n        self.ldda_manager = lddas.LDDAManager(app)\n```\n\n---\n\n![Big Interconnected App Python 3 - no right](../../images/app_types_no_interface.plantuml.svg)\n\n---\n\n## Problematic Dependency Graph\n\n```python\nclass DatasetCollectionManager:\n\n     def __init__(self, app: UniverseApplication):\n        self.type_registry = DATASET_COLLECTION_TYPES_REGISTRY\n        self.collection_type_descriptions = COLLECTION_TYPE_DESCRIPTION_FACTORY\n        self.model = app.model\n        self.security = app.security\n\n        self.hda_manager = hdas.HDAManager(app)\n        self.history_manager = histories.HistoryManager(app)\n        self.tag_handler = tags.GalaxyTagHandler(app.model.context)\n        self.ldda_manager = lddas.LDDAManager(app)\n```\n\n`UniverseApplication` creates a `DatasetCollectionManager` for the application and `DatasetCollectionManager` imports and annotates\nthe `UniverseApplication` as a requirement. This creates an unfortunate dependency loop.\n\n**Dependencies should form a DAG (directed acyclic graph)**.\n\n---\n\n![Big Interconnected App with Python 3 Types](../../images/app_types.plantuml.svg)\n\n---\n\n## Why an Interface?\n\nDependencies now closer to a DAG - `DatasetCollectionManager` no longer annotated with the type `UniverseApplication`! Imports are cleaner.\n\n---\n\n## Benefits of Typing\n\n```python\nclass DatasetCollectionManager:\n\n     def __init__(self, app: StructuredApp):\n        self.type_registry = DATASET_COLLECTION_TYPES_REGISTRY\n        self.collection_type_descriptions = COLLECTION_TYPE_DESCRIPTION_FACTORY\n        self.model = app.model\n        self.security = app.security\n\n        self.hda_manager = hdas.HDAManager(app)\n        self.history_manager = histories.HistoryManager(app)\n        self.tag_handler = tags.GalaxyTagHandler(app.model.context)\n        self.ldda_manager = lddas.LDDAManager(app)\n```\n\n- mypy provides robust type checking.\n- IDE can provide hints to make developing this class and usage of this class easier.\n\n---\n\nclass: reduce90\n\n### Design Problems with Handling Dependencies Directly\n\nUsing app to construct a manager for dealing with dataset collections.\n\n```python\nclass DatasetCollectionManager:\n\n     def __init__(self, app: StructuredApp):\n        self.type_registry = DATASET_COLLECTION_TYPES_REGISTRY\n        self.collection_type_descriptions = COLLECTION_TYPE_DESCRIPTION_FACTORY\n        self.model = app.model\n        self.security = app.security\n\n        self.hda_manager = hdas.HDAManager(app)\n        self.history_manager = histories.HistoryManager(app)\n        self.tag_handler = tags.GalaxyTagHandler(app.model.context)\n        self.ldda_manager = lddas.LDDAManager(app)\n```\n\n- DatasetCollectionManager needs to know how to construct all the other managers it is using, not just their interface.\n- `app` has a instance of this class and `app` is used to construct and instance of this class - this circular dependency\n  chain results in brittleness and complexity in how to construct `app`.\n- `app` is very big and we're depending on a lot of it but not a large percent it. This makes typing less than ideal.\n\n---\n\nclass: reduce90\n\n### Testing Problems with Handling Dependencies Directly\n\n```python\nclass DatasetCollectionManager:\n\n     def __init__(self, app: StructuredApp):\n        self.type_registry = DATASET_COLLECTION_TYPES_REGISTRY\n        self.collection_type_descriptions = COLLECTION_TYPE_DESCRIPTION_FACTORY\n        self.model = app.model\n        self.security = app.security\n\n        self.hda_manager = hdas.HDAManager(app)\n        self.history_manager = histories.HistoryManager(app)\n        self.tag_handler = tags.GalaxyTagHandler(app.model.context)\n        self.ldda_manager = lddas.LDDAManager(app)\n```\n\n- Difficult to unit test properly\n  - What parts of app are being used?\n  - How do we construct a smaller app with just those pieces?\n  - How do we stub out classes cleanly when we're creating the dependent objects internally.\n\n---\n\nclass: reduce90\n\n### Design Benefits of Injecting Dependencies\n\n.code[```python\nclass DatasetCollectionManager:\n    def __init__(\n        self,\n        model: GalaxyModelMapping,\n        security: IdEncodingHelper,\n        hda_manager: HDAManager,\n        history_manager: HistoryManager,\n        tag_handler: GalaxyTagHandler,\n        ldda_manager: LDDAManager,\n    ):\n        self.type_registry = DATASET_COLLECTION_TYPES_REGISTRY\n        self.collection_type_descriptions = COLLECTION_TYPE_DESCRIPTION_FACTORY\n        self.model = model\n        self.security = security\n\n        self.hda_manager = hda_manager\n        self.history_manager = history_manager\n        self.tag_handler = tag_handler\n        self.ldda_manager = ldda_manager\n```]\n\n- We're no longer depending on `app`.\n- The type signature very clearly delineates what dependencies are required.\n- Unit testing can inject precise dependencies supplying only the behavior needed.\n\n---\n\n### Constructing the Object Is Still Brittle\n\n```python\nDatasetCollectionManager(\n    self.model,\n    self.security,\n    HDAManager(self),\n    HistoryManager(self),\n    GalaxyTagHandler(self.model.context),\n    LDDAManager(self)\n)\n```\n\n- The complexity in ordering of construction of `app` is still challenging.\n- The constructing code of this object still needs to know how to construct each dependency of the object.\n- The constructing code of this object needs to explicitly import all the types.\n\n---\n\nclass: enlarge150\n\n### What is Type-based Dependency Injection?\n\nA dependency injection **container** keeps tracks of singletons or recipes for how to construct each type. By\ndefault when it goes to construct an object, it can just ask the container for each dependency based on the\ntype signature of the class being constructed.\n\nIf an object declares it consumes a dependency of type `X` (e.g. `HDAManager`), just query the container\nrecursively for an object of type `X`.\n\n---\n\n### What happens to object construction?\n\nOnce all the dependencies have been type annotated properly and the needed singletons have been configured.\n\n```python\ndcm = DatasetCollectionManager(\n    self.model,\n    self.security,\n    HDAManager(self),\n    HistoryManager(self),\n    GalaxyTagHandler(self.model.context),\n    LDDAManager(self)\n)\n```\n\nbecomes\n\n```python\ndcm = container[DatasetCollectionManager]\n```\n\n---\n\nclass: enlarge150\n\n### Picking a Library\n\nMany of the existing DI libraries for Python predate widespread Python 3 and don't readily infer things based on types.\nThe benefits of typing and DI are both enhanced by the other - so it was important to pick one that could do type-based\ninjection.\n\nWe went with Lagom, but we've built abstractions that would make it very easy to switch.\n\n---\n\n### Lagom\n\n![Lagom Website](../../images/lagom_ss.png)\n\nhttps://lagom-di.readthedocs.io/en/latest/\n\n---\n\n### DI and Controllers - FastAPI\n\nFastAPI controllers allowed some basic dependency injection.\n\n```python\ndef get_tags_manager() -> TagsManager:\n    return TagsManager()\n\n\n@cbv(router)\nclass FastAPITags:\n    manager: TagsManager = Depends(get_tags_manager)\n    ...\n```\n\nDependency injection allows for type checking but doesn't use type inference (requires factory functions, etc..)\n\nhttps://fastapi.tiangolo.com/tutorial/dependencies/\n\n---\n\n### DI and Controllers - FastAPI Limitations\n\nAlso we have two different controller styles and only the new FastAPI allowed dependency injection.\n\n```python\ndef get_tags_manager() -> TagsManager:\n    return TagsManager()\n\n\n@cbv(router)\nclass FastAPITags:\n    manager: TagsManager = Depends(get_tags_manager)\n    ...\n\nclass TagsController(BaseAPIController):\n\n    def __init__(self, app):\n        super().__init__(app)\n        self.manager = TagsManager()\n```\n\n---\n\nclass: reduce90\n\n### DI and Controllers - Unified Approach\n\n```diff\n-def get_tags_manager() -> TagsManager:\n-    return TagsManager()\n-\n-\n @cbv(router)\n class FastAPITags:\n-    manager: TagsManager = Depends(get_tags_manager)\n+    manager: TagsManager = depends(TagsManager)\n\n     @router.put(\n         '/api/tags',\n@@ -58,11 +54,8 @@ def update(\n         self.manager.update(trans, payload)\n\n\n-class TagsController(BaseAPIController):\n-\n-    def __init__(self, app):\n-        super().__init__(app)\n-        self.manager = TagsManager()\n+class TagsController(BaseGalaxyAPIController):\n+    manager: TagsManager = depends(TagsManager)\n```\n\nBuilding dependency injection into our application and not relying on FastAPI allows for dependency injection that is *less verbose*, available uniformly across the application,\n*works for the legacy controllers identically*.\n\n---\n\n### DI and Tasks - Framework\n\nFrom `lib/galaxy/celery/tasks.py`\n\n```python\nfrom lagom import magic_bind_to_container\n...\n\ndef galaxy_task(func):\n    CELERY_TASKS.append(func.__name__)\n    app = get_galaxy_app()\n    if app:\n        return magic_bind_to_container(app)(func)\n    return func\n```\n\n`magic_bind_to_container` to binds function parameters to a specified Lagom DI container automatically.\n\n---\n\n### DI and Tasks - Examples\n\nFrom `lib/galaxy/celery/tasks.py`\n\n```python\n@celery_app.task(ignore_result=True)\n@galaxy_task\ndef purge_hda(hda_manager: HDAManager, hda_id):\n    hda = hda_manager.by_id(hda_id)\n    hda_manager._purge(hda)\n\n\n@celery_app.task\n@galaxy_task\ndef set_metadata(hda_manager: HDAManager, ldda_manager: LDDAManager, dataset_id, model_class='HistoryDatasetAssociation'):\n    if model_class == 'HistoryDatasetAssociation':\n        dataset = hda_manager.by_id(dataset_id)\n    elif model_class == 'LibraryDatasetDatasetAssociation':\n        dataset = ldda_manager.by_id(dataset_id)\n    dataset.datatype.set_meta(dataset)\n```\n\n---\n\n![Decomposed App](../../images/app_decomposed.plantuml.svg)\n\n---\n\n### Tips for Designing New Galaxy Backend Components\n\n- Consume only the related components you need to avoid `app` when possible.\n- Annotate inputs to the component with Python types.\n- Use interface types to shield consumers from implementation details.\n- Rely on Galaxy's dependency injection to construct the component and provide it to consumers.\n\n---\n\n## Galaxy Tasks\n\n*The architecture surrounding Galaxy task management.*\n\n---\n\n![Processing requests on the server](../../images/asgi_app.plantuml.svg)\n\n???\n\nWeb servers are a terrible place to do work. Traditional Python WSGI servers\nare meant for processing requests that take less a minute - they are meant\nfor long running tasks.\n\nThis request/response cycle is inappropriate for deleting all the files in a\nhistory, submitted 10,000 batch jobs for a collection, building a zip file for\na library folder.\n\n---\n\n![Zoom in on Backend](../../images/core_backend_controllers.plantuml.svg)\n\n---\n\n![Infrastructure including Celery](../../images/core_backend_celery.plantuml.svg)\n\n???\n\nHandling a task description off to Celery allows the web server to respond right\naway and avoid various hacks. Celery is meant for these long running tasks and has\na set of operations for handling them properly.\n\n---\n\n![Celery Overview](https://d33wubrfki0l68.cloudfront.net/f6a5a0c33eac1250034747d375da9a396e5488ce/0196f/media/async-task-python.png)\n\n---\n\nclass: enlarge150\n\n### Downsides of Celery\n\nAdds more complexity to deploying Galaxy. Celery needs to be available to Galaxy\nat runtime, production Galaxy instances need a broker and a backend.\n\n---\n\nclass: reduce90\n\n### Gravity + Celery\n\n.code[```\n$ galaxy\nRegistered galaxy config: /home/nate/work/galaxy/config/galaxy.yml\nCreating or updating service gunicorn\nCreating or updating service celery\nCreating or updating service celery-beat\ncelery: added process group\n2022-01-20 14:44:24,619 INFO spawned: 'celery' with pid 291651\ncelery-beat: added process group\n2022-01-20 14:44:24,620 INFO spawned: 'celery-beat' with pid 291652\ngunicorn: added process group\n2022-01-20 14:44:24,622 INFO spawned: 'gunicorn' with pid 291653\ncelery                           STARTING\ncelery-beat                      STARTING\ngunicorn                         STARTING\n==> /home/nate/work/galaxy/database/gravity/log/gunicorn.log <==\n...log output follows...\n```]\n\n???\n\nStart Galaxy with Gravity starts not only the Python web server (gunicorn)\nrunning the Galaxy application but also celery and required services.\n\n---\n\n![Celery tasks being registered at startup](../../images/celery_tasks_list.png)\n\n---\n\nclass: enlarge150\n\n### Declaring a Task\n\n- Placed in `galaxy.celery.tasks`.\n- We've placed a layer around Celery to mirror what we're with API endpoints.\n  - Typed functions with Pydantic inputs implicitly mapped.\n  - Implicit type based dependency injection from Galaxy's DI container (using Lagom)\n  - Feels a lot like writing an API endpoint.\n\n---\n\nclass: enlarge150\n\n### A Simple Task\n\n.code[```\n@galaxy_task(\n    ignore_result=True,\n    action=\"setting up export history job\"\n)\ndef export_history(\n    model_store_manager: ModelStoreManager,\n    request: SetupHistoryExportJob,\n):\n    model_store_manager.setup_history_export_job(request)\n```]\n\n---\n\nclass: enlarge150\n\n### The `galaxy_task` Decorator\n\n.code[```\n@galaxy_task(\n    ignore_result=True,\n    action=\"setting up export history job\"\n)\ndef export_history(\n    model_store_manager: ModelStoreManager,\n    request: SetupHistoryExportJob,\n):\n    model_store_manager.setup_history_export_job(request)\n```]\n\n- `galaxy_task` is a wrapper around Celery's `task` decorator\n- Wrap a simple function to turn it into a task.\n- Ensure all inputs are JSON serializable or components in Galaxy's dependency injection container\n\n---\n\nclass: enlarge150\n\n### Celery and Pydantic\n\nThe `request` argument to `export_history` is a Pydantic model type named\n`SetupHistoryExportJob`. These are mostly defined in `galaxy.schema.tasks`.\n\n.code[```\nfrom pydantic import BaseModel\n\nclass SetupHistoryExportJob(BaseModel):\n    history_id: int\n    job_id: int\n    store_directory: str\n    include_files: bool\n    include_hidden: bool\n    include_deleted: bool\n```]\n\n---\n\nclass: enlarge200\n\n### Celery and Pydantic - Implementation\n\n- Custom JSON encoding and decoding to adapt Celery to Pydantic.\n- Implemented in `galaxy.celery._serialization`.\n- Inject `__type__` and `__class__` attributes into JSON description.\n- `@galaxy_task` decorator sets Celery `serializer` attribute.\n\n---\n\nclass: enlarge150\n\n### Celery and Dependency Injection\n\n.code[```\n@galaxy_task(\n    ignore_result=True,\n    action=\"setting up export history job\"\n)\ndef export_history(\n    model_store_manager: ModelStoreManager,\n    request: SetupHistoryExportJob,\n):\n    model_store_manager.setup_history_export_job(request)\n```]\n\n- The type declaration on `model_store_manager` of `ModelStoreManager` causes\n  the Galaxy manager object of this class to be passed to the function when the\n  task is running.\n- Client does not need to have any knowledge of this class.\n\n---\n\n### Executing Tasks from Galaxy\n\nSee `lib/galaxy/tools/imp_exp/__init__.py`:\n\n.code[```\nfrom galaxy.schema.tasks import SetupHistoryExportJob\n\n...\n\n    request = SetupHistoryExportJob(\n        history_id=history.id,\n        job_id=self.job_id,\n        store_directory=store_directory,\n        include_files=True,\n        include_hidden=include_hidden,\n        include_deleted=include_deleted,\n    )\n    export_history.delay(request=request)\n\n```]\n\nThe delay method is created implicitly from the `galaxy_task` decorator.\n\n---\n\nclass: enlarge200\n\n### Best Practices\n\n- Place tasks in `galaxy.celery.tasks`.\n- Keep the tasks as thin as possible (ideally simply delegate inputs\n  to a manager or another Galaxy component independent of Celery).\n- Ensure required/injected Galaxy components as small and decomposed as\n  possible.\n- Place new request definition argument types in `galaxy.schema.tasks`.\n\n---\n\n### Existing Tasks Success Stories\n\n---\n\nclass: enlarge150\n\n### PDF Export Problems\n\n- We added PDF export of Galaxy Markdown using weasyprint\n- Generation of PDF took too long, feature was quite unstable\n\n---\n\nclass: enlarge150\n\n### Short Term Storage (STS)\n\n- A Galaxy component for managing user downloadable files that only\n  need to exist for a little time.\n- Traditionally, these kind of files have required a lot of\n  hacking to do well in Galaxy (tracking transient request-like stuff in data model, etc..)\n- Not just unoptimized by default, but unusable\n- Required customizing nginx routes, special web server plugins, etc...\n\nhttps://github.com/galaxyproject/galaxy/pull/13691\n\n---\n\nclass: enlarge150\n\n.code[```\nclass GeneratePdfDownload(BaseModel):\n    short_term_storage_request_id: str\n    basic_markdown: str\n    document_type: PdfDocumentType\n```]\n\n---\n\nclass: enlarge120\n\n### Robust PDF Export\n\n.code[```\nfrom galaxy.managers.markdown_util import generate_branded_pdf\n\n@galaxy_task(\n    action=\"preparing Galaxy Markdown PDF for download\"\n)\ndef prepare_pdf_download(\n    request: GeneratePdfDownload,\n    config: GalaxyAppConfiguration,\n    short_term_storage_monitor: ShortTermStorageMonitor,\n):\n    generate_branded_pdf(\n        request,\n        config,\n        short_term_storage_monitor,\n    )\n```]\n\n---\n\nclass: enlarge120\n\n### Exporting Histories, Invocations, Libraries\n\n.code[```\n@galaxy_task(\n    action=\"generate and stage a workflow invocation store for download\"\n)\ndef prepare_invocation_download(\n    model_store_manager: ModelStoreManager,\n    request: GenerateInvocationDownload,\n):\n    model_store_manager.prepare_invocation_download(\n        request\n    )\n```]\n\nhttps://github.com/galaxyproject/galaxy/pull/12533\n\n---\n\nclass: enlarge150\n\n### Optimized Uploads\n\n- Decomposed job handling, precursor to migrating more job components to Celery\n- Converting uploads to tasks signficantly sped up running Galaxy tests\n  - API tests went from 2.5 hours to 50 minutes\n  - Amazing speed up for small jobs\n- Exploring task composition\n\nhttps://github.com/galaxyproject/galaxy/pull/13655\n\n---\n\n### Uploads - Task Composition\n\nSee `lib/galaxy/tools/execute.py`\n\n.code[```\nasync_result = (\n    setup_fetch_data.s(job_id, raw_tool_source=raw_tool_source)\n    | fetch_data.s(job_id=job_id).set(queue=\"galaxy.external\")\n    | set_job_metadata.s(\n        extended_metadata_collection=\"extended\" in tool.app.config.metadata_strategy,\n        job_id=job_id,\n    ).set(\n        queue=\"galaxy.external\",\n        link_error=finish_job.si(job_id=job_id, raw_tool_source=raw_tool_source)\n    )\n    | finish_job.si(job_id=job_id, raw_tool_source=raw_tool_source)\n)()\n```]\n\n---\n\nclass: enlarge200\n\n### Batch Operations\n\nTask-based operations enable the most expensive of the new history's batch operations.\n\n- Changing datatypes\n- Purging datasets\n\nhttps://github.com/galaxyproject/galaxy/pull/14042\n\n---\n\nclass: enlarge200\n\n### Future Work\n\n- *Migrating tool submission to tasks*\n- Workflow scheduling\n- Importing shared histories\n\nhttps://github.com/galaxyproject/galaxy/issues/11721\n\n---\n\n## Application Components - Models, Managers, and Services\n\n*The architecture surrounding Galaxy components.*\n\n---\n\n![This section will talk about that manager layer and what lies below](../../images/asgi_app.plantuml.svg)\n\n---\n\nThere are many ways to describe and visualize the Galaxy server architecture,\none is to imagine the Galaxy database as the ultimate source for Galaxy \"stuff\"\nand the API controllers as the ultimate sink.\n\nIn this architecture imagining of Galaxy, managers are the layer meant to\nmediate all controller interactions (and isolate the backend from the web\nframework) while the model layer is meant to mediate all database interactions\n(and isolate the backend from database internals).\n\n---\n\n![Models and Managers](../../images/core_models_managers.plantuml.svg)\n\n---\n\nclass: enlarge150\n\n### Services\n\nHandle API and web processing details of requests and responses at a high-level.\n\nThin layer below the controllers to shield applciation logic from FastAPI internals.\n\nIn practice, it is totally fine to skip this layer and have FastAPI controllers talk directly\nto managers.\n\n---\n\nclass: enlarge150\n\n### Managers\n\nHigh-level business logic that ties all of these components together.\n\nControllers should ideally be thin wrappers around actions defined in managers.\n\nWhenever a model requires more than just the database, the operation should be defined\nin a manager instead of in the model.\n\n---\n\n### Managers - Some Key Files\n\n![Key Managers](../../images/core_files_managers.plantuml.svg)\n\n---\n\n### Managers - Some Helpers\n\n![Manager Helpers](../../images/core_files_managers_helpers.plantuml.svg)\n\n---\n\n### Galaxy Models\n\n- Database interactions powered by SQLAlchemy - https://www.sqlalchemy.org/.\n- Galaxy doesn't think in terms of \"rows\" but \"objects\".\n- Classes for Galaxy model objects defined in `lib/galaxy/model/__init__.py`.\n- Classes mapped to database objects in same module via \"declarative mapping\".\n  - Classes/attributes mapped to tables/columns\n  - Associations between classes mapped to relationships between tables\n\n\n---\n\n![SQLAlchemy Architecture](../../images/sqla_arch_small.png)\n\n---\n\n### Galaxy Database Schema Migrations\n\n- Automated execution of incremental, reversible changes to the database schema.\n- Performed to update or revert the database schema to a newer or older version.\n- Powered by Alembic - https://alembic.sqlalchemy.org/.\n  - (as of 22.05; prior to that by SQLAlchemy Migrate)\n- Each file in `lib/galaxy/model/migrations/alembic/versions_gxy` represents a migration description\n  - `e7b6dcb09efd_create_gxy_branch.py`\n  - `6a67bf27e6a6_deferred_data_tables.py`\n  - `b182f655505f_add_workflow_source_metadata_column.py`\n\n---\n\n### More on Schema Migrations\n\n- Great documentation in code README - `lib/galaxy/model/migrations/README.md`\n  - Admin perspective on how to migrate databases forward and revert on problems.\n  - Developer persepctive on how to add new revisions.\n- Galaxy's data model is split into the galaxy model and the legacy install model:\n  - Persisted in one combined database or two separate databases\n  - Represented by 2 migration branches: \"gxy\" and \"tsi\"\n- Schema changes defined in revision modules:\n  - `lib/galaxy/model/migrations/alembic/versions_gxy` (gxy branch: galaxy model)\n  - `lib/galaxy/model/migrations/alembic/versions_tsi` (tsi branch: legacy install model)\n\n---\n\n![Galaxy Schema](../../images/galaxy_schema.png)\n\n### Database Diagram\n\nhttps://galaxyproject.org/admin/internals/data-model/\n\n---\n\n![HDA](../../images/hda.svg)\n\n---\n\n![HDA Dataset](../../images/hda_dataset.plantuml.svg)\n\n---\n\n### Dataset Metadata\n\n- Typed key-value pairs attached to HDA.\n- Keys and types defined at the datatype level.\n- Can be used by tools to dynamically control the tool form.\n\n???\n\n---\n\n![HDAs and HDCAs](../../images/hda_hdca.plantuml.svg)\n\n---\n\n![Workflows](../../images/workflow_definition.svg)\n\n---\n\n![Workflow Running](../../images/workflow_run.svg)\n\n---\n\n![Libraries](../../images/libraries.svg)\n\n---\n\n![Library Permissions](../../images/library_permissions.svg)\n\n---\n\n## Application Components - Plugins\n\n*The architecture of pluggable Galaxy components.*\n\n---\n\n![Models and Managers](../../images/core_models_managers.plantuml.svg)\n\n---\n\n### Plugins All the Way Down\n\n![Plugins](../../images/core_plugins_overview.plantuml.svg)\n\n---\n\n#### Datatypes\n\n![Datatype Files](../../images/core_files_datatypes.plantuml.svg)\n\nDeveloper docs on adding new datatypes can be found at https://docs.galaxyproject.org/en/latest/dev/data_types.html.\n\n---\n\n#### Tools\n\n![ToolBox Classes](../../images/core_toolbox_classes.plantuml.svg)\n\nThree major classes can be summarized as - the `ToolBox` contains `Tool` objects\nthat execute a `ToolAction`.\n\n---\n\n#### Subclasses of Tool\n\n![Tool Classes](../../images/core_tool_classes.plantuml.svg)\n\n---\n\n![Running Tools](../../images/core_tool_sequence.plantuml.svg)\n\n---\n\n### A Little About Jobs\n\n- Job is placed into the database and picked up by the job handler.\n- Job handler (`JobHandler`) watches the job and transitions job's state - common startup and finishing.\n- Job mapper (`JobRunnerMapper`) decides the \"destination\" for a job.\n- Job runner (e.g. `DrammaJobRunner`) actual runs the job and provides an interface for checking status.\n\n---\n\n### Job Runners\n\n![Job Runners](../../images/core_runner_classes.plantuml.svg)\n\n---\n\n![Handling Jobs](../../images/core_jobs_sequence.plantuml.svg)\n\n---\n\n![Data Managers](../../images/data_managers.svg)\n\n---\n\n\n### Visualization Plugins\n\nAdding new visualizations to a Galaxy instance\n\n- Configuration file (XML)\n- Base template (Mako or JavaScript)\n- Additional static data if needed (CSS, JS, …)\n\n\n.footnote[[Learn more about it with our visualization tutorial.](/training-material/topics/dev/tutorials/visualization-generic/slides.html)]\n\n---\n\nclass: reduce70\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE visualization SYSTEM \"../../visualization.dtd\">\n<visualization name=\"ChiRAViz\">\n    <description>ChiRAViz</description>\n    <data_sources>\n        <data_source>\n           <model_class>HistoryDatasetAssociation</model_class>\n           <test type=\"isinstance\" test_attr=\"datatype\" result_type=\"datatype\">binary.ChiraSQLite</test>\n            <to_param param_attr=\"id\">dataset_id</to_param>\n        </data_source>\n    </data_sources>\n    <params>\n        <param type=\"dataset\" var_name_in_template=\"hda\" required=\"true\">dataset_id</param>\n    </params>\n    <template>chiraviz.mako</template>\n</visualization>\n```\n\n---\n\ntemplate: left-aligned\n\n### Visualization Examples\n\nAll in `config/plugins/visualizations`:\n\n- `chiraviz` - Latest addition mid-2020, demonstrates current state of the art building and packing. [#9562](https://github.com/galaxyproject/galaxy/pull/9562)\n- `csg` - Chemical structure viewer\n- `graphviz` - Visualize graph data using [cytoscape.js](http://www.cytoscape.org/)\n- `charts` - Classic charts as well as some integrated BioJS visualizations\n- `trackster` - Genome browser, deeply tied to Galaxy internals.\n\n---\n\n### Data Providers\n\nProvide efficient access to data for viz & API\n\nFramework provides direct link to read the raw dataset\nor use data providers to adapt it\n\nIn config, assert that visualization requires a given type of data providers\n\nData providers process data before sending to browser - slice, filter, reformat, ...\n\n---\n\n### Object Store\n\n.strike[```python\n>>> fh = open(dataset.file_path, 'w')\n>>> fh.write(‘foo’)\n>>> fh.close()\n>>> fh = open(dataset.file_path, ‘r’)\n>>> fh.read()\n```]\n\n```python\n>>> app.objectstore.update_from_file(dataset, file_name=‘foo.txt’)\n>>> app.objectstore.get_data(dataset)\n>>> app.objectstore.get_data(dataset, start=42, count=4096)\n```\n\n---\n\n![Object Store](../../images/objectstore.plantuml.svg)\n\nThese implementation are found below `lib/galaxy/objectstore/`.\n\n---\n\n![File Source Plugins](../../images/core_file_sources.plantuml.svg)\n\n---\n\n# FileSources vs ObjectStores\n\nObjectStores provide datasets not files, the files are organized logically in a very flat way around a dataset.\n\nFilesSources instead provide files and directories, not datasets. A FilesSource is meant to be browsed in hierarchical fashion - and also has no concept of extra files, etc..\nThe former is assumed to be persistent, the latter makes no such assumption.\n\n---\n\nMore information about File source plugins can be found at http://bit.ly/gcc21files\n\n---\n\n#### Workflow Modules\n\n![Workflow Modules](../../images/core_workflow_modules.plantuml.svg)\n\nAll these modules are found in `lib/galaxy/workflow/modules.py`.\n\n---\n\n#### `lib/galaxy/util/plugin_config.py`\n\nStandardized way to load both a set of possible plugin class implementations\nfrom a directory of Python files and to parse either an XML or YAML/JSON\ndescription of configured plugins.\n\n---\n\n#### `lib/galaxy/util/plugin_config.py` Example Files\n\n![Workflow Modules](../../images/core_files_plugin_example.plantuml.svg)\n\n---\n\n#### `lib/galaxy/util/plugin_config.py` Plugin Implementations\n\n```python\ndef plugins_dict(module, plugin_type_identifier):\n    plugin_dict = {}\n\n    for plugin_module in import_submodules(module, ordered=True):\n        for clazz in __plugin_classes_in_module(plugin_module):\n            plugin_type = getattr(clazz, plugin_type_identifier, None)\n            if plugin_type:\n                plugin_dict[plugin_type] = clazz\n\n    return plugin_dict\n```\n\n---\n\n#### Pieces of `lib/galaxy/tool_util/deps/containers.py`\n\n```python\nclass ContainerRegistry(object):\n\n    def __init__(self, app_info, mulled_resolution_cache=None):\n        self.resolver_classes = self.__resolvers_dict()\n        self.app_info = app_info\n        self.container_resolvers = self.__build_container_resolvers(app_info)\n        # ... other stuff here\n\n    def __build_container_resolvers(self, app_info):\n        conf_file = getattr(app_info, 'containers_resolvers_config_file', None)\n        plugin_source = plugin_config.plugin_source_from_path(conf_file)\n        return self._parse_resolver_conf(plugin_source)\n\n    def _parse_resolver_conf(self, plugin_source):\n        extra_kwds = {\n            'app_info': self.app_info\n        }\n        return plugin_config.load_plugins(\n            self.resolver_classes, plugin_source, extra_kwds\n        )\n\n    def __resolvers_dict(self):\n        import galaxy.tool_util.deps.container_resolvers\n        return plugin_config.plugins_dict(\n            galaxy.tool_util.deps.container_resolvers,\n            'resolver_type'\n        )\n```\n\n---\n\n#### Pieces of `lib/galaxy/tool_util/deps/container_resolvers/mulled.py`\n\n\n```python\nclass CachedMulledDockerContainerResolver(ContainerResolver):\n\nresolver_type = \"cached_mulled\"\n\n    def __init__(self, app_info=None, namespace=\"biocontainers\", hash_func=\"v2\", **kwds):\n        super(CachedMulledDockerContainerResolver, self).__init__(app_info)\n        self.namespace = namespace\n        self.hash_func = hash_func\n\n    def resolve(self, enabled_container_types, tool_info, **kwds):\n        # ... do the magic with configured plugin\n```\n\n---\n\n`container_resolvers_conf.xml`\n\n```xml\n<container_resolvers>\n  <cached_mulled />\n  <cached_mulled namespace=\"mycustom\" />\n</container_resolvers>\n```\n\n`container_resolvers_conf.yml`\n\n```yaml\n- resolver_type: cached_mulled\n- resolver_type: cached_mulled\n  namespace: mycustom\n```\n\n---\n\n## Client Architecture\n\n*The architecture of Galaxy's web user interface.*\n\n---\n\ntemplate: left-aligned\n\n### Client Directories\n\n- Source JavaScript for the client is in `client/src`.\n- Source stylesheets are in `client/src/style`.\n- \"Packed\" bundles served by Galaxy stored in `static/dist`\n  - `run.sh` uses `git diff` to try to determine if client needs to be built before starting Galaxy\n  - webpack builds these \"compiled\" artifacts\n\nUpshot - to develop against the client, modify files in `client/` and rebuild with `make client` before\ndeployment.\n\n---\n\nclass: normal\n\n### Building the Client - Makefile Targets\n\n```Makefile\nclient: node-deps ## Rebuild all client-side artifacts (for local dev)\n  cd client && yarn run build\n\nclient-production-maps: node-deps ## Build optimized artifacts with sourcemaps.\n  cd client && yarn run build-production-maps\n\nclient-watch: node-deps ## Rebuild client on each change.\n  cd client && yarn run watch\n\nclient-format: node-deps ## Reformat client code\n  cd client && yarn run prettier\n\nclient-lint: client-eslint client-format-check ## ES lint and check format of client\n\nclient-test: node-deps  ## Run JS unit tests\n  cd client && yarn run test\n\nclient-test-watch: client ## Watch and run all client unit tests on changes\n  cd client && yarn run jest-watch\n\nnode-deps: ## Install NodeJS and dependencies.\n```\n\n---\n\n### Automatically Reloading During Development\n\nThe following command rebuilds the application on each change.\n\n```\nmake client-watch\n```\n\nThis is still a relatively slow process, an extra client development server can be started that proxies non-client requests\nto your Galaxy server and selectively reloads only what is needed during active development (hot module replacement or HMR).\n\n```\nmake client-dev-server\n```\n\nMake sure to open Galaxy at http://localhost:8081 instead to point at the client proxy.\n\n---\n\nclass: white\n![What is Webpack](../../images/what-is-webpack.svg)\n\n---\n\nclass: enlarge150\n\n### webpack in Galaxy\n\nPacks and \"transpiles\" Galaxy ES6 code (.js), Galaxy Vue modules (.vue), libraries from npm, scss stylesheets (.scss) into browser native bundles.\n\nHundreds of high-level well organized files into optimized single files that can be quickly downloaded.\n\nLots of active development and complexity around Viz plugins and dependencies for instance, but the webpack configuration file in `config/webpack.config.js` is fairly straightforward.\n\n---\n\nclass: white\n![Webpack in Action](../../images/jsload.png)\n\n---\n\n### Stylesheets\n\n- Galaxy shared stylesheets are generally defined using the SCSS syntax\n- SCSS is a high-level superset of CSS - https://sass-lang.com/documentation/syntax\n- `sass` is leveraged by webpack to convert these styles to native CSS at client build time\n- Rebuild style with `make style`\n- Galaxy's SCSS files can be found in `client/src/style/scss/`\n\n---\n\n### Package and Build Files\n\n![Client Build Files](../../images/core_files_client_build.plantuml.svg)\n\n---\n\n### Source Files\n\n![Client Build Files](../../images/core_files_client_sources.plantuml.svg)\n\n---\n\n### ES6\n\nThe client is built from JavaScript source files. We use ES6 JavaScript.\n\nA tutorial to help learn JavaScript generally might be https://www.w3schools.com/js/.\n\nFor someone familiar with JavaScript but that wants a primer on the new language features in ES6,\nhttps://www.w3schools.com/js/js_es6.asp may be more appropriate.\n\n---\n\n### Vue\n\nVue.js is a reactive framework for building web client applications.\n\nWe chose Vue.js over React initially because of its focus on allowing developers to incrementally or progressively replace pieces of complex existing applications.\n\nThe idea behind Vue.js is fairly simple to pick up and there is a lot of great tutorials and videos available. https://vuejs.org/v2/guide/ is a really good jumping off point.\n\n---\n\n### Vuex\n\n> Vuex is a state management pattern + library for Vue.js applications. It serves as a centralized store for all the components in an application, with rules ensuring that the state can only be mutated in a predictable fashion.\n\nhttps://vuex.vuejs.org/\n\n---\n\n### Client Unit Tests\n\nhttps://jestjs.io/\n\nConfigured in `client/src/jest/jest.config.js`.\n\nVue tests are placed beside components in `client/src`, more tests in `client/test/qunit/tests` and `client/test/jest/standalone/`.\n\n---\n\n### Vue Test Utils\n\n> Vue Test Utils is the official unit testing utility library for Vue.js.\n\nhttps://vue-test-utils.vuejs.org/\n\nReally nice reference library documentation. A lot of helpers and concepts to unit test Vue components.\n\n---\n\n### Client Unit Test Design Tips\n\nhttps://github.com/galaxyproject/galaxy/tree/dev/client/docs/src/component-design/unit-testing\n\n- Clearly document the intent of your test\n- Implement logic in pure functions when possible\n- Wrap native browser resources in a function so they can be easily mocked\n\n---\n\n### Webhooks in Galaxy\n\nWebhooks is a system in Galaxy which can be used to write small JS and/or Python functions to change predefined locations in the Galaxy client.\n<br><br>\nIn short: A plugin infrastructure for the Galaxy UI\n\n\n.footnote[You can learn more about webhooks using our webhook [training](/training-material/topics/dev/tutorials/webhooks/slides.html).]\n\n---\n\n### Webhook masthead example\n\n![A person shaped icon in the Galaxy masthead is being hovered over and the popup reads \"Show Username\", presumably a custom webhook from a tutorial.](../../images/webhook_masthead.png)\n\nAt the header menu: Enabling the overlay search, link to communities ...\n\n.footnote[You can learn more about webhooks using our webhook [training](/training-material/topics/dev/tutorials/webhooks/slides.html).]\n\n---\n\n### Webhook tool/workflow example\n\n![Screenshot of Galaxy with the job completion screen shown and a PhD comic image shown below.](../../images/webhook_tool.png)\n\nShown after tool or workflow execution. Comics, citations, support ...\n\n.footnote[You can learn more about webhooks using our webhook [training](/training-material/topics/dev/tutorials/webhooks/slides.html).]\n\n---\n\n### Webhook history-menu example\n\n![A section of the history menu is labelled Webhooks and shows a custom menu entry.](../../images/webhook_history.png)\n\nAdds an entry to the history menu - no functionality as of now\n\n.footnote[You can learn more about webhooks using our webhook [training](/training-material/topics/dev/tutorials/webhooks/slides.html).]\n\n---\n\n## Dependencies\n\n---\n\ntemplate: left-aligned\n\n### Dependencies - Python\n\n`script/common_startup.sh` sets up a `virtualenv` with required dependencies in `$GALAXY_ROOT/.venv` (or `$GALAXY_VIRTUAL_ENV` if set).\n\n- Check for existing virtual environment, if it doesn't exist check for `virtualenv`.\n- If `virtualenv` exists, use it. Otherwise download it as a script and setup a virtual environment using it.\n- `. \"$GALAXY_VIRTUAL_ENV/bin/activate\"`\n- Upgrade to latest `pip` to allow use of binary wheels.\n- `pip install -r requirements.txt --index-url https://wheels.galaxyproject.org/simple`\n- Install dozens of dependencies.\n\n---\n\ntemplate: left-aligned\n\n### Dependencies - JavaScript\n\n- Dependencies are defined in `client/package.json`.\n- These are fetched from npm and compiled into bundles as part of `make client` and related `Makefile` targets.\n\n---\n\n## Galaxy Startup Process\n\n---\n\n### Cloning Galaxy\n\n```bash\n$ git clone https://github.com/galaxyproject/galaxy.git galaxy\nCloning into 'galaxy'...\nremote: Counting objects: 173809, done.\nremote: Total 173809 (delta 0), reused 0 (delta 0), pack-reused 173809\nReceiving objects: 100% (173809/173809), 55.18 MiB | 11.08 MiB/s, done.\nResolving deltas: 100% (137885/137885), done.\nChecking connectivity... done.\n$ cd galaxy\n$ git checkout -b master origin/master\nBranch master set up to track remote branch master from origin.\nSwitched to a new branch 'master'\n$ sh run.sh\n```\n\n---\n\nclass: reduce90\n\n### Copying Configs\n\n```bash\n$ sh run.sh\nInitializing config/migrated_tools_conf.xml from migrated_tools_conf.xml.sample\nInitializing config/shed_tool_conf.xml from shed_tool_conf.xml.sample\nInitializing config/shed_tool_data_table_conf.xml from shed_tool_data_table_conf.xml.sample\nInitializing config/shed_data_manager_conf.xml from shed_data_manager_conf.xml.sample\nInitializing tool-data/shared/ucsc/builds.txt from builds.txt.sample\nInitializing tool-data/shared/ucsc/manual_builds.txt from manual_builds.txt.sample\nInitializing tool-data/shared/ucsc/ucsc_build_sites.txt from ucsc_build_sites.txt.sample\nInitializing tool-data/shared/igv/igv_build_sites.txt from igv_build_sites.txt.sample\nInitializing tool-data/shared/rviewer/rviewer_build_sites.txt from rviewer_build_sites.txt.sample\nInitializing static/welcome.html from welcome.html.sample\n```\n\n---\n\n### Setting up `.venv` and `pip`\n\n```\nUsing real prefix '/usr'\nNew python executable in .venv/bin/python\nInstalling setuptools, pip, wheel...done.\nActivating virtualenv at .venv\nCollecting pip>=8.1\n  Using cached pip-8.1.2-py2.py3-none-any.whl\nInstalling collected packages: pip\n  Found existing installation: pip 7.1.2\n    Uninstalling pip-7.1.2:\n      Successfully uninstalled pip-7.1.2\nSuccessfully installed pip-8.1.2\n```\n\n---\n\nclass: reduce70\n\n### Installing Dependencies\n\n.code[```\nCollecting bx-python==0.7.3 (from -r requirements.txt (line 2))\n  Downloading https://wheels.galaxyproject.org/packages/bx_python-0.7.3-cp27-cp27mu-manylinux1_x86_64.whl (2.1MB)\nCollecting MarkupSafe==0.23 (from -r requirements.txt (line 3))\n  Downloading https://wheels.galaxyproject.org/packages/MarkupSafe-0.23-cp27-cp27mu-manylinux1_x86_64.whl\nCollecting PyYAML==3.11 (from -r requirements.txt (line 4))\n  Downloading https://wheels.galaxyproject.org/packages/PyYAML-3.11-cp27-cp27mu-manylinux1_x86_64.whl (367kB)\nCollecting SQLAlchemy==1.0.8 (from -r requirements.txt (line 5))\n  Downloading https://wheels.galaxyproject.org/packages/SQLAlchemy-1.0.8-cp27-cp27mu-manylinux1_x86_64.whl (1.0MB)\nCollecting mercurial==3.7.3 (from -r requirements.txt (line 6))\n  Downloading https://wheels.galaxyproject.org/packages/mercurial-3.7.3-cp27-cp27mu-manylinux1_x86_64.whl (1.5MB)\n...\n...\nBuilding wheels for collected packages: repoze.lru\n  Running setup.py bdist_wheel for repoze.lru: started\n  Running setup.py bdist_wheel for repoze.lru: finished with status 'done'\n  Stored in directory: /home/john/.cache/pip/wheels/b2/cd/b3/7e24400bff83325a01d492940eff6e9579f553f33348323d79\nSuccessfully built repoze.lru\nInstalling collected packages: bx-python, MarkupSafe, PyYAML, SQLAlchemy, mercurial, numpy, pycrypto, six, Paste, PasteDeploy, docutils, wchartype, repoze.lru, Routes, WebOb, WebHelpers, Mako, pytz, Babel, Beaker, dictobj, nose, Parsley, Whoosh, Markdown, Cheetah, requests, boto, requests-toolbelt, bioblend, anyjson, amqp, kombu, psutil, PasteScript, pulsar-galaxy-lib, sqlparse, pbr, decorator, Tempita, sqlalchemy-migrate, pyparsing, svgwrite, ecdsa, paramiko, Fabric, pysam\nSuccessfully installed Babel-2.0 Beaker-1.7.0 Cheetah-2.4.4 Fabric-1.10.2 Mako-1.0.2 Markdown-2.6.3 MarkupSafe-0.23 Parsley-1.3 Paste-2.0.2 PasteDeploy-1.5.2 PasteScript-2.0.2 PyYAML-3.11 Routes-2.2 SQLAlchemy-1.0.8 Tempita-0.5.3.dev0 WebHelpers-1.3 WebOb-1.4.1 Whoosh-2.7.4 amqp-1.4.8 anyjson-0.3.3 bioblend-0.7.0 boto-2.38.0 bx-python-0.7.3 decorator-4.0.2 dictobj-0.3.1 docutils-0.12 ecdsa-0.13 kombu-3.0.30 mercurial-3.7.3 nose-1.3.7 numpy-1.9.2 paramiko-1.15.2 pbr-1.8.0 psutil-4.1.0 pulsar-galaxy-lib-0.7.0.dev4 pycrypto-2.6.1 pyparsing-2.1.1 pysam-0.8.4+gx1 pytz-2015.4 repoze.lru-0.6 requests-2.8.1 requests-toolbelt-0.4.0 six-1.9.0 sqlalchemy-migrate-0.10.0 sqlparse-0.1.16 svgwrite-1.1.6 wchartype-0.1\n```]\n\n---\n\nclass: reduce70\n\n### Initial Debugging as App Starts\n\n.code[```\nActivating virtualenv at .venv\nDEBUG:galaxy.app:python path is: /home/john/workspace/galaxy-clean/scripts,\n/home/john/workspace/galaxy-clean/lib, /home/john/workspace/galaxy-clean/.venv/lib/python2.7,/home/john/workspace/galaxy-clean/.venv/lib/python2.7/plat-x86_64-linux-gnu,\n/home/john/workspace/galaxy-clean/.venv/lib/python2.7/lib-tk, /home/john/workspace/galaxy-clean/.venv/lib/python2.7/lib-old, /home/john/workspace/galaxy-clean/.venv/lib/python2.7/lib-dynload,\n/usr/lib/python2.7, /usr/lib/python2.7/plat-x86_64-linux-gnu, /usr/lib/python2.7/lib-tk, /home/john/workspace/galaxy-clean/.venv/local/lib/python2.7/site-packages\nINFO:galaxy.config:Logging at '10' level to 'stdout'\ngalaxy.queue_worker INFO 2016-06-23 19:11:51,925 Initializing main Galaxy Queue Worker on sqlalchemy+sqlite:///./database/control.sqlite?isolation_level=IMMEDIATE\ntool_shed.tool_shed_registry DEBUG 2016-06-23 19:11:51,951 Loading references to tool sheds from ./config/tool_sheds_conf.xml.sample\ntool_shed.tool_shed_registry DEBUG 2016-06-23 19:11:51,951 Loaded reference to tool shed: Galaxy Main Tool Shed\ngalaxy.app DEBUG 2016-06-23 19:11:51,956 Using \"galaxy.yml\" config file:\n/home/john/workspace/galaxy-clean/config/galaxy.yml.sample\n```]\n\n---\n\nclass: reduce70\n\n### Database Migrations\n\n.code[```\nmigrate.versioning.repository DEBUG 2016-06-23 19:11:51,993 Loading repository lib/galaxy/model/migrate...\nmigrate.versioning.script.base DEBUG 2016-06-23 19:11:51,994 Loading script lib/galaxy/model/migrate/versions/0001_initial_tables.py...\nmigrate.versioning.script.base DEBUG 2016-06-23 19:11:51,994 Script lib/galaxy/model/migrate/versions/0001_initial_tables.py loaded successfully\nmigrate.versioning.script.base DEBUG 2016-06-23 19:11:51,994 Loading script lib/galaxy/model/migrate/versions/0002_metadata_file_table.py...\nmigrate.versioning.script.base DEBUG 2016-06-23 19:11:52,009 Loading script lib/galaxy/model/migrate/versions/0131_subworkflow_and_input_parameter_modules.py...\n...\ngalaxy.model.migrate.check INFO 2016-06-23 19:13:32,812 Migrating 128 -> 129...\ngalaxy.model.migrate.check INFO 2016-06-23 19:13:33,436\ngalaxy.model.migrate.check INFO 2016-06-23 19:13:33,437 Migration script to allow invalidation of job external output metadata temp files\ngalaxy.model.migrate.check INFO 2016-06-23 19:13:33,437\ngalaxy.model.migrate.check INFO 2016-06-23 19:13:33,437\ngalaxy.model.migrate.check INFO 2016-06-23 19:13:33,437 Migrating 129 -> 130...\ngalaxy.model.migrate.check INFO 2016-06-23 19:13:34,325\ngalaxy.model.migrate.check INFO 2016-06-23 19:13:34,325 Migration script to change the value column of user_preference from varchar to text.\ngalaxy.model.migrate.check INFO 2016-06-23 19:13:34,325\ngalaxy.model.migrate.check INFO 2016-06-23 19:13:34,325\ngalaxy.model.migrate.check INFO 2016-06-23 19:13:34,326 Migrating 130 -> 131...\ngalaxy.model.migrate.check INFO 2016-06-23 19:13:35,633\ngalaxy.model.migrate.check INFO 2016-06-23 19:13:35,633 Migration script to support subworkflows and workflow request input parameters\ngalaxy.model.migrate.check INFO 2016-06-23 19:13:35,633\ngalaxy.model.migrate.check INFO 2016-06-23 19:13:35,633\n```]\n\n---\n\nEverything after here happens every time\n\n---\n\nclass: reduce70\n\n.code[```\nmigrate.versioning.repository DEBUG 2016-06-23 19:13:35,635 Loading repository lib/tool_shed/galaxy_install/migrate...\nmigrate.versioning.script.base DEBUG 2016-06-23 19:13:35,635 Loading script lib/tool_shed/galaxy_install/migrate/versions/0001_tools.py...\nmigrate.versioning.script.base DEBUG 2016-06-23 19:13:35,636 Script lib/tool_shed/galaxy_install/migrate/versions/0001_tools.py loaded successfully\nmigrate.versioning.script.base DEBUG 2016-06-23 19:13:35,636 Loading script lib/tool_shed/galaxy_install/migrate/versions/0002_tools.py...\nmigrate.versioning.script.base DEBUG 2016-06-23 19:13:35,636 Script lib/tool_shed/galaxy_install/migrate/versions/0002_tools.py loaded successfully\nmigrate.versioning.script.base DEBUG 2016-06-23 19:13:35,636 Loading script lib/tool_shed/galaxy_install/migrate/versions/0003_tools.py...\nmigrate.versioning.script.base DEBUG 2016-06-23 19:13:35,636 Script lib/tool_shed/galaxy_install/migrate/versions/0003_tools.py loaded successfully\nmigrate.versioning.script.base DEBUG 2016-06-23 19:13:35,636 Loading script lib/tool_shed/galaxy_install/migrate/versions/0004_tools.py...\nmigrate.versioning.script.base DEBUG 2016-06-23 19:13:35,636 Script lib/tool_shed/galaxy_install/migrate/versions/0004_tools.py loaded successfully\nmigrate.versioning.script.base DEBUG 2016-06-23 19:13:35,636 Loading script lib/tool_shed/galaxy_install/migrate/versions/0005_tools.py...\nmigrate.versioning.script.base DEBUG 2016-06-23 19:13:35,636 Script lib/tool_shed/galaxy_install/migrate/versions/0005_tools.py loaded successfully\n...\nmigrate.versioning.script.base DEBUG 2016-06-23 19:13:35,637 Script lib/tool_shed/galaxy_install/migrate/versions/0012_tools.py loaded successfully\nmigrate.versioning.repository DEBUG 2016-06-23 19:13:35,637 Repository lib/tool_shed/galaxy_install/migrate loaded successfully\ntool_shed.galaxy_install.migrate.check DEBUG 2016-06-23 19:13:35,660 The main Galaxy tool shed is not currently available, so skipped tool migration 1 until next server startup\ngalaxy.config INFO 2016-06-23 19:13:35,679 Install database targetting Galaxy's database configuration.\n```]\n\n---\n\nclass: reduce70\n\n.code[```\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,748 Loading datatypes from ./config/datatypes_conf.xml.sample\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,749 Retrieved datatype module galaxy.datatypes.binary:Ab1 from the datatype registry.\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,750 Retrieved datatype module galaxy.datatypes.assembly:Amos from the datatype registry.\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,751 Retrieved datatype module galaxy.datatypes.text:Arff from the datatype registry.\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,751 Retrieved datatype module galaxy.datatypes.data:GenericAsn1 from the datatype registry.\n...\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,822 Retrieved datatype module galaxy.datatypes.mothur:SquareDistanceMatrix from the datatype registry.\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,822 Retrieved datatype module galaxy.datatypes.mothur:LowerTriangleDistanceMatrix from the datatype registry.\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,822 Retrieved datatype module galaxy.datatypes.mothur:RefTaxonomy from the datatype registry.\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,822 Retrieved datatype module galaxy.datatypes.mothur:RefTaxonomy from the datatype registry.\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,823 Retrieved datatype module galaxy.datatypes.mothur:RefTaxonomy from the datatype registry.\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,823 Retrieved datatype module galaxy.datatypes.mothur:ConsensusTaxonomy from the datatype registry.\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,823 Retrieved datatype module galaxy.datatypes.mothur:TaxonomySummary from the datatype registry.\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,823 Retrieved datatype module galaxy.datatypes.mothur:Frequency from the datatype registry.\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,823 Retrieved datatype module galaxy.datatypes.mothur:Quantile from the datatype registry.\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,823 Retrieved datatype module galaxy.datatypes.mothur:Quantile from the datatype registry.\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,823 Retrieved datatype module galaxy.datatypes.mothur:Quantile from the datatype registry.\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,823 Retrieved datatype module galaxy.datatypes.mothur:Quantile from the datatype registry.\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,824 Retrieved datatype module galaxy.datatypes.mothur:Axes from the datatype registry.\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,824 Retrieved datatype module galaxy.datatypes.mothur:SffFlow from the datatype registry.\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,824 Retrieved datatype module galaxy.datatypes.mothur:CountTable from the datatype registry.\n```]\n\n---\n\nclass: reduce70\n\n.code[```\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,824 Loaded sniffer for datatype 'galaxy.datatypes.mothur:Sabund'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,824 Loaded sniffer for datatype 'galaxy.datatypes.mothur:Otu'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,824 Loaded sniffer for datatype 'galaxy.datatypes.mothur:GroupAbund'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,824 Loaded sniffer for datatype 'galaxy.datatypes.mothur:SecondaryStructureMap'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,824 Loaded sniffer for datatype 'galaxy.datatypes.mothur:LowerTriangleDistanceMatrix'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,824 Loaded sniffer for datatype 'galaxy.datatypes.mothur:SquareDistanceMatrix'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,825 Loaded sniffer for datatype 'galaxy.datatypes.mothur:PairwiseDistanceMatrix'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,825 Loaded sniffer for datatype 'galaxy.datatypes.mothur:Oligos'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,825 Loaded sniffer for datatype 'galaxy.datatypes.mothur:Quantile'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,825 Loaded sniffer for datatype 'galaxy.datatypes.mothur:Frequency'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,825 Loaded sniffer for datatype 'galaxy.datatypes.mothur:LaneMask'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,825 Loaded sniffer for datatype 'galaxy.datatypes.mothur:RefTaxonomy'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,825 Loaded sniffer for datatype 'galaxy.datatypes.mothur:Axes'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,825 Loaded sniffer for datatype 'galaxy.datatypes.constructive_solid_geometry:PlyAscii'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,825 Loaded sniffer for datatype 'galaxy.datatypes.constructive_solid_geometry:PlyBinary'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,825 Loaded sniffer for datatype 'galaxy.datatypes.constructive_solid_geometry:VtkAscii'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,825 Loaded sniffer for datatype 'galaxy.datatypes.constructive_solid_geometry:VtkBinary'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,825 Loaded sniffer for datatype 'galaxy.datatypes.interval:ScIdx'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,825 Loaded sniffer for datatype 'galaxy.datatypes.tabular:Vcf'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,826 Loaded sniffer for datatype 'galaxy.datatypes.binary:TwoBit'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,826 Loaded sniffer for datatype 'galaxy.datatypes.binary:GeminiSQLite'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,826 Loaded sniffer for datatype 'galaxy.datatypes.binary:MzSQlite'\n...\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,832 Loaded sniffer for datatype 'galaxy.datatypes.images:Psd'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,832 Loaded sniffer for datatype 'galaxy.datatypes.images:Xbm'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,832 Loaded sniffer for datatype 'galaxy.datatypes.images:Rgb'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,832 Loaded sniffer for datatype 'galaxy.datatypes.images:Pbm'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,832 Loaded sniffer for datatype 'galaxy.datatypes.images:Pgm'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,832 Loaded sniffer for datatype 'galaxy.datatypes.images:Xpm'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,833 Loaded sniffer for datatype 'galaxy.datatypes.images:Eps'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,833 Loaded sniffer for datatype 'galaxy.datatypes.images:Rast'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,833 Loaded sniffer for datatype 'galaxy.datatypes.binary:OxliCountGraph'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,833 Loaded sniffer for datatype 'galaxy.datatypes.binary:OxliNodeGraph'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,833 Loaded sniffer for datatype 'galaxy.datatypes.binary:OxliTagSet'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,833 Loaded sniffer for datatype 'galaxy.datatypes.binary:OxliStopTags'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,833 Loaded sniffer for datatype 'galaxy.datatypes.binary:OxliSubset'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,833 Loaded sniffer for datatype 'galaxy.datatypes.binary:OxliGraphLabels'\n```\n]\n\n---\n\nclass: reduce70\n\n.code[```\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,833 Loaded build site 'ucsc': tool-data/shared/ucsc/ucsc_build_sites.txt with display sites: main,test,archaea,ucla\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,834 Loaded build site 'gbrowse': tool-data/shared/gbrowse/gbrowse_build_sites.txt with display sites: modencode,sgd_yeast,tair,wormbase,wormbase_ws120,wormbase_ws140,wormbase_ws170,wormbase_ws180,wormbase_ws190,wormbase_ws200,wormbase_ws204,wormbase_ws210,wormbase_ws220,wormbase_ws225\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,834 Loaded build site 'ensembl': tool-data/shared/ensembl/ensembl_sites.txt\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,834 Loaded build site 'ensembl_data_url': tool-data/shared/ensembl/ensembl_sites_data_URL.txt\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,834 Loaded build site 'igv': tool-data/shared/igv/igv_build_sites.txt\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:35,834 Loaded build site 'rviewer': tool-data/shared/rviewer/rviewer_build_sites.txt\n```]\n\n---\n\nclass: reduce70\n\n.code[```\ngalaxy.tools.data INFO 2016-06-23 19:13:35,871 Could not find tool data tool-data/all_fasta.loc, reading sample\ngalaxy.tools.data DEBUG 2016-06-23 19:13:35,871 Loaded tool data table 'all_fasta'\ngalaxy.tools.data INFO 2016-06-23 19:13:35,871 Could not find tool data tool-data/bfast_indexes.loc, reading sample\ngalaxy.tools.data DEBUG 2016-06-23 19:13:35,871 Loaded tool data table 'bfast_indexes'\ngalaxy.tools.data WARNING 2016-06-23 19:13:35,871 Cannot find index file 'tool-data/blastdb_p.loc' for tool data table 'blastdb_p'\n...\ngalaxy.tools.data DEBUG 2016-06-23 19:13:36,210 Loaded tool data table 'vcf_iobio'\ngalaxy.tools.data INFO 2016-06-23 19:13:36,211 Could not find tool data tool-data/biom_simple_display.loc, reading sample\ngalaxy.tools.data DEBUG 2016-06-23 19:13:36,211 Loaded tool data table 'biom_simple_display'\n\n```]\n\n---\n\nclass: reduce70\n\n### Job Configuration, Citation Cache\n\n.code[```\ngalaxy.jobs DEBUG 2016-06-23 19:13:36,233 Loading job configuration from /home/john/workspace/galaxy-clean/config/galaxy.yml.sample\ngalaxy.jobs DEBUG 2016-06-23 19:13:36,233 Done loading job configuration\nbeaker.container DEBUG 2016-06-23 19:13:36,278 data file ./database/citations/data/container_file/4/48/48e563f148dc04d8b31c94878c138019862e580d.cache\n```]\n\n---\n\nclass: reduce70\n\n### Load Toolbox\n\n.code[```\ngalaxy.tools.toolbox.base INFO 2016-06-23 19:13:36,279 Parsing the tool configuration ./config/tool_conf.xml.sample\ngalaxy.tools.toolbox.base DEBUG 2016-06-23 19:13:36,291 Loaded tool id: upload1, version: 1.1.4 into tool panel..\ngalaxy.tools.toolbox.base DEBUG 2016-06-23 19:13:36,294 Loaded tool id: ucsc_table_direct1, version: 1.0.0 into tool panel..\ngalaxy.tools.toolbox.base DEBUG 2016-06-23 19:13:36,296 Loaded tool id: ucsc_table_direct_test1, version: 1.0.0 into tool panel..\ngalaxy.tools.toolbox.base DEBUG 2016-06-23 19:13:36,298 Loaded tool id: ucsc_table_direct_archaea1, version: 1.0.0 into tool panel..\n...\ngalaxy.tools.toolbox.base DEBUG 2016-06-23 19:13:36,496 Loaded tool id: vcf_to_maf_customtrack1, version: 1.0.0 into tool panel..\ngalaxy.tools.toolbox.base INFO 2016-06-23 19:13:36,497 Parsing the tool configuration ./config/shed_tool_conf.xml\ngalaxy.tools.toolbox.base INFO 2016-06-23 19:13:36,497 Parsing the tool configuration ./config/migrated_tools_conf.xml\n```]\n\n\n---\n\nclass: reduce90\n\n### Tool Dependency Resolution and Indexing\n\n.code[```\ngalaxy.tools.deps WARNING 2016-06-23 19:13:36,498 Path './database/dependencies' does not exist, ignoring\ngalaxy.tools.deps WARNING 2016-06-23 19:13:36,498 Path './database/dependencies' is not directory, ignoring\ngalaxy.tools.deps DEBUG 2016-06-23 19:13:36,503 Unable to find config file './dependency_resolvers_conf.xml'\ngalaxy.tools.search DEBUG 2016-06-23 19:13:36,560 Starting to build toolbox index.\ngalaxy.tools.search DEBUG 2016-06-23 19:13:37,789 Toolbox index finished. It took: 0:00:01.229406\n```]\n\n---\n\nclass: reduce70\n\n### Display Applications\n\n.code[```\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:37,795 Loaded display application 'ucsc_bam' for datatype 'bam', inherit=False.\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:37,797 Loaded display application 'ensembl_bam' for datatype 'bam', inherit=False.\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:37,833 Loaded display application 'igv_bam' for datatype 'bam', inherit=False.\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:37,834 Loaded display application 'igb_bam' for datatype 'bam', inherit=False.\n...\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:38,002 Loaded display application 'igv_vcf' for datatype 'vcf_bgzip', inherit=False.\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:38,003 Loaded display application 'biom_simple' for datatype 'biom1', inherit=False.\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:38,003 Adding inherited display application 'ensembl_gff' to datatype 'gtf'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:38,004 Adding inherited display application 'igv_gff' to datatype 'gtf'\n...\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:38,007 Adding inherited display application 'gbrowse_interval_as_bed' to datatype 'bed6'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:38,007 Adding inherited display application 'rviewer_interval' to datatype 'bed6'\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:38,007 Adding inherited display application 'igv_interval_as_bed' to datatype 'bed6'\n```]\n\n---\n\nclass: reduce70\n\n### Datatype Converters\n\n.code[```\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:38,010 Loaded converter: CONVERTER_Bam_Bai_0\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:38,011 Loaded converter: CONVERTER_bam_to_bigwig_0\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:38,012 Loaded converter: CONVERTER_bed_to_gff_0\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:38,012 Loaded converter: CONVERTER_bed_to_bgzip_0\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:38,013 Loaded converter: CONVERTER_bed_to_tabix_0\n...\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:38,096 Loaded converter: CONVERTER_cml_to_inchi\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:38,097 Loaded converter: CONVERTER_cml_to_sdf\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:38,098 Loaded converter: CONVERTER_cml_to_mol2\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:38,099 Loaded converter: CONVERTER_ref_to_seq_taxomony\n```]\n\n---\n\nclass: reduce90\n\n### Special Tools\n\n.code[```\ngalaxy.datatypes.registry DEBUG 2016-06-23 19:13:38,101 Loaded external metadata tool: __SET_METADATA__\ngalaxy.tools.special_tools DEBUG 2016-06-23 19:13:38,107 Loaded history import tool: __IMPORT_HISTORY__\ngalaxy.tools.special_tools DEBUG 2016-06-23 19:13:38,108 Loaded history export tool: __EXPORT_HISTORY__\n```]\n\n---\n\nclass: reduce70\n\n### Visualization Plugins\n\n.code[```\ngalaxy.web.base.pluginframework INFO 2016-06-23 19:13:38,109 VisualizationsRegistry, loaded plugin: charts\ngalaxy.visualization.plugins.config_parser INFO 2016-06-23 19:13:38,110 Visualizations plugin disabled: Circster. Skipping...\ngalaxy.visualization.plugins.config_parser INFO 2016-06-23 19:13:38,111 template syntax is deprecated: use entry_point instead\ngalaxy.web.base.pluginframework INFO 2016-06-23 19:13:38,111 VisualizationsRegistry, loaded plugin: csg\ngalaxy.visualization.plugins.config_parser INFO 2016-06-23 19:13:38,111 template syntax is deprecated: use entry_point instead\ngalaxy.web.base.pluginframework INFO 2016-06-23 19:13:38,112 VisualizationsRegistry, loaded plugin: graphviz\ngalaxy.web.base.pluginframework INFO 2016-06-23 19:13:38,112 VisualizationsRegistry, loaded plugin: phyloviz\ngalaxy.web.base.pluginframework INFO 2016-06-23 19:13:38,113 VisualizationsRegistry, loaded plugin: scatterplot\ngalaxy.visualization.plugins.config_parser INFO 2016-06-23 19:13:38,113 Visualizations plugin disabled: Sweepster. Skipping...\ngalaxy.web.base.pluginframework INFO 2016-06-23 19:13:38,114 VisualizationsRegistry, loaded plugin: trackster\n```]\n\n---\n\n### Tours\n\n.code[```\ngalaxy.tours INFO 2016-06-23 19:13:38,125 Loaded tour 'core.scratchbook'\ngalaxy.tours INFO 2016-06-23 19:13:38,158 Loaded tour 'core.galaxy_ui'\ngalaxy.tours INFO 2016-06-23 19:13:38,183 Loaded tour 'core.history'\n```]\n\n---\n\nclass: reduce90\n\n### Job Handler and Runners\n\n.code[```\ngalaxy.jobs.manager DEBUG 2016-06-23 19:13:38,196 Starting job handler\ngalaxy.jobs INFO 2016-06-23 19:13:38,196 Handler 'main' will load all configured runner plugins\ngalaxy.jobs.runners.state_handler_factory DEBUG 2016-06-23 19:13:38,198 Loaded 'failure' state handler from module galaxy.jobs.runners.state_handlers.resubmit\ngalaxy.jobs.runners DEBUG 2016-06-23 19:13:38,198 Starting 5 LocalRunner workers\ngalaxy.jobs DEBUG 2016-06-23 19:13:38,200 Loaded job runner 'galaxy.jobs.runners.local:LocalJobRunner' as 'local'\ngalaxy.jobs DEBUG 2016-06-23 19:13:38,200 Legacy destination with id 'local:///', url 'local:///' converted, got params:\ngalaxy.jobs.handler DEBUG 2016-06-23 19:13:38,200 Loaded job runners plugins: local\ngalaxy.jobs.handler INFO 2016-06-23 19:13:38,200 job handler stop queue started\ngalaxy.jobs.handler INFO 2016-06-23 19:13:38,222 job handler queue started\n```]\n\n---\n\nclass: reduce70\n\n### Ignore this...\n\n.code[```\ngalaxy.sample_tracking.external_service_types DEBUG 2016-06-23 19:13:38,229 Loaded external_service_type: Simple unknown sequencer 1.0.0\ngalaxy.sample_tracking.external_service_types DEBUG 2016-06-23 19:13:38,230 Loaded external_service_type: Applied Biosystems SOLiD 1.0.0\n```]\n\n---\n\nclass: reduce90\n\n### Workflow Scheduler\n\n.code[```\ngalaxy.workflow.scheduling_manager DEBUG 2016-06-23 19:13:38,254 Starting workflow schedulers\n```]\n\n---\n\nclass: reduce90\n\n### Controllers\n\n.code[```\ngalaxy.web.framework.base DEBUG 2016-06-23 19:13:38,347 Enabling 'external_service' controller, class: ExternalService\ngalaxy.web.framework.base DEBUG 2016-06-23 19:13:38,347 Enabling 'requests_common' controller, class: RequestsCommon\ngalaxy.web.framework.base DEBUG 2016-06-23 19:13:38,375 Enabling 'library_common' controller, class: LibraryCommon\ngalaxy.web.framework.base DEBUG 2016-06-23 19:13:38,390 Enabling 'visualization' controller, class: VisualizationController\ngalaxy.web.framework.base DEBUG 2016-06-23 19:13:38,398 Enabling 'page' controller, class: PageController\ngalaxy.web.framework.base DEBUG 2016-06-23 19:13:38,400 Enabling 'async' controller, class: ASync\n...\ngalaxy.web.framework.base DEBUG 2016-06-23 19:13:38,728 Enabling 'history_content_tags' API controller, class: HistoryContentTagsController\ngalaxy.web.framework.base DEBUG 2016-06-23 19:13:38,728 Enabling 'history_tags' API controller, class: HistoryTagsController\ngalaxy.web.framework.base DEBUG 2016-06-23 19:13:38,728 Enabling 'workflow_tags' API controller, class: WorkflowTagsController\n```]\n\n---\n\nclass: reduce90\n\n### Middleware\n\n.code[```\ngalaxy.webapps.galaxy.buildapp DEBUG 2016-06-23 19:13:39,036 Enabling 'httpexceptions' middleware\ngalaxy.webapps.galaxy.buildapp DEBUG 2016-06-23 19:13:39,037 Enabling 'recursive' middleware\ngalaxy.webapps.galaxy.buildapp DEBUG 2016-06-23 19:13:39,042 Enabling 'error' middleware\ngalaxy.webapps.galaxy.buildapp DEBUG 2016-06-23 19:13:39,043 Enabling 'trans logger' middleware\ngalaxy.webapps.galaxy.buildapp DEBUG 2016-06-23 19:13:39,044 Enabling 'x-forwarded-host' middleware\ngalaxy.webapps.galaxy.buildapp DEBUG 2016-06-23 19:13:39,044 Enabling 'Request ID' middleware\n```]\n\n---\n\nclass: reduce70\n\n### Static Paths for Viz\n\n.code[```\ngalaxy.webapps.galaxy.buildapp DEBUG 2016-06-23 19:13:39,048 added url, path to static middleware: /plugins/visualizations/charts/static, ./config/plugins/visualizations/charts/static\ngalaxy.webapps.galaxy.buildapp DEBUG 2016-06-23 19:13:39,048 added url, path to static middleware: /plugins/visualizations/csg/static, ./config/plugins/visualizations/csg/static\ngalaxy.webapps.galaxy.buildapp DEBUG 2016-06-23 19:13:39,049 added url, path to static middleware: /plugins/visualizations/graphviz/static, ./config/plugins/visualizations/graphviz/static\ngalaxy.webapps.galaxy.buildapp DEBUG 2016-06-23 19:13:39,049 added url, path to static middleware: /plugins/visualizations/scatterplot/static, ./config/plugins/visualizations/scatterplot/static\n```]\n\n---\n\nclass: reduce90\n\n### It is Up!\n\n.code[```\ngalaxy.queue_worker INFO 2016-06-23 19:13:39,049 Binding and starting galaxy control worker for main\nStarting server in PID 21102.\nserving on http://127.0.0.1:8080\n```]\n\n---\n\n## Production Galaxy - usegalaxy.org\n\n---\n\nclass: centered\n\n.pull-left[\n#### Default\n\nSQLite\n\nPaste#http\n\nSingle process\n\nSingle host\n\nLocal jobs\n\n]\n\n.pull-right[\n#### Production\n\nPostgreSQL\n\nuWSGI / nginx\n\nMultiple processes\n\nMultiple hosts\n\nJobs across many clusters\n]\n\n* https://usegalaxy.org/production *\n\n---\n\n### postgres\n\n- Database server can scale way beyond default sqlite\n- https://www.postgresql.org/\n- github.com/galaxyproject/usegalaxy-playbook -> `roles/galaxyprojectdotorg.postgresql`\n\n---\n\n### nginx (or Apache)\n\n- Optimized servers for static content\n- https://www.nginx.com/resources/wiki/\n- github.com/galaxyproject/usegalaxy-playbook -> `templates/nginx/usegalaxy.j2`\n\n---\n\n### Multi-processes\n\nThreads in Python are limited by the [GIL](https://wiki.python.org/moin/GlobalInterpreterLock).\n\nRunning multiple processes of Galaxy and seperate processes for web handling\nand job processing works around this.\n\nThis used to be an important detail - but uWSGI makes things a lot easier.\n\n---\n\n![Cluster Support](../../images/cluster_support.svg)\n\n### Cluster Support\n\n---\n\n![usegalaxy.org web servers](../../images/usegalaxy_webservers.svg)\n\n---\n\n![usegalaxy.org servers](../../images/usegalaxyorg.svg)\n\n---\n\n## Q & A\n\n---\n\n---\n\n### Legacy Client Architecture\n\n???\n\nStill some backbone and templates here and there, might be better to drop though?\n\n---\n\n![Client-Server Communications](../../images/server_client.plantuml.svg)\n\n???\n\nWorkflow, Data Libraries, Visualization, History, Tool Menu,\nMany Grids, User and preference management.\n\n---\n\nclass: white\n\n![Backbone MVC](../../images/backbone-model-view.svg)\n\n### Backbone MVC\n\n---\n\n![Client-Server Communications (old)](../../images/server_client_old.plantuml.svg)\n\n???\n\nAdmin things, Reports and Tool Shed Web app\n\n---\n\n![WSGI Application](../../images/wsgi_app.svg)\n\n### Galaxy WSGI\n\n---\n\nclass: enlarge150\n\n### Why not just Django?\n\nWe do build on many of the same standards, concepts, and libraries - the entire stack isn't custom code but there is a non-trivial web framework defined in \"Galaxy\".\n\nThe Galaxy community likes Django and uses it to build newer webapps, Galaxy simply predates it and has evolved its own framework.\n"],"video_library":{"tutorial":null,"slides":null,"demo":null,"both":null,"session":{"title":"Galaxy Code Architecture Lecture Series","description":"In this 9-part Lecture series, John Chilton will walk you through the Galaxy Code Architecture.","videos":["dev/architecture/slides-ecosystem","dev/architecture/slides-models-managers","dev/architecture/slides-app-di","dev/architecture/slides-project-management","dev/architecture/slides-web-client","dev/architecture/slides-pluggable-components","dev/architecture/slides-principles","dev/architecture/slides-web-requests","dev/architecture/slides-files-directories"]}},"hands_on":false,"slides":true,"mod_date":"2022-07-19 15:02:04 +0000","pub_date":"2017-06-20 21:12:27 +0000","version":56,"api":"https://training.galaxyproject.org/training-material/api/topics/dev/tutorials/architecture/tutorial.json","tools":[],"supported_servers":[],"topic_name_human":"Development in Galaxy","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial","redirect_from":["/short/dev/architecture/slides","/short/S00043"]}