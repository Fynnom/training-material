{"layout":"tutorial_slides","title":"Introduction to the ToolFactory tutorial.","key_points":["The ToolFactory is a specialised Galaxy tool for users who routinely write their own analysis code","It turns useful, working command line scripts into shareable, toolshed-ready tools.","A code generator is easy to learn but only simple requirements can be fully automated"],"objectives":["This session introduces the ToolFactory and explains how it might be useful for programmers new to Galaxy"],"questions":null,"time_estimation":"1H","subtopic":"tooldev","requirements":[{"type":"internal","topic_name":"introduction","tutorials":["galaxy-intro-short","galaxy-intro-101-everyone"]},{"type":"internal","topic_name":"dev","tutorials":["tool-integration","interactive-environments"]}],"follow_up_training":[{"type":"internal","topic_name":"dev","tutorials":["tool-generators-advanced"]}],"contributors":["fubar2"],"recordings":[{"captioners":["fubar2"],"date":"2021-02-15","galaxy_version":"21.01","length":"30M","youtube_id":"8nKBfVM6240","speakers":["fubar2"]}],"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"S00050","url":"/topics/dev/tutorials/tool-generators/slides.html","topic_name":"dev","tutorial_name":"tool-generators","dir":"topics/dev/tutorials/tool-generators","symlink":null,"id":"dev/tool-generators","ref_tutorials":["<p>The Toolfactory and these tutorials are for developers and researchers learning about Galaxy, who routinely develop their own analysis scripts using\nbash, Python, Perl, Rscript or other common scientific scripting languages. The tutorials show a convenient way to bridge the gap between a\nworking command line script and a new tool that “wraps” that script so users can use it like any other tool in Galaxy.</p>\n\n<p>The ToolFactory is a Galaxy tool. Tools are constructed through the normal Galaxy interface when it is run. It is distributed as a self-installing\nconfiguration on a freshly cloned copy of the Galaxy source code. Generated tools are <em>immediately installed</em> and ready to run so you can see\nwhat the end user will see. Jobs can be re-run to edit and update generated tools, so Galaxy becomes an integrated development environment for Galaxy tools.</p>\n\n<p>A <a href=\"https://youtu.be//DK1eKz5TRs4\"><code class=\"language-plaintext highlighter-rouge\">Hello Galaxy!</code> demonstration</a> using the ToolFactory is available if you’d like to see a walk-through of some of\nthe hands-on material in this tutorial. You can see whether it looks useful for your work and decide whether to read the material below.</p>\n\n<p>This first tutorial is a slow introduction. For some developers, it may be too slow and the second tutorial may be a better place to start. This one steps\nin some detail through the process of using the ToolFactory\nto generate <code class=\"language-plaintext highlighter-rouge\">Hello World!</code> style simple demonstration Galaxy tools.</p>\n\n<p>The reader will soon learn if it might be adapted to their work. If so, an <a href=\"/training-material/topics/dev/tutorials/tool-generators-advanced/tutorial.html\">Advanced ToolFactory tutorial</a> is\navailable if the material here is relevant to your needs and you would like to learn more details about the different kinds of tools and features the ToolFactory offers.</p>\n\n<p>Experienced galaxy tool developers already have specialised tools and training so may not gain much from this material.\nUsers new to Galaxy from other scientific disciplines not yet familiar with the manual tool development process,\nmay find the ToolFactory appliance useful for familiarising themselves with tool development in Galaxy.</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#tools-tool-wrappers-and-the-toolfactory-in-galaxy\" id=\"markdown-toc-tools-tool-wrappers-and-the-toolfactory-in-galaxy\">Tools, tool wrappers and the ToolFactory in Galaxy.</a>    <ol>\n      <li><a href=\"#galaxy-interactive-tools-and-interactive-environments-gxitgie\" id=\"markdown-toc-galaxy-interactive-tools-and-interactive-environments-gxitgie\">Galaxy Interactive Tools and Interactive Environments (GxIT/GIE)</a></li>\n      <li><a href=\"#pathways-from-scripts-to-tools\" id=\"markdown-toc-pathways-from-scripts-to-tools\">Pathways from scripts to tools</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#the-toolfactory-development-server\" id=\"markdown-toc-the-toolfactory-development-server\">The ToolFactory development server</a></li>\n  <li><a href=\"#hello-world-with-the-toolfactory\" id=\"markdown-toc-hello-world-with-the-toolfactory\"><code class=\"language-plaintext highlighter-rouge\">Hello World!</code> with the ToolFactory.</a>    <ol>\n      <li><a href=\"#planning-the-new-tool\" id=\"markdown-toc-planning-the-new-tool\">Planning the new tool</a></li>\n      <li><a href=\"#putting-the-plan-into-action-using-the-toolfactory\" id=\"markdown-toc-putting-the-plan-into-action-using-the-toolfactory\">Putting the plan into action using the ToolFactory</a></li>\n      <li><a href=\"#extending-this-trivial-example\" id=\"markdown-toc-extending-this-trivial-example\">Extending this trivial example</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#installation-options\" id=\"markdown-toc-installation-options\">Installation Options</a></li>\n  <li><a href=\"#logging-in-as-an-administrator-to-a-new-toolfactory-server\" id=\"markdown-toc-logging-in-as-an-administrator-to-a-new-toolfactory-server\">Logging in as an administrator to a new ToolFactory server</a></li>\n  <li><a href=\"#docker\" id=\"markdown-toc-docker\">Docker</a></li>\n  <li><a href=\"#local-workstation-development-galaxy-server-installation\" id=\"markdown-toc-local-workstation-development-galaxy-server-installation\">Local workstation development Galaxy server installation</a>    <ol>\n      <li><a href=\"#exploring-the-toolfactory\" id=\"markdown-toc-exploring-the-toolfactory\">Exploring the ToolFactory</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#hello-world\" id=\"markdown-toc-hello-world\">Hello World!</a>    <ol>\n      <li><a href=\"#the-development-cycle\" id=\"markdown-toc-the-development-cycle\">The Development Cycle</a></li>\n      <li><a href=\"#hello-world-continued\" id=\"markdown-toc-hello-world-continued\">Hello World: Continued</a></li>\n      <li><a href=\"#hello-collections\" id=\"markdown-toc-hello-collections\">Hello Collections!</a></li>\n      <li><a href=\"#done\" id=\"markdown-toc-done\">Done!</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#next-steps\" id=\"markdown-toc-next-steps\">Next Steps</a></li>\n  <li><a href=\"#acknowledgements\" id=\"markdown-toc-acknowledgements\">Acknowledgements</a></li>\n</ol>\n\n</blockquote>\n\n<h1 id=\"tools-tool-wrappers-and-the-toolfactory-in-galaxy\">Tools, tool wrappers and the ToolFactory in Galaxy.</h1>\n\n<p>Tools are the fundamental building blocks for analyses in Galaxy. Thousands are available in the <a href=\"https://toolshed.g2.bx.psu.edu\">project tool library</a> from\nmany different kinds of science. Galaxy\ntools can be created from almost any Linux command line software packages or interpreter scripts. What happens\nat tool execution is decoupled from the framework itself, so the framework is indifferent to scientific discipline or coding language.\nThis is one reason for rapid uptake in new data intensive scientific areas. In many cases, growing sets of discipline specific tools are attracting\nwhole new communities of scientists into the Galaxy community.</p>\n\n<p>Tool execution is tightly constrained and secured. The only things that can be changed\nbefore execution are tool form exposed user-controlled settings, and data input selections. Everything else is fixed.\nThis is ideal for non-programmer Galaxy users who rely on prepared tools for their work. Tools are\nutterly predictable, to the point of being about as reproducible as any useful complex computing component is likely to be.\nThis is one of the strengths of the Galaxy framework for users requiring reproducible and shareable scientific analyses.</p>\n\n<h2 id=\"galaxy-interactive-tools-and-interactive-environments-gxitgie\">Galaxy Interactive Tools and Interactive Environments (GxIT/GIE)</h2>\n\n<p>In contrast to tools, GIE allow unconstrained scripting in a Galaxy environment. They offer complete freedom from the constraints of existing tools for\nappropriately skilled researchers and developers, because they allow code to run inside Galaxy that is not available in any existing tool.\nThese can be shared and reused and GIE can now be run in workflows.</p>\n\n<p>If a shareable tool that performs exactly the same functions as a GIE script is needed, the code can be extracted and turned into a parameterised command line script.\nAny functional script can be turned into a typical Galaxy tool.</p>\n\n<h2 id=\"pathways-from-scripts-to-tools\">Pathways from scripts to tools</h2>\n\n<p>Any command line script that runs correctly with sample test data input files and parameter settings can be turned into a Galaxy tool.\nThese may be derived from notebook scripts that have been consolidated and rewritten to take positional or argparse style parameters and tested\nin a shell using small data input files. Alternatively, skilled users can develop scripts and test them using small input data files on the command line\nwithout using Galaxy.</p>\n\n<p>The Galaxy developers support extensive software infrastructure for manually creating new tools including Planemo and the new Galaxy language server.\nThese are complex and powerful with substantial\nlearning curves but can be used to turn almost any software package into a tool.</p>\n\n<p>For those new to Galaxy, in many simple cases, it may be possible to generate a new tool “wrapping” a script in a few minutes, using an XML code generator for tool wrappers\nin a specialised Galaxy tool for developers.</p>\n\n<hr />\n\n<h1 id=\"the-toolfactory-development-server\">The ToolFactory development server</h1>\n\n<p>The ToolFactory implements an automated, form driven XML document generator, and an installer for newly generated tools so you can try them straight away\nin Galaxy. The ToolFactory can be “popped up” as a docker container conveniently but all work must be exported and saved before shutting down because no changes are persisted in the docker image. It can be installed locally by cloning and running the setup script from the git repository - ready to run in about 20 minutes as a fully functional, local, throw-away Galaxy development server.</p>\n\n<blockquote class=\"tip\">\n  <tip-title>The ToolFactory installs and configures a fresh development server clone.</tip-title>\n  <ul>\n    <li>Private local desktop Galaxy server or docker image\n      <ul>\n        <li>ideal for tinkering and experimentation</li>\n        <li>learning how the Galaxy server works and</li>\n        <li>developing new tools for new kinds of scientists.</li>\n      </ul>\n    </li>\n    <li>Any Galaxy tool from the toolshed can be installed and used.</li>\n    <li>Simple scripts can have tool wrapper XML generated, and installed for testing.</li>\n    <li>They appear as a shareable Toolshed ready archive in the history.</li>\n    <li>Newly generated tools appear in the tool menu after a refresh, and can be viewed and used as the user will see them.</li>\n    <li>Tool generation jobs can be rerun using the <i class=\"fas fa-redo\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-refresh</span> button on the history item after editing the form to make changes to the tool the user will see in Galaxy.</li>\n    <li>The development server is a self-installing clone of the Galaxy code, configured with the ToolFactory and sample tools to explore.\n      <ul>\n        <li>It can be backed up and persisted for as long as required, or it can be treated as a throw-away instance and deleted when no longer needed.</li>\n        <li>There is almost zero technical friction. Only time is required to initialise the server.</li>\n        <li>On a modern workstation or well-endowed laptop, it will perform well out of the box.</li>\n        <li>It is suitable only for development in a private deployment.</li>\n        <li>Please, never expose as a public server.</li>\n      </ul>\n    </li>\n  </ul>\n</blockquote>\n\n<p>The server was developed for programmers who need scripts they write turned in to new Galaxy tools for their own use and if sufficiently useful,\nfor others to share. Any user comfortable with scientific or general scripting languages on a Linux command\nline may find it useful if they ever need a Galaxy tool that wraps a working script. Linux command line utilities and scripting language interpreters supported by Conda can be used.\nSome Conda packages can also be used without a script, but the focus is on scripts.</p>\n\n<p>Generated tools pass Planemo lint and are functionally indistinguishable from equivalent\nmanually written tools. The tested toolshed archives contain a test based on the test data provided at tool generation.</p>\n\n<p>Working demonstration scripts are provided that use bash, Python, Rscript, Lisp, Prolog, Perl, sed, BWA and samtools, as described below.\nMany demonstrate ToolFactory features and all can be updated and changed easily, supporting learning by experimenting.\nMore useful tools can be developed using more complex scripts and as many inputs, outputs\nand user supplied parameters as needed by that script. Note that many tool complexities are not easily automated, so the\nXML generator provides only limited features. Tools using those limited features may still be useful in many situations but a specialised\ntool developer will be needed for many requirements.</p>\n\n<p>If you are a scientist/programmer or software developer new to Galaxy and new to the dark arts of Galaxy tool building, this tutorial may be of help.\nIt introduces an automated way to convert any useful script into a toolshed ready tool, quickly <em>inside</em> Galaxy.</p>\n\n<blockquote class=\"tip\">\n  <tip-title>Alternative ways to generate and see tools:</tip-title>\n  <ul>\n    <li>The <a href=\"https://github.com/galaxyproject/galaxy-language-server\">Galaxy Language Server</a>\n      <ul>\n        <li>Undergoing rapid development.</li>\n        <li>Specialised semi-automated tool building environment with VCS bindings.</li>\n      </ul>\n    </li>\n    <li>Planemo can manually <a href=\"https://planemo.readthedocs.io/en/latest/writing_standalone.html\">generate and serve tool XML</a> with an optional test.\n      <ul>\n        <li>Recommended for developers who will focus on building Galaxy tools on the command line.</li>\n        <li>Outstanding documentation.</li>\n        <li>Widely used. Requires relatively little time to figure out - Galaxy tool syntax takes longer.</li>\n        <li>No GUI, although can serve tools on a web port.</li>\n        <li>Command line only. Can create archives with additional steps.</li>\n        <li>Need to pass all i/o and parameter details at once on the command line.</li>\n        <li>Takes longer to learn to use and less accessible to many users than a form driven GUI might be.</li>\n        <li>Manual XML editing required for selects and collections.</li>\n        <li>See the recommended next steps at the end of this tutorial for Planemo related training.</li>\n      </ul>\n    </li>\n    <li>Many Unix utilities (sed, awk…) are already available as IUC tools.\n      <ul>\n        <li>They are <code class=\"language-plaintext highlighter-rouge\">generic</code> in the sense that a script is supplied at <strong>run time</strong> by the tool user.</li>\n        <li>This is possible with the ToolFactory, but for reproducible workflows, a specific script can be permanently built-in to make a reproducible tool.\n          <ul>\n            <li>The user supplies only those I/O and parameter values specified on the ToolFactory form.</li>\n            <li>Nothing else can be changed - just like with most Galaxy tools.</li>\n          </ul>\n        </li>\n      </ul>\n    </li>\n    <li>Choose whichever one fits best for the task at hand.</li>\n  </ul>\n</blockquote>\n\n<hr />\n\n<h1 id=\"hello-world-with-the-toolfactory\"><code class=\"language-plaintext highlighter-rouge\">Hello World!</code> with the ToolFactory.</h1>\n\n<p>A <code class=\"language-plaintext highlighter-rouge\">Hello World!</code> Galaxy tool is a good place to start, just like any other new programming environment.\nIt requires planning and preparation. The ToolFactory can automate the generation of a wrapper, but the developer must supply a working script and\nconfigure the inputs, outputs, user supplied parameters and metadata for the tool to be useful.</p>\n\n<h2 id=\"planning-the-new-tool\">Planning the new tool</h2>\n\n<p>A very simple bash script can be used to say “hello” but we make it a little more like a real\nGalaxy tool by adding a text box so the user may designate whatever they want to add after that\nsuch as “Hello, Galaxy Training Network”.</p>\n\n<p>Save the following sample as <code class=\"language-plaintext highlighter-rouge\">hello.sh</code>:</p>\n\n<blockquote class=\"code-in\">\n  <code-in-title>Starting bash script: Hello World</code-in-title>\n  <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">#!/bin/bash</span>\n<span class=\"nb\">echo</span> <span class=\"s2\">\"Hello </span><span class=\"nv\">$1</span><span class=\"s2\">!\"</span>\n</code></pre></div>  </div>\n</blockquote>\n\n<p>Test it on the command line by running:</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">bash hello.sh ToolFactory</code></p>\n\n<p>In this case, <code class=\"language-plaintext highlighter-rouge\">ToolFactory</code> is the first command line parameter. <code class=\"language-plaintext highlighter-rouge\">Hello ToolFactory!</code> should appear as the output.</p>\n\n<p>Once the script works and produces the expected outputs, the next step is to plan how the generated tool form should look to the user when run as a Galaxy tool.\nIn this case, a single text string is needed from the user.</p>\n\n<p>Tool definition involves configuring the major sections of the ToolFactory form for the new tool.</p>\n\n<p>Five categories needed to generate a script:</p>\n\n<ul>\n  <li>Conda dependency requirements</li>\n  <li>History data inputs</li>\n  <li>History outputs</li>\n  <li>User controlled parameters</li>\n  <li>Developer supplied code/scripts to embed</li>\n</ul>\n\n<p>For the <code class=\"language-plaintext highlighter-rouge\">hello</code> tool case:</p>\n\n<p>Conda dependency requirements:</p>\n\n<ul>\n  <li>There are no dependencies usually because bash is available and version is not important.</li>\n  <li>For completeness, it could be included as a Conda package. It’s your tool.</li>\n</ul>\n\n<p>History data inputs:</p>\n\n<ul>\n  <li>This tool requires no history input files.</li>\n</ul>\n\n<p>History outputs - data and collections:</p>\n<ul>\n  <li>It produces one text output file.</li>\n</ul>\n\n<p>User controlled parameters:</p>\n<ul>\n  <li>The tool form should show a single input text field for the user to supply.</li>\n</ul>\n\n<p>Developer supplied code/scripts to embed:</p>\n<ul>\n  <li>These are optional - many Conda packages will not need them.</li>\n  <li>Most simple use-cases will involve developer supplied, known working code.</li>\n  <li>Executing the tool is expected to write the decorated string to a new history item.</li>\n  <li>This must be known to work with suitable inputs on the command line.\n    <ul>\n      <li>Broken code == broken tool.</li>\n    </ul>\n  </li>\n  <li>Such as <code class=\"language-plaintext highlighter-rouge\">echo \"Hello $1!\"</code> as a Bash script</li>\n  <li>There are other advanced features, such as command over-rides where code can be embedded</li>\n</ul>\n\n<p>At this point, the plan for this new tool is:</p>\n\n<ul>\n  <li>The Galaxy user should see a helpfully labelled text input field on the tool form, and the usual tool <code class=\"language-plaintext highlighter-rouge\">execute</code> button.</li>\n  <li>When the tool executes, that text should be passed to the script running under bash, as the first positional parameter.</li>\n  <li>The script output should appear as a new output file in the history.</li>\n  <li>It should contain the expected decorated input text.</li>\n  <li>Galaxy tools need a test.\n    <ul>\n      <li>A simple test would be to supply a default value for the text string, run the tool and check that the output is correct.</li>\n    </ul>\n  </li>\n</ul>\n\n<h2 id=\"putting-the-plan-into-action-using-the-toolfactory\">Putting the plan into action using the ToolFactory</h2>\n\n<p>The form collects all the information needed for a new Galaxy tool. It is long and complex as a result, particularly with many repeated form elements for more complex tools.\nMuch of what is collected is used to construct a command line for the script when the generated tool runs.\nOther information such as the name and dependencies are needed to construct the relevant\nsections of the generated XML file in the toolshed archive. The ToolFactory form configured to generate the <code class=\"language-plaintext highlighter-rouge\">Hello</code> example can be viewed below.</p>\n\n<blockquote class=\"details\">\n  <details-title>Detail to explore: Annotated ToolFactory form for the `Hello World` example</details-title>\n  <figure id=\"figure-1\" style=\"max-width: 90%;\"><img src=\"../../images/ToolFactory_hello1form.png\" alt=\"First part of the form. \" width=\"941\" height=\"749\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/ToolFactory_hello1form.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 1</strong>:</span> The first part of the form collects the new tool name and dependencies to be installed. In this case, no Conda dependency is used. bash can be specified as a conda dependency, but it is not very version dependent and usually available. Reproducibility is not an issue for this trivial example. When it is, specify the dependencies and their versions here and the generated tool will always use them. If run in a shell, the bash script <code>echo \"Hello $1\"</code> in the text box will emit a string that includes the first command line parameter - such as \"Hello Galaxy Training Network\" This will be collected from STDOUT (configured below) into a new history output file (named and configured below). Positional parameters are chosen so the first parameter on the command line will be emitted when the script runs.</figcaption></figure>\n\n  <figure id=\"figure-2\" style=\"max-width: 90%;\"><img src=\"../../images/ToolFactory_hello2form.png\" alt=\"Second part of the form. \" width=\"714\" height=\"645\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/ToolFactory_hello2form.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 2</strong>:</span> The second section shows the new generated history output. It uses the special name <code>STDOUT</code> so the tool will take whatever the bash script writes and create a new text file called <code>Hello_output</code>. When the test is generated, the pass criterion is that the default value <code>Galaxy Training Network</code> should appear as the message in <code>hello_output</code>. no difference. Other criteria including <code>sim_size</code> are available for the test applied to each output file. There is no limit (other than your patience) to the number of new generated history outputs. Note that this example has no history input files. Again, any number of these can be specified on the form using the repeat.</figcaption></figure>\n\n  <figure id=\"figure-3\" style=\"max-width: 90%;\"><img src=\"../../images/ToolFactory_hello3form.png\" alt=\"Third part of the form. \" width=\"851\" height=\"734\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/ToolFactory_hello3form.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 3</strong>:</span> The third section shows the form settings for the user supplied parameter to be passed in to the bash script on the command line. It will be the first positional parameter because the ordinal position is 1. Argparse parameters are shown in other samples. The help and label text for each input file and user defined parameter will appear on the generated tool form for the user so make them informative. This is where you can change the default from \"World\" to \"Galaxy Training Network\" on the sample provided and regenerate it to make a new tool later in the tutorial.</figcaption></figure>\n\n</blockquote>\n\n<p>The generated tool XML appears in the history after the ToolFactory is executed and the tool itself is installed in the <code class=\"language-plaintext highlighter-rouge\">Local Tools</code> submenu.\nText on the form is specified in the XML and it all comes from the ToolFactory form.</p>\n\n<blockquote class=\"details\">\n  <details-title>Detail to explore: Generated XML and tool form</details-title>\n\n  <p><a href=\"https://docs.galaxyproject.org/en/latest/dev/schema.html\">Galaxy XML documentation is here</a></p>\n\n  <p>Note how text from the form appears in the generated tool XML</p>\n\n  <div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;tool</span> <span class=\"na\">name=</span><span class=\"s\">\"hello_toolshed\"</span> <span class=\"na\">id=</span><span class=\"s\">\"hello_toolshed\"</span> <span class=\"na\">version=</span><span class=\"s\">\"0.01\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"c\">&lt;!--Source in git at: https://github.com/fubar2/galaxy_tf_overlay--&gt;</span>\n  <span class=\"c\">&lt;!--Created by planemo@galaxyproject.org at 22/01/2021 13:48:27 using the Galaxy Tool Factory.--&gt;</span>\n  <span class=\"nt\">&lt;description&gt;</span>Says hello<span class=\"nt\">&lt;/description&gt;</span>\n  <span class=\"nt\">&lt;stdio&gt;</span>\n    <span class=\"nt\">&lt;exit_code</span> <span class=\"na\">range=</span><span class=\"s\">\"1:\"</span> <span class=\"na\">level=</span><span class=\"s\">\"fatal\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/stdio&gt;</span>\n <span class=\"nt\">&lt;version_command&gt;</span><span class=\"cp\">&lt;![CDATA[echo \"0.01\"]]&gt;</span><span class=\"nt\">&lt;/version_command&gt;</span>\n <span class=\"nt\">&lt;command&gt;</span><span class=\"cp\">&lt;![CDATA[bash\n $runme\n \"$sayhelloto\" &gt;</span> $Hello_output]]&gt;\n <span class=\"nt\">&lt;/command&gt;</span>\n  <span class=\"nt\">&lt;configfiles&gt;</span>\n    <span class=\"nt\">&lt;configfile</span> <span class=\"na\">name=</span><span class=\"s\">\"runme\"</span><span class=\"nt\">&gt;</span><span class=\"cp\">&lt;![CDATA[\n echo \"Hello $1\"\n ]]&gt;</span><span class=\"nt\">&lt;/configfile&gt;</span>\n  <span class=\"nt\">&lt;/configfiles&gt;</span>\n  <span class=\"nt\">&lt;inputs&gt;</span>\n    <span class=\"nt\">&lt;param</span> <span class=\"na\">label=</span><span class=\"s\">\"Say hello to\"</span> <span class=\"na\">help=</span><span class=\"s\">\"\"</span> <span class=\"na\">value=</span><span class=\"s\">\"Galaxy Training Network!!\"</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"na\">name=</span><span class=\"s\">\"sayhelloto\"</span> <span class=\"na\">argument=</span><span class=\"s\">\"sayhelloto\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/inputs&gt;</span>\n  <span class=\"nt\">&lt;outputs&gt;</span>\n    <span class=\"nt\">&lt;data</span> <span class=\"na\">name=</span><span class=\"s\">\"Hello_output\"</span> <span class=\"na\">format=</span><span class=\"s\">\"txt\"</span> <span class=\"na\">label=</span><span class=\"s\">\"Hello_output\"</span> <span class=\"na\">hidden=</span><span class=\"s\">\"false\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/outputs&gt;</span>\n  <span class=\"nt\">&lt;tests&gt;</span>\n    <span class=\"nt\">&lt;test&gt;</span>\n      <span class=\"nt\">&lt;output</span> <span class=\"na\">name=</span><span class=\"s\">\"Hello_output\"</span> <span class=\"na\">value=</span><span class=\"s\">\"Hello_output_sample\"</span> <span class=\"na\">compare=</span><span class=\"s\">\"diff\"</span> <span class=\"na\">lines_diff=</span><span class=\"s\">\"0\"</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">\"sayhelloto\"</span> <span class=\"na\">value=</span><span class=\"s\">\"Galaxy Training Network!!\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/test&gt;</span>\n  <span class=\"nt\">&lt;/tests&gt;</span>\n  <span class=\"nt\">&lt;help&gt;</span><span class=\"cp\">&lt;![CDATA[\n\n**What it Does**\n\nToolFactory demonstration - hello world in Galaxy\n\n\n\n------\n\n\nScript::\n\n    echo \"Hello $1\"\n\n]]&gt;</span><span class=\"nt\">&lt;/help&gt;</span>\n  <span class=\"nt\">&lt;citations&gt;</span>\n    <span class=\"nt\">&lt;citation</span> <span class=\"na\">type=</span><span class=\"s\">\"doi\"</span><span class=\"nt\">&gt;</span>10.1093/bioinformatics/bts573<span class=\"nt\">&lt;/citation&gt;</span>\n  <span class=\"nt\">&lt;/citations&gt;</span>\n<span class=\"nt\">&lt;/tool&gt;</span>\n</code></pre></div>  </div>\n\n  <p>Which, when seen loaded into Galaxy looks like an ordinary tool:</p>\n  <figure id=\"figure-4\" style=\"max-width: 90%;\"><img src=\"../../images/toolfactory_hello_demo_form.png\" alt=\"Generated form seen by the new tool user. \" width=\"1284\" height=\"532\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/toolfactory_hello_demo_form.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 4</strong>:</span> The form displayed when the generated Hello tool is executed is below. The user sees a text box to enter any string. When executed, it will be echoed to a new history file called <code>Hello_output</code></figcaption></figure>\n  <p>When a user runs the tool and enters some text in the text box, the decorated output will appear in a new history text dataset.\nThis may not seem very exciting but it provides a useful pattern that can easily be adapted and extended.\nThe script could do something far more interesting and could take unlimited input datasets, user configurable parameters and can produce as many outputs as needed in the history.</p>\n\n</blockquote>\n\n<blockquote class=\"tip\">\n  <tip-title>If this is confusing</tip-title>\n\n  <p>If you are not yet familiar with the basics of Galaxy tools covered in the\n<a href=\"/training-material/topics/dev/tutorials/tool-integration/slides.html\">tool integration training material</a>, the example form and XML\nwill be confusing. You may gain more by reviewing the introductory part of that material, and then coming back here?\nIt’s a lot to learn and it is complicated. While a form driven code generator can hide much of the complexity of generating the code,\nthe user must supply valid inputs for the code to be useful.</p>\n\n</blockquote>\n\n<h2 id=\"extending-this-trivial-example\">Extending this trivial example</h2>\n\n<p>This demonstrates a script based model, that can be extended to do more useful things with more complex scripts. More useful tools will ingest one or more user supplied input files, emit more complex outputs such as collections, and allow more user controlled parameters. \nThese ToolFactory features are illustrated in the examples, and discussed in the advanced Tutorial.</p>\n\n<p>Bash was used for this demonstration. Literally any scripting language, or any other useful package available in Conda, can be made available for tool execution by adding the appropriate dependency to the ToolFactory form.</p>\n\n<blockquote class=\"comment\">\n  <comment-title>ToolFactory limitations and scope</comment-title>\n\n  <p>The ToolFactory includes a very simple, automated, form driven XML code generator. Code automation is limited to the most common and easily implemented features. For example, conditionals are not available, so many complicated tools cannot be automatically generated with this tool. Send code.</p>\n  <ul>\n    <li>It works best wrapping simple R/Bash/Python and other interpreted scripts, with few user supplied parameters and a few input and output files.</li>\n    <li>Scripts are easier than some Conda packages\n      <ul>\n        <li>Scripts can often be modified to suit any ToolFactory limitations.</li>\n        <li>Advanced tool components such as conditional logic and related tricks, requiring manual coding, can sometimes be worked around.\n    - where those features are needed, a skilled developer will be required.</li>\n        <li>Many Conda dependencies will require XML conditionals or other tool XML constructs that are not easy to generate automatically.</li>\n        <li>While some simple requirements may be manageable, complex ones will not be suitable for the ToolFactory.</li>\n      </ul>\n    </li>\n    <li>Compared to the more usual shell and a text editor, The ToolFactory in Galaxy is a slow and clumsy way to debug your scripts.</li>\n    <li><strong>Starting a new ToolFactory tool with a know good command line and data</strong> is strongly recommended.\n      <ul>\n        <li>You will know exactly what to expect from the tool test for a first sanity check.</li>\n      </ul>\n    </li>\n    <li>Corrolary: Unless there is a working script that needs to be wrapped into a toolshed-ready Galaxy tool, the ToolFactory is of little use.</li>\n  </ul>\n</blockquote>\n\n<hr />\n\n<h1 id=\"installation-options\">Installation Options</h1>\n\n<blockquote class=\"warning\">\n  <warning-title>Security advisory!</warning-title>\n  <ul>\n    <li><em>Please do not install the ToolFactory on any public server</em></li>\n    <li>Configured as a default server, it has none of the usual additional security layers required for a safe public Galaxy server.</li>\n    <li>Although it will only run for administrative users, it allows unlimited scripting and exposes unwanted risk.</li>\n    <li>Install it locally and do not expose to the public internet.</li>\n    <li>For this reason, the training materials can’t make use of existing public Galaxy infrastructure like most of the GTN material.</li>\n  </ul>\n</blockquote>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Installing and managing a Galaxy ToolFactory development server</hands-on-title>\n\n  <h1 id=\"logging-in-as-an-administrator-to-a-new-toolfactory-server\">Logging in as an administrator to a new ToolFactory server</h1>\n\n  <p>Once you have a working installation running, as described below, the server should be ready after 20-30 seconds, at <a href=\"http://localhost:8080\">http://localhost:8080</a>.\n<em>The ToolFactory will only execute for administrative users as a minimal security barrier.</em> \nWhen the webserver starts, immediately login using the administrative user email <em>toolfactory@galaxy.org</em> with the password <em>ChangeMe!</em> which of course you should change.</p>\n\n  <h1 id=\"docker\">Docker</h1>\n  <p>Note: <em>Nothing is persistent in the image</em>. Useful work must be manually exported and saved.\nFor following the GTN tutorial and for test driving the ToolFactory for the first time, the docker version is recommended.\nNon-persistent means it does not remember anything after you stop the container. The next time it starts it will be a fresh installation.\nYou can save your work by exporting the histories and tool tarballs you want to keep. You need the history to rerun the job that generated a tarball, so the history is the most important thing to preserve if you make a useful tool.\nThe image must be pulled first, then run with port 8080 open for the Galaxy server.</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>docker pull quay.io/fubar2/galaxy_toolfactory:latest\ndocker run -d -p 8080:8080 quay.io/fubar2/galaxy_toolfactory:latest\n</code></pre></div>  </div>\n  <p>Check the docker logs until gunicorn is ready to serve or wait \nabout 20-30 seconds, then browse to <a href=\"http://localhost:8080\">http://localhost:8080</a>\nIf a Galaxy server appears, proceed with the login instructions above and you should see a history containing all the example tools. There is also a workflow that can reproduce that history if you set all the inputs to the right input datasets in that history.</p>\n\n  <h1 id=\"local-workstation-development-galaxy-server-installation\">Local workstation development Galaxy server installation</h1>\n\n  <p>A persistent desktop development ToolFactory server can be built by cloning the <a href=\"https://github.com/fubar2/galaxy_tf_overlay\">bootstrap github repository</a>, and using the included <em>localtf.sh</em> script, to build a complete, new development server with the ToolFactory installed and ready to run.</p>\n\n  <p>From a convenient directory, download the overlay configuration code repository, then\nrun the <em>localtf.sh</em> setup script from that cloned repository root directory:</p>\n\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git clone https://github.com/fubar2/galaxy_tf_overlay.git\ncd galaxy_tf_overlay\nsh ./localtf.sh\n</code></pre></div>  </div>\n  <p>Running <em>localtf.sh</em> will create a new directory, <em>galaxytf</em>, in the parent directory of the <em>galaxy_tf_overlay</em> clone.\nThe script will configure a fresh Galaxy 23.0 server, with the ToolFactory installed, in that new directory.\nThis takes twenty minutes or more to complete since the client must be built once. Visualisation plugins are not built to save some time.</p>\n\n  <p>The resulting development server directory will occupy ~9GB of disk space, so be sure your machine has plenty of room.\nIt will be based in a single directory, <em>galaxytf</em> in the same level as the cloned galaxy_tf_overlay repository directory, where the script should be run as shown above.</p>\n\n  <p>Rerunning the <em>localtf.sh</em> script will <em>destroy the entire galaxytf directory</em> - all ~9GB, and create a clean new installation.\nIt should only need to be run once in the life of the development server.</p>\n\n  <p>Remove the <em>galaxytf</em> directory to remove the entire development server when it is no longer needed. \nBefore doing that, save any useful histories, because the jobs in a ToolFactory history can be used to update a tool, because that history can be imported into a fresh development instance when needed and the job rerun with the necessary adjustments to the form.</p>\n\n  <p>Once installation is complete:</p>\n  <ul>\n    <li>start the server from the <em>galaxytf</em> directory with <em>sh run.sh</em>. The logs will be displayed.</li>\n    <li>^c (control+c) will stop it from the console.</li>\n    <li>In 23.0, <em>.venv/bin/galaxyctl start</em> and <em>.venv/bin/galaxyctl stop</em> should work.</li>\n  </ul>\n\n</blockquote>\n\n<h2 id=\"exploring-the-toolfactory\">Exploring the ToolFactory</h2>\n\n<ul>\n  <li>The best way to understand what can be done, is to look at the sample tools in the default administrator initial history.</li>\n  <li>As you explore the forms for each sample tool, you can see how the various options have been configured and what kinds of scripts or Conda packages this could be used for in your work.</li>\n  <li>The example script can be swapped out for another one known to work and additional new parameters added to suit, to extend the toy examples and create tools of use to your users.</li>\n  <li>Change the tool name when you do this on the newly edited form, then press <code class=\"language-plaintext highlighter-rouge\">execute</code>\n    <ul>\n      <li>The new wrapper XML will appear</li>\n      <li>The new tool will be installed in the <code class=\"language-plaintext highlighter-rouge\">Local Tools</code> submenu.</li>\n    </ul>\n  </li>\n  <li>If the tool name is not changed before re-generating a tool, the original installed tool will be updated with the new configuration. The old job can still be rerun from the history if necessary. Galaxy can be a clumsy but not entirely useless integrated development environment.</li>\n</ul>\n\n<hr />\n\n<h1 id=\"hello-world\">Hello World!</h1>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Building the Hello World example</hands-on-title>\n\n  <ol>\n    <li>Run <span><strong>ToolFactory</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i></span> with the following parameters:\n      <ul>\n        <li>“Dependencies, optional script and script interpreter”\n          <ul>\n            <li><em>“Interpreter for the script”</em>: <code class=\"language-plaintext highlighter-rouge\">bash</code></li>\n            <li><em>“Script for executable above to interpret”</em>: <code class=\"language-plaintext highlighter-rouge\">echo \"Hello $1\"</code></li>\n          </ul>\n        </li>\n        <li>“Data file input, output and settings forming the executable or script command line”\n          <ul>\n            <li><em>“Command line parameter passing method to use”</em>: <code class=\"language-plaintext highlighter-rouge\">positional</code></li>\n            <li>“Input and output files”\n              <ul>\n                <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Insert Outputs”</em>\n                  <ul>\n                    <li><em>“Name for this output to appear in new history”</em>: <code class=\"language-plaintext highlighter-rouge\">Hello_output</code></li>\n                    <li><em>“Select the datatype for this output”</em>: <code class=\"language-plaintext highlighter-rouge\">txt</code></li>\n                    <li><em>“Position”</em>: <code class=\"language-plaintext highlighter-rouge\">STDOUT</code></li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n            <li>“Arguments”\n              <ul>\n                <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Insert Command Line Parameters”</em>\n                  <ul>\n                    <li><em>“Choose the name for this parameter - MUST not be blank!”</em>: <code class=\"language-plaintext highlighter-rouge\">say_hello_to</code></li>\n                    <li><em>“Enter this parameter’s label for the form”</em>: <code class=\"language-plaintext highlighter-rouge\">Say hello to</code></li>\n                    <li><em>“Positional ordinal | argparse argument name”</em>: <code class=\"language-plaintext highlighter-rouge\">1</code></li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <p>Execute</p>\n    </li>\n    <li>\n      <p>Explore the outputs - do they match what you expected?</p>\n    </li>\n    <li>\n      <p>Refresh the page - click the home icon (or the “Analysis” tab) - to see the new tool in the <code class=\"language-plaintext highlighter-rouge\">Local Tools</code> section of the tools menu.</p>\n    </li>\n    <li>Run the tool that has been added - Select the new tool and examine the form. Check that all the changes are as they should be.</li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"the-development-cycle\">The Development Cycle</h2>\n\n<ol>\n  <li>Test on the command line and confirm it produces correct output with defaults and test data.</li>\n  <li>In the development server, start a new history</li>\n  <li>Upload all input samples used on the command line if any, for use in the tool test.</li>\n  <li>Open the ToolFactory tool form.\n    <ol>\n      <li>Define the tool metadata, dependencies, interpreter and optionally, paste the script.</li>\n      <li>Add the required history inputs using the small samples as examples.</li>\n      <li>Specify all the output files to be created in the user’s history.</li>\n      <li>Add any user adjustable command line parameters such as text fields.</li>\n      <li>Look at the samples to see how the ToolFactory form can be used.</li>\n    </ol>\n  </li>\n  <li>Execute the tool when the form is completed.</li>\n  <li>When the job is complete, refresh the page (Home icon or Analysis tab). The new tool will be found in the <code class=\"language-plaintext highlighter-rouge\">Local Tools</code> section, ready to run.</li>\n  <li>Run the new tool and check that it does what you expect, or re-generate after adjusting the form settings as needed.</li>\n  <li>If it needs any changes, open the XML history item created when the tool was generated and use the <i class=\"fas fa-redo\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-refresh</span> rerun button to\nrecreate the ToolFactory form as it was when you last ran it. Adjust as needed and use the tool form<code class=\"language-plaintext highlighter-rouge\">Execute</code> button to run the ToolFactory again with updated settings.\n    <ol>\n      <li>Rinse, repeat.</li>\n    </ol>\n  </li>\n  <li>Warning: generating a tool with an existing tool id such as <code class=\"language-plaintext highlighter-rouge\">mytool</code> will overwrite the installed version of any previously generated tool with id “mytool”.\n    <ol>\n      <li>Persisted jobs in user histories allow previous versions to be recreated to restore older versions.</li>\n    </ol>\n  </li>\n</ol>\n\n<p>Galaxy can be used as an Integrated Development Environment for tools - clunky but oddly satisfying.\nNote this is distinct from debugging the script - that is not at all satisfying in Galaxy unless you like waiting for jobs to finish.</p>\n\n<p>A shell is much better for that.</p>\n\n<figure id=\"figure-5\" style=\"max-width: 90%;\"><img src=\"../../images/ToolFactory_big_picture.png\" alt=\"Galaxy as an IDE for tools with the ToolFactory. \" width=\"1728\" height=\"973\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/ToolFactory_big_picture.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 5</strong>:</span> Galaxy can be used as a tool development environment for users who can write their own scripts as shown in this process overview slide.</figcaption></figure>\n\n<h2 id=\"hello-world-continued\">Hello World: Continued</h2>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Modifying the Hello World example</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Rerun the output of your previous job, and make the following changes</p>\n\n      <ul>\n        <li>“Dependencies, optional script and script interpreter”\n          <ul>\n            <li><em>“Script for executable above to interpret”</em>: <code class=\"language-plaintext highlighter-rouge\">echo \"Hello $1\"; echo \"Goodbye $2\";</code></li>\n          </ul>\n        </li>\n        <li>“Data file input, output and settings forming the executable or script command line”\n          <ul>\n            <li>“Arguments”\n              <ul>\n                <li>Add a second <i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Insert Command Line Parameters”</em>\n                  <ul>\n                    <li><em>“Choose the name for this parameter - MUST not be blank!”</em>: <code class=\"language-plaintext highlighter-rouge\">say_bye_to</code></li>\n                    <li><em>“Enter this parameter’s label for the form”</em>: <code class=\"language-plaintext highlighter-rouge\">Say bye to</code></li>\n                    <li><em>“Positional ordinal | argparse argument name”</em>: <code class=\"language-plaintext highlighter-rouge\">2</code></li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"hello-collections\">Hello Collections!</h2>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Building a File Splitter</hands-on-title>\n\n  <ol>\n    <li>Run <span><strong>ToolFactory</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i></span> with the following parameters:\n      <ul>\n        <li><em>“New tool ID and title for outputs”</em>: <code class=\"language-plaintext highlighter-rouge\">file_splitter</code></li>\n        <li>“Dependencies, optional script and script interpreter”\n          <ul>\n            <li><em>“Interpreter for the script”</em>: <code class=\"language-plaintext highlighter-rouge\">bash</code></li>\n            <li>\n              <p><em>“Script for executable above to interpret”</em>:</p>\n\n              <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">mkdir</span> <span class=\"nt\">-p</span> outputs/<span class=\"p\">;</span>\n<span class=\"nb\">split</span> <span class=\"nt\">--lines</span><span class=\"o\">=</span><span class=\"nv\">$2</span> <span class=\"nt\">--additional-suffix</span><span class=\"o\">=</span>.txt <span class=\"nv\">$1</span> outputs/\n</code></pre></div>              </div>\n            </li>\n          </ul>\n        </li>\n        <li>“Data file input, output and settings forming the executable or script command line”\n          <ul>\n            <li><em>“Command line parameter passing method to use”</em>: <code class=\"language-plaintext highlighter-rouge\">positional</code></li>\n            <li>“Input and output files”\n              <ul>\n                <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Insert Inputs”</em>\n                  <ul>\n                    <li><em>“Select an input file from your history”</em>: Choose any XML file from your history, we’ll use this as an example</li>\n                    <li><em>“Select the datatype for this output”</em>: <code class=\"language-plaintext highlighter-rouge\">txt</code></li>\n                    <li><em>“This will become the user prompt for the form so please make it informative”</em>: <code class=\"language-plaintext highlighter-rouge\">File to split</code></li>\n                    <li><em>“Positional: ordinal integer. Argparse: argument name. STDIN if the executable/script expects it”</em>: <code class=\"language-plaintext highlighter-rouge\">1</code></li>\n                  </ul>\n                </li>\n                <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Insert Output Collections”</em>\n                  <ul>\n                    <li><em>“Select the kind of collection for this output”</em>: <code class=\"language-plaintext highlighter-rouge\">List</code></li>\n                    <li><em>“Label for this collection”</em>: <code class=\"language-plaintext highlighter-rouge\">File Parts</code></li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n            <li>“Arguments”\n              <ul>\n                <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Insert Command Line Parameters”</em>\n                  <ul>\n                    <li><em>“Choose the name for this parameter - MUST not be blank!”</em>: <code class=\"language-plaintext highlighter-rouge\">lines</code></li>\n                    <li><em>“Select the type for this parameter”</em>: <code class=\"language-plaintext highlighter-rouge\">Integer</code>\n                      <ul>\n                        <li><em>“Enter this parameter’s default integer value”</em>: <code class=\"language-plaintext highlighter-rouge\">4</code></li>\n                      </ul>\n                    </li>\n                    <li><em>“Enter this parameter’s label for the form”</em>: <code class=\"language-plaintext highlighter-rouge\">Number of lines in each split file</code></li>\n                    <li><em>“Positional ordinal | argparse argument name”</em>: <code class=\"language-plaintext highlighter-rouge\">2</code></li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <p>Execute</p>\n    </li>\n    <li>\n      <p>Refresh the Galaxy Page and locate your <code class=\"language-plaintext highlighter-rouge\">collections_test</code> tool</p>\n    </li>\n    <li>\n      <p>Run the tool, selecting any text file in your history, e.g. the XML output from the ToolFactory that created this tool.</p>\n    </li>\n    <li>You should see a collection filled with files named <code class=\"language-plaintext highlighter-rouge\">aa</code> to <code class=\"language-plaintext highlighter-rouge\">ao</code> (or so), each with 4 lines from your file.</li>\n  </ol>\n</blockquote>\n\n<p>This is presented as a motivating example. It is up to you to imagine what else you might be able to accomplish with collection outputs!\nYou could extend this example to split a <code class=\"language-plaintext highlighter-rouge\">.fastq</code> file which could speed up your processing, or you could use collections to store extra images or plots produced by your tool.\nThey are also a convenient way to keep outputs together that are unlikely to be used downstream in a workflow, such as reports and images\nthat a user might want to be able to easily view if they want without cluttering up the history.</p>\n\n<blockquote class=\"warning\">\n  <warning-title>Collection Testing</warning-title>\n  <p>The default generated test for output collections always passes because it doesn’t test anything.\nSupplying a test over-ride is recommended for collections.\nFor a real test, one or more expected <element...></element...> tags must be provided so the test really does test something.</p>\n</blockquote>\n\n<h2 id=\"done\">Done!</h2>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>To safely shut the server down</hands-on-title>\n\n  <ol>\n    <li>Type <kbd>Ctrl-C</kbd> in the terminal where you ran <code class=\"language-plaintext highlighter-rouge\">sh run.sh</code>.</li>\n  </ol>\n\n</blockquote>\n\n<h3 id=\"limits-workarounds-and-value-proposition\">Limits, workarounds and value proposition</h3>\n\n<ul>\n  <li>The ToolFactory Appliance is a slightly clumsy but useable way to create, test and maintain Galaxy tools in a web GUI.</li>\n  <li>The ToolFactory tool is an automated code generator installed in the appliance tool menu</li>\n  <li>No generator can replace manual editing by a skilled developer other than in constrained simple cases.</li>\n  <li>These are common enough in the daily work of most data intensive scientific fields to make a tool generator potentially worth keeping handy.</li>\n  <li>For simple scripts and appropriate Conda packages, a professional Galaxy tool developer can probably do it quickly by hand, but those skills take time to acquire\nand are not widely available, particularly in scientific fields coming to Galaxy.</li>\n  <li>Tools can have command-override and test-override pasted in as in one of the BWA samples.\n    <ul>\n      <li>This can solve some of the limitations but if it is needed, it might be better to prepare the wrapper manually if a skilled developer is available.</li>\n      <li>Any logic in the <code class=\"language-plaintext highlighter-rouge\">&lt;command&gt;</code> section can probably always be replaced by equivalent code in a script at the cost of time and effort compared to templating.</li>\n      <li>Other aspects of tool logic such as output filters based on other parameter values can only be implemented in the wrapper document, not in a tool script.</li>\n    </ul>\n  </li>\n  <li>The ToolFactory can help new scientists and developers to quickly get some simple tools working for their colleagues while awaiting help with the complex ones.</li>\n</ul>\n\n<h1 id=\"next-steps\">Next Steps</h1>\n\n<p>Expand your knowledge further with the <a href=\"/training-material/topics/dev/tutorials/tool-generators-advanced/tutorial.html\">Advanced ToolFactory tutorial</a></p>\n\n<h1 id=\"acknowledgements\">Acknowledgements</h1>\n\n<p>This tutorial is based on the work of thousands of individual contributers to the Galaxy project over the last 15 years or so.\nThanks all! It has been a lot of fun.</p>\n\n<p>Special thanks to:</p>\n\n<ul>\n  <li><a href=\"/training-material/hall-of-fame/hexylena/\" class=\"contributor-badge-inline contributor-hexylena\">\n<img src=\"https://avatars.githubusercontent.com/hexylena?s=36\" alt=\"Helena Rasche avatar\" width=\"36\" class=\"avatar\" />\nHelena Rasche</a>\n for\n    <ul>\n      <li>review and contribution to the tutorial and associated code.</li>\n      <li>the vision of instant installation of generated tools for developer feedback.</li>\n      <li>elegantly generated lint-free XML provided by <a href=\"https://github.com/hexylena/galaxyxml\">galaxyml code</a></li>\n    </ul>\n  </li>\n  <li><a href=\"/training-material/hall-of-fame/mvdbeek/\" class=\"contributor-badge-inline contributor-mvdbeek\">\n<img src=\"https://avatars.githubusercontent.com/mvdbeek?s=36\" alt=\"Marius van den Beek avatar\" width=\"36\" class=\"avatar\" />\nMarius van den Beek</a>\n for thoughtful comments on the role of the ToolFactory that helped motivate the tutorial.</li>\n</ul>\n"],"ref_slides":["# What is the ToolFactory?\n\n- The ToolFactory is a Galaxy tool.\n- It generates new tools from working command line scripts.\n- Generated tools work exactly the same way as manually prepared Galaxy tools.\n- They can be installed from a toolshed and used in workflows.\n- The script is \"wrapped\" so it runs whenever the tool is executed.\n\n???\n\nThe ToolFactory is a Galaxy tool for developers and scientists who routinely write their own analysis code.\nIt generates fully functional, toolshed-ready tools.\nSupplied with a working command line script, it can generate a new Galaxy tool that \"wraps\" that script.\nScripts useful to other scientists can be widely shared through any toolshed.\n\n---\n\n# BYO programming skills\n\n- If you write useful scripts and want to make them into new tools, the ToolFactory can help.\n- Programming and scripting skills are needed to make new analysis scripts.\n- Useful new analysis scripts are required inputs for the ToolFactory.\n- Scripting skills are needed for this training material to be useful.\n\n???\n\nProgramming skills are needed to make any new Galaxy tool.\nThe ToolFactory automatically generates wrapper code, but does not write the script.\nIf you routinely create generalisable, working analysis code, the ToolFactory can help share your work as real Galaxy tools.\n\n---\n\n# The ToolFactory needs a **working command line script** to be useful\n\n- Bash, Rscript, Python,...,Lisp. Any interpreter available in Conda.\n- Parameter settings, data input file paths and output file paths are passed to the script on the command line.\n- `Argparse` (named) or `positional` parameter passing can be used.\n- For example: `python mangiare.py --food zitti.pasta --cooked \"al dente\" --sauce \"tomato+basil\"`\n   - `mangiare.py` is executed as a Python script.\n   - Parameters are passed in `argparse` format\n   - Code must deal correctly with the parameters\n     - `food` set to \"zitti.pasta\"\n     - `cooked` set to \"al dente\"\n     - and so on.\n- It **works** if you can run a command like the one above in a Linux shell and get useful, correct outputs.\n\n???\n\nThe ToolFactory can help turn working scripts into new Galaxy tools.\nAny scripting language available in Conda will work.\nPositional or \"Argparse\" style command line parameter passing can be used.\nThe generated tool will not work if the script was broken to start with.\nWithout a working script, it is about as useful as a chocolate teapot.\n\n---\n\n# What does the developer need to do ?\n\n- Debug the script so it works correctly on the command line.\n- Upload the test data samples into a new Galaxy history.\n- Start the ToolFactory tool.\n  - Paste the script\n  - Describe the inputs, outputs and parameters.\n- A completed ToolFactory form specifies a new tool.\n- Each input is defined with a small sample selected from the history.\n  - This sample is used in the generated tool test.\n\n???\n\nThe developer prepares a working script and input samples.\nThe sample input files are uploaded to a Galaxy history.\nThe completed ToolFactory form collects all the information needed to generate a new tool.\nThe samples become the inputs for the built-in test.\n\n---\n\n# What happens when the ToolFactory is executed?\n\n- The information from the form drives a code generator.\n- The galaxyxml library generates the wrapper XML\n- A new XML wrapper is created in the history\n- The new tool is installed in the local Galaxy.\n\n???\n\nAn XML tool wrapper is generated in the history.\nThe new tool is installed in the local server.\nIt is ready to run locally.\nIt looks and acts just like any manually prepared Galaxy tool.\n\n---\n\n# What happens when a new tool is updated with the `planemo_test` tool ?\n\n- Planemo generates the tool test outputs and then tests the finalised tool.\n- Test reports and the updated toolshed archive are written to the history\n- If the tool is useful to others, it can be shared through any toolshed.\n\n???\n\nThe Planemo test and lint reports and a copy of the generated XML wrapper and a log file are returned.\nThe tested toolshed archive is ready to share if the tests and linting passed.\n\n---\n\n# Easy and quick to learn, but limited compared to manual tool wrapping.\n\n- Automated code generators are limited in scope in comparison to a skilled programmer.\n- Galaxy developers maintain a separate, comprehensive manual tool development infrastructure.\n- The ToolFactory is limited to simple scripts but it takes far less time for a developer to become productive.\n- Scripts involving conditional parameter complexities must deal with them internally, otherwise a manually prepared tool wrapper must be written.\n- The job that generates a tool can be re-run like any other persistent Galaxy job\n- This allows the tool form to be adjusted and the generated tool updated at any time if changes are needed.\n\n???\n\nAlthough a code generator is easy to learn to use, it is limited to relatively simple scripts.\nMany Conda packages require complexities that no code generator can provide. Hand written code is required.\nScripts can sometimes be adapted to work around the many limitations of the code generator.\n\n---\n\n# The big picture\n\n![Galaxy as an IDE for tools with the ToolFactory](../../images/ToolFactory_big_picture.png)\n\n???\n\nGalaxy can serve as a persistent integrated tool development environment.\nThe developer supplies all the details for the new tool on the form, including a known good script with test data.\nClicking \"Run Tool\" on the form runs a Galaxy job.\nIt generates the new tool wrapper, writing it to the history and installing it in the local Galaxy.\nToolFactory jobs are like any other jobs - clicking the redo button will recreate the form used.\nThe developer can return to adjust the form and generate an updated tool at any time.\nIn this way, tools can easily be maintained as long as the job that generates them is saved.\n\n---\n\n# If you got this far\n\n- [There is a tutorial to follow](./tutorial.html)\n- It introduces the ToolFactory in more detail, shows how to run your own and how to explore the samples to learn how to use it.\n\n???\n\nIf you would like to learn more about the ToolFactory, there is a far more detailed introduction and hands-on tutorial available.\nWe hope you will enjoy learning about and using the ToolFactory in your work.\n"],"hands_on":true,"slides":true,"mod_date":"2024-05-29 14:28:52 +0000","pub_date":"2021-05-26 12:43:45 +0000","version":130,"api":"https://training.galaxyproject.org/training-material/api/topics/dev/tutorials/tool-generators/tutorial.json","tools":[],"supported_servers":[],"topic_name_human":"Development in Galaxy","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":true,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":true},"license":"CC-BY-4.0","type":"tutorial","logo":"GTN","zenodo_link":"","redirect_from":["/short/dev/tool-generators/slides","/short/S00050"]}