{"layout":"tutorial_slides","title":"High Performance Computing for Pairwise Genome Comparison","zenodo_link":"https://doi.org/10.5281/zenodo.4485547","questions":["What is sequence comparison and why does it matter?","What are the challenges and how can we use High Performance Computing to overcome them?","How can we use Galaxy for large scale sequence comparison?"],"objectives":["Learn the basics of genome comparison","Run sequence comparisons in Galaxy","Using GECKO for sequence comparison","Using CHROMEISTER for comparing large sequences such as plants and chromosomes"],"time_estimation":"2h","key_points":["Sequence comparison is difficult due to its computational complexity and the growth of databases","There are several approaches to sequencen comparison, and we need to know which one to use (DP-based, alignment-free, seeds, etc.)","We have learnt the internals regarding GECKO, GECKO-MGV and CHROMEISTER to work with single chromosome comparisons and/or exhaustive searchs, the post-processing and for larger/noisy experiments, respectively"],"requirements":null,"contributors":["estebanpw"],"js_requirements":{"mathjax":15096,"mermaid":false},"short_id":"S00068","url":"/topics/genome-annotation/tutorials/hpc-for-lsgc/slides.html","topic_name":"genome-annotation","tutorial_name":"hpc-for-lsgc","dir":"topics/genome-annotation/tutorials/hpc-for-lsgc","symlink":null,"id":"genome-annotation/hpc-for-lsgc","ref_tutorials":["<p>Sequence comparison is a core problem in bioinformatics. It is used widely in evolutionary studies, structural and functional analyses, assembly, metagenomics, etc. Despite its regular presence in everyday Life-sciences pipelines, it is still not a trivial step that can be overlooked. Therefore, understanding how sequence comparison works is key to developing efficient workflows that are central to so many other disciplines.</p>\n\n<p>In the following tutorial, we will learn how to compare both small and large sequences using both seed-based alignment methods and alignment-free methods, and how to post-process our comparisons to refine our results. Besides, we will also learn about the theoretical background of sequence comparison, including why some tools are suitable for some jobs and others are not.</p>\n\n<p>This tutorial is divided into two large sections:</p>\n\n<ul>\n  <li>Fine-grained sequence comparison: In this part of the tutorial we will use <code class=\"language-plaintext highlighter-rouge\">GECKO</code> (<span class=\"citation\"><a href=\"#GECKO\">Torreno and Trelles 2015</a></span>) to perform sequence alignment between small sequences. We will also identify, extract and re-align regions of interest.</li>\n  <li>Coarse-grained sequence comparison: In this part of the tutorial, we will tackle on how to compare massive sequences using <code class=\"language-plaintext highlighter-rouge\">CHROMEISTER</code> (<span class=\"citation\"><a href=\"#perez2019ultra\">Pérez-Wohlfeil <i>et al.</i> 2019</a></span>), an alignment-free sequence comparison tool. We will generate visualization plots for the comparison of large plant genomes and automatically detect large-scale rearrangements.</li>\n</ul>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#fine-grained-sequence-comparison\" id=\"markdown-toc-fine-grained-sequence-comparison\">Fine-grained sequence comparison</a>    <ol>\n      <li><a href=\"#preparing-the-data\" id=\"markdown-toc-preparing-the-data\">Preparing the data</a></li>\n      <li><a href=\"#running-the-comparison\" id=\"markdown-toc-running-the-comparison\">Running the comparison</a></li>\n      <li><a href=\"#post-processing-extracting-alignments\" id=\"markdown-toc-post-processing-extracting-alignments\">Post-processing: extracting alignments</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#coarse-grained-sequence-comparison\" id=\"markdown-toc-coarse-grained-sequence-comparison\">Coarse-grained sequence comparison</a>    <ol>\n      <li><a href=\"#introduction\" id=\"markdown-toc-introduction\">Introduction</a></li>\n      <li><a href=\"#preparing-the-data-1\" id=\"markdown-toc-preparing-the-data-1\">Preparing the data</a></li>\n      <li><a href=\"#running-the-comparison-1\" id=\"markdown-toc-running-the-comparison-1\">Running the comparison</a></li>\n      <li><a href=\"#post-processing-detecting-rearrangements\" id=\"markdown-toc-post-processing-detecting-rearrangements\">Post-processing: detecting rearrangements</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#conclusion\" id=\"markdown-toc-conclusion\">Conclusion</a></li>\n</ol>\n\n</blockquote>\n\n<h1 id=\"fine-grained-sequence-comparison\">Fine-grained sequence comparison</h1>\n\n<p>Imagine you are working on an evolutionary study regarding the species <em>Mycoplasma hyopneumoniae</em>. In particular, you are interested in the strains <code class=\"language-plaintext highlighter-rouge\">232</code> and <code class=\"language-plaintext highlighter-rouge\">7422</code> and wish to compare their DNA sequence to know more about the evolutionary changes that took place between both. The workflow you will follow starts with (1) acquiring the data, (2)  getting it ready for Galaxy, (3) running the comparison and (4) inspecting and working with the resulting alignments. Let’s go!</p>\n\n<h2 id=\"preparing-the-data\">Preparing the data</h2>\n\n<p>First we will be uploading the data to Galaxy so that we can run our tools on it.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Mycoplasma data upload</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Create a new history for this tutorial and give it a descriptive name (e.g. “Mycoplasma comparison hands-on”)</p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-creating-a-new-history\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-creating-a-new-history\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Creating a new history</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <p>Click the <i class=\"fas fa-plus\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">new-history</span> icon at the top of the history panel:</p>   <p><img src=\"/training-material/shared/images/history_create_new.svg\" alt=\"UI for creating new history\" /></p>   <!-- the original drawing can be found here https://docs.google.com/drawings/d/1cCBrLAo4kDGic5QyB70rRiWJAKTenTU8STsKDaLcVU8/edit?usp=sharing --> </blockquote>\n      <p><!--END_SNIPPET--></p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-renaming-a-history\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-renaming-a-history\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Renaming a history</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ol>   <li>Click on <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-pencil</span> (<strong>Edit</strong>) next to the history name (which by default is “Unnamed history”)</li>   <li>Type the new name</li>   <li>Click on <strong>Save</strong></li> </ol>   <p>If you do not have the <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-pencil</span> (<strong>Edit</strong>) next to the history name:</p>   <ol>   <li>Click on <strong>Unnamed history</strong> (or the current name of the history) (<strong>Click to rename history</strong>) at the top of your history panel</li>   <li>Type the new name</li>   <li>Press <kbd>Enter</kbd></li> </ol> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n    <li>\n      <p>Import <code class=\"language-plaintext highlighter-rouge\">mycoplasma-232.fasta</code> and <code class=\"language-plaintext highlighter-rouge\">mycoplasma-7422.fasta</code> from <a href=\"https://zenodo.org/record/4485547#.YBj8XHmCGUk\">Zenodo</a>.</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://zenodo.org/record/4485547/files/mycoplasma-232.fasta\nhttps://zenodo.org/record/4485547/files/mycoplasma-7422.fasta\n</code></pre></div>      </div>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-importing-via-links\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-importing-via-links\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Importing via links</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ul>   <li>Copy the link location</li>   <li>     <p>Click <i class=\"fas fa-upload\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-upload</span> <strong>Upload Data</strong> at the top of the tool panel</p>   </li>   <li>Select <i class=\"fa fa-edit\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-wf-edit</span> <strong>Paste/Fetch Data</strong></li>   <li>     <p>Paste the link(s) into the text field</p>   </li>   <li>     <p>Press <strong>Start</strong></p>   </li>   <li><strong>Close</strong> the window</li> </ul> </blockquote>\n      <p><!--END_SNIPPET--></p>\n\n      <p>As default, Galaxy takes the link as name, so rename them.</p>\n    </li>\n    <li>\n      <p>Rename the files to <code class=\"language-plaintext highlighter-rouge\">232.fasta</code> and <code class=\"language-plaintext highlighter-rouge\">7422.fasta</code> and change the datatype if needed to <code class=\"language-plaintext highlighter-rouge\">fasta</code> (Galaxy will auto-discover the format of the files).</p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-renaming-a-dataset\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-renaming-a-dataset\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Renaming a dataset</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ul>   <li>Click on the <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-pencil</span> <strong>pencil icon</strong> for the dataset to edit its attributes</li>   <li>In the central panel, change the <strong>Name</strong> field</li>   <li>Click the <strong>Save</strong> button</li> </ul> </blockquote>\n      <p><!--END_SNIPPET--></p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-changing-the-datatype\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-changing-the-datatype\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Changing the datatype</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ul>   <li>Click on the <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-pencil</span> <strong>pencil icon</strong> for the dataset to edit its attributes</li>   <li>In the central panel, click <i class=\"fas fa-database\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-chart-select-data</span> <strong>Datatypes</strong> tab on the top</li>   <li>In the <i class=\"fas fa-database\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-chart-select-data</span> <strong>Assign Datatype</strong>, select  your desired datatype  from “<em>New type</em>” dropdown     <ul>       <li>Tip: you can start typing the datatype into the field to filter the dropdown menu</li>     </ul>   </li>   <li>Click the <strong>Save</strong> button</li> </ul> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>If you were successful, both sequences should now be available as <code class=\"language-plaintext highlighter-rouge\">.fasta</code> datasets in your history.</p>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <ol>\n    <li>What do you think about the size of the sequences in regards to the difficulty of comparing them? (You can check the size of the files by clicking on the information icon)</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <ol>\n      <li>It always depends on the focus of our study. For instance, if we were looking for optimal alignments, two 1 MB sequences are indeed large enough to make most approaches either fail or take a decent amount of time and resources. On the other hand, if we were looking for seed-based local alignments (e.g. <code class=\"language-plaintext highlighter-rouge\">GECKO</code> or <code class=\"language-plaintext highlighter-rouge\">BLAST</code> (<span class=\"citation\"><a href=\"#BLAST\">Altschul <i>et al.</i> 1990</a></span>) ), the comparison would require merely seconds (check the slides for more information).</li>\n    </ol>\n\n  </blockquote>\n\n</blockquote>\n\n<p>As we discussed in the previous section, running optimal aligning tools on such “small” data can be difficult (in fact, tools such as the well-known <code class=\"language-plaintext highlighter-rouge\">EMBOSS needle</code> will require cuadratic amounts of time and memory, whereas tools such as <code class=\"language-plaintext highlighter-rouge\">EMBOSS strecher</code> will require quadratic time (<span class=\"citation\"><a href=\"#myers1988optimal\">Myers and Miller 1988</a></span>)). These limitations can make it impractical in many situations. Therefore, we will now learn how to overcome these limitations by employing seed-based methods, particularly <code class=\"language-plaintext highlighter-rouge\">GECKO</code>.</p>\n\n<h2 id=\"running-the-comparison\">Running the comparison</h2>\n\n<p>We will now run a comparison between <em>Mycoplasma hyopneumoniae 232</em> and <em>Mycoplasma hyopneumoniae 7422</em> in Galaxy using <code class=\"language-plaintext highlighter-rouge\">GECKO</code>.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Comparing two mycoplasmas with GECKO</hands-on-title>\n  <ol>\n    <li><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/iuc/gecko/gecko/1.2\" title=\"GECKO tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>GECKO</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 1.2)</span> with the following parameters\n      <ul>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Query sequence”</em>: <code class=\"language-plaintext highlighter-rouge\">232.fasta</code></li>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Reference sequence”</em>: <code class=\"language-plaintext highlighter-rouge\">7422.fasta</code></li>\n        <li><em>“K-mer seed size”</em>: <code class=\"language-plaintext highlighter-rouge\">16</code></li>\n        <li><em>“Minimum length”</em>: <code class=\"language-plaintext highlighter-rouge\">50</code></li>\n        <li><em>“Minimum similarity”</em>: <code class=\"language-plaintext highlighter-rouge\">60</code></li>\n        <li><em>“Generate alignments file?”</em>: <code class=\"language-plaintext highlighter-rouge\">Extract alignments (CSV and alignments file)</code></li>\n      </ul>\n    </li>\n    <li>Check out the files that have been generated, i.e. the <code class=\"language-plaintext highlighter-rouge\">CSV</code> and the <code class=\"language-plaintext highlighter-rouge\">Alignments</code> file.\n      <blockquote class=\"question\">\n        <question-title></question-title>\n\n        <ol>\n          <li>What information is provided in the <code class=\"language-plaintext highlighter-rouge\">CSV</code> file?</li>\n          <li>And in the <code class=\"language-plaintext highlighter-rouge\">Alignments</code> file?</li>\n          <li>What happens if we re-run the experiment with other parameters (e.g. change <code class=\"language-plaintext highlighter-rouge\">Minimum length</code> to <code class=\"language-plaintext highlighter-rouge\">5000</code> and <code class=\"language-plaintext highlighter-rouge\">Minimum similarity</code> to <code class=\"language-plaintext highlighter-rouge\">95</code>)?</li>\n        </ol>\n\n        <blockquote class=\"solution\">\n          <solution-title></solution-title>\n          <ol>\n            <li>The <code class=\"language-plaintext highlighter-rouge\">CSV</code> file contains a summary of the detected High-Scoring Segment Pairs (HSPs) or alignments. The file is divided in a few rows of metadata (e.g. containing the sequence names) and one row per alignment detected. Check out the <code class=\"language-plaintext highlighter-rouge\">GECKO</code> help (bottom of the tool <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> page to know what each column does!</li>\n            <li>The <code class=\"language-plaintext highlighter-rouge\">Alignments</code> file contains the actual regions of the query and reference sequence for each alignment detected. With this file, you can investigate individual alignments, find mutations and differences between the sequences, extract the aligned part, etc.</li>\n            <li>Changing the parameters affect the number of alignments GECKO will detect. In fact, if we use parameters that are too restrictive, then we might not get any alignments at all! On the other hand, if we use parameters that are too permissive, then we might get a lot of noise in the output. Thus, it is very important to understand what the parameters do. Never leave your parameters default, always know what they do! Check out the help section to get information about the parameters.</li>\n          </ol>\n        </blockquote>\n      </blockquote>\n\n      <blockquote class=\"comment\">\n        <comment-title>Note about parameters</comment-title>\n        <ol>\n          <li>Besides the <code class=\"language-plaintext highlighter-rouge\">minimum length</code> and <code class=\"language-plaintext highlighter-rouge\">minimum similarity</code> parameters, which are applied as a filter after the comparison is completed, the <code class=\"language-plaintext highlighter-rouge\">k-mer seed size</code> is an internal parameter that regulates the number of seeds that can be found. A smaller <code class=\"language-plaintext highlighter-rouge\">k-mer</code> size will translate into detecting more seeds, which are starting points for alignments.</li>\n          <li>Notice that this parameter must be taken into account depending on the type of sequence that we are working with. For example, if we set <code class=\"language-plaintext highlighter-rouge\">k-mer seed size</code> to <code class=\"language-plaintext highlighter-rouge\">32</code>, then <code class=\"language-plaintext highlighter-rouge\">GECKO</code> will attempt to find alignments that start with 32 consecutive, equally aligned base pairs between the two sequences. If your sequences are far away from each other (in terms of evolutionary distance) then it will be very hard to find such 32 consecutive base pairs!</li>\n          <li>Some advice: this parameter can affect performance greatly. For instance, setting <code class=\"language-plaintext highlighter-rouge\">k-mer seed size</code> to <code class=\"language-plaintext highlighter-rouge\">8</code> in the case of chromosomes can require much more computing time than using for instance <code class=\"language-plaintext highlighter-rouge\">32</code>. On the other hand, if we set it to <code class=\"language-plaintext highlighter-rouge\">32</code> in the case of small bacterial sequences, we might not find any alignments!</li>\n        </ol>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"post-processing-extracting-alignments\">Post-processing: extracting alignments</h2>\n\n<p>We will now use additional tools to post-process our alignments. Consider the case where you are interested in a set of DNA repeats located at a given position in the sequences.</p>\n\n<blockquote class=\"comment\">\n  <comment-title>Note about interactive exploration of alignments</comment-title>\n  <p>In a different scenario where e.g. you do not know what to look for or need to find the location of particular alignments, and you need an interactive exploration, you can also use <code class=\"language-plaintext highlighter-rouge\">GECKO-MGV</code> to ease the process. <code class=\"language-plaintext highlighter-rouge\">GECKO-MGV</code>generates a visual representation where you can zoom in and out of the alignments, select and export as FASTA, etc., find more in the <code class=\"language-plaintext highlighter-rouge\">GECKO-MGV</code> article (<span class=\"citation\"><a href=\"#diaz2019combining\">Diaz-del-Pino <i>et al.</i> 2019</a></span>) or run it with a dockerized container from <a href=\"https://github.com/estebanpw/docker-geckomgv\">here</a>.</p>\n</blockquote>\n\n<p>For our current experiment, we will be looking for the following set of repeats:</p>\n\n<figure id=\"figure-1\" style=\"max-width: 90%;\"><img src=\"../../images/hpc-for-lsgc/GeckoMGV01.PNG\" alt=\"Mycoplasma hyopneumoniae comparison example. \" width=\"1064\" height=\"495\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/hpc-for-lsgc/GeckoMGV01.PNG\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 1</strong>:</span> (Left) Sequence comparison between <em>Mycoplasma hyopneumoniae</em> 232 and 7422. (Right) Zoomed-in region where the repeats of interest are located.</figcaption></figure>\n\n<p>Let’s extract the repeats highlighted in red (Figure 1, right) which are aligned to the position 19,610 in the query sequence and perform a multiple sequence alignment on them to check if there are any evolutionary differences. The sequences will be extracted from the reference (i.e. <em>Mycoplasma hyopneumoniae 7422</em>) since this is where the repeats duplicate in respect to the query sequence (notice that in Figure 1 we are selecting the ones stacked vertically).</p>\n\n<h3 id=\"extracting-repeat-alignments-and-running-multiple-sequence-alignment\">Extracting repeat alignments and running Multiple Sequence Alignment</h3>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Multiple Sequence Alignment of a set of repeats</hands-on-title>\n  <ol>\n    <li>Search for the tool <span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_awk_tool/1.1.2\" title=\"Text reformatting with AWK tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>Text reformatting with AWK</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 1.1.2)</span> and run it with the following parameters\n      <ul>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“File to process”</em>: <code class=\"language-plaintext highlighter-rouge\">Gecko on data 2 and 1: Alignments</code> (Note: if you have run the previous experiment with different parameters, make sure to select here the alignments file corresponding to the first experiment, and make sure you ran it with the same parameters!)</li>\n        <li><em>“AWK Program”</em>: <code class=\"language-plaintext highlighter-rouge\">BEGIN{FS=\" \"} /@\\(196[0-9][0-9]/ { printf(\"&gt;sequence%s%s\\n\", $(NF-1), $NF); getline; while(substr($0,1,1) != \"&gt;\"){ if(substr($0,1,1) ==\"Y\"){ print $2; } getline; } } </code> (Paste this code into the text box)</li>\n      </ul>\n\n      <blockquote class=\"comment\">\n        <comment-title>Note about AWK</comment-title>\n        <p>Although the AWK script looks a bit threatening, it is very simple:</p>\n        <ul>\n          <li>The <code class=\"language-plaintext highlighter-rouge\">BEGIN{FS=\" \"}</code> tells it to separate fields by a space.</li>\n          <li>The <code class=\"language-plaintext highlighter-rouge\">/@\\(196[0-9][0-9]/</code> is a regular expression that indicates we are looking for a line containing the string <code class=\"language-plaintext highlighter-rouge\">@(196xx</code> where <code class=\"language-plaintext highlighter-rouge\">xx</code> are two random digits between 0 and 9. This is used to identify the repeats that start at coordinates 19,600 to 19,699.</li>\n          <li>The previous regular expression triggers an action. The first part <code class=\"language-plaintext highlighter-rouge\">printf(\"&gt;sequence%s%s\\n\", $(NF-1), $NF); getline</code> prints out the sequence ID along with the coordinates and moves on to the next line.</li>\n          <li>The second part <code class=\"language-plaintext highlighter-rouge\">while(substr($0,1,1) != \"&gt;\"){ if(substr($0,1,1) ==\"Y\"){ print $2; } getline;</code> scans the next lines and prints the nucleotide sequence corresponding to the <code class=\"language-plaintext highlighter-rouge\">Y</code> sequence (the reference), up until a <code class=\"language-plaintext highlighter-rouge\">&gt;</code> is found, which means we are done with the sequence.</li>\n        </ul>\n      </blockquote>\n    </li>\n    <li>\n      <p>Change the name of the output file <code class=\"language-plaintext highlighter-rouge\">Text reformatting on data ...</code> to <code class=\"language-plaintext highlighter-rouge\">repeats</code> Change the datatype to <code class=\"language-plaintext highlighter-rouge\">.fasta</code>.</p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-renaming-a-dataset-1\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-renaming-a-dataset-1\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Renaming a dataset</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ul>   <li>Click on the <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-pencil</span> <strong>pencil icon</strong> for the dataset to edit its attributes</li>   <li>In the central panel, change the <strong>Name</strong> field</li>   <li>Click the <strong>Save</strong> button</li> </ul> </blockquote>\n      <p><!--END_SNIPPET--></p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-changing-the-datatype-1\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-changing-the-datatype-1\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Changing the datatype</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ul>   <li>Click on the <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-pencil</span> <strong>pencil icon</strong> for the dataset to edit its attributes</li>   <li>In the central panel, click <i class=\"fas fa-database\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-chart-select-data</span> <strong>Datatypes</strong> tab on the top</li>   <li>In the <i class=\"fas fa-database\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-chart-select-data</span> <strong>Assign Datatype</strong>, select  your desired datatype  from “<em>New type</em>” dropdown     <ul>       <li>Tip: you can start typing the datatype into the field to filter the dropdown menu</li>     </ul>   </li>   <li>Click the <strong>Save</strong> button</li> </ul> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n    <li><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_awk_tool/1.1.2\" title=\"ClustalW tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>ClustalW</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 1.1.2)</span> with the following parameters\n      <ul>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“FASTA file”</em>: <code class=\"language-plaintext highlighter-rouge\">repeats.fasta</code></li>\n        <li><em>“Data type”</em>: <code class=\"language-plaintext highlighter-rouge\">DNA nucleotide sequences</code></li>\n        <li><em>“Output alignment format”</em>: <code class=\"language-plaintext highlighter-rouge\">Native Clustal output format</code></li>\n        <li><em>“Show residue numbers in clustal format output”</em>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n        <li><em>“Output order”</em>: <code class=\"language-plaintext highlighter-rouge\">Aligned</code></li>\n        <li><em>“Output complete alignment”</em>: <code class=\"language-plaintext highlighter-rouge\">Complete alignment</code></li>\n      </ul>\n    </li>\n    <li>Inspect the output file <code class=\"language-plaintext highlighter-rouge\">ClustalW on data ... clustal</code>.\n      <ul>\n        <li>The file is divided into several blocks.</li>\n        <li>Each block contains the next 50 contiguos nucleotides of each alignment in one line per sequence.</li>\n        <li>Gaps are included.</li>\n        <li>The asterisk symbol <code class=\"language-plaintext highlighter-rouge\">*</code> indicates that there is consensus across all sequences in the current position.</li>\n      </ul>\n    </li>\n    <li>Another file <code class=\"language-plaintext highlighter-rouge\">ClustalW on data ... dnd</code> is also generated which can be used to view the output alignment as a tree.</li>\n  </ol>\n\n</blockquote>\n\n<p>Your output alignment file <code class=\"language-plaintext highlighter-rouge\">ClustalW on data ... clustal</code> should look similar to the following one (click on <i class=\"far fa-eye\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-eye</span>) :</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>CLUSTAL 2.1 multiple sequence alignment\n\n\nsequence@_19610_31252_      AAAATAAAATCAGAATTTCGTGAAAAAGCACGTAAAATAGCGACTCTTTG\nsequence@_19610_28814_      AAAATAAAATCAGAATTTCGTGAAAAAGCACGTAAAATAGCGACTCTTTG\nsequence@_19610_25551_      AAAATAAAATCTGAATTTCGCGAAAAAGCACGTAAAATACCGACTCTTTG\n                            *********** ******** ****************** **********\n\nsequence@_19610_31252_      TTTTTCACCACCGGATAAATCTTTGACTTGTTGGTTTAGTTTGTCATTTT\nsequence@_19610_28814_      TTTTTCACCACCGGATAAATCTTTGACTTGTTGGTTTAGTTTGTCATTTT\nsequence@_19610_25551_      TTTCTCGCCACCCGATAAATCTTTGACTTGTTGATTTAGTTTTTCATTTT\n                            *** ** ***** ******************** ******** *******\n\nsequence@_19610_31252_      CGATATTGAGGAAATTTGCACTTTTTTCAAGTAAGACTTGGTCAAATTCC\nsequence@_19610_28814_      CGATATTGAGGAAATTTGCACTTTTTTCAAGTAAGACTTGGTCAAATTCC\nsequence@_19610_25551_      CAATATTAAGAAAATTTGCTCTTTTTTCAAGCAAATTTTGATCAAATTCT\n                            * ***** ** ******** *********** **   *** ******** \n\nsequence@_19610_31252_      CTTTTAATTATGTTATTTCCAATTAAAATATTATTTTTAACCGATAAATT\nsequence@_19610_28814_      CTTTTAATTATGTTATTTCCAATTAAAATATTATTTTTAACCGATAAATT\nsequence@_19610_25551_      TTTTGAATTAAGCTATTTCCAATTAAAATATTATTTTTAACAGAAAGATT\n                             *** ***** * **************************** ** * ***\n\nsequence@_19610_31252_      CTCAATCAAATTAAAATCTTGAAAAACTACATCAATTAAAGGGTTTTTTT\nsequence@_19610_28814_      CTCAATCAAATTAAAATCTTGAAAAACTACATCAATTAAAGGGTTTTTTT\nsequence@_19610_25551_      TTCAATTAGGTTAAAATCCTGAAAAACTACATCAATTAAAGGATTTTTTT\n                             ***** *  ******** *********************** *******\n\nsequence@_19610_31252_      CTTCTTTACCTT\nsequence@_19610_28814_      CTTCTTTACCTT\nsequence@_19610_25551_      CTTCTTT-----\n                            *******     \n\n</code></pre></div></div>\n<p>We can see that there are several locus along the duplicated repeats where single point mutations have taken place, and that the ending of the last repeat is missing.</p>\n\n<p>So far we have learnt how to run our own custom sequence comparison, extract a set of DNA repeats and perform multiple sequence alignment on them (MSA). While this represents an common example of a bioinformatics pipeline, in the next part of the tutorial we will jump to a large-scale comparison scenario where we do not need fine-grained alignments, but instead we will be looking at the “bigger picture” using alignment-free methods.</p>\n\n<h1 id=\"coarse-grained-sequence-comparison\">Coarse-grained sequence comparison</h1>\n\n<p>In this second part of the tutorial, we are going to work with chromosome-sized sequences. While we can still use <code class=\"language-plaintext highlighter-rouge\">GECKO</code> for chromosomes, it will take some more time and resources. However, consider now the case where you do not need alignments, but rather are in one of the following cases:</p>\n\n<ul>\n  <li>You are working with a very large <em>de novo</em> assembly genome for which you do not know the strain and thus you need to compare it to several candidates.</li>\n  <li>You want to study large evolutionary rearrangements at a block level rather than alignment level at several species at once.</li>\n  <li>You want to generate a dotplot between several massive chromosomes from e.g. plants to find the main syntenies, but your sequences are full of repeats and other computational approaches fail.</li>\n</ul>\n\n<p>As you can imagine, all three scenarios require several large-scale sequence comparisons. While there are also other ways to approach these situations, in this tutorial we will learn how we can use <code class=\"language-plaintext highlighter-rouge\">CHROMEISTER</code> which is specifically designed for large-scale genome comparison without alignments (alignment-free method).</p>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>Before jumping on the hands-on, let us see an example of the second case: say we wanted to study the evolutionary rearrangements between the grass and common wheat genomes (<em>Aegilops tauschii</em> and <em>Triticum aestivum</em>). The following plot shows the comparison:</p>\n\n<figure id=\"figure-2\" style=\"max-width: 90%;\"><img src=\"../../images/hpc-for-lsgc/Chrom07.png\" alt=\"Large-scale genome comparison example. \" width=\"995\" height=\"936\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/hpc-for-lsgc/Chrom07.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 2</strong>:</span> Chromosome comparison for <em>Aegilops tauschii</em> and <em>Triticum aestivum</em>. Since both genomes have seven chromosomes, we would require seven times seven comparisons, i.e. 49 chromosome comparisons with each sequence being over 500 MBs in size!</figcaption></figure>\n\n<p>Now there are some things to note here: (1) these alignment-free comparisons can be performed very quickly, (2) we can visually see the large rearrangements and (3) we can identify which chromosome comparisons actually have any signal. This last point is interesting because it allows us to use <code class=\"language-plaintext highlighter-rouge\">CHROMEISTER</code> to quickly identify which comparisons are worth to perform with more accurate tools and avoid lots of unnecessary computation (in this case only the diagonal has similarity, but it might not be the case, <em>e.g.</em> <em>Homo sapiens</em> and <em>Mus musculus</em>).</p>\n\n<p>Let us now jump into the hands-on! We will learn how to compare chromosomes with <code class=\"language-plaintext highlighter-rouge\">CHROMEISTER</code>, particularly from the grass and common wheat genomes, which are nearly 5 times larger than the average human chromosome!</p>\n\n<h2 id=\"preparing-the-data-1\">Preparing the data</h2>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Chromosome data upload</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Create a new history for this tutorial and give it a descriptive name (e.g. “Chromosome comparison hands-on”)</p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-creating-a-new-history-1\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-creating-a-new-history-1\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Creating a new history</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <p>Click the <i class=\"fas fa-plus\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">new-history</span> icon at the top of the history panel:</p>   <p><img src=\"/training-material/shared/images/history_create_new.svg\" alt=\"UI for creating new history\" /></p>   <!-- the original drawing can be found here https://docs.google.com/drawings/d/1cCBrLAo4kDGic5QyB70rRiWJAKTenTU8STsKDaLcVU8/edit?usp=sharing --> </blockquote>\n      <p><!--END_SNIPPET--></p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-renaming-a-history-1\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-renaming-a-history-1\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Renaming a history</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ol>   <li>Click on <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-pencil</span> (<strong>Edit</strong>) next to the history name (which by default is “Unnamed history”)</li>   <li>Type the new name</li>   <li>Click on <strong>Save</strong></li> </ol>   <p>If you do not have the <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-pencil</span> (<strong>Edit</strong>) next to the history name:</p>   <ol>   <li>Click on <strong>Unnamed history</strong> (or the current name of the history) (<strong>Click to rename history</strong>) at the top of your history panel</li>   <li>Type the new name</li>   <li>Press <kbd>Enter</kbd></li> </ol> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n    <li>\n      <p>Import <code class=\"language-plaintext highlighter-rouge\">aegilops_tauschii_chr1.fasta</code> and <code class=\"language-plaintext highlighter-rouge\">triticum_aestivum_chr1.fasta</code> from <a href=\"https://zenodo.org/record/4485547#.YBj8XHmCGUk\">Zenodo</a>.</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://zenodo.org/record/4485547/files/aegilops_tauschii_chr1.fasta\nhttps://zenodo.org/record/4485547/files/triticum_aestivum_chr1.fasta\n</code></pre></div>      </div>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-importing-via-links-1\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-importing-via-links-1\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Importing via links</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ul>   <li>Copy the link location</li>   <li>     <p>Click <i class=\"fas fa-upload\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-upload</span> <strong>Upload Data</strong> at the top of the tool panel</p>   </li>   <li>Select <i class=\"fa fa-edit\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-wf-edit</span> <strong>Paste/Fetch Data</strong></li>   <li>     <p>Paste the link(s) into the text field</p>   </li>   <li>     <p>Press <strong>Start</strong></p>   </li>   <li><strong>Close</strong> the window</li> </ul> </blockquote>\n      <p><!--END_SNIPPET--></p>\n\n      <p>As default, Galaxy takes the link as name, so rename them.</p>\n    </li>\n    <li>\n      <p>Rename the files to <code class=\"language-plaintext highlighter-rouge\">aegilops.fasta</code> and <code class=\"language-plaintext highlighter-rouge\">triticum.fasta</code> and change the datatype to <code class=\"language-plaintext highlighter-rouge\">fasta</code> if needed.</p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-renaming-a-dataset-2\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-renaming-a-dataset-2\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Renaming a dataset</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ul>   <li>Click on the <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-pencil</span> <strong>pencil icon</strong> for the dataset to edit its attributes</li>   <li>In the central panel, change the <strong>Name</strong> field</li>   <li>Click the <strong>Save</strong> button</li> </ul> </blockquote>\n      <p><!--END_SNIPPET--></p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-changing-the-datatype-2\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-changing-the-datatype-2\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Changing the datatype</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ul>   <li>Click on the <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-pencil</span> <strong>pencil icon</strong> for the dataset to edit its attributes</li>   <li>In the central panel, click <i class=\"fas fa-database\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-chart-select-data</span> <strong>Datatypes</strong> tab on the top</li>   <li>In the <i class=\"fas fa-database\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-chart-select-data</span> <strong>Assign Datatype</strong>, select  your desired datatype  from “<em>New type</em>” dropdown     <ul>       <li>Tip: you can start typing the datatype into the field to filter the dropdown menu</li>     </ul>   </li>   <li>Click the <strong>Save</strong> button</li> </ul> </blockquote>\n      <p><!--END_SNIPPET--></p>\n\n      <blockquote class=\"comment\">\n        <comment-title>Note on the name of the chromosomes</comment-title>\n        <p>Please notice that these chromosomes are not labelled as “chromosome 1” at their original sources. We have renamed them for simplicity.</p>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <ol>\n    <li>We already discussed the mycoplasma sequences in regards to their size. What do you think about the size of the two chromosomes that we will be comparing now from a computational standpoint?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <ol>\n      <li>Chromosome-like sequences are arguably some of the largest DNA sequences you can find. Regarding the comparison, optimal chromosome comparison typically requires either large clusters to be run or special hardware accelerators (such as GPUs). On the other hand, for seed-based local alignment we can still use common approaches, but they will take a considerable amount of time. Finally, if we use alignment-free methods such as <code class=\"language-plaintext highlighter-rouge\">CHROMEISTER</code>, we can perform a comparison in few minutes (check the slides for more information) instead of hours.</li>\n    </ol>\n\n  </blockquote>\n\n</blockquote>\n\n<h2 id=\"running-the-comparison-1\">Running the comparison</h2>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Comparing two plant chromosomes with CHROMEISTER</hands-on-title>\n  <ol>\n    <li><span class=\"tool\" data-tool=\"toolshed.g2.bx.psu.edu/repos/iuc/chromeister/chromeister/1.5.a\" title=\"CHROMEISTER tool\" aria-role=\"button\"><i class=\"fas fa-wrench\" aria-hidden=\"true\"></i> <strong>CHROMEISTER</strong> (<i class=\"fas fa-cubes\" aria-hidden=\"true\"></i> Galaxy version 1.5.a)</span> with the following parameters\n      <ul>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Query sequence”</em>: <code class=\"language-plaintext highlighter-rouge\">aegilops.fasta</code></li>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Reference sequence”</em>: <code class=\"language-plaintext highlighter-rouge\">triticum.fasta</code></li>\n        <li><em>“Output dotplot size”</em>: <code class=\"language-plaintext highlighter-rouge\">1000</code></li>\n        <li><em>“K-mer seed size”</em>: <code class=\"language-plaintext highlighter-rouge\">32</code></li>\n        <li><em>“Diffuse value”</em>: <code class=\"language-plaintext highlighter-rouge\">4</code></li>\n        <li><em>“Add grid to plot for multi-fasta data sets”</em>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n        <li><em>“Generate image of detected events”</em>: <code class=\"language-plaintext highlighter-rouge\">Yes</code></li>\n      </ul>\n    </li>\n    <li>Run the job and wait for the results. It should take around ~3 minutes.</li>\n    <li>Let’s inspect the output files:\n      <ul>\n        <li><em>“Comparison matrix”</em>: This file is the “core” of the comparison. It contains the heuristically matched seeds sampled per section of the chromosomes. This file is used for custom post-processing.</li>\n        <li><em>“Comparison dotplot”</em>: This file is a <code class=\"language-plaintext highlighter-rouge\">.png</code> image representing the pairwise comparison.</li>\n        <li><em>“Comparison metainformation”</em>: This CSV file contains information about the comparison such as name of the sequences compared, length, etc. It is particularly useful when using multi-fasta inputs.</li>\n        <li><em>“Detected events”</em>: This CSV file contains information regarding rearrangements automatically detected.</li>\n        <li><em>“Detected events plot”</em>” This file is a <code class=\"language-plaintext highlighter-rouge\">.png</code> image showing the detected events.</li>\n        <li><em>“Comparison score”</em>: This text file contains the scoring distance between the query and the reference.</li>\n      </ul>\n\n      <blockquote class=\"comment\">\n        <comment-title>About parameters</comment-title>\n\n        <p>Some of the parameters used in <code class=\"language-plaintext highlighter-rouge\">CHROMEISTER</code> are similar to those in <code class=\"language-plaintext highlighter-rouge\">GECKO</code>, but others are new, in particular:</p>\n        <ol>\n          <li><em>“Output dotplot size”</em>: This number represents the width and height of the resulting comparison plot, but it also affects the degree of precision with which alignment-free blocks are calculated. A value of <code class=\"language-plaintext highlighter-rouge\">1000</code> is adequate for mostly everything (resulting in a <code class=\"language-plaintext highlighter-rouge\">1000x1000</code> output doplot), but for extremely large sequences a value of <code class=\"language-plaintext highlighter-rouge\">2000</code> will yield more resolution since less blocks will be grouped together.</li>\n          <li><em>“K-mer seed size”</em>: This value is the same as in <code class=\"language-plaintext highlighter-rouge\">GECKO</code>. Generally, <code class=\"language-plaintext highlighter-rouge\">32</code> is a good choice for any sequence that is not very small such as the mycoplasmas from the previous part of the tutorial, which were around 1 Mbp in size.</li>\n          <li><em>“Diffuse value”</em>: This parameter regulates the stringency with which alignment-free seeds are matched. A diffuse value of <code class=\"language-plaintext highlighter-rouge\">1</code> means perfect matching, whereas a value of <code class=\"language-plaintext highlighter-rouge\">4</code> means match only a fourth of the seed (taken in uniform steps). The value of <code class=\"language-plaintext highlighter-rouge\">4</code> is recommended for everything except when signals start to deteriorate in large comparisons with plenty of repeats.</li>\n          <li>The <em>“Add grid to plot for multi-fasta data sets”</em> parameter adds grid lines to the plot to separate multiple sequences. This is useful when using multi-fasta inputs.</li>\n          <li>The <em>“Generate image of detected events”</em> parameter will include, if enabled, a plot of the rearrangements detected with colors, one per type of rearrangement. More on that later!</li>\n        </ol>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>Your <code class=\"language-plaintext highlighter-rouge\">Comparison dotplot</code> file (remember to inspect each using the <i class=\"far fa-eye\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-eye</span> icon) should look like this:</p>\n\n<figure id=\"figure-3\" style=\"max-width: 90%;\"><img src=\"../../images/hpc-for-lsgc/aegilops-triticum.png\" alt=\"Single chromosome comparison. \" width=\"1000\" height=\"1000\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/hpc-for-lsgc/aegilops-triticum.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 3</strong>:</span> Chromosome comparison corresponding to <em>Aegilops tauschii</em> and <em>Triticum aestivum</em> as generated with CHROMEISTER. Each axis corresponds to one sequence, from origin to end.</figcaption></figure>\n\n<p>Figure 3 shows the comparison plot for the plant chromosomes. Notice that the origin of both sequences is at the top-left and the ending is at the bottom-right of the plot. Noise and small repeats are filtered out automatically by <code class=\"language-plaintext highlighter-rouge\">CHROMEISTER</code> to allow focusing on where the main similarity blocks are located. We can see that there three types of blocks:</p>\n\n<ul>\n  <li>Blocks that are “conserved” are on the main diagonal. This means that the sequences are similar (in a coarse-grained fashion) in such regions.</li>\n  <li>Blocks that are inverted are on the antidiagonals, i.e. rotated 90 degrees. These blocks show sequence regions that have been reversed and rearranged into the complementary strand.</li>\n  <li>Blocks that are not in the main diagonal are “transposed”, meaning that they have been rearranged in one of the sequences but not in the other. These can also be inverted.</li>\n</ul>\n\n<blockquote class=\"comment\">\n  <comment-title>Note on the comparison plot</comment-title>\n  <p>Notice that the comparison plot is only an approximation. It is aimed at showing the general location and direction of syntenies. For example, if <code class=\"language-plaintext highlighter-rouge\">CHROMEISTER</code> was run with parameter <strong>Output dotplot size</strong> equal to <code class=\"language-plaintext highlighter-rouge\">1000</code>, then each pixel in the plot contains the averaged information of nearly 500,000 base pairs! Thus, any block can contain lots of smaller rearrangements, mutations, inversions, etc., that are ignored for the sake of providing a clean overview of the general alignment direction in a pairwise comparison.</p>\n</blockquote>\n\n<p>Also note that a <code class=\"language-plaintext highlighter-rouge\">score</code> value can be seen in the title of the plot (this value is also available in the <strong>Comparison score</strong> file). This value is calculated based on the alignment coverage and number of rearrangements and can be used to automatically filter out similar from dissimilar sequence comparisons. A value of <code class=\"language-plaintext highlighter-rouge\">0</code> means that the sequences are nearly equal (rearrangement-wise), whereas a value closer to <code class=\"language-plaintext highlighter-rouge\">1</code> means that the sequences are more dissimilar.</p>\n\n<h2 id=\"post-processing-detecting-rearrangements\">Post-processing: detecting rearrangements</h2>\n\n<p>Let us now see how the blocks detected in the comparison are automatically classified for further processing. Figure 4 shows the blocks detected heuristically from the comparison and classified according to their position and orientation. This plot is available in the file <strong>Detected events plot</strong>.</p>\n\n<figure id=\"figure-4\" style=\"max-width: 90%;\"><img src=\"../../images/hpc-for-lsgc/aegilops-triticum-events.png\" alt=\"Events in chromosome comparison. \" width=\"1000\" height=\"1000\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/hpc-for-lsgc/aegilops-triticum-events.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 4</strong>:</span> Automatically detected events in the chromosome comparison corresponding to <em>Aegilops tauschii</em> and <em>Triticum aestivum</em> as generated with CHROMEISTER. Legend: conserved blocks (red), inverted blocks (green) and transposed blocks (blue)</figcaption></figure>\n\n<p>In Figure 4 we can see a similar plot to that in Figure 3 but with the addition of colors. Each detected block is labelled according to whether it is in the main diagonal (red), transposed (blue) or inverted (green). Inverted transpositions are also labelled green. Notice that this automatic classification process is based on the Hough transform (<span class=\"citation\"><a href=\"#duda1972use\">Duda and Hart 1972</a></span>) which is governed by a set of parameters which can therefore affect the sensitivity of the detection of blocks, and hence some blocks can be missed.</p>\n\n<p>Each of these blocks is also available in the <code class=\"language-plaintext highlighter-rouge\">CSV</code> file <strong>Detected events</strong>. Let us take a peek:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>xStart,yStart,xEnd,yEnd,strand,approximate length,description\n189935556,218167395,202237082,205056373,f,12301526,conserved block\n...\n156475406,165723309,175173725,185127621,r,18698319,inversion\n...\n208633875,239669470,213062425,234949502,f,4428550,transposition\n...\n86602740,73946160,103332815,91252708,r,16730075,inverted transposition\n</code></pre></div></div>\n\n<p>The header line describes each column. <code class=\"language-plaintext highlighter-rouge\">xStart</code> and <code class=\"language-plaintext highlighter-rouge\">xEnd</code> are the starting and ending coordinates in the query sequence, wheras <code class=\"language-plaintext highlighter-rouge\">yStart</code> and <code class=\"language-plaintext highlighter-rouge\">yEnd</code> are the same but for the reference sequence. The strand can be either <code class=\"language-plaintext highlighter-rouge\">f</code> for the forward strand or <code class=\"language-plaintext highlighter-rouge\">r</code> for the reverse strand. Notice that the length of the block is approximate, since it is an estimation based on the length of the line and transformed by the length of each sequence. The <code class=\"language-plaintext highlighter-rouge\">description</code> column contains the label of the detected event. The four possible types (conserved block, inversion, transposition or inverted transposition) are shown above with examples.</p>\n\n<p>Besides providing a visual understanding of the large rearrangements that took place between two sequences, the detection of blocks can be further used to research evolutionary distances, for instance by incorporating the number of Large Scale Genome Rearrangements to generate richer metrics in phylogenetic studies.</p>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>From a pratical perspective, we have shown how to run pairwise genome comparisons using Galaxy, from small to large-scale sequences (in particular bacterial mycoplasmas and plant chromosomes) throughout two levels of precision:</p>\n\n<ul>\n  <li>Using <code class=\"language-plaintext highlighter-rouge\">GECKO</code> to detect High-scoring Segment Pairs, which can be used to find fine-grained alignments such as repeats, genes, synteny blocks, etc.</li>\n  <li>Using <code class=\"language-plaintext highlighter-rouge\">CHROMEISTER</code> to find large-scale conserved blocks, which enables us to look at the “big picture” of a comparison as well as study its large-scale rearrangements.</li>\n</ul>\n\n<p>Moreover, we have described how we can use additional tools to post-process our comparisons, including extraction of alignments, multiple sequence alignment, automatic detection of rearrangements, dotplot visualization, etc. Additionally, we recommend taking a look at <code class=\"language-plaintext highlighter-rouge\">GECKO-MGV</code> (<span class=\"citation\"><a href=\"#diaz2019combining\">Diaz-del-Pino <i>et al.</i> 2019</a></span>), a tool for the interactive exploration of sequence comparisons produced with <code class=\"language-plaintext highlighter-rouge\">GECKO</code>.</p>\n\n<p>On the other hand, from a theoretical standpoint, we have discussed why sequence comparison is a difficult problem, how the length of the sequences can affect runtimes, the complexity of the algorithms, impact of parameters, etc., in order to give researchers a broader understanding of how to use sequence comparison algorithms for their scientific experiments (more details in the slides).</p>\n\n"],"ref_slides":["### What is sequence comparison?\n\n- Finding string matches between text paragraphs\n- Comparing biological sequences can be seen as an instance of common string matching problem but with some particularities\n\n    - Restricted alphabets: *e.g.* DNA = \\{A, C, G, T\\}\n    - It adds an additional dimension\n         - instead of looking for only one pattern, we have to look for all possible patterns!\n\n---\n\n### Why is it importantg?\n\n- Sequence comparison is a core problem of bioinformatics that allows us to study:\n - Evolution (Where do we come from? And other species?)\n - Structure (What are we made of? How does our body work?)\n - Functionality (How do changes in our DNA affect us?)\n\n- Widely used in several fields!\n - Whole genome alignment, gene prediction, phylogenomics, pharmacogenetics, metagenomics, etc.\n\n---\n\n### What are the challenges?\n\n- A lot of progress has taken place since the beginning (around 1960s)\n- So what is the problem?\n\n - New technology produces huge amounts of data\n - Optimal sequence comparison has complexity O(n<sup>2</sup>), which is a lot when sequences are long\n - Several ways to compare sequences, each having its advantages: DP-based, gapped and ungapped, alignment-free\n - DNA contains lots of repeats and low complexity regions, which make it difficult to find the conserved signal\n - And also makes it very hard for computational algorithms\n\n---\n\n### Why is sequence comparison hard?\n\n- The complexity of the problem grows as the length of the sequences becomes larger\n- That means that for small sequences it is OK; but for large sequences the problem can take a lot of time\n- Computing power doubles every two years according to Moore’s law but sequence databases grow purely exponential every year\n\n\nSequence type    | Approx. length\n---        | ---\nGene\t\t\t|  ~1,000 to 10,000 bp\nBacteria genome\t\t|  ~10<sup>6</sup> bp\nMammalian chr.\t\t|  ~10<sup>8</sup> bp\nMammalian genome\t|  ~2 * 10<sup>9</sup> bp\nPlant genome\t\t|  ~3 * 10<sup>9</sup> bp\nLarge plant genomes\t|  ~2 * 10<sup>10</sup> bp\nAmoeba genome\t\t|  ~6 * 10<sup>11</sup> bp\n\n\n---\n### Exponential growth of the Sequence Read Archive\n\n\n![line chart going from 2009 to 2013 with number of bases growing from 10e11 to 10e15, and all bases slowly growing larger than open access, but open access still being the vast majority. A pie chart is overlaid showing the majority is Illumina GA, with SOLiD making up 10% and others a tiny slice.](../../images/hpc-for-lsgc/SRA.png)\n\n- Other databases have experienced similar growth too\n\n---\n\n### Methods for sequence comparison\n\n- Dot-matrix comparison (no alignments)\n - Comparing all letters with each other (extremely slow/noisy)\n\n- Alignment-free methods\n - Similar to the previous but typically based on k-mers (words)\n\n- Aligning methods\n   - Exhaustive dynamic programming algorithms (Slow but optimal)\n        - Local alignment\n        - Global alignment\n   - Seed-based heuristics\n        - Words of fixed size are used to start alignments (Fast but less sensitivity). Can also include gaps.\n\n---\n\n### Dot-matrix methods\n\n\n- Takes each letter in both sequences and compare it to all the rest\n - Takes quadratic time and space!\n- Does not produce alignments, but rather just represents a comparison\n- The **x** and **y** axis represent the sequences being compared\n\n![Montage of three dot plots](../../images/hpc-for-lsgc/Dot01.png)\n\n---\n\n### Comparing genomes with dotplots\n\n![A dotplot is shown, with lines going from bottom left to the top right. Part way through it is fractured and a line is seen in the opposite direction showing an inversion. There is noise scattered around the plot from accidental overlaps. An inset shows some repeats which appear as regular small diagonal lines, repeated in x and y axes.](../../images/hpc-for-lsgc/Dot02.png)\n\n---\n\n### How useful are raw dotplots?\n\n.pull-left[\n\n\n\n- Dot matrix methods do not take into account the global information or context\n\n - Noise\n\n - Where is the signal?\n]\n\n.pull-right[.image-70[![A tiny dot plot is shown, with two sequences and dots scattered across the plot. No pattern emerges due to repeating letters in some sequences.](../../images/hpc-for-lsgc/Dot03.png)]]\n\n\n---\n\n### How do we include alignments?\n\n.pull-left[\n\n- Alignments have to take into account their surroundings!\n\n- Use dynamic programming to compute an accumulated score\n\n- Match =  4\n- Miss  = -4\n\n]\n\n.pull-right[\n.image-70[\n![A table with sequence across top left and right are shown, some boxes are filled with 4 and -4 according to match or mismatches.](../../images/hpc-for-lsgc/Dot04.png)\n]\n]\n\n---\n\n### How do we include alignments? Cont. I\n\n.pull-left[\n\n- Alignments have to take into account their surroundings!\n\n- Use dynamic programming to compute an accumulated score\n\n- The score of each cell comes from either the diagonal (no penalty but match/mismatch score) or from a row or column, which is a gap in either the query or reference sequence (\"jumping\" gap penalty is included then)\n\n- Match =  4\n- Miss  = -4\n- **Gap   = -iG - eG*L**\n\n]\n\n.pull-right[\n![The same chart as before, but more cells are filled in, the numbers get mostly increasingly negative.](../../images/hpc-for-lsgc/Dot05.png)\n]\n\n---\n\n### How do we include alignments? Cont. II\n\n\n![A filled out chart and then several boxes are highlighted showing a best scoring set of matches using a typical algorithm for sequence alignment. The alignment is shown at the left.](../../images/hpc-for-lsgc/Dot06.png)\n\n---\n\n### How do we include alignments? Cont. III\n\n- But what if the two sequences are not toy examples?\n\n - Typically, a mammalian chromosome is around the 100 Mbp mark\n\n- Worst case scenario this algorithm takes quadratic time and space\n\n - Imagine comparing two amoeba genomes (Not your usual case, though)\n  - Total number of cells: 10<sup>22</sup> \\~the number of sand grains in the earth\n\n---\n### How do we include alignments? Cont. IV\n\n\n![A larger subset of a table is shown from rows 0 to 100 billion. The text grows quadratically is shown over the table.](../../images/hpc-for-lsgc/Dot07.png)\n\n\n---\n\n### How to speed up finding alignments?\n\n- DP algorithms are not feasible for long sequences\n\n- Use seeds of fixed size (k-mers) to find anchor points and then perform the alignment\n\n- Can be done in linear time\n\n- But careful, the number of common seeds can be huge and optimization is still needed\n\n---\n\n### How to speed up finding alignments? Cont. I\n\n![The same matrix is shown again, but now black diagonal lines appear, circled as k-mers of fixed size.](../../images/hpc-for-lsgc/Dot08.png)\n\n---\n### How to speed up finding alignments? Cont. II\n\n\n- Extend the common seeds identified previously to form larger fragments\n\n\n- These are called High-scoring Segment Pairs and do not typically include gaps\n\n - Some programs (such as BLAST) include small gaps\n\n- This approach also enables to compare distant sequences with many evolutionary rearrangments since fragments do not require to be close to each other\n - Similar result to the local dynamic programming algorithm (as opposed to the global approach where everything is connected)\n\n\n---\n\n### How to speed up finding alignments? Cont. III\n\n![Multiple aligned k-mers are grouped into larger runs of sequence and labelled high-scoring pairs.](../../images/hpc-for-lsgc/Dot09.png)\n\n---\n\n### Recap on Sequence comparison\n\n- Sequence comparison is inherently hard because it requires quadratic time and space to produce optimal alignments\n\n- Especially when there are more (and longer) genome sequences available everyday ([Ensembl blog](http://www.ensembl.info/category/01-release/))\n\n- Heuristic approaches based on seeds are required to cope with the complexity of dynamic programming methods\n\n- Tools are needed to quickly compare sequences while providing insightful information\n\n---\n\n\n### Methods\n\n- Now that we have a general background on sequence alignment, lets jump to the software that we will use in this tutorial\n\n - GECKO: fine-grained sequence comparison that uses secondary memory to enable virtually comparisons of any size\n  - GECKO Multi-Genome-Viewer: A tool for the interactive inspection of sequence comparisons\n - CHROMEISTER: Ultra-fast approach for the previsualization of sequence comparisons while dealing with noise and repeats, including full mammalian genomes and plants\n\n---\n\n### GECKO\n\n- Pairwise genome comparison software which reduces execution time in pairwise and multiple genome comparison studies\n\n- It uses an 'out of core' strategy, *i.e.* it runs on secondary memory (disk) as opposed to RAM\n - Can run anywhere, about ~4 GB of RAM and  ~1 TB of disk required for the longest sequences\n\n- Faster than state-of-the-art software especially for longer sequences such as chromosomes\n\n---\n\n### The GECKO algorithm\n\n![Sequence X and Y enter the pipeline and produce two dictionary and dictionary hashes. These are combined into a hits file which shows a dotplot with several circles in diagonals. These are then sorted, filtered, and produce a set of HSPs which show the same dots connected up into diagonal lines.](../../images/hpc-for-lsgc/Gecko01.png)\n\n---\n\n\n### The GECKO algorithm (Cont. I)\n\n- A dictionary is computed for each sequence containing the positional information of each word (possible seed)\n\n- Once each dictionary is sorted, perfect matches between words produce a set of seeds (alignment candidates)\n\n- Seeds are then sorted (by their diagonal position **x**<sub>start</sub> - **y**<sub>start</sub>) and filtered\n\n- Finally, the seeds are extended (up and downstream) to generate a set of High-scoring Segment Pairs (HSPs)\n\n---\n\n### Parallelising GECKO\n\n.pull-left[\n\n- In a static distribution cores can become idle if they finish before other cores → resources are wasted\n\n- GECKO uses MPI to distribute the workload dynamically based on the length\n\n- When a core (worker) has finished executing a task (comparison) the master node broadcasts more work\n\n- This reduces overall makespan time because of workload balance\n\n\n]\n\n.pull-right[\n![A genomes list enters the workflow and is mapped into a workload file which gives all combinations of G1 to GN. This is sent to a job runner and the individual pairwise comparisons are distributed across worker nodes.](../../images/hpc-for-lsgc/Gecko02.png)\n]\n---\n\n\n### Parallelising GECKO (Cont. I)\n\n.pull-left[\n\n- GECKO also employs a second level of parallelism besides using MPI to distribute data dynamically\n\n- It consists on sorting the initial seeds found (which is the most time-consuming step) using shared memory threads (pthreads and openMP)\n\n- Each core uses up to `t` threads to sort the dictionaries containing the seeds\n]\n\n.pull-right[\n![Two sequences, G1 and G2 enter, produce dictionaries, and hits which are then combined into sorted Hits and fragmented hits.](../../images/hpc-for-lsgc/Gecko03.png)\n]\n---\n\n### GECKO-MGV: interactive sequence comparison\n\n- GeckoMGV is a Web-based application aimed to visualize results from multiple genome comparison allowing deep data analysis. It features:\n\n - User friendly interface\n\n - Multilayer for displaying and overlaying comparisons\n\n - Interactive zooming and filtering\n\n - External and proprietary post-processing services\n\n - Adaptable from equivalent software (*e.g.* MAUVE)\n\n - Dendrograms and Multiple Sequence Alignment visualization\n\n\n---\n\n### GECKO-MGV: interactive sequence comparison (Cont. I)\n\n![Multiple pairwise alignments are shown on the left, in the center is a large dot-plot, and below is a distribution matrix with a large scatter plot. On the right a minimap and various filtering options are shown.](../../images/hpc-for-lsgc/Gecko04.png)\n\n---\n\n### GECKO-MGV: interactive sequence comparison (Cont. II)\n\n- A typical exercise would include running a sequence comparison with GECKO\n\n- Visualizing the alignments with GECKO-MGV\n\n- Interactively selecting regions of interest and performing post-processing\n\n - Such as selecting repeats, extracting them and performing multiple sequence alignment to find out single point mutations\n\n---\n\n### GECKO-MGV: interactive sequence comparison (Cont. III)\n\n![The same application is shown with a set of repeats highlighted, and pulled out into a table and at the bottom a sequence logo is shown with the multiple sequence alignment.](../../images/hpc-for-lsgc/Gecko05.png)\n\n---\n\n### CHROMEISTER: Motivation\n\n\n.pull-left[\n\n- GECKO is suitable for chromosome comparisons\n\n- But all vs all chromosomes between any two species generate usually over 400 comparisons\n\n- This results in extremely large computation times\n - Do all of these even have any similarity signals?\n - Instead of runnning everything from scratch with GECKO, first use CHROMEISTER to detect significant comparisons\n]\n\n.pull-right[\n![A large multi-genome dot-plot is shown.](../../images/hpc-for-lsgc/Chrom01.png)\n]\n\n---\n\n### CHROMEISTER: Motivation (Cont. I)\n\n.pull-left[\n- Comparisons tend to be full of repetitions in large mammalians, let alone plants!\n\n- State-of-the-art methods get stuck handling large number of repetitions or resulting dotplots are too noisy\n\n- Can we extract any information from raw seeds (hits) without having to generate fragments (slower)?\n]\n\n.pull-right[\n![An even larger, denser dot plot is shown with a very low signal to noise ratio.](../../images/hpc-for-lsgc/Chrom02.png)\n]\n\n---\n\n### CHROMEISTER: Motivation (Cont. II)\n\n![Two 3d plots are shown, the first resembles the previous dot plot with high noise, and lots of tiny peaks. An arrow points to the second set of \"filtered seeds\" with several diagonal sets of peaks highlighted.](../../images/hpc-for-lsgc/Chrom03.png)\n\n---\n### CHROMEISTER: Methods\n\n- CHROMEISTER (CHROmosome MEISTER) is an ultra fast heuristic approach to computing extremely large pairwise genome comparison in desktop PCs\n\n- Hybrid indexing approach\n\n - Heuristically select long, unique and inexact hits!\n\n- Probabilistic filtering\n\n - Higher concentration of unique hits within HSPs\n\n- Apply a kernel to improve visualization\n\n\n---\n\n### CHROMEISTER: Methods (Cont. I)\n\n- Heuristically select unique and inexact seeds:\n\n - Hits with frequency above one are repetitions by definition (in a computational sense) so we remove them\n - Short k-mers produce repetitions and noise, so we have to use long k-mers\n - But long k-mers produce less seeds due to biological evolution, therefore a certain inexactitude is allowed\n\n- Are these two words equal? Under what considerations?\n\n![Two sequences 1 and 2 are shown. Each has a single nucleotide change at the start and end.](../../images/hpc-for-lsgc/Chrom04.png)\n\n---\n\n### CHROMEISTER: Methods (Cont. II)\n\n- Probabilistic filtering\n - The probability of a sequence region containing more hits will be higher if there was an existing HSP!\n - The discrete dotplot is downsampled to a smaller representation to group hits into blocks (similar to HSPs)\n\n- Kernel and score calculation\n - A kernel is convoluted with the dotplot to improve visualization and remove single repetitions\n - The scoring distance is calculated between the peak hit points using taxicab distance:\n\n$$d\\_{raw} = \\sum\\_{i}^{l-1}taxicab(max(H\\_m(i), H\\_m(i+1)))$$\n\n$$d = \\frac{d\\_{raw}}{l^2}$$\n\n---\n\n\n### CHROMEISTER: Examples\n\n![A low signal to noise ratio dot plot plot labelled Macaca Mulatta Chr X vs Homo Sapiens Chr X is reduced to a diagonal line via CHROMEISTER under 2 minutes. Below an Aegilops tauschii Chr.1 vs Triticum aestivum Chr 1 produced with NUCMER is reduced to a very clear dot plot with CHROMEISTER.](../../images/hpc-for-lsgc/Chrom06.png)\n\n---\n\n### CHROMEISTER: Conclusions\n\n.pull-left[\n- Produces a dotplot visualization in minutes using 1 core and 1 GB of RAM\n- It is used in the plants community\n - This is due mostly to its ability to filter repeats and to handle large sizes\n- Also used for analysis of contig/scaffold reordering\n\n- (Right) Pairwise genome comparison between Aegilops tauschii (3.2 Gbps) and Triticum aestivum (4.2 Gbps) in under 16 minutes using 1 core and 1 GB of RAM\n]\n\n.pull-right[\n![A multi-genome dot plot is shown comparing two genomes. It is very clean and low-noise.](../../images/hpc-for-lsgc/Chrom07.png)\n]\n\n"],"hands_on":true,"slides":true,"mod_date":"2023-11-03 14:30:27 +0000","pub_date":"2021-02-08 01:33:47 +0000","version":13,"workflows":[{"workflow":"CHROMEISTER_chromosome_comparison.ga","tests":false,"url":"https://training.galaxyproject.org/training-material/topics/genome-annotation/tutorials/hpc-for-lsgc/workflows/CHROMEISTER_chromosome_comparison.ga","path":"topics/genome-annotation/tutorials/hpc-for-lsgc/workflows/CHROMEISTER_chromosome_comparison.ga","wfid":"genome-annotation-hpc-for-lsgc","wfname":"chromeister_chromosome_comparison","trs_endpoint":"https://training.galaxyproject.org/training-material/api/ga4gh/trs/v2/tools/genome-annotation-hpc-for-lsgc/versions/chromeister_chromosome_comparison","license":null,"creators":[],"name":"CHROMEISTER chromosome comparison","title":"CHROMEISTER chromosome comparison","test_results":null,"modified":"2024-06-14 10:01:51 +0000","mermaid":"flowchart TD\n  0[\"ℹ️ Input Dataset\\nQuery chromosome\"];\n  style 0 stroke:#2c3143,stroke-width:4px;\n  1[\"ℹ️ Input Dataset\\nReference chromosome\"];\n  style 1 stroke:#2c3143,stroke-width:4px;\n  2[\"Chromeister\"];\n  1 -->|output| 2;\n  0 -->|output| 2;\n  58cf0c0c-9200-4ba4-9727-6d908ccdfa9a[\"Output\\nChromeister on input dataset(s): Detected events\"];\n  2 --> 58cf0c0c-9200-4ba4-9727-6d908ccdfa9a;\n  style 58cf0c0c-9200-4ba4-9727-6d908ccdfa9a stroke:#2c3143,stroke-width:4px;\n  2afd0e7c-d1cf-4bfd-bec6-6cc237ff3e2c[\"Output\\nChromeister on input dataset(s): Comparison metainformation\"];\n  2 --> 2afd0e7c-d1cf-4bfd-bec6-6cc237ff3e2c;\n  style 2afd0e7c-d1cf-4bfd-bec6-6cc237ff3e2c stroke:#2c3143,stroke-width:4px;\n  c248576c-1c39-416c-99d0-40c520e3da67[\"Output\\nChromeister on input dataset(s): Comparison dotplot\"];\n  2 --> c248576c-1c39-416c-99d0-40c520e3da67;\n  style c248576c-1c39-416c-99d0-40c520e3da67 stroke:#2c3143,stroke-width:4px;\n  5f9aad77-f9ee-4932-ab22-bb5fd83f416c[\"Output\\nChromeister on input dataset(s): Comparison matrix\"];\n  2 --> 5f9aad77-f9ee-4932-ab22-bb5fd83f416c;\n  style 5f9aad77-f9ee-4932-ab22-bb5fd83f416c stroke:#2c3143,stroke-width:4px;\n  dea450c2-7126-43dc-af7a-9f2b704c76dd[\"Output\\nChromeister on input dataset(s): Comparison score\"];\n  2 --> dea450c2-7126-43dc-af7a-9f2b704c76dd;\n  style dea450c2-7126-43dc-af7a-9f2b704c76dd stroke:#2c3143,stroke-width:4px;\n  9a03f722-5588-4a3f-b70e-0ec9979c16dd[\"Output\\nChromeister on input dataset(s): Detected events plot\"];\n  2 --> 9a03f722-5588-4a3f-b70e-0ec9979c16dd;\n  style 9a03f722-5588-4a3f-b70e-0ec9979c16dd stroke:#2c3143,stroke-width:4px;"},{"workflow":"GECKO_pairwise_comparison.ga","tests":false,"url":"https://training.galaxyproject.org/training-material/topics/genome-annotation/tutorials/hpc-for-lsgc/workflows/GECKO_pairwise_comparison.ga","path":"topics/genome-annotation/tutorials/hpc-for-lsgc/workflows/GECKO_pairwise_comparison.ga","wfid":"genome-annotation-hpc-for-lsgc","wfname":"gecko_pairwise_comparison","trs_endpoint":"https://training.galaxyproject.org/training-material/api/ga4gh/trs/v2/tools/genome-annotation-hpc-for-lsgc/versions/gecko_pairwise_comparison","license":null,"creators":[],"name":"GECKO pairwise comparison","title":"GECKO pairwise comparison","test_results":null,"modified":"2024-06-14 10:01:51 +0000","mermaid":"flowchart TD\n  0[\"ℹ️ Input Dataset\\nQuery sequence\"];\n  style 0 stroke:#2c3143,stroke-width:4px;\n  1[\"ℹ️ Input Dataset\\nReference sequence\"];\n  style 1 stroke:#2c3143,stroke-width:4px;\n  2[\"Gecko\"];\n  1 -->|output| 2;\n  0 -->|output| 2;\n  6275abc1-d74e-45a7-b8ab-3c88426cc488[\"Output\\nGecko on input dataset(s): CSV\"];\n  2 --> 6275abc1-d74e-45a7-b8ab-3c88426cc488;\n  style 6275abc1-d74e-45a7-b8ab-3c88426cc488 stroke:#2c3143,stroke-width:4px;\n  3[\"Text reformatting\"];\n  2 -->|alignments2| 3;\n  4[\"ClustalW\"];\n  3 -->|outfile| 4;\n  d63c1172-a591-4bf6-b307-052ca19e7098[\"Output\\nClustalW on input dataset(s): clustal\"];\n  4 --> d63c1172-a591-4bf6-b307-052ca19e7098;\n  style d63c1172-a591-4bf6-b307-052ca19e7098 stroke:#2c3143,stroke-width:4px;\n  d7758e3a-522d-4439-8c9a-03f784284ebd[\"Output\\nClustalW on input dataset(s): dnd\"];\n  4 --> d7758e3a-522d-4439-8c9a-03f784284ebd;\n  style d7758e3a-522d-4439-8c9a-03f784284ebd stroke:#2c3143,stroke-width:4px;"}],"api":"https://training.galaxyproject.org/training-material/api/topics/genome-annotation/tutorials/hpc-for-lsgc/tutorial.json","tools":["toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_awk_tool/1.1.2","toolshed.g2.bx.psu.edu/repos/devteam/clustalw/clustalw/2.1","toolshed.g2.bx.psu.edu/repos/iuc/chromeister/chromeister/1.5.a","toolshed.g2.bx.psu.edu/repos/iuc/gecko/gecko/1.2"],"supported_servers":{"exact":[{"url":"https://usegalaxy.be/","name":"UseGalaxy.be","usegalaxy":false},{"url":"https://usegalaxy.eu","name":"UseGalaxy.eu","usegalaxy":true},{"url":"https://usegalaxy.org.au","name":"UseGalaxy.org.au","usegalaxy":true}],"inexact":[{"url":"https://galaxytrakr.org/","name":"GalaxyTrakr","usegalaxy":false},{"url":"https://usegalaxy.cz/","name":"UseGalaxy.cz","usegalaxy":false}]},"topic_name_human":"Genome Annotation","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[{"name":"text_processing","owner":"bgruening","revisions":"d698c222f354","tool_panel_section_label":"Text Manipulation","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"clustalw","owner":"devteam","revisions":"d6694932c5e0","tool_panel_section_label":"Multiple Alignments","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"chromeister","owner":"iuc","revisions":"e483be1014b6","tool_panel_section_label":"Multiple Alignments","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"gecko","owner":"iuc","revisions":"5efbd15675ca","tool_panel_section_label":"Multiple Alignments","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"}]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools:\n- name: text_processing\n  owner: bgruening\n  revisions: d698c222f354\n  tool_panel_section_label: Text Manipulation\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: clustalw\n  owner: devteam\n  revisions: d6694932c5e0\n  tool_panel_section_label: Multiple Alignments\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: chromeister\n  owner: iuc\n  revisions: e483be1014b6\n  tool_panel_section_label: Multiple Alignments\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: gecko\n  owner: iuc\n  revisions: 5efbd15675ca\n  tool_panel_section_label: Multiple Alignments\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n","tours":false,"video":false,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial","logo":"GTN","redirect_from":["/short/genome-annotation/hpc-for-lsgc/slides","/short/S00068"]}