{"layout":"tutorial_slides","title":"Galaxy Installation with Ansible","questions":["How does it all connect?","What steps will we go through?"],"objectives":["Get a high-level overview of a Galaxy server setup"],"time_estimation":"2h30m","key_points":["Everything can be accomplished with Ansible roles from Galaxy","You can easily deploy a base Galaxy, or one with more features."],"contributions":{"authorship":["slugger70","natefoo"],"editing":["hexylena"]},"tags":["ansible","deploying","git-gat"],"subtopic":"core","requirements":[{"type":"internal","topic_name":"admin","tutorials":["ansible"]},{"type":"none","title":"A VM with at least 2 vCPUs and 4 GB RAM, preferably running Ubuntu 20.04 - 22.04."}],"abbreviations":{"DVCS":"Distributed Version Control System"},"edam_ontology":["topic_3489","topic_0605","topic_3071"],"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"S00002","url":"/topics/admin/tutorials/ansible-galaxy/slides.html","topic_name":"admin","tutorial_name":"ansible-galaxy","dir":"topics/admin/tutorials/ansible-galaxy","symlink":null,"id":"admin/ansible-galaxy","ref_tutorials":["<p>This tutorial assumes you have some familiarity with <a href=\"https://www.ansible.com/resources/get-started\">Ansible</a> and are comfortable with writing and running playbooks.  If not, please consider following our <a href=\"/training-material/topics/admin/tutorials/ansible/tutorial.html\">Ansible Tutorial</a> first.</p>\n\n<p>Here we’ll see how to install a Galaxy server using an Ansible playbook. The Galaxy Project has decided on Ansible for all of its deployment recipes. For our project, Ansible is even more fitting due to its name:</p>\n\n<blockquote class=\"quote\" cite=\"https://en.wikipedia.org/wiki/Ansible\">\n  <p>An ansible is a category of fictional device or technology capable of instantaneous or faster-than-light communication. It can send and receive messages to and from a corresponding device over any distance or obstacle whatsoever with no delay, even between star systems</p>\n</blockquote>\n\n<p>We want to give you a comprehensive understanding of how the Galaxy installation occurs, but we want to avoid you having to write a “custom” Galaxy installation playbook which you would eventually throw away, in order to use the official playbooks. Given these goals, we will go through the playbook in depth first, and then move to a hands-on portion later. If you are not interested in the inner workings, you can <a href=\"#installing-galaxy\">skip to that section now</a>.</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#playbook-overview\" id=\"markdown-toc-playbook-overview\">Playbook Overview</a>    <ol>\n      <li><a href=\"#configuration\" id=\"markdown-toc-configuration\">Configuration</a></li>\n      <li><a href=\"#tasks\" id=\"markdown-toc-tasks\">Tasks</a></li>\n      <li><a href=\"#handlers\" id=\"markdown-toc-handlers\">Handlers</a></li>\n      <li><a href=\"#defaults\" id=\"markdown-toc-defaults\">Defaults</a></li>\n      <li><a href=\"#summary\" id=\"markdown-toc-summary\">Summary</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#installing-galaxy\" id=\"markdown-toc-installing-galaxy\">Installing Galaxy</a>    <ol>\n      <li><a href=\"#requirements\" id=\"markdown-toc-requirements\">Requirements</a></li>\n      <li><a href=\"#postgresql\" id=\"markdown-toc-postgresql\">PostgreSQL</a></li>\n      <li><a href=\"#galaxy\" id=\"markdown-toc-galaxy\">Galaxy</a></li>\n      <li><a href=\"#nginx\" id=\"markdown-toc-nginx\">NGINX</a></li>\n      <li><a href=\"#log-in-to-galaxy\" id=\"markdown-toc-log-in-to-galaxy\">Log in to Galaxy</a></li>\n      <li><a href=\"#job-configuration\" id=\"markdown-toc-job-configuration\">Job Configuration</a></li>\n      <li><a href=\"#productionising-galaxy\" id=\"markdown-toc-productionising-galaxy\">Productionising Galaxy</a></li>\n      <li><a href=\"#disaster-strikes-optional\" id=\"markdown-toc-disaster-strikes-optional\">Disaster Strikes! (Optional)</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#production--maintenance\" id=\"markdown-toc-production--maintenance\">Production &amp; Maintenance</a>    <ol>\n      <li><a href=\"#keeping-galaxy-updated\" id=\"markdown-toc-keeping-galaxy-updated\">Keeping Galaxy Updated</a></li>\n      <li><a href=\"#upgrading-galaxy-optional\" id=\"markdown-toc-upgrading-galaxy-optional\">Upgrading Galaxy (Optional)</a></li>\n      <li><a href=\"#user-support\" id=\"markdown-toc-user-support\">User Support</a></li>\n      <li><a href=\"#running-on-a-cluster\" id=\"markdown-toc-running-on-a-cluster\">Running on a cluster</a></li>\n      <li><a href=\"#other-software\" id=\"markdown-toc-other-software\">Other software</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#loving-ansible-convert-your-own-servers\" id=\"markdown-toc-loving-ansible-convert-your-own-servers\">Loving Ansible? Convert your own servers!</a></li>\n  <li><a href=\"#final-notes\" id=\"markdown-toc-final-notes\">Final Notes</a></li>\n</ol>\n\n</blockquote>\n\n<!--SNIPPET-->\n<blockquote class=\"comment\">   <div class=\"box-title comment-title\" id=\"comment-galaxy-admin-training-path\"><i class=\"far fa-comment-dots\" aria-hidden=\"true\"></i> Comment: Galaxy Admin Training Path</div>   <p>The yearly Galaxy Admin Training follows a specific ordering of tutorials. Use this timeline to help keep track of where you are in Galaxy Admin Training.</p>   <ol id=\"git-gat-timeline\">                    <li class=\"active\">         <a href=\"/training-material/topics/admin/tutorials/ansible-galaxy/tutorial.html\">             <div>Step 1</div>             <div>ansible-galaxy</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/backup-cleanup/tutorial.html\">             <div>Step 2</div>             <div>backup-cleanup</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/customization/tutorial.html\">             <div>Step 3</div>             <div>customization</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/tus/tutorial.html\">             <div>Step 4</div>             <div>tus</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/cvmfs/tutorial.html\">             <div>Step 5</div>             <div>cvmfs</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/apptainer/tutorial.html\">             <div>Step 6</div>             <div>apptainer</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/tool-management/tutorial.html\">             <div>Step 7</div>             <div>tool-management</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/reference-genomes/tutorial.html\">             <div>Step 8</div>             <div>reference-genomes</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/data-library/tutorial.html\">             <div>Step 9</div>             <div>data-library</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/dev/tutorials/bioblend-api/tutorial.html\">             <div>Step 10</div>             <div>dev/bioblend-api</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/connect-to-compute-cluster/tutorial.html\">             <div>Step 11</div>             <div>connect-to-compute-cluster</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/job-destinations/tutorial.html\">             <div>Step 12</div>             <div>job-destinations</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/pulsar/tutorial.html\">             <div>Step 13</div>             <div>pulsar</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/celery/tutorial.html\">             <div>Step 14</div>             <div>celery</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/gxadmin/tutorial.html\">             <div>Step 15</div>             <div>gxadmin</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/reports/tutorial.html\">             <div>Step 16</div>             <div>reports</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/monitoring/tutorial.html\">             <div>Step 17</div>             <div>monitoring</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/tiaas/tutorial.html\">             <div>Step 18</div>             <div>tiaas</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/sentry/tutorial.html\">             <div>Step 19</div>             <div>sentry</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/ftp/tutorial.html\">             <div>Step 20</div>             <div>ftp</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/beacon/tutorial.html\">             <div>Step 21</div>             <div>beacon</div>         </a>     </li>           </ol> </blockquote>\n<p><!--END_SNIPPET--></p>\n\n<!--SNIPPET-->\n<blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-operating-system-compatibility\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-operating-system-compatibility\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Operating system compatibility</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <p>These Ansible roles and training materials were last tested on Centos 7 and Ubuntu 18.04, but will probably work on other RHEL and Debian variants.</p>   <p>The roles that are used in these training are currently used by <code class=\"language-plaintext highlighter-rouge\">usegalaxy.*</code>, and other, servers in maintaining their infrastructure. (<a href=\"https://github.com/galaxyproject/infrastructure-playbook/\">US</a>, <a href=\"https://github.com/usegalaxy-eu/infrastructure-playbook\">EU</a>, both are running CentOS 7)</p>   <p>If you have an issue running these trainings on your OS flavour, please report <a href=\"https://github.com/galaxyproject/training-material/issues/new\">the issue</a> in the training material and we can see if it is possible to solve.</p> </blockquote>\n<p><!--END_SNIPPET--></p>\n\n<h1 id=\"playbook-overview\">Playbook Overview</h1>\n\n<h2 id=\"configuration\">Configuration</h2>\n\n<p>We’ll be using the <a href=\"https://github.com/galaxyproject/ansible-galaxy\">official Galaxy role</a> to install and manage Galaxy. This role is found in <a href=\"https://galaxy.ansible.com/\">Ansible Galaxy</a> (no relation - it is Ansible’s system for sharing reusable Ansible roles) as <a href=\"https://galaxy.ansible.com/galaxyproject/galaxy\">galaxyproject.galaxy</a>.</p>\n\n<p>The official role is extremely configurable, everything that you want to change is exposed as a variable, and then tasks will change behaviour based on that. The <a href=\"https://github.com/galaxyproject/ansible-galaxy#role-variables\">role documentation</a> is the most up-to-date source of documentation for the variables. You should take a minute and read over the variables listed there.</p>\n\n<p>The important variables for this tutorial are:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">galaxy_root</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">galaxy_commit_id</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">galaxy_config</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">galaxy_server_dir</code> (automatically set based on <code class=\"language-plaintext highlighter-rouge\">galaxy_root</code>)</li>\n</ul>\n\n<p>These are largely self explanatory: a directory for all of Galaxy’s code and configuration, which commit should be installed, and the Galaxy configuration. We will not explain Galaxy configuration variables in detail as they are covered sufficiently in the <code class=\"language-plaintext highlighter-rouge\">galaxy.yml</code> sample file or the <a href=\"https://docs.galaxyproject.org/en/master/admin/config.html#configuration-options\">online documentation</a>.</p>\n\n<p>The official recommendation is that you should have a variables file such as <code class=\"language-plaintext highlighter-rouge\">group_vars/galaxyservers.yml</code> for storing all of the Galaxy configuration.</p>\n\n<h2 id=\"tasks\">Tasks</h2>\n\n<p>As with every role, the entry point for execution is the <code class=\"language-plaintext highlighter-rouge\">tasks/main.yml</code> file. <a href=\"https://github.com/galaxyproject/ansible-galaxy/blob/master/tasks/main.yml\">In the case of the galaxyproject.galaxy role</a>, this includes a few groups of important tasks:</p>\n\n<ul>\n  <li><a href=\"#cloning-galaxy\">Clone (or Download) Galaxy</a></li>\n  <li><a href=\"#managing-configuration\">Managing Configuration</a></li>\n  <li><a href=\"#dependencies\">Fetching Dependencies</a></li>\n  <li><a href=\"#mutable-setup\">Managing Mutable Setup</a></li>\n  <li><a href=\"#managing-the-database\">Managing the Database</a></li>\n  <li><a href=\"#building-the-client\">Building the Client</a></li>\n</ul>\n\n<p>The actions each set of tasks performs are described below.</p>\n\n<h3 id=\"cloning-galaxy\">Cloning Galaxy</h3>\n\n<p>The <a href=\"https://github.com/galaxyproject/ansible-galaxy/blob/master/tasks/clone.yml\">clone</a> task is the one which is primarily interesting to us, it downloads Galaxy, using git, at a specific commit (or more generally, any <a href=\"https://git-scm.com/book/en/v2/Git-Internals-Git-References\">git reference</a>).</p>\n\n<ol>\n  <li>Ansible tries to update Galaxy, cloning it if it is missing, or otherwise attempting to update to the correct commit (or latest commit of the given branch).</li>\n  <li>Any change is reported.</li>\n  <li>The virtualenv is set up:\n    <ol>\n      <li>An empty virtualenv is created.</li>\n      <li>Pip is updated within the virtualenv.</li>\n    </ol>\n  </li>\n  <li>Any <code class=\"language-plaintext highlighter-rouge\">.pyc</code> files are removed, as this can occasionally result in Python loading the cached code, even if the corresponding <code class=\"language-plaintext highlighter-rouge\">.py</code> file is no longer present at the checked-out commit. For safety, all of these are removed.</li>\n</ol>\n\n<p>With that Galaxy is cloned to disk and is ready to be configured by the next task.</p>\n\n<h3 id=\"managing-configuration\">Managing Configuration</h3>\n\n<p>The <a href=\"https://github.com/galaxyproject/ansible-galaxy/blob/master/tasks/static_setup.yml\">static configuration setup</a> is relatively straightforward:</p>\n\n<ol>\n  <li>The directories for Galaxy configuration data and for the shed tools are created</li>\n  <li>Any config files are copied over</li>\n  <li>Any templates are copied over</li>\n  <li>The <code class=\"language-plaintext highlighter-rouge\">galaxy.yml</code> is deployed</li>\n</ol>\n\n<p>The setup for deploying extra Galaxy configuration templates and files is a little bit non-standard by Ansible best practices. Here you are expected to provide your own templates and static config files, and then describe them as a list of files and where they should be deployed to.</p>\n\n<p>Using the <a href=\"https://github.com/usegalaxy-eu/infrastructure-playbook/blob/02ca578211bfee45044facf36635d28208e5dbb3/group_vars/galaxy.yml#L578\">UseGalaxy.eu</a> configuration as an example, we have something like:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">galaxy_config_templates</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"na\">src</span><span class=\"pi\">:</span> <span class=\"s\">templates/galaxy/config/builds.txt</span>\n    <span class=\"na\">dest</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">galaxy_config.galaxy.builds_file_path</span><span class=\"nv\"> </span><span class=\"s\">}}\"</span>\n  <span class=\"pi\">-</span> <span class=\"na\">src</span><span class=\"pi\">:</span> <span class=\"s\">templates/galaxy/config/data_manager_conf.xml</span>\n    <span class=\"na\">dest</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">galaxy_config.galaxy.data_manager_config_file</span><span class=\"nv\"> </span><span class=\"s\">}}\"</span>\n  <span class=\"pi\">-</span> <span class=\"na\">src</span><span class=\"pi\">:</span> <span class=\"s\">templates/galaxy/config/datatypes_conf.xml</span>\n    <span class=\"na\">dest</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">galaxy_config.galaxy.datatypes_config_file</span><span class=\"nv\"> </span><span class=\"s\">}}\"</span>\n  <span class=\"pi\">-</span> <span class=\"na\">src</span><span class=\"pi\">:</span> <span class=\"s\">templates/galaxy/config/dependency_resolvers_conf.xml</span>\n    <span class=\"na\">dest</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">galaxy_config.galaxy.dependency_resolvers_config_file</span><span class=\"nv\"> </span><span class=\"s\">}}\"</span>\n  <span class=\"pi\">-</span> <span class=\"na\">src</span><span class=\"pi\">:</span> <span class=\"s\">templates/galaxy/config/disposable_email_blocklist.conf</span>\n    <span class=\"na\">dest</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">galaxy_config.galaxy.blocklist_file</span><span class=\"nv\"> </span><span class=\"s\">}}\"</span>\n</code></pre></div></div>\n\n<p>The configuration here is a bit different, it references the <code class=\"language-plaintext highlighter-rouge\">galaxy_config</code>, which is structured like:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">galaxy_config</span><span class=\"pi\">:</span>\n  <span class=\"na\">galaxy</span><span class=\"pi\">:</span>\n    <span class=\"na\">builds_file_path</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">galaxy_config_dir</span><span class=\"nv\">  </span><span class=\"s\">}}/builds.txt\"</span>\n    <span class=\"na\">datatypes_config_file</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">galaxy_config_dir</span><span class=\"nv\">  </span><span class=\"s\">}}/datatypes_conf.xml\"</span>\n</code></pre></div></div>\n\n<p>So the references in <code class=\"language-plaintext highlighter-rouge\">galaxy_config_templates</code> to <code class=\"language-plaintext highlighter-rouge\">galaxy_config</code> are done to ensure that the setting for e.g. “location of the datatypes config file” is the same between where we have configured Galaxy to looking for it, and where the file has been deployed, without requiring us to make variables changes in numerous places.</p>\n\n<!--SNIPPET-->\n<blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-define-once-reference-many-times\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-define-once-reference-many-times\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Define once, reference many times</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <p>Using variables, either by defining them ahead of time, or simply accessing them via existing data structures that have been defined, e.g.:</p>   <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># defining a variable that gets reused is great!</span><br /><span class=\"na\">galaxy_user</span><span class=\"pi\">:</span> <span class=\"s\">galaxy</span><br /><br /><span class=\"na\">galaxy_config</span><span class=\"pi\">:</span><br />  <span class=\"na\">galaxy</span><span class=\"pi\">:</span><br />    <span class=\"c1\"># Re-using the galaxy_config_dir variable saves time and ensures everything</span><br />    <span class=\"c1\"># is in sync!</span><br />    <span class=\"na\">datatypes_config_file</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">galaxy_config_dir</span><span class=\"nv\"> </span><span class=\"s\">}}/datatypes_conf.xml\"</span><br /><br /><span class=\"c1\"># and now we can re-use \"{{ galaxy_config.galaxy.datatypes_config_file }}\"</span><br /><span class=\"c1\"># in other places!</span><br /><br /><span class=\"na\">galaxy_config_templates</span><span class=\"pi\">:</span><br />  <span class=\"pi\">-</span> <span class=\"na\">src</span><span class=\"pi\">:</span> <span class=\"s\">templates/galaxy/config/datatypes_conf.xml</span><br />    <span class=\"na\">dest</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">galaxy_config.galaxy.datatypes_config_file</span><span class=\"nv\"> </span><span class=\"s\">}}\"</span><br /></code></pre></div></div>   <p>Practices like those shown above help to avoid problems caused when paths are defined differently in multiple places. The datatypes config file will be copied to the same path as Galaxy is configured to find it in, because that path is only defined in one place. Everything else is a reference to the original definition! If you ever need to update that definition, everything else will be updated accordingly.</p> </blockquote>\n<p><!--END_SNIPPET--></p>\n\n<h3 id=\"dependencies\">Dependencies</h3>\n\n<p>Now that Galaxy is available on disk, Ansible is ready to start processing <a href=\"https://github.com/galaxyproject/ansible-galaxy/blob/master/tasks/dependencies.yml\">dependencies</a> of Galaxy.</p>\n\n<ol>\n  <li>The virtualenv is updated with data from the <code class=\"language-plaintext highlighter-rouge\">galaxy_requirements_file</code>, by default pointing to the requirements file in the codebase: <code class=\"language-plaintext highlighter-rouge\">{{ galaxy_server_dir }}/lib/galaxy/dependencies/pinned-requirements.txt</code>.</li>\n  <li>Any necessary conditional dependencies of Galaxy are <a href=\"https://github.com/galaxyproject/galaxy/blob/dev/lib/galaxy/dependencies/__init__.py\">collected by processing the config file</a></li>\n  <li>and then installed to the virtualenv.</li>\n</ol>\n\n<h3 id=\"mutable-setup\">Mutable Setup</h3>\n\n<p><a href=\"https://github.com/galaxyproject/ansible-galaxy/blob/master/tasks/mutable_setup.yml\">This task</a> creates a directory and initializes “mutable” (written/managed by Galaxy itself) configuration files. It also deploys any hand-managed mutable config files, but it is unlikely that you want to manage these directly, as Galaxy does a sufficient job. Any changes you make to Galaxy, for example installing some tools, would result in the tools being “forgotten about”, if you re-ran the playbook and overwrote the <code class=\"language-plaintext highlighter-rouge\">shed_tool_conf.xml</code> mutable config file with a hand-managed one.</p>\n\n<h3 id=\"managing-the-database\">Managing the Database</h3>\n\n<p>The <a href=\"https://github.com/galaxyproject/ansible-galaxy/blob/master/tasks/database.yml\">database management tasks</a> are extremely convenient; any time you run the playbook to update Galaxy, this will automatically run the database schema migration as needed.</p>\n\n<ol>\n  <li>The role first obtains the current DB version and the maximum possible DB version based on the codebase.</li>\n  <li>If needed, the database is created.</li>\n  <li>Both versions are reported for the runner of the playbook.</li>\n  <li>If the versions are different, then Ansible runs the command to upgrade the database to the latest version.</li>\n</ol>\n\n<p>As an administrator who often forgot to run the upgrade, and would only notice it once Galaxy crashed during startup, having this process completely automated is extremely nice.</p>\n\n<h3 id=\"building-the-client\">Building the Client</h3>\n\n<p>Galaxy is a modern web application that includes both a server (written in Python) and a client (written in Javascript). After the server is installed and its database prepared, the next step is to build the client application. This means fetching its dependencies, bundling components, creating minified copies of static content, etc. This process ensures that the smallest possible amount of data is transferred to the user when accessing Galaxy over the web, which is important for the performance of the website.</p>\n\n<p>This process can be lengthy and resource intensive. Future plans for Galaxy include pre-building the client so that the build process is not necessary as long as you run “release” versions of Galaxy.</p>\n\n<p>The client lives in the Galaxy code under the <a href=\"https://github.com/galaxyproject/galaxy/blob/dev/client/\">client/</a> directory, and the build process deploys it to the <a href=\"https://github.com/galaxyproject/galaxy/tree/dev/static/\">static/</a> directory, which we will configure a webserver to serve in this tutorial.</p>\n\n<h2 id=\"handlers\">Handlers</h2>\n\n<p>A number of the tasks that are executed will trigger a restart of Galaxy. The auto-magic implementation of this restart <a href=\"https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_handlers.html\">handler</a> should work for most cases, but it is possible to define your own custom handlers if necessary. If this is the case for you, the role provides a way to do this by notifying handlers that <a href=\"https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_handlers.html#naming-handlers\">“listen”</a> to certain notifications. See the <a href=\"https://github.com/galaxyproject/ansible-galaxy/tree/main/handlers\">role handlers</a> for details.</p>\n\n<h2 id=\"defaults\">Defaults</h2>\n\n<p>As with other roles, numerous <a href=\"https://github.com/galaxyproject/ansible-galaxy/blob/master/defaults/main.yml\">default values</a> are provided, but these are useful mostly as reference, and not to go through individually.</p>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>Installation of Galaxy with the playbook follows generally the steps you would expect:</p>\n\n<ul>\n  <li>Galaxy is cloned (or updated)</li>\n  <li>A virtualenv is created if it doesn’t exist</li>\n  <li>Configuration files are installed</li>\n  <li>Any missing dependencies are installed</li>\n  <li>Any database updates are applied</li>\n  <li>The client application is built and deployed</li>\n</ul>\n\n<p>It would not be difficult to write a role that does this yourself, but by using\nthe <code class=\"language-plaintext highlighter-rouge\">galaxyproject.galaxy</code> role, you know that you’re getting all of the Galaxy\nbest practices and knowledge from previous admins codified for you.</p>\n\n<h1 id=\"installing-galaxy\">Installing Galaxy</h1>\n\n<p>With the necessary background in place, you are ready to install Galaxy with Ansible. The playbooks will start simple, and grow over time. We will start with the minimal Galaxy playbook which only requires setting the <code class=\"language-plaintext highlighter-rouge\">galaxy_root</code> and expand from there. First, however, we need a database for Galaxy to connect to, so we will do that now.</p>\n\n<p>To proceed from here it is expected that:</p>\n\n<blockquote class=\"comment\">\n  <comment-title>Requirements for Running This Tutorial</comment-title>\n\n  <ol>\n    <li>\n      <p>You have <a href=\"https://docs.ansible.com/ansible/2.9/installation_guide/intro_installation.html\">Ansible installed</a> on the machine where you will install Galaxy</p>\n\n      <blockquote class=\"comment\">\n        <comment-title>Running Ansible on remote machine</comment-title>\n        <p>It is possible to have Ansible installed on your laptop/local machine and run it against some remote hosts as well. We will <strong>not</strong> do that in this training.</p>\n      </blockquote>\n    </li>\n    <li>Your <code class=\"language-plaintext highlighter-rouge\">ansible</code> version is <code class=\"language-plaintext highlighter-rouge\">&gt;=2.10</code>, you can check this by running <code class=\"language-plaintext highlighter-rouge\">ansible --version</code></li>\n    <li>You have an <a href=\"../ansible/tutorial.html#inventory-file\">inventory file</a> with the VM or host specified where you will deploy Galaxy and Galaxy’s database. We will refer to these group of hosts as “galaxyservers” and “dbservers,” respectively.</li>\n    <li>Your VM has a public DNS name: this tutorial sets up SSL certificates from the start and as an integral part of the tutorial.</li>\n    <li>\n      <p>Your VM has <code class=\"language-plaintext highlighter-rouge\">python3</code> installed.</p>\n\n      <p>If you follow the official Ansible instructions to install Ansible on a blank machine, you will probably end up with py2 installed. You will need to install python3 in addition.</p>\n    </li>\n    <li>\n      <p>In your inventory file, you have written the full DNS hostname that has been provided, and <strong>not</strong> <code class=\"language-plaintext highlighter-rouge\">localhost</code>, as we will be requesting SSL certificates.</p>\n    </li>\n    <li>\n      <p>You have the following ports exposed:</p>\n\n      <ul>\n        <li>22 for SSH, this can be a different port or via VPN or similar.</li>\n        <li>80 for HTTP, this needs to be available to the world if you want to follow the LetsEncrypt portion of the tutorial.</li>\n        <li>443 for HTTPs, this needs to be available to the world if you want to follow the LetsEncrypt portion of the tutorial.</li>\n        <li>5671 for AMQP for Pulsar, needed if you plan to setup Pulsar for remote job running.</li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<blockquote class=\"comment\">\n  <comment-title>Ubuntu or Debian, CentOS or RHEL?</comment-title>\n  <p>The training tutorial is only tested on Ubuntu, as that is the training platform most often used. The training <em>should</em> work on RHEL/CentOS, and the roles we use are definitely compatible with both. If any of the variable values differ between Ubuntu and CentOS, we try to note it in the tutorial. Any places we don’t note it are bugs.</p>\n\n  <p>There are known issues with CentOS7 and python3, which is used in this tutorial. If you use this setup, you should have python2 and python3 coexisting, and use python2 for Ansible (i.e. do not set <code class=\"language-plaintext highlighter-rouge\">interpreter_python</code> in your <code class=\"language-plaintext highlighter-rouge\">ansible.cfg</code>) and python3 for Galaxy. This setup requires numerous changes that you will need to discover, which are not covered in this tutorial.</p>\n\n  <p>On older versions, both <code class=\"language-plaintext highlighter-rouge\">python-psycopg2</code> and <code class=\"language-plaintext highlighter-rouge\">python3-psycopg2</code> may need to be installed.</p>\n\n  <p>CentOS8 (and RHEL in general) have significantly different package names for some modules, beware!</p>\n</blockquote>\n\n<h2 id=\"requirements\">Requirements</h2>\n\n<p>We have codified all of the dependencies you will need into a YAML file that <code class=\"language-plaintext highlighter-rouge\">ansible-galaxy</code> can install.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Installing roles</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Create a new directory <code class=\"language-plaintext highlighter-rouge\">galaxy</code> in your home folder, and <code class=\"language-plaintext highlighter-rouge\">cd</code> into that directory</p>\n    </li>\n    <li>\n      <p>Create a new file in your working directory called <code class=\"language-plaintext highlighter-rouge\">requirements.yml</code> and include the following contents:</p>\n\n      <div data-commit=\"Add requirements\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- /dev/null\n</span><span class=\"gi\">+++ b/requirements.yml\n</span><span class=\"p\">@@ -0,0 +1,13 @@</span>\n<span class=\"gi\">+# Galaxy, Postgres, Nginx\n+- src: galaxyproject.galaxy\n+  version: 0.10.14\n+- src: galaxyproject.nginx\n+  version: 0.7.1\n+- src: galaxyproject.postgresql\n+  version: 1.1.2\n+- src: galaxyproject.postgresql_objects\n+  version: 1.2.0\n+- src: galaxyproject.miniconda\n+  version: 0.3.1\n+- src: usegalaxy_eu.certbot\n+  version: 0.1.11\n</span>   \n</code></pre></div>      </div>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-how-to-read-a-diff\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-how-to-read-a-diff\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: How to read a Diff</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <p>If you haven’t worked with diffs before, this can be something quite new or different.</p>   <p>If we have two files, let’s say a grocery list, in two files. We’ll call them ‘a’ and ‘b’.</p>   <blockquote class=\"code-2col\">   <blockquote class=\"code-in\">     <code-in-title>Old</code-in-title>     <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ cat old<br />🍎<br />🍐<br />🍊<br />🍋<br />🍒<br />🥑<br /></code></pre></div>    </div>   </blockquote>   <blockquote class=\"code-out\">     <code-out-title>New</code-out-title>     <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ cat new<br />🍎<br />🍐<br />🍊<br />🍋<br />🍍<br />🥑<br /></code></pre></div>    </div>   </blockquote> </blockquote>   <p>We can see that they have some different entries. We’ve removed 🍒 because they’re awful, and replaced them with an 🍍</p>   <p>Diff lets us compare these files</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>diff old new<br />5c5<br />&lt; 🍒<br /><span class=\"nt\">---</span><br /><span class=\"o\">&gt;</span> 🍍<br /></code></pre></div></div>   <p>Here we see that 🍒 is only in a, and 🍍 is only in b. But otherwise the files are identical.</p>   <p>There are a couple different formats to diffs, one is the ‘unified diff’</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>diff <span class=\"nt\">-U2</span> old new<br /><span class=\"nt\">---</span> old\t2022-02-16 14:06:19.697132568 +0100<br />+++ new\t2022-02-16 14:06:36.340962616 +0100<br />@@ <span class=\"nt\">-3</span>,4 +3,4 @@<br /> 🍊<br /> 🍋<br />-🍒<br />+🍍<br /> 🥑<br /></code></pre></div></div>   <p>This is basically what you see in the training materials which gives you a lot of context about the changes:</p>   <ul>   <li><code class=\"language-plaintext highlighter-rouge\">--- old</code> is the ‘old’ file in our view</li>   <li><code class=\"language-plaintext highlighter-rouge\">+++ new</code> is the ‘new’ file</li>   <li>@@ these lines tell us where the change occurs and how many lines are added or removed.</li>   <li>Lines starting with a - are removed from our ‘new’ file</li>   <li>Lines with a + have been added.</li> </ul>   <p>So when you go to apply these diffs to your files in the training:</p>   <ol>   <li>Ignore the header</li>   <li>Remove lines starting with - from your file</li>   <li>Add lines starting with + to your file</li> </ol>   <p>The other lines (🍊/🍋 and 🥑) above just provide “context”, they help you know where a change belongs in a file, but <strong>should not be edited</strong> when you’re making the above change. Given the above diff, you would find a line with a 🍒, and replace it with a 🍍</p>   <h4 id=\"added--removed-lines\">Added &amp; Removed Lines</h4>   <p>Removals are very easy to spot, we just have removed lines</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">---</span> old\t2022-02-16 14:06:19.697132568 +0100<br />+++ new\t2022-02-16 14:10:14.370722802 +0100<br />@@ <span class=\"nt\">-4</span>,3 +4,2 @@<br /> 🍋<br /> 🍒<br />-🥑<br /></code></pre></div></div>   <p>And additions likewise are very easy, just add a new line, between the other lines in your file.</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">---</span> old\t2022-02-16 14:06:19.697132568 +0100<br />+++ new\t2022-02-16 14:11:11.422135393 +0100<br />@@ <span class=\"nt\">-1</span>,3 +1,4 @@<br /> 🍎<br />+🍍<br /> 🍐<br /> 🍊<br /></code></pre></div></div>   <h4 id=\"completely-new-files\">Completely new files</h4>   <p>Completely new files look a bit different, there the “old” file is <code class=\"language-plaintext highlighter-rouge\">/dev/null</code>, the empty file in a Linux machine.</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>diff <span class=\"nt\">-U2</span> /dev/null old<br /><span class=\"nt\">---</span> /dev/null\t2022-02-15 11:47:16.100000270 +0100<br />+++ old\t2022-02-16 14:06:19.697132568 +0100<br />@@ <span class=\"nt\">-0</span>,0 +1,6 @@<br />+🍎<br />+🍐<br />+🍊<br />+🍋<br />+🍒<br />+🥑<br /></code></pre></div></div>   <p>And removed files are similar, except with the new file being /dev/null</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">---</span> old\t2022-02-16 14:06:19.697132568 +0100<br />+++ /dev/null\t2022-02-15 11:47:16.100000270 +0100<br />@@ <span class=\"nt\">-1</span>,6 +0,0 @@<br />-🍎<br />-🍐<br />-🍊<br />-🍋<br />-🍒<br />-🥑<br /></code></pre></div></div> </blockquote>\n      <p><!--END_SNIPPET--></p>\n\n      <blockquote class=\"details\">\n        <details-title>What do each of these roles do?</details-title>\n        <p>We’ll cover it in more detail as we use each of the roles but briefly:</p>\n\n        <table>\n          <thead>\n            <tr>\n              <th>Role</th>\n              <th>Purpose</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td><code class=\"language-plaintext highlighter-rouge\">galaxyproject.galaxy</code></td>\n              <td>Installs and configures the Galaxy application</td>\n            </tr>\n            <tr>\n              <td><code class=\"language-plaintext highlighter-rouge\">galaxyproject.nginx</code></td>\n              <td>Sets up a webserver</td>\n            </tr>\n            <tr>\n              <td><code class=\"language-plaintext highlighter-rouge\">galaxyproject.postgresql</code></td>\n              <td>Installs our database, PostgreSQL</td>\n            </tr>\n            <tr>\n              <td><code class=\"language-plaintext highlighter-rouge\">galaxyproject.postgresql_objects</code></td>\n              <td>Creates users and databases within PostgreSQL</td>\n            </tr>\n            <tr>\n              <td><code class=\"language-plaintext highlighter-rouge\">galaxyproject.miniconda</code></td>\n              <td>Installs miniconda, which is used by Galaxy</td>\n            </tr>\n            <tr>\n              <td><code class=\"language-plaintext highlighter-rouge\">usegalaxy_eu.certbot</code></td>\n              <td>Installs certbot and requests SSL certificates</td>\n            </tr>\n          </tbody>\n        </table>\n      </blockquote>\n\n      <blockquote class=\"details\">\n        <details-title>Role version vs Galaxy version?</details-title>\n        <p>Q: Is there a correspondence between galaxy role versions and galaxy versions?\nA: They are correlated (because generally new Galaxy versions could introduce e.g. new configuration options that the galaxy role would then need to adopt), but the Galaxy role can install older versions of Galaxy.</p>\n      </blockquote>\n    </li>\n    <li>\n      <p>In the same directory, run:</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-galaxy <span class=\"nb\">install</span> <span class=\"nt\">-p</span> roles <span class=\"nt\">-r</span> requirements.yml\n</code></pre></div>        </div>\n      </blockquote>\n\n      <p>This will install all of the required modules for this training into the <code class=\"language-plaintext highlighter-rouge\">roles/</code> folder. We choose to install to a folder to give you easy access to look through the different roles when you have questions on their behaviour.</p>\n    </li>\n    <li>\n      <p>Inspect the contents of the newly created <code class=\"language-plaintext highlighter-rouge\">roles/</code> directory in your working directory.</p>\n    </li>\n    <li>\n      <p>It’s good practice to put your playbooks and configuration files under version control (usually in a git repository), but there is no need to keep track of the content of the <code class=\"language-plaintext highlighter-rouge\">roles/</code> directory, as all of that data can be perfectly recreated from the <code class=\"language-plaintext highlighter-rouge\">requirements.yml</code> file.</p>\n\n      <p>If you plan to put this git repository online (e.g. on GitHub), any file containing clear-text passwords should <em>never</em> ever be committed to the repository, even if the repository is private. For this reason, we should tell git, ahead of time, to ignore one such file, <code class=\"language-plaintext highlighter-rouge\">.vault-password.txt</code> , which will use later on in this lesson.</p>\n\n      <p>To configure git to ignore certain files and directories, they need to be listed in a file called <code class=\"language-plaintext highlighter-rouge\">.gitignore</code> , which should be instead tracked as part of your git repository. You can now create the <code class=\"language-plaintext highlighter-rouge\">.gitignore</code> file with the following content:</p>\n\n      <div data-commit=\"Add .gitignore\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- /dev/null\n</span><span class=\"gi\">+++ b/.gitignore\n</span><span class=\"p\">@@ -0,0 +1,2 @@</span>\n<span class=\"gi\">+roles/\n+.vault-password.txt\n</span>   \n</code></pre></div>      </div>\n\n      <p>When you run <code class=\"language-plaintext highlighter-rouge\">git status</code> you’ll notice that the <code class=\"language-plaintext highlighter-rouge\">roles/</code> folder is not listed among the other “Untracked files”.</p>\n\n      <p>Now you can do <code class=\"language-plaintext highlighter-rouge\">git add .</code> to add all of the files in the current directory to your repository, and not worry about committing these files and directories by mistake!</p>\n    </li>\n  </ol>\n</blockquote>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Configuration files</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Create a <code class=\"language-plaintext highlighter-rouge\">ansible.cfg</code> file (next to your playbook) to <a href=\"https://docs.ansible.com/ansible/2.9/reference_appendices/config.html\">configure settings</a> like the inventory file (and save ourselves some typing!), or the Python interpreter to use:</p>\n\n      <div data-commit=\"Add ansible.cfg\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- /dev/null\n</span><span class=\"gi\">+++ b/ansible.cfg\n</span><span class=\"p\">@@ -0,0 +1,11 @@</span>\n<span class=\"gi\">+[defaults]\n+interpreter_python = /usr/bin/python3\n+inventory = hosts\n+# Use the YAML callback plugin.\n+stdout_callback = yaml\n+# Use the stdout_callback when running ad-hoc commands.\n+bin_ansible_callbacks = True\n+\n+# Show diffs of changes\n+[diff]\n+always = True\n</span>   \n</code></pre></div>      </div>\n\n      <blockquote class=\"tip\">\n        <tip-title>CentOS7</tip-title>\n        <p>As mentioned in the “Ubuntu or Debian, CentOS or RHEL?” comment above, if you are using CentOS7 do not set <code class=\"language-plaintext highlighter-rouge\">interpreter_python</code> in <code class=\"language-plaintext highlighter-rouge\">ansible.cfg</code> .</p>\n      </blockquote>\n\n      <p>There is an additional useful option that you might want to add to your <code class=\"language-plaintext highlighter-rouge\">ansible.cfg</code> file if you are connecting over SSH:</p>\n\n      <div class=\"language-ini highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nn\">[ssh_connection]</span>\n<span class=\"py\">pipelining</span> <span class=\"p\">=</span> <span class=\"s\">true</span>\n</code></pre></div>      </div>\n\n      <p>Pipelining will make <a href=\"https://docs.ansible.com/ansible/2.9/reference_appendices/config.html#ansible-pipelining\">Ansible run faster</a> by significantly reducing the number of new SSH connections that must be opened.</p>\n    </li>\n    <li>\n      <p>Create the <code class=\"language-plaintext highlighter-rouge\">hosts</code> inventory file if you have not done so yet, defining a <code class=\"language-plaintext highlighter-rouge\">[galaxyservers]</code> group with the address of the host where you want to install Galaxy. If you are running Ansible on the same machine where Galaxy will be installed to, you should set the <code class=\"language-plaintext highlighter-rouge\">ansible_connection=local</code> variable. Lastly, you should explicitly set the <code class=\"language-plaintext highlighter-rouge\">ansible_user</code> variable to the username to use when connecting to the server. Ansible has changed its behaviour over time regarding whether or not <code class=\"language-plaintext highlighter-rouge\">ansible_user</code> is defined, and it is most effective to define it explicitly even when it can sometimes be inferred.</p>\n\n      <p>You should also define a <code class=\"language-plaintext highlighter-rouge\">[dbservers]</code> group for the hosts that will run Galaxy’s database. In many cases (and in the case of the Galaxy Admin Training), these will be the same host, but the tutorial is designed to support either scenario, and helps to strengthen understanding of the purpose of host groupings in Ansible for more advanced real-world deployments. Here however we suggest using <code class=\"language-plaintext highlighter-rouge\">[dbservers:children]</code> and adding <code class=\"language-plaintext highlighter-rouge\">galaxyservers</code> as the child of that.</p>\n\n      <blockquote class=\"code-2col\">\n        <blockquote class=\"code-in\">\n          <code-in-title>Bash</code-in-title>\n          <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cat </span>hosts\n</code></pre></div>          </div>\n        </blockquote>\n\n        <blockquote class=\"code-out\">\n          <code-out-title>Bash</code-out-title>\n\n          <p>Your hostname is probably different:</p>\n\n          <div data-commit=\"Add hosts\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- /dev/null\n</span><span class=\"gi\">+++ b/hosts\n</span><span class=\"p\">@@ -0,0 +1,4 @@</span>\n<span class=\"gi\">+[galaxyservers]\n+gat-0.eu.galaxy.training ansible_connection=local ansible_user=ubuntu\n+[dbservers:children]\n+galaxyservers\n</span><span class=\"err\">\n</span></code></pre></div>          </div>\n        </blockquote>\n      </blockquote>\n\n      <blockquote class=\"tip\">\n        <tip-title>Separate database server</tip-title>\n        <p>In the hosts file above, we have defined the <code class=\"language-plaintext highlighter-rouge\">galaxyservers</code> group to be a “child” of the <code class=\"language-plaintext highlighter-rouge\">dbservers</code> group. This means that the host defined in <code class=\"language-plaintext highlighter-rouge\">[galaxyservers]</code> is also a member of <code class=\"language-plaintext highlighter-rouge\">[dbservers]</code>. If we instead wanted to define a separate host as the Galaxy database server, we would replace the <code class=\"language-plaintext highlighter-rouge\">[dbservers:children]</code> section with something like:</p>\n\n        <div class=\"language-ini highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nn\">[dbservers]</span>\n<span class=\"err\">galaxy-db.example.org</span>\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n    <li>\n      <p>Create the <code class=\"language-plaintext highlighter-rouge\">group_vars</code> directory and create the file <code class=\"language-plaintext highlighter-rouge\">group_vars/all.yml</code>. These variables are applied to <em>all</em> hosts, regardless of group membership. The variables we set will be used to ensure Python 3 is always used on older systems where Python 2 might also still be installed. We will also set a few variables that must be known by both the Galaxy server and the database server: Galaxy’s system/database username, as well as the database name.</p>\n\n      <blockquote class=\"code-2col\">\n        <blockquote class=\"code-in\">\n          <code-in-title>Bash</code-in-title>\n          <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cat </span>group_vars/all.yml\n</code></pre></div>          </div>\n        </blockquote>\n\n        <blockquote class=\"code-out\">\n          <code-out-title>Bash</code-out-title>\n\n          <div data-commit=\"Add initial all hosts variables file\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- /dev/null\n</span><span class=\"gi\">+++ b/group_vars/all.yml\n</span><span class=\"p\">@@ -0,0 +1,7 @@</span>\n<span class=\"gi\">+---\n+# Python 3 support\n+pip_virtualenv_command: /usr/bin/python3 -m venv  # usegalaxy_eu.certbot, usegalaxy_eu.tiaas2, galaxyproject.galaxy\n+\n+# Common variables needed by all hosts\n+galaxy_user_name: galaxy\n+galaxy_db_name: galaxy\n</span><span class=\"err\">\n</span></code></pre></div>          </div>\n        </blockquote>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"postgresql\">PostgreSQL</h2>\n\n<p>Galaxy is capable of talking to multiple databases through SQLAlchemy drivers. SQLite is the development database, but PostgreSQL (/ˈpoʊstɡrɛs ˌkjuː ˈɛl/, POHST-gres kyoo el) is recommended in production. MySQL is a possibility, but does not receive the same testing or bugfixes from the main development team as PostgreSQL, so we will only show installation with PostgreSQL.</p>\n\n<p>PostgreSQL maintains its own user database apart from the system user database. By default, PostgreSQL uses the “peer” authentication method which allows access for system users with matching PostgreSQL usernames (other authentication mechanisms are available, see the <a href=\"https://www.postgresql.org/docs/current/static/client-authentication.html\">PostgreSQL Client Authentication documentation</a>.</p>\n\n<p>For this tutorial, we will use the default “peer” authentication, so we need to create a PostgreSQL user matching the system user under which Galaxy will be running, i.e. <code class=\"language-plaintext highlighter-rouge\">galaxy</code>. This is normally done with the PostgreSQL <code class=\"language-plaintext highlighter-rouge\">createuser</code> command, and it must be run as the <code class=\"language-plaintext highlighter-rouge\">postgres</code> user. In our case, we will use the <code class=\"language-plaintext highlighter-rouge\">galaxyproject.postgresql_objects</code> role to handle this step.</p>\n<blockquote class=\"hands_on\">\n  <hands-on-title>Installing PostgreSQL</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Create and edit <code class=\"language-plaintext highlighter-rouge\">group_vars/dbservers.yml</code> and add some variables to configure PostgreSQL:</p>\n\n      <div data-commit=\"Add initial dbservers group variables file\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- /dev/null\n</span><span class=\"gi\">+++ b/group_vars/dbservers.yml\n</span><span class=\"p\">@@ -0,0 +1,7 @@</span>\n<span class=\"gi\">+---\n+# PostgreSQL\n+postgresql_objects_users:\n+  - name: \"{{ galaxy_user_name }}\"\n+postgresql_objects_databases:\n+  - name: \"{{ galaxy_db_name }}\"\n+    owner: \"{{ galaxy_user_name }}\"\n</span>   \n</code></pre></div>      </div>\n\n      <p>Notice that we have used the variables we defined in <code class=\"language-plaintext highlighter-rouge\">group_vars/all.yml</code> for the Galaxy user and database names in the previous section, implementing the principle of “define once, reference many times.”</p>\n\n      <blockquote class=\"tip\">\n        <tip-title>Using postgres via the network</tip-title>\n        <p>To use postgres via another machine, or via the network, you can add lines like the following:</p>\n\n        <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">postgresql_pg_hba_conf</span><span class=\"pi\">:</span>\n<span class=\"pi\">-</span> <span class=\"s\">host all all 127.0.0.1/32 md5</span>\n</code></pre></div>        </div>\n\n        <p>Here you should either add multiple lines per IP address that needs access to the Postgres server (with netmask <code class=\"language-plaintext highlighter-rouge\">/32</code>), or a less specific IP range defined also <a href=\"https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#IPv4_CIDR_blocks\">via netmask.</a></p>\n\n        <p>Additionally you’ll need to change the <code class=\"language-plaintext highlighter-rouge\">postgresql_objects_users</code> statement to include a password (maybe stored in a vault, discussed later!)</p>\n\n        <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">postgresql_objects_users</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">galaxy</span>\n    <span class=\"na\">password</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">\"</span>\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n    <li>\n      <p>Create and open <code class=\"language-plaintext highlighter-rouge\">galaxy.yml</code> which will be our playbook. Write the following:</p>\n\n      <ul>\n        <li>Create a play that will run on the <code class=\"language-plaintext highlighter-rouge\">dbservers</code> group, as the root user (you will need <code class=\"language-plaintext highlighter-rouge\">become</code>/<code class=\"language-plaintext highlighter-rouge\">become_user</code>)</li>\n        <li>Add a pre-task to install the necessary dependency at this stage: <code class=\"language-plaintext highlighter-rouge\">acl</code></li>\n        <li>Use the role <code class=\"language-plaintext highlighter-rouge\">galaxyproject.postgresql</code>. This will handle the installation of PostgreSQL.</li>\n        <li>Use the role <code class=\"language-plaintext highlighter-rouge\">galaxyproject.postgresql_objects</code>, run as the postgres user. This role allows for managing users and databases within PostgreSQL.</li>\n      </ul>\n\n      <div data-commit=\"Add initial galaxy playbook\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- /dev/null\n</span><span class=\"gi\">+++ b/galaxy.yml\n</span><span class=\"p\">@@ -0,0 +1,13 @@</span>\n<span class=\"gi\">+---\n+- hosts: dbservers\n+  become: true\n+  become_user: root\n+  pre_tasks:\n+    - name: Install Dependencies\n+      package:\n+        name: 'acl'\n+  roles:\n+    - galaxyproject.postgresql\n+    - role: galaxyproject.postgresql_objects\n+      become: true\n+      become_user: postgres\n</span>   \n</code></pre></div>      </div>\n\n      <blockquote class=\"question\">\n        <question-title></question-title>\n\n        <p>What should we expect to see in our folder?</p>\n\n        <blockquote class=\"solution\">\n          <solution-title></solution-title>\n\n          <ul>\n            <li>a playbook</li>\n            <li>a hosts file</li>\n            <li>a requirements file</li>\n            <li>some group variables</li>\n            <li>all of our roles</li>\n          </ul>\n\n          <blockquote class=\"code-in\">\n            <code-in-title>Bash</code-in-title>\n            <p>Let’s investigate our directory.</p>\n            <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>tree <span class=\"nt\">-L</span> 2\n</code></pre></div>            </div>\n          </blockquote>\n\n          <blockquote class=\"code-out code-max-300\">\n            <code-out-title>Bash</code-out-title>\n\n            <p>Your directory should look approximately like this:</p>\n\n            <div class=\"language-ini highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">.</span>\n<span class=\"err\">├──</span> <span class=\"err\">ansible.cfg</span>\n<span class=\"err\">├──</span> <span class=\"err\">galaxy.yml</span>\n<span class=\"err\">├──</span> <span class=\"err\">group_vars</span>\n<span class=\"err\">│  </span> <span class=\"err\">├──</span> <span class=\"err\">all.yml</span>\n<span class=\"err\">│  </span> <span class=\"err\">└──</span> <span class=\"err\">dbservers.yml</span>\n<span class=\"err\">├──</span> <span class=\"err\">hosts</span>\n<span class=\"err\">├──</span> <span class=\"err\">requirements.yml</span>\n<span class=\"err\">└──</span> <span class=\"err\">roles</span>\n    <span class=\"err\">├──</span> <span class=\"err\">galaxyproject.galaxy</span>\n    <span class=\"err\">├──</span> <span class=\"err\">galaxyproject.miniconda</span>\n    <span class=\"err\">├──</span> <span class=\"err\">galaxyproject.nginx</span>\n    <span class=\"err\">├──</span> <span class=\"err\">galaxyproject.postgresql</span>\n    <span class=\"err\">├──</span> <span class=\"err\">galaxyproject.postgresql_objects</span>\n    <span class=\"err\">└──</span> <span class=\"err\">usegalaxy_eu.certbot</span>\n\n<span class=\"err\">8</span> <span class=\"err\">directories,</span> <span class=\"err\">6</span> <span class=\"err\">files</span>\n</code></pre></div>            </div>\n          </blockquote>\n\n        </blockquote>\n\n      </blockquote>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-what-is-the-difference-between-the-roles-with-role-prefix-and-without\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-what-is-the-difference-between-the-roles-with-role-prefix-and-without\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: What is the difference between the roles with `role:` prefix and without?</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <p>The bare role name is just simplified syntax for the roles, you could equally specifiy <code class=\"language-plaintext highlighter-rouge\">role: &lt;name&gt;</code> every time but it’s only necessary if you want to set additional variables like <code class=\"language-plaintext highlighter-rouge\">become_user</code></p> </blockquote>\n      <p><!--END_SNIPPET--></p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-is-yaml-sensitive-to-true-true-false-false\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-is-yaml-sensitive-to-true-true-false-false\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Is YAML sensitive to True/true/False/false</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <p>By <a href=\"https://yaml.org/refcard.html\">this reference</a>, YAML doesn’t really care:</p>   <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{ Y, true, Yes, ON   }    : Boolean true<br />{ n, FALSE, No, off  }    : Boolean false<br /></code></pre></div></div> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n    <li>\n      <p>Run the playbook:</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook galaxy.yml\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"code-out code-max-300\">\n        <code-out-title>Bash</code-out-title>\n\n        <p>Note: we have stripped out the “diff” output for compactness, your output will be more verbose.</p>\n\n        <div class=\"language-ini highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">PLAY</span> <span class=\"nn\">[dbservers]</span> <span class=\"err\">***************************************************************</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[Gathering Facts]</span> <span class=\"err\">*********************************************************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[Install Dependencies]</span> <span class=\"err\">****************************************************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : include_tasks]</span> <span class=\"err\">********************************</span>\n<span class=\"err\">included:</span> <span class=\"err\">/home/ubuntu/galaxy/roles/galaxyproject.postgresql/tasks/debian.yml</span> <span class=\"err\">for</span> <span class=\"err\">gat-0.eu.galaxy.training</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : APT keyrings directory]</span> <span class=\"err\">***********************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : Install pgdg package signing key (Debian/pgdg)]</span> <span class=\"err\">***</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : Install pgdg repository (Debian/pgdg)]</span> <span class=\"err\">********</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : Install PostgreSQL (Debian)]</span> <span class=\"err\">******************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : Get installed version]</span> <span class=\"err\">************************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : Set version fact]</span> <span class=\"err\">*****************************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : Install psycopg2]</span> <span class=\"err\">*****************************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : Set version fact]</span> <span class=\"err\">*****************************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : Set OS-specific variables]</span> <span class=\"err\">********************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : Set pgdata fact]</span> <span class=\"err\">******************************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : Set conf dir fact]</span> <span class=\"err\">****************************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : include_tasks]</span> <span class=\"err\">********************************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : Create conf.d]</span> <span class=\"err\">********************************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : Check for conf.d include in postgresql.conf]</span> <span class=\"err\">***</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : Set conf.d include in postgresql.conf]</span> <span class=\"err\">********</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : Include 25ansible_postgresql.conf in postgresql.conf]</span> <span class=\"err\">***</span>\n<span class=\"nn\">[WARNING]</span><span class=\"err\">:</span> <span class=\"err\">Module</span> <span class=\"err\">remote_tmp</span> <span class=\"err\">/root/.ansible/tmp</span> <span class=\"err\">did</span> <span class=\"err\">not</span> <span class=\"err\">exist</span> <span class=\"err\">and</span> <span class=\"err\">was</span> <span class=\"err\">created</span>\n<span class=\"err\">with</span> <span class=\"err\">a</span> <span class=\"err\">mode</span> <span class=\"err\">of</span> <span class=\"err\">0700,</span> <span class=\"err\">this</span> <span class=\"err\">may</span> <span class=\"err\">cause</span> <span class=\"err\">issues</span> <span class=\"err\">when</span> <span class=\"err\">running</span> <span class=\"err\">as</span> <span class=\"err\">another</span> <span class=\"err\">user.</span> <span class=\"err\">To</span>\n<span class=\"err\">avoid</span> <span class=\"err\">this,</span> <span class=\"err\">create</span> <span class=\"err\">the</span> <span class=\"err\">remote_tmp</span> <span class=\"err\">dir</span> <span class=\"err\">with</span> <span class=\"err\">the</span> <span class=\"err\">correct</span> <span class=\"err\">permissions</span> <span class=\"err\">manually</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : Set config options]</span> <span class=\"err\">***************************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : Install pg_hba.conf]</span> <span class=\"err\">**************************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : include_tasks]</span> <span class=\"err\">********************************</span>\n<span class=\"err\">included:</span> <span class=\"err\">/home/ubuntu/galaxy/roles/galaxyproject.postgresql/tasks/backup.yml</span> <span class=\"err\">for</span> <span class=\"err\">gat-0.eu.galaxy.training</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : Create backup directories]</span> <span class=\"err\">********************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">/var/lib/postgresql/backups)</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">/var/lib/postgresql/backups/bin)</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : Create backup output directory]</span> <span class=\"err\">***************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : Install backup script templates]</span> <span class=\"err\">**************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">archive_wal.sh)</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : Install backup script files]</span> <span class=\"err\">******************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">backup.py)</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : Set WAL archive config options]</span> <span class=\"err\">***************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : Schedule backups]</span> <span class=\"err\">*****************************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : Remove PostgreSQL working WAL backup cron job]</span> <span class=\"err\">***</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql : Ensure PostgreSQL is running]</span> <span class=\"err\">*****************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql_objects : Warn if deprecated user priv param is set]</span> <span class=\"err\">***</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">galaxy)</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql_objects : Revoke extra privileges]</span> <span class=\"err\">**************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql_objects : Drop databases]</span> <span class=\"err\">***********************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">{'name': 'galaxy', 'owner': 'galaxy'})</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql_objects : Create and drop users]</span> <span class=\"err\">****************</span>\n<span class=\"nn\">[WARNING]</span><span class=\"err\">:</span> <span class=\"err\">Module</span> <span class=\"err\">remote_tmp</span> <span class=\"err\">/var/lib/postgresql/.ansible/tmp</span> <span class=\"err\">did</span> <span class=\"err\">not</span> <span class=\"err\">exist</span> <span class=\"err\">and</span>\n<span class=\"err\">was</span> <span class=\"err\">created</span> <span class=\"err\">with</span> <span class=\"err\">a</span> <span class=\"err\">mode</span> <span class=\"err\">of</span> <span class=\"err\">0700,</span> <span class=\"err\">this</span> <span class=\"err\">may</span> <span class=\"err\">cause</span> <span class=\"err\">issues</span> <span class=\"err\">when</span> <span class=\"err\">running</span> <span class=\"err\">as</span> <span class=\"err\">another</span>\n<span class=\"err\">user.</span> <span class=\"err\">To</span> <span class=\"err\">avoid</span> <span class=\"err\">this,</span> <span class=\"err\">create</span> <span class=\"err\">the</span> <span class=\"err\">remote_tmp</span> <span class=\"err\">dir</span> <span class=\"err\">with</span> <span class=\"err\">the</span> <span class=\"err\">correct</span> <span class=\"err\">permissions</span>\n<span class=\"err\">manually</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">galaxy)</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql_objects : Create groups]</span> <span class=\"err\">************************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql_objects : Add or remove users from groups]</span> <span class=\"err\">******</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql_objects : Drop groups]</span> <span class=\"err\">**************************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql_objects : Create databases]</span> <span class=\"err\">*********************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">galaxy)</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.postgresql_objects : Grant extra privileges]</span> <span class=\"err\">***************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">RUNNING</span> <span class=\"err\">HANDLER</span> <span class=\"nn\">[galaxyproject.postgresql : Reload PostgreSQL]</span> <span class=\"err\">*****************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">PLAY</span> <span class=\"err\">RECAP</span> <span class=\"err\">*********************************************************************</span>\n<span class=\"err\">gat-0.eu.galaxy.training</span>   <span class=\"err\">:</span> <span class=\"py\">ok</span><span class=\"p\">=</span><span class=\"s\">27   changed=15   unreachable=0    failed=0    skipped=13   rescued=0    ignored=0</span>\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"comment\">\n        <comment-title>Error: `postgresql_version is version_compare('9.3', '&gt;=')' failed`</comment-title>\n        <p>You might see an error like this, if you’re running with <code class=\"language-plaintext highlighter-rouge\">--check</code> mode. Unfortunately here <code class=\"language-plaintext highlighter-rouge\">--check</code> mode meets real life: not all modules support it because some rely on running command line tools to obtain version numbers, something that cannot be mocked with check mode. You can solve this by running it without <code class=\"language-plaintext highlighter-rouge\">--check</code>.</p>\n\n        <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>fatal: [gat-0.eu.galaxy.training]: FAILED! =&gt; {\"msg\": \"The conditional check 'postgresql_version is version_compare('9.3', '&gt;=')' failed. The error was: Input version value cannot be empty\\n\\nThe error appears to be in '/home/ubuntu/galaxy/roles/galaxyproject.postgresql/tasks/main.yml': line 42, column 3, but may\\nbe elsewhere in the file depending on the exact syntax problem.\\n\\nThe offending line appears to be:\\n\\n# etc.). So check for a match first and then add if there's no match.\\n- name: Check for conf.d include in postgresql.conf\\n ^ here\\n\"}\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"comment\">\n        <comment-title>When running Ansible</comment-title>\n        <p>Always pay close attention to tasks reported as <strong>changed</strong> and ensure that the changes were expected!</p>\n      </blockquote>\n\n      <blockquote class=\"tip\">\n        <tip-title>Why didn't we use `-i` in our ansible command?</tip-title>\n        <p>In our <code class=\"language-plaintext highlighter-rouge\">ansible.cfg</code> file we specified the inventory was stored in a file called <code class=\"language-plaintext highlighter-rouge\">hosts</code>:</p>\n\n        <div class=\"language-ini highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nn\">[defaults]</span>\n<span class=\"py\">interpreter_python</span> <span class=\"p\">=</span> <span class=\"s\">/usr/bin/python3</span>\n<span class=\"py\">inventory</span> <span class=\"p\">=</span> <span class=\"s\">hosts</span>\n<span class=\"py\">retry_files_enabled</span> <span class=\"p\">=</span> <span class=\"s\">false</span>\n</code></pre></div>        </div>\n      </blockquote>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-error-quot-skipping-no-hosts-matched-quot\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-error-quot-skipping-no-hosts-matched-quot\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Error: &quot;skipping: no hosts matched&quot;</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <p>There can be multiple reasons this happens, so we’ll step through all of them. We’ll start by assuming you’re running the command</p>   <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook galaxy.yml<br /></code></pre></div></div>   <p>The following things can cause issues:</p>   <ol>   <li>Within your <code class=\"language-plaintext highlighter-rouge\">galaxy.yml</code>, you’ve referred to a host group that doesn’t exist or is misspelled. Check the <code class=\"language-plaintext highlighter-rouge\">hosts: galaxyservers</code> to ensure it matches the host group defined in the <code class=\"language-plaintext highlighter-rouge\">hosts</code> file.</li>   <li>Vice-versa, the group in your <code class=\"language-plaintext highlighter-rouge\">hosts</code> file should match the hosts selected in the playbook, <code class=\"language-plaintext highlighter-rouge\">galaxy.yml</code>.</li>   <li>If neither of these are the issue, it’s possible Ansible doesn’t know to check the <code class=\"language-plaintext highlighter-rouge\">hosts</code> file for the inventory. Make sure you’ve specified <code class=\"language-plaintext highlighter-rouge\">inventory = hosts</code> in your <code class=\"language-plaintext highlighter-rouge\">ansible.cfg</code>.</li> </ol> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n    <li>\n      <p>Inspect the changes that have been made on your Galaxy server. Places to look include:</p>\n\n      <ul>\n        <li><code class=\"language-plaintext highlighter-rouge\">/etc/postgresql</code></li>\n        <li>Databases and users in PostgreSQL.</li>\n      </ul>\n\n      <blockquote class=\"code-2col\">\n        <blockquote class=\"code-in\">\n          <code-in-title>Bash</code-in-title>\n          <p>List available databases.  You can now login and access the database, but only as the <code class=\"language-plaintext highlighter-rouge\">postgres</code> user. You will need to <code class=\"language-plaintext highlighter-rouge\">sudo -iu postgres</code> first, and then you can run <code class=\"language-plaintext highlighter-rouge\">psql galaxy</code>.</p>\n          <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo</span> <span class=\"nt\">-iu</span> postgres psql <span class=\"nt\">-l</span>\n</code></pre></div>          </div>\n        </blockquote>\n\n        <blockquote class=\"code-out\">\n          <code-out-title>Bash</code-out-title>\n\n          <div class=\"language-ini highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>                              <span class=\"err\">List</span> <span class=\"err\">of</span> <span class=\"err\">databases</span>\n   <span class=\"err\">Name</span>    <span class=\"err\">|</span>  <span class=\"err\">Owner</span>   <span class=\"err\">|</span> <span class=\"err\">Encoding</span> <span class=\"err\">|</span> <span class=\"err\">Collate</span> <span class=\"err\">|</span>  <span class=\"err\">Ctype</span>  <span class=\"err\">|</span>   <span class=\"err\">Access</span> <span class=\"err\">privileges</span>\n<span class=\"err\">-----------+----------+----------+---------+---------+-----------------------</span>\n <span class=\"err\">galaxy</span>    <span class=\"err\">|</span> <span class=\"err\">galaxy</span>   <span class=\"err\">|</span> <span class=\"err\">UTF8</span>     <span class=\"err\">|</span> <span class=\"err\">C.UTF-8</span> <span class=\"err\">|</span> <span class=\"err\">C.UTF-8</span> <span class=\"err\">|</span>\n <span class=\"err\">postgres</span>  <span class=\"err\">|</span> <span class=\"err\">postgres</span> <span class=\"err\">|</span> <span class=\"err\">UTF8</span>     <span class=\"err\">|</span> <span class=\"err\">C.UTF-8</span> <span class=\"err\">|</span> <span class=\"err\">C.UTF-8</span> <span class=\"err\">|</span>\n <span class=\"err\">template0</span> <span class=\"err\">|</span> <span class=\"err\">postgres</span> <span class=\"err\">|</span> <span class=\"err\">UTF8</span>     <span class=\"err\">|</span> <span class=\"err\">C.UTF-8</span> <span class=\"err\">|</span> <span class=\"err\">C.UTF-8</span> <span class=\"err\">|</span> <span class=\"err\">=c/postgres</span>          <span class=\"err\">+</span>\n           <span class=\"err\">|</span>          <span class=\"err\">|</span>          <span class=\"err\">|</span>         <span class=\"err\">|</span>         <span class=\"err\">|</span> <span class=\"py\">postgres</span><span class=\"p\">=</span><span class=\"s\">CTc/postgres</span>\n <span class=\"err\">template1</span> <span class=\"err\">|</span> <span class=\"err\">postgres</span> <span class=\"err\">|</span> <span class=\"err\">UTF8</span>     <span class=\"err\">|</span> <span class=\"err\">C.UTF-8</span> <span class=\"err\">|</span> <span class=\"err\">C.UTF-8</span> <span class=\"err\">|</span> <span class=\"err\">=c/postgres</span>          <span class=\"err\">+</span>\n           <span class=\"err\">|</span>          <span class=\"err\">|</span>          <span class=\"err\">|</span>         <span class=\"err\">|</span>         <span class=\"err\">|</span> <span class=\"py\">postgres</span><span class=\"p\">=</span><span class=\"s\">CTc/postgres</span>\n<span class=\"err\">(4</span> <span class=\"err\">rows)</span>\n</code></pre></div>          </div>\n        </blockquote>\n      </blockquote>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <p>Access postgres and list some users</p>\n        <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo</span> <span class=\"nt\">-iu</span> postgres psql\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"code-out\">\n        <code-out-title>Bash</code-out-title>\n        <p>The database will currently be empty (check relations with \\d and list of roles with \\dg) as Galaxy has not yet connected to it. Once you install Galaxy in the next step, the database will be populated. (Quit database with \\q)</p>\n        <div class=\"language-ini highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">psql</span> <span class=\"err\">(10.12</span> <span class=\"err\">(Ubuntu</span> <span class=\"err\">10.12-0ubuntu0.18.04.1))</span>\n<span class=\"err\">Type</span> <span class=\"err\">\"help\"</span> <span class=\"err\">for</span> <span class=\"err\">help.</span>\n\n<span class=\"py\">postgres</span><span class=\"p\">=</span><span class=\"c\"># \\d\n</span><span class=\"s\">Did not find any relations.</span>\n<span class=\"py\">postgres</span><span class=\"p\">=</span><span class=\"c\"># \\dg\n</span>                                   <span class=\"s\">List of roles</span>\n <span class=\"err\">Role</span> <span class=\"err\">name</span> <span class=\"err\">|</span>                         <span class=\"err\">Attributes</span>                         <span class=\"err\">|</span> <span class=\"err\">Member</span> <span class=\"err\">of</span>\n<span class=\"err\">-----------+------------------------------------------------------------+-----------</span>\n <span class=\"err\">galaxy</span>    <span class=\"err\">|</span>                                                            <span class=\"err\">|</span> <span class=\"err\">{}</span>\n <span class=\"err\">postgres</span>  <span class=\"err\">|</span> <span class=\"err\">Superuser,</span> <span class=\"err\">Create</span> <span class=\"err\">role,</span> <span class=\"err\">Create</span> <span class=\"err\">DB,</span> <span class=\"err\">Replication,</span> <span class=\"err\">Bypass</span> <span class=\"err\">RLS</span> <span class=\"err\">|</span> <span class=\"err\">{}</span>\n\n<span class=\"py\">postgres</span><span class=\"p\">=</span><span class=\"c\"># \\q\n</span></code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"code-2col\">\n        <blockquote class=\"code-in\">\n          <code-in-title>Bash</code-in-title>\n          <p>Inspect the postgres directory</p>\n          <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">ls</span> /etc/postgresql/<span class=\"k\">*</span>/main/\n</code></pre></div>          </div>\n        </blockquote>\n\n        <blockquote class=\"code-out\">\n          <code-out-title>Bash</code-out-title>\n\n          <div class=\"language-ini highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">conf.d</span>\n<span class=\"err\">environment</span>\n<span class=\"err\">pg_ctl.conf</span>\n<span class=\"err\">pg_hba.conf</span>\n<span class=\"err\">pg_hba.conf.3350.2020-07-08@11:51:47~</span>\n<span class=\"err\">pg_ident.conf</span>\n<span class=\"err\">postgresql.conf</span>\n<span class=\"err\">start.conf</span>\n</code></pre></div>          </div>\n        </blockquote>\n      </blockquote>\n    </li>\n  </ol>\n</blockquote>\n\n<h2 id=\"galaxy\">Galaxy</h2>\n\n<p>Next we will dive right in to deploying a copy of Galaxy onto our server.</p>\n\n<p>For a normal Galaxy instance there are a few configuration changes you make very early during deployment:</p>\n\n<ul>\n  <li>Changing the database connection</li>\n  <li>Configuring the admin user list</li>\n</ul>\n\n<p>Additionally we’ll go ahead and set up the production-ready <a href=\"https://docs.galaxyproject.org/en/master/admin/scaling.html#deployment-options\">Gunicorn + Webless</a> deployment, which separates Galaxy’s web and job handling into separate processes. This is done by configuring Galaxy’s process manager, <a href=\"https://gravity.readthedocs.io\">Gravity</a>.</p>\n\n<p>Finally, best admin practices are to not run Galaxy as a user with <code class=\"language-plaintext highlighter-rouge\">sudo</code> access, like your login user probably has. Additionally, it is best to install the Galaxy code and configs as a separate user, for security purposes. So we will instruct the <code class=\"language-plaintext highlighter-rouge\">galaxyproject.galaxy</code> role to create a new user account specifically to run Galaxy under.</p>\n\n<p>The configuration is quite simple thanks to the many sensible defaults that are provided in the Ansible roles.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Minimal Galaxy Playbook</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Open <code class=\"language-plaintext highlighter-rouge\">galaxy.yml</code> with your text editor and do the following:</p>\n\n      <ul>\n        <li>Create a new play that will run on the <code class=\"language-plaintext highlighter-rouge\">galaxyservers</code> group, as the root user (you will need <code class=\"language-plaintext highlighter-rouge\">become</code>/<code class=\"language-plaintext highlighter-rouge\">become_user</code>)</li>\n        <li>Add a pre-task to install the necessary dependencies for the Galaxy server: <code class=\"language-plaintext highlighter-rouge\">acl</code>, <code class=\"language-plaintext highlighter-rouge\">bzip2</code>, <code class=\"language-plaintext highlighter-rouge\">git</code>, <code class=\"language-plaintext highlighter-rouge\">make</code>, <code class=\"language-plaintext highlighter-rouge\">tar</code>, <code class=\"language-plaintext highlighter-rouge\">python3-venv</code>, and <code class=\"language-plaintext highlighter-rouge\">python3-setuptools</code></li>\n        <li>Use the roles <code class=\"language-plaintext highlighter-rouge\">galaxyproject.galaxy</code> and <code class=\"language-plaintext highlighter-rouge\">galaxyproject.miniconda</code> (in this order), with <code class=\"language-plaintext highlighter-rouge\">galaxyproject.miniconda</code> run as the <code class=\"language-plaintext highlighter-rouge\">galaxy</code> user.</li>\n      </ul>\n\n      <div data-commit=\"Add miniconda, galaxy to playbook\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/galaxy.yml\n</span><span class=\"gi\">+++ b/galaxy.yml\n</span><span class=\"p\">@@ -11,3 +11,16 @@</span>\n     - role: galaxyproject.postgresql_objects\n       become: true\n       become_user: postgres\n<span class=\"gi\">+\n+- hosts: galaxyservers\n+  become: true\n+  become_user: root\n+  pre_tasks:\n+    - name: Install Dependencies\n+      package:\n+        name: ['acl', 'bzip2', 'git', 'make', 'tar', 'python3-venv', 'python3-setuptools']\n+  roles:\n+    - galaxyproject.galaxy\n+    - role: galaxyproject.miniconda\n+      become: true\n+      become_user: \"{{ galaxy_user_name }}\"\n</span>   \n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Create and edit <code class=\"language-plaintext highlighter-rouge\">group_vars/galaxyservers.yml</code> and add some variables to configure Galaxy:</p>\n\n      <p>We need to set the following variables at the top level:</p>\n\n      <table>\n        <thead>\n          <tr>\n            <th>Variable</th>\n            <th>Value</th>\n            <th>Purpose</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">galaxy_create_user</code></td>\n            <td><code class=\"language-plaintext highlighter-rouge\">true</code></td>\n            <td>Instruct the role to create a Galaxy user</td>\n          </tr>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">galaxy_separate_privileges</code></td>\n            <td><code class=\"language-plaintext highlighter-rouge\">true</code></td>\n            <td>Enable separation mode to install the Galaxy code as <code class=\"language-plaintext highlighter-rouge\">root</code> but run the Galaxy server as <code class=\"language-plaintext highlighter-rouge\">galaxy</code></td>\n          </tr>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">galaxy_manage_paths</code></td>\n            <td><code class=\"language-plaintext highlighter-rouge\">true</code></td>\n            <td>Instruct the role to create the needed directories.</td>\n          </tr>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">galaxy_layout</code></td>\n            <td><code class=\"language-plaintext highlighter-rouge\">root-dir</code></td>\n            <td>This enables the <code class=\"language-plaintext highlighter-rouge\">galaxy_root</code> Galaxy deployment layout: all of the code, configuration, tools, and mutable-data (like caches, location files, etc.) folders will live by default beneath <code class=\"language-plaintext highlighter-rouge\">galaxy_root</code>. User data is stored under <code class=\"language-plaintext highlighter-rouge\">file_path</code>, a variable we will set later.</td>\n          </tr>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">galaxy_root</code></td>\n            <td><code class=\"language-plaintext highlighter-rouge\">/srv/galaxy</code></td>\n            <td>This is the root of the Galaxy deployment.</td>\n          </tr>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">galaxy_user</code></td>\n            <td><code class=\"language-plaintext highlighter-rouge\">{name: \"\", shell: /bin/bash}</code></td>\n            <td>The user that Galaxy will run as.</td>\n          </tr>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">galaxy_commit_id</code></td>\n            <td><code class=\"language-plaintext highlighter-rouge\">release_23.0</code></td>\n            <td>The git reference to check out, which in this case is the branch for Galaxy Release 23.0</td>\n          </tr>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">galaxy_force_checkout</code></td>\n            <td><code class=\"language-plaintext highlighter-rouge\">true</code></td>\n            <td>If we make any modifications to the Galaxy codebase, they will be removed. This way we know we’re getting an unmodified Galaxy and no one has made any unexpected changes to the codebase.</td>\n          </tr>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">miniconda_prefix</code></td>\n            <td><code class=\"language-plaintext highlighter-rouge\">\"{{ galaxy_tool_dependency_dir }}/_conda\"</code></td>\n            <td>We will manually install conda as well. Normally Galaxy will attempt to auto-install this, but since we will set up a production-ready instance with multiple handlers, there is the chance that they can become deadlocked.</td>\n          </tr>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">miniconda_version</code></td>\n            <td><code class=\"language-plaintext highlighter-rouge\">23.9</code></td>\n            <td>Install a specific miniconda version, the latest one at the time of writing that was tested and working.</td>\n          </tr>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">miniconda_channels</code>          `</td>\n            <td><code class=\"language-plaintext highlighter-rouge\">['conda-forge', 'defaults']</code></td>\n            <td>Use the community-maintained conda-forge channel in addition to the standard defaults channel of Conda.</td>\n          </tr>\n        </tbody>\n      </table>\n\n      <blockquote class=\"tip\">\n        <tip-title>Different Galaxy Releases!</tip-title>\n        <p>In the time between this tutorial was last updated (), and when you are now reading it, one or more new releases of Galaxy may have occured.</p>\n\n        <p>If you wish to use a different version of Galaxy than the one listed, you can do so, but there is no guarantee this tutorial will work without modifications.</p>\n\n        <p>Please ensure you consult the <a href=\"https://docs.galaxyproject.org/en/master/releases/index.html\">releases documentation</a></p>\n      </blockquote>\n\n      <div data-commit=\"Configure miniconda and galaxy\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- /dev/null\n</span><span class=\"gi\">+++ b/group_vars/galaxyservers.yml\n</span><span class=\"p\">@@ -0,0 +1,12 @@</span>\n<span class=\"gi\">+# Galaxy\n+galaxy_create_user: true # False by default, as e.g. you might have a 'galaxy' user provided by LDAP or AD.\n+galaxy_separate_privileges: true # Best practices for security, configuration is owned by 'root' (or a different user) than the processes\n+galaxy_manage_paths: true # False by default as your administrator might e.g. have root_squash enabled on NFS. Here we can create the directories so it's fine.\n+galaxy_layout: root-dir\n+galaxy_root: /srv/galaxy\n+galaxy_user: {name: \"{{ galaxy_user_name }}\", shell: /bin/bash}\n+galaxy_commit_id: release_23.0\n+galaxy_force_checkout: true\n+miniconda_prefix: \"{{ galaxy_tool_dependency_dir }}/_conda\"\n+miniconda_version: 23.9\n+miniconda_channels: ['conda-forge', 'defaults']\n</span>   \n</code></pre></div>      </div>\n\n      <blockquote class=\"tip\">\n        <tip-title>Following this training outside of a GAT course?</tip-title>\n        <p>Consider updating the Galaxy Commit ID to the latest version of Galaxy available, this will probably give better results (given that dependencies are always updating) than using a potentially outdated version.</p>\n      </blockquote>\n    </li>\n    <li>\n      <p>Again edit the galaxyservers group variables file and add a variable for <code class=\"language-plaintext highlighter-rouge\">galaxy_config</code>. It will be a hash with one key, <code class=\"language-plaintext highlighter-rouge\">galaxy</code> which will also be a hash. Inside here you can place all of your Galaxy configuration.</p>\n\n      <p>So the structure looks like:</p>\n      <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">galaxy_config</span><span class=\"pi\">:</span>\n  <span class=\"na\">galaxy</span><span class=\"pi\">:</span>\n    <span class=\"na\">key</span><span class=\"pi\">:</span> <span class=\"s\">value</span>\n</code></pre></div>      </div>\n\n      <p>Now you should set:</p>\n      <ol>\n        <li><code class=\"language-plaintext highlighter-rouge\">admin_users</code> to the email address you will use with this Galaxy.</li>\n        <li><code class=\"language-plaintext highlighter-rouge\">database_connection</code> to point to the database you setup earlier (<code class=\"language-plaintext highlighter-rouge\">postgresql:///galaxy?host=/var/run/postgresql</code>).</li>\n        <li><code class=\"language-plaintext highlighter-rouge\">file_path</code> to a place to store data, <code class=\"language-plaintext highlighter-rouge\">/data</code> is fine for this lesson which sets up a single-node Galaxy. If you have separate compute machines, this will normally need to be storage shared between the Galaxy node and compute nodes.</li>\n        <li><code class=\"language-plaintext highlighter-rouge\">tool_data_path</code> to <code class=\"language-plaintext highlighter-rouge\">{{ galaxy_mutable_data_dir }}/tool-data</code>, so that when tools are installed, due to privilege separation, this will happen in a directory Galaxy can actually write into.</li>\n        <li><code class=\"language-plaintext highlighter-rouge\">object_store_store_by</code> to <code class=\"language-plaintext highlighter-rouge\">uuid</code>, this is a better way of storing files that will ensure better filesystem balancing than the older system.</li>\n        <li><code class=\"language-plaintext highlighter-rouge\">id_secret</code> to <code class=\"language-plaintext highlighter-rouge\">{{ vault_id_secret }}</code>, we’ll define this variable next but it will be used to encode the IDs used in Galaxy URLs and for securing session cookies.</li>\n      </ol>\n\n      <div data-commit=\"Configure galaxy config\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/group_vars/galaxyservers.yml\n</span><span class=\"gi\">+++ b/group_vars/galaxyservers.yml\n</span><span class=\"p\">@@ -10,3 +10,17 @@</span> galaxy_force_checkout: true\n miniconda_prefix: \"{{ galaxy_tool_dependency_dir }}/_conda\"\n miniconda_version: 23.9\n miniconda_channels: ['conda-forge', 'defaults']\n<span class=\"gi\">+\n+galaxy_config:\n+  galaxy:\n+    # Main Configuration\n+    admin_users:\n+    - admin@example.org\n+    database_connection: \"postgresql:///{{ galaxy_db_name }}?host=/var/run/postgresql\"\n+    file_path: /data/datasets\n+    job_working_directory: /data/jobs\n+    object_store_store_by: uuid\n+    id_secret: \"{{ vault_id_secret }}\"\n+\n+galaxy_extra_dirs:\n+  - /data\n</span>   \n</code></pre></div>      </div>\n\n      <blockquote class=\"tip\">\n        <tip-title>Data storage</tip-title>\n        <p>Galaxy datasets cannot be separated by user or other attribute currently, but you can spread data unintelligently across 1 or more storage pools.</p>\n      </blockquote>\n\n      <blockquote class=\"tip\">\n        <tip-title>PostgreSQL connection string</tip-title>\n        <p>If you want to run your database on a different machine, you will need to change the connection string. In your hosts file, place the hostname of the machine you’re installing on. <code class=\"language-plaintext highlighter-rouge\">ansible_connection</code> can be left off entirely and it will connect over ssh. You may need to set <code class=\"language-plaintext highlighter-rouge\">ansible_user</code> to the username of the admin user (who can run sudo).</p>\n\n        <p>Here are some examples of connection strings:</p>\n\n        <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sqlite:///./database/universe.sqlite?isolation_level=IMMEDIATE\npostgresql://&lt;name&gt;:&lt;password&gt;@localhost:5432/galaxy\npostgresql:///galaxy?host=/var/run/postgresql\n</code></pre></div>        </div>\n\n      </blockquote>\n\n      <blockquote class=\"tip\">\n        <tip-title>Using postgres via the network</tip-title>\n        <p>Here you’ll need to re-use the connection details you specified during <code class=\"language-plaintext highlighter-rouge\">postgresql_objects_users</code>. You can reference it like the following, for example. <code class=\"language-plaintext highlighter-rouge\">localhost</code> may need to change if you’re hosting the database on another host.</p>\n        <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>+    database_connection: \"postgres://:@localhost:5432/\"\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"comment\">\n        <comment-title>Ansible Variable Templating</comment-title>\n        <p>In this step we use some templated variables. These are seen in our group variables, among other places, and look like <code class=\"language-plaintext highlighter-rouge\">miniconda_prefix: \"{{ galaxy_tool_dependency_dir  }}/_conda\"</code>.</p>\n\n        <p>When Ansible runs:</p>\n\n        <ol>\n          <li>It collects variables defined in group variables and other places</li>\n          <li>The first task for each machine is the <a href=\"https://docs.ansible.com/ansible/2.9/modules/setup_module.html\"><code class=\"language-plaintext highlighter-rouge\">setup</code> module</a> which gathers facts about the host, which are added to the available variables</li>\n          <li>As roles are executed:\n            <ol>\n              <li>Their defaults are added to the set of variables (the group variables having precedence over these variables)</li>\n              <li>They can also dynamically define more variables which may not be set until that role is run</li>\n            </ol>\n          </li>\n          <li>Before use (in templates, commands, etc.), variables are resolved to their final value\nSo it is not always easy to tell what variables will be set, or what their finaly value will be, without running the playbook. It is possible, but non trivial.</li>\n        </ol>\n\n      </blockquote>\n    </li>\n    <li>\n      <p>In order to enable the Gunicorn + Webless strategy, we need to edit the Gravity configuration, which is (by default) configured in its own section of the Galaxy configuration. This has a default value, but we will have to override it. Add the following configuration as a child of the <code class=\"language-plaintext highlighter-rouge\">galaxy_config</code> variable:</p>\n\n      <div data-commit=\"Configure gravity\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/group_vars/galaxyservers.yml\n</span><span class=\"gi\">+++ b/group_vars/galaxyservers.yml\n</span><span class=\"p\">@@ -21,6 +21,32 @@</span> galaxy_config:\n     job_working_directory: /data/jobs\n     object_store_store_by: uuid\n     id_secret: \"{{ vault_id_secret }}\"\n<span class=\"gi\">+  gravity:\n+    process_manager: systemd\n+    galaxy_root: \"{{ galaxy_root }}/server\"\n+    galaxy_user: \"{{ galaxy_user_name }}\"\n+    virtualenv: \"{{ galaxy_venv_dir }}\"\n+    gunicorn:\n+      # listening options\n+      bind: \"unix:{{ galaxy_mutable_config_dir }}/gunicorn.sock\"\n+      # performance options\n+      workers: 2\n+      # Other options that will be passed to gunicorn\n+      # This permits setting of 'secure' headers like REMOTE_USER (and friends)\n+      # https://docs.gunicorn.org/en/stable/settings.html#forwarded-allow-ips\n+      extra_args: '--forwarded-allow-ips=\"*\"'\n+      # This lets Gunicorn start Galaxy completely before forking which is faster.\n+      # https://docs.gunicorn.org/en/stable/settings.html#preload-app\n+      preload: true\n+    celery:\n+      concurrency: 2\n+      loglevel: DEBUG\n+    handlers:\n+      handler:\n+        processes: 2\n+        pools:\n+          - job-handlers\n+          - workflow-schedulers\n</span>    \n galaxy_extra_dirs:\n   - /data\n   \n</code></pre></div>      </div>\n\n      <blockquote class=\"tip\">\n        <tip-title>Options explanations.</tip-title>\n        <ol>\n          <li><code class=\"language-plaintext highlighter-rouge\">workers</code>: Controls the number of Galaxy application processes Gunicorn will spawn. Increased web performance can be attained by increasing this value. If Gunicorn is the only application on the server, a good starting value is the number of CPUs * 2 + 1. 4-12 workers should be able to handle hundreds if not thousands of requests per second.</li>\n          <li><code class=\"language-plaintext highlighter-rouge\">extra_args</code>: You can specify additional arguments to pass to gunicorn here.</li>\n          <li><code class=\"language-plaintext highlighter-rouge\">handlers</code>: Two dedicated “webless” job handler processes will be started. These processes also handle workflow invocations.</li>\n        </ol>\n      </blockquote>\n    </li>\n    <li>\n      <p>Let’s set up our vault to store the secrets for these tutorials.</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>openssl rand <span class=\"nt\">-base64</span> 24 <span class=\"o\">&gt;</span> .vault-password.txt\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n    <li>\n      <p>Tell Ansible where to find the decryption key. Edit your file <code class=\"language-plaintext highlighter-rouge\">ansible.cfg</code> and add the <code class=\"language-plaintext highlighter-rouge\">vault_password_file</code> variable to the <code class=\"language-plaintext highlighter-rouge\">[defaults]</code> section.</p>\n\n      <div data-commit=\"Setup the vault file\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/ansible.cfg\n</span><span class=\"gi\">+++ b/ansible.cfg\n</span><span class=\"p\">@@ -5,6 +5,7 @@</span> inventory = hosts\n stdout_callback = yaml\n # Use the stdout_callback when running ad-hoc commands.\n bin_ansible_callbacks = True\n<span class=\"gi\">+vault_password_file = .vault-password.txt\n</span>    \n # Show diffs of changes\n [diff]\n   \n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Create the vault:</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-vault create group_vars/secret.yml\n</code></pre></div>        </div>\n      </blockquote>\n\n      <p>This will open the editor. Within that file, define your <code class=\"language-plaintext highlighter-rouge\">vault_id_secret</code> to be a long random value.</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>vault_id_secret: secret # CHANGE ME NOW!!!\n</code></pre></div>      </div>\n      <blockquote class=\"tip\">\n        <tip-title>How to get a good random value?</tip-title>\n        <p>You can use the same command we ran before: <code class=\"language-plaintext highlighter-rouge\">openssl rand -base64 24</code> to get a good, secure <code class=\"language-plaintext highlighter-rouge\">id_secret</code> for your Galaxy</p>\n      </blockquote>\n\n      <p>Your vault should probably look <em>something</em> like this, it’s safe to commit to GitHub (or another public Distributed Version Control System (DVCS)) now that you’ve got the secrets safely encrypted.</p>\n\n      <div data-commit=\"Add id_secret to the vault\" data-comment=\"The password is password\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- /dev/null\n</span><span class=\"gi\">+++ b/group_vars/secret.yml\n</span><span class=\"p\">@@ -0,0 +1,7 @@</span>\n<span class=\"gi\">+$ANSIBLE_VAULT;1.1;AES256\n+32653961383866636531396135663630386630346237333333653633313436663439643535323964\n+6363626330336430363332643638646262316338313937320a666566306539373462386266383166\n+30326165393863633463353234613561393939326164376432633732316264636464313061383161\n+3532373937656138320a616361343664353264613332616236623231326137316635323465623562\n+66656539346130353639623736633034653932373438663330646436656336666637313933666264\n+3636313438626533633831323239373461373538646635613637\n</span>   \n</code></pre></div>      </div>\n\n      <blockquote class=\"tip\">\n        <tip-title>Using `git`?</tip-title>\n        <p>If you’re using git, and storing all of these steps in your git history,\nyou’ll find that working with Vault secrets can be rather annoying as\nthe opaque blobs are impossible to read. There’s a way to make this\n<em>much</em> easier though:</p>\n\n        <p>Create a file <code class=\"language-plaintext highlighter-rouge\">.gitattributes</code> with the following content:</p>\n\n        <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>group_vars/secret.yml diff=ansible-vault merge=binary\n</code></pre></div>        </div>\n\n        <p>You can add this file to your repository with <code class=\"language-plaintext highlighter-rouge\">git add .gitattributes</code>\nto ensure colleagues get a copy of the file too. Just <strong>be sure</strong>\n<code class=\"language-plaintext highlighter-rouge\">.vault-password.txt</code> is listed in your <code class=\"language-plaintext highlighter-rouge\">.gitignore</code> file!</p>\n\n        <p>You will also need to run this command to define how the <code class=\"language-plaintext highlighter-rouge\">ansible-vault</code> differ should work:</p>\n\n        <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git config --global diff.ansible-vault.textconv \"ansible-vault view\"\n</code></pre></div>        </div>\n\n        <p>If you have more vault secrets, you can adjust this line (or add more,\nwildcards are supported) to list all of your secret files. This tells\n<code class=\"language-plaintext highlighter-rouge\">git</code> to use <code class=\"language-plaintext highlighter-rouge\">ansible-vault</code> to diff the two files, as you can see in\nthe following real (redacted) snippet from a vault stored in a public\ngithub project.</p>\n\n        <div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git log <span class=\"nt\">-p</span> group_vars/all/secret.yml\n<span class=\"go\">commit a137d7d6aa4ed374c29545ac4728837815c460aa\n</span><span class=\"gp\">Author: Helena Rasche &lt;hxr@hx42.org&gt;</span><span class=\"w\">\n</span><span class=\"go\">Date:   Thu Dec 2 12:52:55 2021 +0100\n\n    fix automation password\n\ndiff --git a/group_vars/all/secret.yml b/group_vars/all/secret.yml\nindex 3fe4444..11831ae 100644\n--- a/group_vars/all/secret.yml\n+++ b/group_vars/all/secret.yml\n@@ -1,6 +1,6 @@\n ---\n id_secret: \"...\"\n-jenkins_password: \"old-secret-value\"\n+jenkins_password: \"new-secret-value\"\n grafana_admin_pass:    \"...\"\n secret_tiaas_admin_pw: \"...\"\n\n</span></code></pre></div>        </div>\n      </blockquote>\n    </li>\n    <li>\n      <p>Load the secrets in the playbook</p>\n\n      <div data-commit=\"Load the vault in the playbook\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/galaxy.yml\n</span><span class=\"gi\">+++ b/galaxy.yml\n</span><span class=\"p\">@@ -15,6 +15,8 @@</span>\n - hosts: galaxyservers\n   become: true\n   become_user: root\n<span class=\"gi\">+  vars_files:\n+    - group_vars/secret.yml\n</span>   pre_tasks:\n     - name: Install Dependencies\n       package:\n   \n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Run the playbook.</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook galaxy.yml\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"code-out code-max-300\">\n        <code-out-title>Bash</code-out-title>\n\n        <p>Note: we have only included the <code class=\"language-plaintext highlighter-rouge\">galaxyservers</code> play output and have stripped out the “diff” output for compactness, your output will be more verbose.</p>\n\n        <div class=\"language-ini highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">PLAY</span> <span class=\"nn\">[galaxyservers]</span> <span class=\"err\">***********************************************************</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[Gathering Facts]</span> <span class=\"err\">*********************************************************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[Install Dependencies]</span> <span class=\"err\">****************************************************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Ensure that mutually exclusive options are not set]</span> <span class=\"err\">***</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"py\">changed</span><span class=\"p\">=</span><span class=\"s\">false</span>\n  <span class=\"err\">msg:</span> <span class=\"err\">All</span> <span class=\"err\">assertions</span> <span class=\"err\">passed</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Set privilege separation default variables]</span> <span class=\"err\">*******</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Include layout vars]</span> <span class=\"err\">******************************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Set any unset variables from layout defaults]</span> <span class=\"err\">*****</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">galaxy_venv_dir)</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">galaxy_server_dir)</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">galaxy_config_dir)</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">galaxy_mutable_data_dir)</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">galaxy_mutable_config_dir)</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">galaxy_shed_tools_dir)</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">galaxy_cache_dir)</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">galaxy_local_tools_dir)</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">galaxy_tool_data_path)</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Check that any explicitly set Galaxy config options match the values of explicitly set variables]</span> <span class=\"err\">***</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">tool_dependency_dir)</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">file_path)</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">job_working_directory)</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">shed_tool_config_file)</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Set any unset variables corresponding to Galaxy config options from galaxy_config or layout defaults]</span> <span class=\"err\">***</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">tool_dependency_dir)</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">file_path)</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">job_working_directory)</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Include user creation tasks]</span> <span class=\"err\">**********************</span>\n<span class=\"err\">included:</span> <span class=\"err\">/home/ubuntu/galaxy/roles/galaxyproject.galaxy/tasks/user.yml</span> <span class=\"err\">for</span> <span class=\"err\">gat-0.eu.galaxy.training</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Create Galaxy group]</span> <span class=\"err\">******************************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Create Galaxy user]</span> <span class=\"err\">*******************************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Create Galaxy privilege separation user]</span> <span class=\"err\">**********</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Get group IDs for Galaxy users]</span> <span class=\"err\">*******************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">galaxy)</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">root)</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Get group names for Galaxy users]</span> <span class=\"err\">*****************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">galaxy)</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">root)</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Set Galaxy user facts]</span> <span class=\"err\">****************************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Determine whether to restrict to group permissions]</span> <span class=\"err\">***</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Include path management tasks]</span> <span class=\"err\">********************</span>\n<span class=\"err\">included:</span> <span class=\"err\">/home/ubuntu/galaxy/roles/galaxyproject.galaxy/tasks/paths.yml</span> <span class=\"err\">for</span> <span class=\"err\">gat-0.eu.galaxy.training</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Create galaxy_root]</span> <span class=\"err\">*******************************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Create additional privilege separated directories]</span> <span class=\"err\">***</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">/srv/galaxy/venv)</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">/srv/galaxy/server)</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">/srv/galaxy/config)</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">/srv/galaxy/local_tools)</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Create additional directories]</span> <span class=\"err\">********************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">/srv/galaxy/var)</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">/srv/galaxy/var/config)</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">/srv/galaxy/var/cache)</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">/srv/galaxy/var/shed_tools)</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">/srv/galaxy/var/dependencies)</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">/data)</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">/srv/galaxy/jobs)</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">/srv/galaxy/var/tool_data)</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">/srv/galaxy/var/log)</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Include clone tasks]</span> <span class=\"err\">******************************</span>\n<span class=\"err\">included:</span> <span class=\"err\">/home/ubuntu/galaxy/roles/galaxyproject.galaxy/tasks/clone.yml</span> <span class=\"err\">for</span> <span class=\"err\">gat-0.eu.galaxy.training</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Update Galaxy to specified ref]</span> <span class=\"err\">*******************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Report Galaxy version change]</span> <span class=\"err\">*********************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span>\n  <span class=\"err\">msg:</span> <span class=\"err\">Galaxy</span> <span class=\"err\">version</span> <span class=\"err\">changed</span> <span class=\"err\">from</span> <span class=\"err\">''</span> <span class=\"err\">to</span> <span class=\"err\">'b338e10899e48a91eab0efca071a206620b13d9d'</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Create Galaxy virtualenv]</span> <span class=\"err\">*************************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Ensure pip is the desired release]</span> <span class=\"err\">****************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Remove orphaned .pyc files and compile bytecode]</span> <span class=\"err\">***</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Include download tasks]</span> <span class=\"err\">***************************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Include manage existing galaxy tasks]</span> <span class=\"err\">*************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Include static config setup tasks]</span> <span class=\"err\">****************</span>\n<span class=\"err\">included:</span> <span class=\"err\">/home/ubuntu/galaxy/roles/galaxyproject.galaxy/tasks/static_setup.yml</span> <span class=\"err\">for</span> <span class=\"err\">gat-0.eu.galaxy.training</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Ensure Galaxy version is set]</span> <span class=\"err\">*********************</span>\n<span class=\"err\">included:</span> <span class=\"err\">/home/ubuntu/galaxy/roles/galaxyproject.galaxy/tasks/_inc_galaxy_version.yml</span> <span class=\"err\">for</span> <span class=\"err\">gat-0.eu.galaxy.training</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Collect Galaxy version file]</span> <span class=\"err\">**********************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Determine Galaxy version]</span> <span class=\"err\">*************************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Install additional Galaxy config files (static)]</span> <span class=\"err\">***</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Install additional Galaxy config files (template)]</span> <span class=\"err\">***</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Install local tools]</span> <span class=\"err\">******************************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Install local_tool_conf.xml]</span> <span class=\"err\">**********************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Append local_tool_conf.xml to tool_config_file Galaxy config option]</span> <span class=\"err\">***</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Append shed_tool_conf.xml to tool_config_file Galaxy config option]</span> <span class=\"err\">***</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Ensure dynamic job rules paths exists]</span> <span class=\"err\">************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Install dynamic job rules (static)]</span> <span class=\"err\">***************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Install dynamic job rules (template)]</span> <span class=\"err\">*************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Ensure dynamic rule __init__.py's exist]</span> <span class=\"err\">**********</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Create Galaxy job metrics configuration file]</span> <span class=\"err\">*****</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Create Galaxy dependency resolvers configuration file]</span> <span class=\"err\">***</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Create Galaxy container resolvers configuration file]</span> <span class=\"err\">***</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Create Galaxy configuration file]</span> <span class=\"err\">*****************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Include dependency setup tasks]</span> <span class=\"err\">*******************</span>\n<span class=\"err\">included:</span> <span class=\"err\">/home/ubuntu/galaxy/roles/galaxyproject.galaxy/tasks/dependencies.yml</span> <span class=\"err\">for</span> <span class=\"err\">gat-0.eu.galaxy.training</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Create Galaxy virtualenv]</span> <span class=\"err\">*************************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Ensure pip is the desired release]</span> <span class=\"err\">****************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Install Galaxy base dependencies]</span> <span class=\"err\">*****************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Collect Galaxy conditional dependency requirement strings]</span> <span class=\"err\">***</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Install Galaxy conditional dependencies]</span> <span class=\"err\">**********</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Install additional packages into galaxy's virtual environment]</span> <span class=\"err\">***</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Include mutable config setup tasks]</span> <span class=\"err\">***************</span>\n<span class=\"err\">included:</span> <span class=\"err\">/home/ubuntu/galaxy/roles/galaxyproject.galaxy/tasks/mutable_setup.yml</span> <span class=\"err\">for</span> <span class=\"err\">gat-0.eu.galaxy.training</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Ensure Galaxy version is set]</span> <span class=\"err\">*********************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Instantiate mutable configuration files]</span> <span class=\"err\">**********</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">{'src': 'shed_data_manager_conf.xml', 'dest': '/srv/galaxy/var/config/shed_data_manager_conf.xml'})</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">{'src': 'shed_tool_data_table_conf.xml', 'dest': '/srv/galaxy/var/config/shed_tool_data_table_conf.xml'})</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Instantiate mutable configuration templates]</span> <span class=\"err\">******</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">{'src': 'shed_tool_conf.xml.j2', 'dest': '/srv/galaxy/var/config/migrated_tools_conf.xml'})</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span> <span class=\"err\">(</span><span class=\"py\">item</span><span class=\"p\">=</span><span class=\"s\">{'src': 'shed_tool_conf.xml.j2', 'dest': '/srv/galaxy/var/config/shed_tool_conf.xml'})</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Include database management tasks]</span> <span class=\"err\">****************</span>\n<span class=\"err\">included:</span> <span class=\"err\">/home/ubuntu/galaxy/roles/galaxyproject.galaxy/tasks/database.yml</span> <span class=\"err\">for</span> <span class=\"err\">gat-0.eu.galaxy.training</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Get current Galaxy DB version]</span> <span class=\"err\">********************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Get maximum Galaxy DB version]</span> <span class=\"err\">********************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Report current and max Galaxy database]</span> <span class=\"err\">***********</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Upgrade Galaxy DB]</span> <span class=\"err\">********************************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Include client build tasks]</span> <span class=\"err\">***********************</span>\n<span class=\"err\">included:</span> <span class=\"err\">/home/ubuntu/galaxy/roles/galaxyproject.galaxy/tasks/client.yml</span> <span class=\"err\">for</span> <span class=\"err\">gat-0.eu.galaxy.training</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Ensure client_build_hash.txt exists]</span> <span class=\"err\">**************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Get current client commit id]</span> <span class=\"err\">*********************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Check if Galaxy was checked out from git]</span> <span class=\"err\">*********</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Get current Galaxy commit id]</span> <span class=\"err\">*********************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Set client build version fact]</span> <span class=\"err\">********************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Set client build version fact]</span> <span class=\"err\">********************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Report client version mismatch]</span> <span class=\"err\">*******************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span>\n  <span class=\"err\">msg:</span> <span class=\"err\">'Galaxy</span> <span class=\"err\">client</span> <span class=\"err\">is</span> <span class=\"err\">out</span> <span class=\"err\">of</span> <span class=\"err\">date:</span> <span class=\"err\">new-unbuilt</span> <span class=\"err\">!=</span> <span class=\"err\">b338e10899e48a91eab0efca071a206620b13d9d'</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Ensure galaxy_node_version is set]</span> <span class=\"err\">****************</span>\n<span class=\"err\">included:</span> <span class=\"err\">/home/ubuntu/galaxy/roles/galaxyproject.galaxy/tasks/_inc_node_version.yml</span> <span class=\"err\">for</span> <span class=\"err\">gat-0.eu.galaxy.training</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Collect Galaxy Node.js version file]</span> <span class=\"err\">**************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Set Galaxy Node.js version fact]</span> <span class=\"err\">******************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Report Node.js version file version]</span> <span class=\"err\">**************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span>\n  <span class=\"err\">galaxy_node_version:</span> <span class=\"err\">18.12.1</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Override Galaxy Node.js version]</span> <span class=\"err\">******************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Check whether nodeenv is available]</span> <span class=\"err\">***************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Create Galaxy virtualenv]</span> <span class=\"err\">*************************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Ensure pip is the desired release]</span> <span class=\"err\">****************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Install nodeenv if it doesn't exist]</span> <span class=\"err\">**************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Report preferred Node.js version]</span> <span class=\"err\">*****************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span> <span class=\"err\">=&gt;</span>\n  <span class=\"err\">galaxy_node_version:</span> <span class=\"err\">18.12.1</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Check if node is installed]</span> <span class=\"err\">***********************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Collect installed node version]</span> <span class=\"err\">*******************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Remove node_modules directory when upgrading node]</span> <span class=\"err\">***</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Install or upgrade node]</span> <span class=\"err\">**************************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Install yarn]</span> <span class=\"err\">*************************************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Include client build process]</span> <span class=\"err\">*********************</span>\n<span class=\"err\">included:</span> <span class=\"err\">/home/ubuntu/galaxy/roles/galaxyproject.galaxy/tasks/_inc_client_build_make.yml</span> <span class=\"err\">for</span> <span class=\"err\">gat-0.eu.galaxy.training</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Build client]</span> <span class=\"err\">*************************************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Fetch client version]</span> <span class=\"err\">*****************************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Set client build version fact]</span> <span class=\"err\">********************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Ensure that client update succeeded]</span> <span class=\"err\">**************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Include error document setup tasks]</span> <span class=\"err\">***************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Include Gravity setup tasks]</span> <span class=\"err\">**********************</span>\n<span class=\"err\">included:</span> <span class=\"err\">/home/ubuntu/galaxy/roles/galaxyproject.galaxy/tasks/gravity.yml</span> <span class=\"err\">for</span> <span class=\"err\">gat-0.eu.galaxy.training</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Register Galaxy config with Gravity (Gravity &lt; 1)]</span> <span class=\"err\">***</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Deploy galaxyctl wrapper script]</span> <span class=\"err\">******************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Include systemd unit setup tasks (Galaxy)]</span> <span class=\"err\">********</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Include systemd unit setup tasks (Reports)]</span> <span class=\"err\">*******</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.galaxy : Include cleanup scheduling tasks]</span> <span class=\"err\">*****************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.miniconda : Check for miniconda existence]</span> <span class=\"err\">*****************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.miniconda : Include install tasks]</span> <span class=\"err\">*************************</span>\n<span class=\"err\">included:</span> <span class=\"err\">/home/ubuntu/galaxy/roles/galaxyproject.miniconda/tasks/install.yml</span> <span class=\"err\">for</span> <span class=\"err\">gat-0.eu.galaxy.training</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.miniconda : Create miniconda installer tempfile]</span> <span class=\"err\">***********</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.miniconda : Collect miniconda installer]</span> <span class=\"err\">*******************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.miniconda : Run miniconda installer]</span> <span class=\"err\">***********************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.miniconda : Remove minicoda installer]</span> <span class=\"err\">*********************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.miniconda : Collect miniconda version]</span> <span class=\"err\">*********************</span>\n<span class=\"err\">ok:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.miniconda : Update miniconda version (exact)]</span> <span class=\"err\">**************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.miniconda : Update miniconda version (latest)]</span> <span class=\"err\">*************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.miniconda : Install packages to conda base environment]</span> <span class=\"err\">****</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.miniconda : Create conda envs]</span> <span class=\"err\">*****************************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.miniconda : Update conda envs]</span> <span class=\"err\">*****************************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">TASK</span> <span class=\"nn\">[galaxyproject.miniconda : Create Galaxy conda env]</span> <span class=\"err\">***********************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">RUNNING</span> <span class=\"err\">HANDLER</span> <span class=\"nn\">[galaxyproject.postgresql : Reload PostgreSQL]</span> <span class=\"err\">*****************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">RUNNING</span> <span class=\"err\">HANDLER</span> <span class=\"nn\">[galaxyproject.galaxy : galaxy mule restart]</span> <span class=\"err\">*******************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">RUNNING</span> <span class=\"err\">HANDLER</span> <span class=\"nn\">[galaxyproject.galaxy : galaxy gravity restart]</span> <span class=\"err\">****************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">RUNNING</span> <span class=\"err\">HANDLER</span> <span class=\"nn\">[galaxyproject.galaxy : galaxyctl update]</span> <span class=\"err\">**********************</span>\n<span class=\"err\">skipping:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">RUNNING</span> <span class=\"err\">HANDLER</span> <span class=\"nn\">[galaxyproject.galaxy : galaxyctl update]</span> <span class=\"err\">**********************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">RUNNING</span> <span class=\"err\">HANDLER</span> <span class=\"nn\">[galaxyproject.galaxy : galaxy gravity restart]</span> <span class=\"err\">****************</span>\n<span class=\"err\">changed:</span> <span class=\"nn\">[gat-0.eu.galaxy.training]</span>\n\n<span class=\"err\">PLAY</span> <span class=\"err\">RECAP</span> <span class=\"err\">*********************************************************************</span>\n<span class=\"err\">gat-0.eu.galaxy.training</span> <span class=\"err\">:</span> <span class=\"py\">ok</span><span class=\"p\">=</span><span class=\"s\">101  changed=28   unreachable=0    failed=0    skipped=53   rescued=0    ignored=0</span>\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"comment\">\n        <comment-title>Free knowledge</comment-title>\n        <p>You will notice the significant volume of output from this playbook! There are\nmany, many steps for deploying a production Galaxy, and there is a vast\namount of knowledge encoded into these playbooks by the developers and\nadmins who use them. While we recommend this, choosing to use Ansible\nand the official playbooks means you are opting in to receive all of this\nknowledge applied automatically to your systems. You are welcome to use\na different Configuration Management system which works for your infrastructure, but it might\nmean re-creating a large amount of existing work that is maintained by a\nlarge community of admins.</p>\n      </blockquote>\n\n      <blockquote class=\"tip\">\n        <tip-title>Slow Deployment</tip-title>\n        <p>The deployment can be slowed down by the client build.\nThe client is only re-built when there are changes in the files needed for the Galaxy user interface (JavaScript, CSS). Because we are tracking a release branch, we’ll receive updates that are published to that branch during the training since the last time the playbook was run.</p>\n      </blockquote>\n\n      <blockquote class=\"tip\">\n        <tip-title>ERROR: Failed to set permissions on the temporary files</tip-title>\n        <p>Did you get an error message like this?</p>\n        <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>fatal: [localhost]: FAILED! =&gt; {\"msg\": \"Failed to set permissions on the temporary files Ansible needs to create when becoming an unprivileged user (rc: 1, err: chown: changing ownership of '/var/tmp/ansible-tmp-1607430009.739602-32983298209838/': Operation not permitted\\nchown: changing ownership of '/var/tmp/ansible-tmp-1607430009.739602-32983298209838/source': Operation not permitted\\n}). For information on working around this, see https://docs.ansible.com/ansible/become.html#becoming-an-unprivileged-user\"}\n</code></pre></div>        </div>\n\n        <p>You’re missing the <code class=\"language-plaintext highlighter-rouge\">setfacl</code> command provided by the <code class=\"language-plaintext highlighter-rouge\">acl</code> package. <a href=\"https://github.com/georchestra/ansible/issues/55#issuecomment-588313638\">reference</a></p>\n\n      </blockquote>\n    </li>\n    <li>\n      <p>Explore what has been set up for you.</p>\n\n      <ul>\n        <li>Galaxy has been deployed to <code class=\"language-plaintext highlighter-rouge\">/srv/galaxy/server</code></li>\n        <li>The configuration lives in <code class=\"language-plaintext highlighter-rouge\">/srv/galaxy/config/galaxy.yml</code> - be sure to look through it to see what options have been set for you</li>\n        <li>Note the ownership and permissions of the contents of <code class=\"language-plaintext highlighter-rouge\">/srv/galaxy</code></li>\n        <li>Some config files that Galaxy maintains itself, such as <code class=\"language-plaintext highlighter-rouge\">shed_tool_conf.xml</code>, which controls what tools that you have installed from the Tool Shed will be loaded, have been instantiated in <code class=\"language-plaintext highlighter-rouge\">/srv/galaxy/var/config</code></li>\n        <li>A Python virtualenv - an isolated Python environment - with all of the Galaxy framework’s dependencies has been installed in <code class=\"language-plaintext highlighter-rouge\">/srv/galaxy/venv</code></li>\n      </ul>\n\n      <blockquote class=\"code-2col\">\n        <blockquote class=\"code-in\">\n          <code-in-title>Bash</code-in-title>\n          <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>tree <span class=\"nt\">-L</span> 1 /srv/galaxy/\n</code></pre></div>          </div>\n          <ul>\n            <li><code class=\"language-plaintext highlighter-rouge\">config</code> holds all static Galaxy config files</li>\n            <li><code class=\"language-plaintext highlighter-rouge\">jobs</code> is where all job files will go (e.g. temporary working dirs, job scripts, etc.)</li>\n            <li><code class=\"language-plaintext highlighter-rouge\">local_tools</code> is a directory for custom, non-ToolShed tools managed by the Ansible playbook</li>\n            <li><code class=\"language-plaintext highlighter-rouge\">server</code> contains all of the Galaxy server code</li>\n            <li><code class=\"language-plaintext highlighter-rouge\">var</code> is a directory for all files created by Galaxy, e.g. whenever tools are installed from the ToolShed, the Galaxy-managed cache, and the integrated tool panel file.</li>\n            <li><code class=\"language-plaintext highlighter-rouge\">venv</code> contains the Galaxy virtual environment and all dependencies, like Gunicorn.</li>\n          </ul>\n        </blockquote>\n\n        <blockquote class=\"code-out\">\n          <code-out-title>Bash</code-out-title>\n\n          <div class=\"language-ini highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">/srv/galaxy/</span>\n<span class=\"err\">├──</span> <span class=\"err\">config</span>\n<span class=\"err\">├──</span> <span class=\"err\">datasets</span>\n<span class=\"err\">├──</span> <span class=\"err\">jobs</span>\n<span class=\"err\">├──</span> <span class=\"err\">local_tools</span>\n<span class=\"err\">├──</span> <span class=\"err\">server</span>\n<span class=\"err\">├──</span> <span class=\"err\">var</span>\n<span class=\"err\">└──</span> <span class=\"err\">venv</span>\n\n<span class=\"err\">7</span> <span class=\"err\">directories,</span> <span class=\"err\">0</span> <span class=\"err\">files</span>\n</code></pre></div>          </div>\n        </blockquote>\n      </blockquote>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cat</span> /srv/galaxy/config/galaxy.yml\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"code-out code-max-300\">\n        <code-out-title>Bash</code-out-title>\n        <p>You’ll notice that the file is significantly different from the configuration you have set up in your group variables. The Ansible role adds a significant number of additional configuration options which all require a path, and templates the appropriate paths into all of them.</p>\n        <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nn\">---</span>\n<span class=\"c1\">##</span>\n<span class=\"c1\">## This file is managed by Ansible.  ALL CHANGES WILL BE OVERWRITTEN.</span>\n<span class=\"c1\">##</span>\n\n<span class=\"na\">gravity</span><span class=\"pi\">:</span>\n    <span class=\"na\">celery</span><span class=\"pi\">:</span>\n        <span class=\"na\">concurrency</span><span class=\"pi\">:</span> <span class=\"m\">2</span>\n        <span class=\"na\">loglevel</span><span class=\"pi\">:</span> <span class=\"s\">DEBUG</span>\n    <span class=\"na\">galaxy_root</span><span class=\"pi\">:</span> <span class=\"s\">/srv/galaxy/server</span>\n    <span class=\"na\">galaxy_user</span><span class=\"pi\">:</span> <span class=\"s\">galaxy</span>\n    <span class=\"na\">gunicorn</span><span class=\"pi\">:</span>\n        <span class=\"na\">bind</span><span class=\"pi\">:</span> <span class=\"s\">unix:/srv/galaxy/var/config/gunicorn.sock</span>\n        <span class=\"na\">extra_args</span><span class=\"pi\">:</span> <span class=\"s\">--forwarded-allow-ips=\"*\"</span>\n        <span class=\"na\">preload</span><span class=\"pi\">:</span> <span class=\"kc\">true</span>\n        <span class=\"na\">workers</span><span class=\"pi\">:</span> <span class=\"m\">2</span>\n    <span class=\"na\">handlers</span><span class=\"pi\">:</span>\n        <span class=\"na\">handler</span><span class=\"pi\">:</span>\n            <span class=\"na\">pools</span><span class=\"pi\">:</span>\n            <span class=\"pi\">-</span> <span class=\"s\">job-handlers</span>\n            <span class=\"pi\">-</span> <span class=\"s\">workflow-schedulers</span>\n            <span class=\"na\">processes</span><span class=\"pi\">:</span> <span class=\"m\">2</span>\n    <span class=\"na\">process_manager</span><span class=\"pi\">:</span> <span class=\"s\">systemd</span>\n    <span class=\"na\">virtualenv</span><span class=\"pi\">:</span> <span class=\"s\">/srv/galaxy/venv</span>\n\n\n<span class=\"na\">galaxy</span><span class=\"pi\">:</span>\n    <span class=\"na\">admin_users</span><span class=\"pi\">:</span> <span class=\"s\">admin@example.org</span>\n    <span class=\"na\">builds_file_path</span><span class=\"pi\">:</span> <span class=\"s\">/srv/galaxy/server/tool-data/shared/ucsc/builds.txt.sample</span>\n    <span class=\"na\">container_resolvers_config_file</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">'</span>\n    <span class=\"na\">data_dir</span><span class=\"pi\">:</span> <span class=\"s\">/srv/galaxy/var</span>\n    <span class=\"na\">data_manager_config_file</span><span class=\"pi\">:</span> <span class=\"s\">/srv/galaxy/server/config/data_manager_conf.xml.sample</span>\n    <span class=\"na\">database_connection</span><span class=\"pi\">:</span> <span class=\"s\">postgresql:///galaxy?host=/var/run/postgresql</span>\n    <span class=\"na\">datatypes_config_file</span><span class=\"pi\">:</span> <span class=\"s\">/srv/galaxy/server/config/datatypes_conf.xml.sample</span>\n    <span class=\"na\">dependency_resolvers_config_file</span><span class=\"pi\">:</span> <span class=\"s\">/srv/galaxy/config/dependency_resolvers_conf.xml</span>\n    <span class=\"na\">external_service_type_config_file</span><span class=\"pi\">:</span> <span class=\"s\">/srv/galaxy/server/config/external_service_types_conf.xml.sample</span>\n    <span class=\"na\">file_path</span><span class=\"pi\">:</span> <span class=\"s\">/data</span>\n    <span class=\"na\">id_secret</span><span class=\"pi\">:</span> <span class=\"s\">BxI6zlQVhoHLPVf3gqQ</span>\n    <span class=\"na\">integrated_tool_panel_config</span><span class=\"pi\">:</span> <span class=\"s\">/srv/galaxy/var/config/integrated_tool_panel.xml</span>\n    <span class=\"na\">job_metrics_config_file</span><span class=\"pi\">:</span> <span class=\"s\">/srv/galaxy/config/job_metrics_conf.xml</span>\n    <span class=\"na\">job_working_directory</span><span class=\"pi\">:</span> <span class=\"s\">/srv/galaxy/jobs</span>\n    <span class=\"na\">migrated_tools_config</span><span class=\"pi\">:</span> <span class=\"s\">/srv/galaxy/var/config/migrated_tools_conf.xml</span>\n    <span class=\"na\">object_store_store_by</span><span class=\"pi\">:</span> <span class=\"s\">uuid</span>\n    <span class=\"na\">openid_config_file</span><span class=\"pi\">:</span> <span class=\"s\">/srv/galaxy/server/config/openid_conf.xml.sample</span>\n    <span class=\"na\">shed_data_manager_config_file</span><span class=\"pi\">:</span> <span class=\"s\">/srv/galaxy/var/config/shed_data_manager_conf.xml</span>\n    <span class=\"na\">shed_tool_config_file</span><span class=\"pi\">:</span> <span class=\"s\">/srv/galaxy/var/config/shed_tool_conf.xml</span>\n    <span class=\"na\">shed_tool_data_table_config</span><span class=\"pi\">:</span> <span class=\"s\">/srv/galaxy/var/config/shed_tool_data_table_conf.xml</span>\n    <span class=\"na\">tool_config_file</span><span class=\"pi\">:</span> <span class=\"s\">/srv/galaxy/server/config/tool_conf.xml.sample</span>\n    <span class=\"na\">tool_data_path</span><span class=\"pi\">:</span> <span class=\"s\">/srv/galaxy/var/tool-data</span>\n    <span class=\"na\">tool_data_table_config_path</span><span class=\"pi\">:</span> <span class=\"s\">/srv/galaxy/server/config/tool_data_table_conf.xml.sample</span>\n    <span class=\"na\">tool_dependency_dir</span><span class=\"pi\">:</span> <span class=\"s\">/srv/galaxy/var/dependencies</span>\n    <span class=\"na\">tool_sheds_config_file</span><span class=\"pi\">:</span> <span class=\"s\">/srv/galaxy/server/config/tool_sheds_conf.xml.sample</span>\n    <span class=\"na\">ucsc_build_sites</span><span class=\"pi\">:</span> <span class=\"s\">/srv/galaxy/server/tool-data/shared/ucsc/ucsc_build_sites.txt.sample</span>\n    <span class=\"na\">visualization_plugins_directory</span><span class=\"pi\">:</span> <span class=\"s\">config/plugins/visualizations</span>\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>Galaxy is now configured with an admin user, a database, and a place to store data. We’ve immediately configured standalone Galaxy servers to handle jobs and workflow scheduling. Additionally, Galaxy’s process manager, Gravity, has written out <a href=\"https://freedesktop.org/wiki/Software/systemd/\">systemd</a> configuration files called <em>service units</em> that are used to define how to start and stop Galaxy’s various services. Your Galaxy server should now be running!</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Status Check</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Log in and check the status with <code class=\"language-plaintext highlighter-rouge\">sudo galaxyctl status</code></p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>galaxyctl status\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"code-out code-max-300\">\n        <code-out-title>Bash</code-out-title>\n\n        <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  UNIT                       LOAD   ACTIVE SUB     DESCRIPTION\n  galaxy-celery-beat.service loaded active running Galaxy celery-beat\n  galaxy-celery.service      loaded active running Galaxy celery\n  galaxy-gunicorn.service    loaded active running Galaxy gunicorn\n  galaxy-handler@0.service   loaded active running Galaxy handler (process 0)\n  galaxy-handler@1.service   loaded active running Galaxy handler (process 1)\n  galaxy.target              loaded active active  Galaxy\n\nLOAD   = Reflects whether the unit definition was properly loaded.\nACTIVE = The high-level unit activation state, i.e. generalization of SUB.\nSUB    = The low-level unit activation state, values depend on unit type.\n6 loaded units listed.\nTo show all installed unit files use 'systemctl list-unit-files'.\n</code></pre></div>        </div>\n      </blockquote>\n\n      <p>To inspect individual services in detail, use <code class=\"language-plaintext highlighter-rouge\">sudo galaxyctl status &lt;service&gt;</code> where <code class=\"language-plaintext highlighter-rouge\">&lt;service&gt;</code> is a service from the Gravity configuration such as <code class=\"language-plaintext highlighter-rouge\">gunicorn</code> or <code class=\"language-plaintext highlighter-rouge\">handler</code>. Alternatively, you can invoke <code class=\"language-plaintext highlighter-rouge\">sudo systemctl status &lt;service-unit&gt;</code> where <code class=\"language-plaintext highlighter-rouge\">&lt;service-unit&gt;</code> (such as <code class=\"language-plaintext highlighter-rouge\">galaxy-gunicorn.service</code> and <code class=\"language-plaintext highlighter-rouge\">galaxy-handler@0.service</code>) can be found in the output above (the <code class=\"language-plaintext highlighter-rouge\">.service</code> suffix is implied and optional, so you can leave it off for convenience).</p>\n\n      <blockquote class=\"tip\">\n        <tip-title>Did this fail?</tip-title>\n\n        <p>If any of the services show as failed, inspect them using one of the above methods, e.g.:</p>\n\n        <div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>galaxyctl status gunicorn\n<span class=\"go\">× galaxy-gunicorn.service - Galaxy gunicorn\n</span><span class=\"gp\">     Loaded: loaded (/etc/systemd/system/galaxy-gunicorn.service;</span><span class=\"w\"> </span>disabled<span class=\"p\">;</span> vendor preset: enabled<span class=\"o\">)</span>\n<span class=\"gp\">     Active: failed (Result: exit-code) since Thu 2023-03-16 01:15:15 UTC;</span><span class=\"w\"> </span>1s ago\n<span class=\"go\">    Process: 20306 ExecStart=/srv/galaxy/venv/bin/galaxyctl --config-file /srv/galaxy/config/galaxy.yml exec _default_ gunicorn (code=exited, status=1/FAILURE)\n   Main PID: 20306 (code=exited, status=1/FAILURE)\n        CPU: 3.381s\n\nMar 16 01:15:14 gat galaxyctl[20306]:   File \"/srv/galaxy/venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py\", line 1900, in _execute_context\nMar 16 01:15:14 gat galaxyctl[20306]:     self.dialect.do_execute(\nMar 16 01:15:14 gat galaxyctl[20306]:   File \"/srv/galaxy/venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py\", line 736, in do_execute\nMar 16 01:15:14 gat galaxyctl[20306]:     cursor.execute(statement, parameters)\nMar 16 01:15:14 gat galaxyctl[20306]: sqlalchemy.exc.ProgrammingError: (psycopg2.errors.InsufficientPrivilege) permission denied to create database\nMar 16 01:15:14 gat galaxyctl[20306]: [SQL: CREATE DATABASE bork ENCODING 'utf8' TEMPLATE template1]\nMar 16 01:15:14 gat galaxyctl[20306]: (Background on this error at: https://sqlalche.me/e/14/f405)\nMar 16 01:15:15 gat systemd[1]: galaxy-gunicorn.service: Main process exited, code=exited, status=1/FAILURE\nMar 16 01:15:15 gat systemd[1]: galaxy-gunicorn.service: Failed with result 'exit-code'.\nMar 16 01:15:15 gat systemd[1]: galaxy-gunicorn.service: Consumed 3.381s CPU time.\n</span></code></pre></div>        </div>\n\n        <p>Check your /srv/galaxy/config/galaxy.yml and ensure that it lines up exactly with what you expect. You might observe a warning that <code class=\"language-plaintext highlighter-rouge\">Dynamic handlers are configured in Gravity but Galaxy is not configured to assign jobs to handlers dynamically</code>. We will address this <a href=\"#job-configuration\">below</a>, and you can disregard it for now.</p>\n      </blockquote>\n    </li>\n    <li>\n      <p>Some things to note:</p>\n\n      <ol>\n        <li>Although the playbook will restart Galaxy upon config changes, you will sometimes need to restart it by hand, which can be done with <code class=\"language-plaintext highlighter-rouge\">sudo galaxyctl restart galaxy</code></li>\n        <li>You can use <code class=\"language-plaintext highlighter-rouge\">sudo galaxyctl follow</code> or <code class=\"language-plaintext highlighter-rouge\">journalctl -fu 'galaxy-*'</code> to see the logs of Galaxy. You can see the logs of indivudual services using <code class=\"language-plaintext highlighter-rouge\">sudo galaxyctl follow &lt;service&gt;</code> or <code class=\"language-plaintext highlighter-rouge\">journalctl -fu &lt;service-unit&gt;</code>.</li>\n      </ol>\n    </li>\n  </ol>\n\n</blockquote>\n\n<blockquote class=\"details\">\n  <details-title>Ansible, failures, and notifications</details-title>\n\n  <p>Sometimes Ansible tasks will fail. Usually due to misconfiguration, but occasionally due to other issues like your coworker restarted the server while you were doing maintenance, or network failures, or any other possible error. It happens. An unfortunate side effect can be observed in specific situations:</p>\n\n  <p>Let’s say you’re running a playbook that updates the <code class=\"language-plaintext highlighter-rouge\">galaxy.yml</code>, which will in turn notify the handler <code class=\"language-plaintext highlighter-rouge\">Restart Galaxy</code>. If this change is made, and notification triggered, but a failure occurs before Ansible can reach the step where it runs the handlers. The handlers will not run during this Ansible execution.</p>\n\n  <p>The next time you run the playbook, Ansible will not observe any configuration files changing (because they were changed in the last run), and so the handler that restarts Galaxy will not run.</p>\n\n  <p>If you encounter this situation you just have to be mindful of the fact, and remember to manually run the handler. There is no general solution to this problem unfortunately. This applies mostly to development setups. In production you’re probably running that playbook somewhat regularly and do not expect failures as everything is quite stable.</p>\n\n</blockquote>\n\n<blockquote class=\"hidden\">\n  <div data-test=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>0-galaxy-up.sh\n</code></pre></div>  </div>\n</blockquote>\n\n<h2 id=\"nginx\">NGINX</h2>\n\n<p>With this we have:</p>\n\n<ul>\n  <li>PostgreSQL running</li>\n  <li>Galaxy running (managed by Gravity + systemd)</li>\n</ul>\n\n<p>Although Gunicorn can serve HTTP for us directly, a reverse proxy in front of Gunicorn can automatically compress selected content, and we can easily apply caching headers to specific types of content like CSS or images. It is also necessary if we want to serve multiple sites at once, e.g. with a group website at <code class=\"language-plaintext highlighter-rouge\">/</code> and Galaxy at <code class=\"language-plaintext highlighter-rouge\">/galaxy</code>. Lastly, it can provide authentication as well, as noted in the <a href=\"/training-material/topics/admin/tutorials/external-auth/tutorial.html\">External Authentication</a> tutorial.</p>\n\n<p>For this, we will use NGINX (pronounced “engine X” /ˌɛndʒɪnˈɛks/ EN-jin-EKS). It is possible to configure Galaxy with Apache and potentially other webservers but this is not the configuration that receives the most testing. We recommend NGINX unless you have a specific need for Apache.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>NGINX</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Add the role <code class=\"language-plaintext highlighter-rouge\">galaxyproject.nginx</code> to the end of your playbook and have it run as root.</p>\n\n      <div data-commit=\"Add nginx to playbook\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/galaxy.yml\n</span><span class=\"gi\">+++ b/galaxy.yml\n</span><span class=\"p\">@@ -26,3 +26,4 @@</span>\n     - role: galaxyproject.miniconda\n       become: true\n       become_user: \"{{ galaxy_user_name }}\"\n<span class=\"gi\">+    - galaxyproject.nginx\n</span>   \n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>We need to configure the virtualhost. This is a slightly more complex process as we have to write the proxying configuration ourselves. This may seem annoying, but it is often the case that sites have individual needs to cater to, and it is difficult to provide a truly generic webserver configuration. Additionally, we will enable secure communication via HTTPS using SSL/TLS certificates provided by <a href=\"https://certbot.eff.org/\">certbot</a>.</p>\n\n      <p>Add the following to your group variables file:</p>\n\n      <div data-commit=\"Configure nginx, certbot\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/group_vars/galaxyservers.yml\n</span><span class=\"gi\">+++ b/group_vars/galaxyservers.yml\n</span><span class=\"p\">@@ -50,3 +50,55 @@</span> galaxy_config:\n    \n galaxy_extra_dirs:\n   - /data\n<span class=\"gi\">+\n+# Certbot\n+certbot_auto_renew_hour: \"{{ 23 |random(seed=inventory_hostname)  }}\"\n+certbot_auto_renew_minute: \"{{ 59 |random(seed=inventory_hostname)  }}\"\n+certbot_auth_method: --webroot\n+certbot_install_method: virtualenv\n+certbot_auto_renew: yes\n+certbot_auto_renew_user: root\n+certbot_environment: staging\n+certbot_well_known_root: /srv/nginx/_well-known_root\n+certbot_share_key_users:\n+  - www-data\n+certbot_post_renewal: |\n+    systemctl restart nginx || true\n+certbot_domains:\n+ - \"{{ inventory_hostname }}\"\n+certbot_agree_tos: --agree-tos\n+\n+# NGINX\n+nginx_selinux_allow_local_connections: true\n+nginx_servers:\n+  - redirect-ssl\n+nginx_ssl_servers:\n+  - galaxy\n+nginx_enable_default_server: false\n+nginx_conf_http:\n+  client_max_body_size: 1g\n+  # gzip: \"on\" # This is enabled by default in Ubuntu, and the duplicate directive will cause a crash.\n+  gzip_proxied: \"any\"\n+  gzip_static: \"on\"   # The ngx_http_gzip_static_module module allows sending precompressed files with the \".gz\" filename extension instead of regular files.\n+  gzip_vary: \"on\"\n+  gzip_min_length: 128\n+  gzip_comp_level: 6  # Tradeoff of better compression for slightly more CPU time.\n+  gzip_types: |\n+      text/plain\n+      text/css\n+      text/xml\n+      text/javascript\n+      application/javascript\n+      application/x-javascript\n+      application/json\n+      application/xml\n+      application/xml+rss\n+      application/xhtml+xml\n+      application/x-font-ttf\n+      application/x-font-opentype\n+      image/png\n+      image/svg+xml\n+      image/x-icon\n+nginx_ssl_role: usegalaxy_eu.certbot\n+nginx_conf_ssl_certificate: /etc/ssl/certs/fullchain.pem\n+nginx_conf_ssl_certificate_key: /etc/ssl/user/privkey-www-data.pem\n</span>   \n</code></pre></div>      </div>\n\n      <blockquote class=\"details\">\n        <details-title>Certbot details</details-title>\n\n        <p>This is a lot of configuration but it is not very complex to understand. We’ll go through it step by step:</p>\n\n        <ul>\n          <li><code class=\"language-plaintext highlighter-rouge\">certbot_auto_renew_hour/minute</code>: Certbot certificates are short lived, they only last 90 days. As a consequence, automated renewal is a significant part of the setup and well integrated. The certbot role installs a cron job which checks if the certificate needs to be renewed (when it has &lt;30 days of lifetime left) and attempts to renew the certificate as needed. In order to reduce load on the certbot servers, we randomly set the time when the request will be made, so not all of the requests occur simultaneously. For training VMs this will likely never be reached. For real-life machines, this is more important.</li>\n          <li><code class=\"language-plaintext highlighter-rouge\">certbot_auth_method</code>: <a href=\"https://certbot.eff.org/docs/using.html\">Multiple authentication methods</a> are supported, we will use the webroot method since that integrates nicely with <code class=\"language-plaintext highlighter-rouge\">galaxyproject.nginx</code>. This writes out a file onto the webserver’s root (that we specify in <code class=\"language-plaintext highlighter-rouge\">certbot_well_known_root</code>) which certbot’s servers will check.</li>\n          <li><code class=\"language-plaintext highlighter-rouge\">certbot_auto_renew</code>: Automatically attempt renewing the certificate as the <code class=\"language-plaintext highlighter-rouge\">certbot_auto_renew_user</code></li>\n          <li><code class=\"language-plaintext highlighter-rouge\">certbot_environment</code>: The options here are <code class=\"language-plaintext highlighter-rouge\">production</code> and <code class=\"language-plaintext highlighter-rouge\">staging</code>, we will set this to staging and obtain a verified but invalid certificate as browsers are intentionally not configured to trust the certbot staging certificates. The staging environment has higher <a href=\"https://letsencrypt.org/docs/rate-limits/\">rate limits</a> and allows requesting more certificates during trainings. If you are deploying on a production machine you should set this to <code class=\"language-plaintext highlighter-rouge\">production</code>.</li>\n          <li><code class=\"language-plaintext highlighter-rouge\">certbot_share_key_users</code>: This variable automatically shares the certificates with any system users that might need to access them. Here just nginx needs access.</li>\n          <li><code class=\"language-plaintext highlighter-rouge\">certbot_post_renewal</code>: Often services need to be notified or restarted once the certificates have been updated.</li>\n          <li><code class=\"language-plaintext highlighter-rouge\">certbot_domains</code>: These are the domains that are requested for verification. Any entries you place here <strong>must</strong> all be publicly resolvable.</li>\n          <li><code class=\"language-plaintext highlighter-rouge\">certbot_agree_tos</code>: We automatically agree to the certbot TOS. You can read the current one on <a href=\"https://letsencrypt.org/repository/\">their website</a></li>\n        </ul>\n      </blockquote>\n\n      <blockquote class=\"details\">\n        <details-title>Nginx details</details-title>\n\n        <p>Likewise the nginx configuration has a couple of important points:</p>\n        <ul>\n          <li><code class=\"language-plaintext highlighter-rouge\">nginx_selinux_allow_local_connections</code>: Specific to CentOS hosts where Nginx will need to access Galaxy</li>\n          <li><code class=\"language-plaintext highlighter-rouge\">nginx_enable_default_server/vhost</code>: Most Nginx packages come with a default configuration for the webserver. We do not want this.</li>\n          <li><code class=\"language-plaintext highlighter-rouge\">nginx_conf_http</code>: Here we can write any extra configuration we have, <code class=\"language-plaintext highlighter-rouge\">client_max_body_size: 1g</code> increases the POST limit to 1Gb which makes uploads easier.</li>\n        </ul>\n\n        <p>These control the SSL configuration</p>\n        <ul>\n          <li><code class=\"language-plaintext highlighter-rouge\">nginx_conf_ssl_certificate/key</code>: Location of the certificate / private key.</li>\n        </ul>\n\n        <p>The configuration variables we added in our group variables file has the following variables</p>\n        <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">nginx_servers</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"s\">redirect-ssl</span>\n<span class=\"na\">nginx_ssl_servers</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"s\">galaxy</span>\n</code></pre></div>        </div>\n\n        <p>The <code class=\"language-plaintext highlighter-rouge\">galaxyproject.galaxy</code> role expects to find two files with these names in <code class=\"language-plaintext highlighter-rouge\">templates/nginx/redirect-ssl.j2</code> and <code class=\"language-plaintext highlighter-rouge\">templates/nginx/galaxy.j2</code></p>\n\n      </blockquote>\n\n      <blockquote class=\"details\">\n        <details-title>Running this tutorial with your own SSL certificates</details-title>\n\n        <p>If you want, you can run this with your own SSL certificates. You can read about all of the variables you need to set <a href=\"https://github.com/galaxyproject/ansible-nginx#ssl-configuration\">in the ansible NGINX role</a>.</p>\n\n      </blockquote>\n\n      <blockquote class=\"details\">\n        <details-title>Running this tutorial <i>without</i> SSL</details-title>\n\n        <p>If you want, you can run this tutorial without SSL. We will provide a sketch of the configuration changes needed, but this is of course not recommended for production, so we will not go into detail here:</p>\n\n        <p>Instead of the above step you should do:</p>\n\n        <div class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/group_vars/galaxyservers.yml\n</span><span class=\"gi\">+++ b/group_vars/galaxyservers.yml\n</span><span class=\"p\">@@ -83,12 +83,7 @@</span> certbot_agree_tos: --agree-tos\n # NGINX\n nginx_selinux_allow_local_connections: true\n nginx_servers:\n<span class=\"gd\">-  - redirect-ssl\n-nginx_ssl_servers:\n</span>   - galaxy\n nginx_enable_default_server: false\n nginx_conf_http:\n   client_max_body_size: 1g\n<span class=\"gd\">-nginx_ssl_role: usegalaxy_eu.certbot\n-nginx_conf_ssl_certificate: /etc/ssl/certs/fullchain.pem\n-nginx_conf_ssl_certificate_key: /etc/ssl/user/privkey-www-data.pem\n</span></code></pre></div>        </div>\n\n        <p>Please also see the changes in <a href=\"#details-running-this-tutorial-i-without-i-ssl-1\">the other SSL tip box</a></p>\n      </blockquote>\n    </li>\n    <li>\n      <p>Create the directory <code class=\"language-plaintext highlighter-rouge\">templates/nginx</code> (staying in galaxy directory, after which groups_vars, roles will be siblings of templates), where we will place our configuration files which should be templated out to the server.</p>\n\n      <p>Create the <code class=\"language-plaintext highlighter-rouge\">templates/nginx/redirect-ssl.j2</code> with the following contents:</p>\n\n      <div data-commit=\"Setup http to https redirect\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- /dev/null\n</span><span class=\"gi\">+++ b/templates/nginx/redirect-ssl.j2\n</span><span class=\"p\">@@ -0,0 +1,14 @@</span>\n<span class=\"gi\">+server {\n+\tlisten 80 default_server;\n+\tlisten [::]:80 default_server;\n+\n+\tserver_name \"{{ inventory_hostname }}\";\n+\n+\tlocation /.well-known/ {\n+\t\troot {{ certbot_well_known_root }};\n+\t}\n+\n+\tlocation / {\n+\t\treturn 302 https://$host$request_uri;\n+\t}\n+}\n</span>   \n</code></pre></div>      </div>\n\n      <p>This will redirect all requests to use HTTPS.</p>\n    </li>\n    <li>\n      <p>Create <code class=\"language-plaintext highlighter-rouge\">templates/nginx/galaxy.j2</code> with the following contents:</p>\n\n      <div data-commit=\"Configure nginx vhost for galaxy\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- /dev/null\n</span><span class=\"gi\">+++ b/templates/nginx/galaxy.j2\n</span><span class=\"p\">@@ -0,0 +1,61 @@</span>\n<span class=\"gi\">+upstream galaxy {\n+\tserver {{ galaxy_config.gravity.gunicorn.bind }};\n+\n+\t# Or if you serve galaxy at a path like http(s)://fqdn/galaxy\n+\t# Remember to set galaxy_url_prefix in the galaxy.yml file.\n+\t# server {{ galaxy_config.gravity.gunicorn.bind }}:/galaxy;\n+}\n+\n+server {\n+\t# Listen on port 443\n+\tlisten        *:443 ssl default_server;\n+\t# The virtualhost is our domain name\n+\tserver_name   \"{{ inventory_hostname }}\";\n+\n+\t# Our log files will go to journalctl\n+\taccess_log  syslog:server=unix:/dev/log;\n+\terror_log   syslog:server=unix:/dev/log;\n+\n+\t# The most important location block, by default all requests are sent to gunicorn\n+\t# If you serve galaxy at a path like /galaxy, change that below (and all other locations!)\n+\tlocation / {\n+\t\t# This is the backend to send the requests to.\n+\t\tproxy_pass http://galaxy;\n+\n+\t\tproxy_set_header Host $http_host;\n+\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n+\t\tproxy_set_header X-Forwarded-Proto $scheme;\n+\t\tproxy_set_header Upgrade $http_upgrade;\n+\t}\n+\n+\t# Static files can be more efficiently served by Nginx. Why send the\n+\t# request to Gunicorn which should be spending its time doing more useful\n+\t# things like serving Galaxy!\n+\tlocation /static {\n+\t\talias {{ galaxy_server_dir }}/static;\n+\t\texpires 24h;\n+\t}\n+\n+\t# In Galaxy instances started with run.sh, many config files are\n+\t# automatically copied around. The welcome page is one of them. In\n+\t# production, this step is skipped, so we will manually alias that.\n+\tlocation /static/welcome.html {\n+\t\talias {{ galaxy_server_dir }}/static/welcome.html.sample;\n+\t\texpires 24h;\n+\t}\n+\n+\t# serve visualization and interactive environment plugin static content\n+\tlocation ~ ^/plugins/(?&lt;plug_type&gt;[^/]+?)/((?&lt;vis_d&gt;[^/_]*)_?)?(?&lt;vis_name&gt;[^/]*?)/static/(?&lt;static_file&gt;.*?)$ {\n+\t\talias {{ galaxy_server_dir }}/config/plugins/$plug_type/;\n+\t\ttry_files $vis_d/${vis_d}_${vis_name}/static/$static_file\n+\t\t          $vis_d/static/$static_file =404;\n+\t}\n+\n+\tlocation /robots.txt {\n+\t\talias {{ galaxy_server_dir }}/static/robots.txt;\n+\t}\n+\n+\tlocation /favicon.ico {\n+\t\talias {{ galaxy_server_dir }}/static/favicon.ico;\n+\t}\n+}\n</span>   \n</code></pre></div>      </div>\n\n      <p>You’ll notice that we have set a 24 hour cache timeout on static content served by NGINX. <a href=\"https://developers.google.com/speed/pagespeed/insights/\">Google’s PageSpeed Tools</a> can identify any additional compression or caching improvements you can make.</p>\n\n      <blockquote class=\"details\">\n        <details-title>Running this tutorial <i>without</i> SSL</details-title>\n\n        <p>Please be sure to also make the changes in <a href=\"#details-running-this-tutorial-i-without-i-ssl\">the other SSL box</a>.</p>\n\n        <p>In your <code class=\"language-plaintext highlighter-rouge\">galaxy.j2</code> in the above step, you should change the <code class=\"language-plaintext highlighter-rouge\">listen</code> parameter:</p>\n\n        <div class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/templates/nginx/galaxy.j2\n</span><span class=\"gi\">+++ b/templates/nginx/galaxy.j2\n</span><span class=\"gd\">-listen        *:443 ssl default_server;\n</span><span class=\"gi\">+listen        *:80 default_server;\n</span></code></pre></div>        </div>\n\n      </blockquote>\n    </li>\n    <li>\n      <p>Run the playbook. At the very end, you should see output like the following indicating that Galaxy has been restarted:</p>\n\n      <blockquote class=\"code-2col\">\n        <blockquote class=\"code-in\">\n          <code-in-title>Bash</code-in-title>\n          <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook galaxy.yml\n</code></pre></div>          </div>\n        </blockquote>\n        <blockquote class=\"code-out\">\n          <code-out-title>Output</code-out-title>\n          <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>...\nRUNNING HANDLER [restart galaxy] ****************************************\nchanged: [gat-0.eu.galaxy.training]\n</code></pre></div>          </div>\n        </blockquote>\n      </blockquote>\n\n      <p>If you didn’t, you might have missed the first step in this hands-on.</p>\n\n      <blockquote class=\"tip\">\n        <tip-title>Install nginx - Failed [emerg] socket() [::]:80 failed</tip-title>\n        <p>If you see this message:</p>\n\n        <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>nginx: [emerg] socket() [::]:80 failed (97: Address family not supported by protocol)\n</code></pre></div>        </div>\n\n        <p>This may be due to missing IPv6 support on your machine. It is extremely unlikely your operating system doesn’t support it, instead it was probably disabled. Check <code class=\"language-plaintext highlighter-rouge\">/etc/sysctl.conf</code> and <code class=\"language-plaintext highlighter-rouge\">/etc/sysctl.d/*</code> for <code class=\"language-plaintext highlighter-rouge\">net.ipv6.conf.*.disable_ipv6=1</code>, or <code class=\"language-plaintext highlighter-rouge\">/etc/default/grub</code> for <code class=\"language-plaintext highlighter-rouge\">ipv6.disable=1</code></p>\n      </blockquote>\n    </li>\n    <li>\n      <p>Check out the changes made to your server in <code class=\"language-plaintext highlighter-rouge\">/etc/nginx/sites-enabled/</code>, particularly the directory containing the Galaxy virtualhost.</p>\n    </li>\n    <li>\n      <p>Check out the nginx logs with <code class=\"language-plaintext highlighter-rouge\">journalctl</code></p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>journalctl <span class=\"nt\">-fu</span> nginx\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n  </ol>\n</blockquote>\n\n<blockquote class=\"details\">\n  <details-title>\"Potential Security Risk\" / LetsEncrypt Staging Environment</details-title>\n\n  <p>LetsEncrypt has rate limits on requesting trusted certificates to prevent abuse of their service.\nIn a training setting there is no need to request certificates that will be trusted by all browsers. So we will request a testing certificate to show how it works, and by changing <code class=\"language-plaintext highlighter-rouge\">staging</code> to <code class=\"language-plaintext highlighter-rouge\">production</code>, you can request browser trusted certificates.</p>\n\n  <p>You will probably see an error like this, when trying to access your Galaxy:</p>\n\n  <figure id=\"figure-1\" style=\"max-width: 90%;\"><img src=\"../../images/ssl-warning0.png\" alt=\"Browser warning for invalid certificate. \" width=\"947\" height=\"493\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/ssl-warning0.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 1</strong>:</span> A browser warning for an invalid certificate. But because we requested a staging certificate, we expected this.</figcaption></figure>\n\n  <p>If you view the details of the certificate, you can see that it is trusted, but by the Fake LE Intermediate, which browsers do not trust.</p>\n\n  <figure id=\"figure-2\" style=\"max-width: 90%;\"><img src=\"../../images/ssl-warning1.png\" alt=\"Certificate information. \" width=\"650\" height=\"331\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/ssl-warning1.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 2</strong>:</span> Investigating the certificate a little, we can see that it was signed, just untrusted.</figcaption></figure>\n\n  <p>Clicking through the warnings (with full knowledge of why) we will see our secured Galaxy:</p>\n\n  <figure id=\"figure-3\" style=\"max-width: 90%;\"><img src=\"../../images/working-galaxy.png\" alt=\"The finally working Galaxy. \" width=\"1141\" height=\"510\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/working-galaxy.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 3</strong>:</span> Galaxy is alive!</figcaption></figure>\n\n</blockquote>\n\n<blockquote class=\"comment\">\n  <comment-title>Role Dependencies</comment-title>\n\n  <p>Throughout the playbook we added roles in a specific order. Partially this was to mimic the original training and build up a working Galaxy server from nothing, but partially this is also because of some hidden role dependencies on each other. Some must run before others, in order to set certain variables. Looking at the dependencies in detail:</p>\n\n  <table>\n    <thead>\n      <tr>\n        <th>Role</th>\n        <th>Role-Role Dependencies</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td><code class=\"language-plaintext highlighter-rouge\">galaxyproject.postgresql</code></td>\n        <td>None</td>\n      </tr>\n      <tr>\n        <td><code class=\"language-plaintext highlighter-rouge\">galaxyproject.postgresql_objects</code></td>\n        <td>None</td>\n      </tr>\n      <tr>\n        <td><code class=\"language-plaintext highlighter-rouge\">galaxyproject.galaxy</code></td>\n        <td>None</td>\n      </tr>\n      <tr>\n        <td><code class=\"language-plaintext highlighter-rouge\">galaxyproject.miniconda</code></td>\n        <td>In our group variables, we define the path of <code class=\"language-plaintext highlighter-rouge\">miniconda_prefix</code> to <code class=\"language-plaintext highlighter-rouge\">{{ galaxy_tool_dependency_dir }}/_conda</code>, so Galaxy needs to have set those variables</td>\n      </tr>\n      <tr>\n        <td><code class=\"language-plaintext highlighter-rouge\">galaxyproject.nginx</code></td>\n        <td>This requires Galaxy variables to find the static assets</td>\n      </tr>\n    </tbody>\n  </table>\n</blockquote>\n\n<h2 id=\"log-in-to-galaxy\">Log in to Galaxy</h2>\n\n<p>Now that your production-ready Galaxy is running, try registering a new user and logging in!</p>\n\n<p>In order to be the administrator user, you will need to register an account with the same email address you used in the group variables under the <code class=\"language-plaintext highlighter-rouge\">admin_users</code> setting.</p>\n\n<h2 id=\"job-configuration\">Job Configuration</h2>\n\n<p>One of the most important configuration files for a large Galaxy server is the job configuration. This tells Galaxy where to run all of the jobs that users execute. If Galaxy can’t find a job conf file or no job configuration has been specified inline in the <code class=\"language-plaintext highlighter-rouge\">galaxy.yml</code> file, it will use a simple default configuration where all jobs are run on the Galaxy server and are handled by the web serving process, rather than the job handler(s). Galaxy’s job running system is highly configurable, the full range of configuration can be found in the sample job configuration file, <a href=\"https://github.com/galaxyproject/galaxy/blob/release_23.0/lib/galaxy/config/sample/job_conf.sample.yml\"><code class=\"language-plaintext highlighter-rouge\">job_conf.sample.yml</code></a>.</p>\n\n<p>The job configuration allows Galaxy to run jobs in multiple locations using a variety of different mechanisms. Some of these mechanisms include:</p>\n\n<ul>\n  <li>Local - Galaxy runs jobs on the same computer that Galaxy itself is running on.</li>\n  <li>DRMAA - Galaxy can connect to a cluster and submit jobs via a distributed resource manager such as Slurm, Condor, PBS Torque or Sun Grid Engine.</li>\n  <li>Pulsar - Galaxy can also send jobs to remote compute hosts over the internet using Pulsar.</li>\n</ul>\n\n<p>The job configuration can either be defined inline in the Galaxy configuration under <code class=\"language-plaintext highlighter-rouge\">galaxy_config.galaxy.job_config</code>, or in its own file, the path to which is specified in <code class=\"language-plaintext highlighter-rouge\">galaxy_config.galaxy.job_config_file</code>. The syntax of the configuration is the same in both cases.</p>\n\n<h3 id=\"the-job-configuration---basics\">The job configuration - basics</h3>\n\n<p>The job configuration has three basic sections:</p>\n\n<ul>\n  <li><strong>runners</strong> - This section lists the types of job management systems that this Galaxy server is configured to use, and tells Galaxy to load the drivers for each type.</li>\n  <li><strong>execution</strong> - This section lists the different attributes such as locations, queues, etc. that Galaxy can send jobs to. Each set of attributes together are called an <em>environment</em> (formerly <em>destination</em>), has a name, and uses a <em>plugin</em> to communicate with that location. They can specify things like the number of CPUs, amount of RAM to be allocated, etc. for DRMAA locations. Usually, one of the destinations is set to be the default.</li>\n  <li><strong>tools</strong> - This section lists the various tools that you would like to send to a non-default <em>destination</em>. Each line in this section pairs up a tool in Galaxy with a particular job <em>destination</em>. Every time Galaxy gets a job for that particular tool, it is always sent to that <em>destination</em>.</li>\n</ul>\n\n<p>A basic job configuration looks like this:</p>\n\n<div class=\"language-yml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">runners</span><span class=\"pi\">:</span>\n  <span class=\"na\">local_runner</span><span class=\"pi\">:</span>\n    <span class=\"na\">load</span><span class=\"pi\">:</span> <span class=\"s\">galaxy.jobs.runners.local:LocalJobRunner</span>\n    <span class=\"na\">workers</span><span class=\"pi\">:</span> <span class=\"m\">4</span>\n<span class=\"na\">execution</span><span class=\"pi\">:</span>\n  <span class=\"na\">default</span><span class=\"pi\">:</span> <span class=\"s\">local_env</span>\n  <span class=\"na\">environments</span><span class=\"pi\">:</span>\n    <span class=\"na\">local_env</span><span class=\"pi\">:</span>\n      <span class=\"na\">runner</span><span class=\"pi\">:</span> <span class=\"s\">local_runner</span>\n      <span class=\"na\">tmp_dir</span><span class=\"pi\">:</span> <span class=\"kc\">true</span>\n<span class=\"na\">tools</span><span class=\"pi\">:</span>\n<span class=\"pi\">-</span> <span class=\"na\">id</span><span class=\"pi\">:</span> <span class=\"s\">bwa</span>\n  <span class=\"na\">environment</span><span class=\"pi\">:</span> <span class=\"s\">local_env</span>\n</code></pre></div></div>\n\n<p>The above job configuration defines a <em>runner</em> and an <em>execution</em> to allow Galaxy to run user jobs on the local computer (i.e. The computer that Galaxy is running on.)</p>\n\n<p>Firstly, the <code class=\"language-plaintext highlighter-rouge\">runners</code> section contains a plugin called <code class=\"language-plaintext highlighter-rouge\">local_runner</code> which loads the python code module for supporting local jobs. Next, the <code class=\"language-plaintext highlighter-rouge\">execution</code> section contains an environment named <code class=\"language-plaintext highlighter-rouge\">local_env</code> using the runner <code class=\"language-plaintext highlighter-rouge\">local_runner</code>. It is also set as the default. So now everytime a user clicks “Execute” on a tool form, Galaxy will run the corresponding job locally using the python code specified.</p>\n\n<p>Finally, we have explicitly mapped the tool <code class=\"language-plaintext highlighter-rouge\">bwa</code> to run in the <code class=\"language-plaintext highlighter-rouge\">local_env</code> environment. This is more useful once you begin defining additional environments (especially those that run on clusters).</p>\n\n<blockquote class=\"tip\">\n  <tip-title>Want to use something else?</tip-title>\n  <p>There are a lot of other plugins available for Galaxy for using other resources such as docker containers, kubernetes clusters, Pulsar servers, and HPC clusters to name a few. See the Galaxy documentation on <a href=\"https://docs.galaxyproject.org/en/master/admin/jobs.html\">job configuration</a> for more details on these plugins and their configuration.</p>\n</blockquote>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Job Conf</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Add a new <code class=\"language-plaintext highlighter-rouge\">job_config</code> section to the <code class=\"language-plaintext highlighter-rouge\">galaxy</code> section of <code class=\"language-plaintext highlighter-rouge\">galaxy_config</code> in <code class=\"language-plaintext highlighter-rouge\">group_vars/galaxyservers.yml</code>. Note: placement and whitespace is important here - <code class=\"language-plaintext highlighter-rouge\">job_config</code> should be a child of <code class=\"language-plaintext highlighter-rouge\">galaxy_config.galaxy</code>, at the same level as other options like <code class=\"language-plaintext highlighter-rouge\">id_secret</code>.</p>\n\n      <div data-commit=\"Add job conf\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/group_vars/galaxyservers.yml\n</span><span class=\"gi\">+++ b/group_vars/galaxyservers.yml\n</span><span class=\"p\">@@ -11,6 +11,24 @@</span> miniconda_prefix: \"{{ galaxy_tool_dependency_dir }}/_conda\"\n miniconda_version: 23.9\n miniconda_channels: ['conda-forge', 'defaults']\n    \n<span class=\"gi\">+# Galaxy Job Configuration\n+galaxy_job_config:\n+  runners:\n+    local_runner:\n+      load: galaxy.jobs.runners.local:LocalJobRunner\n+      workers: 4\n+  handling:\n+    assign: ['db-skip-locked']\n+  execution:\n+    default: local_env\n+    environments:\n+      local_env:\n+        runner: local_runner\n+        tmp_dir: true\n+  tools:\n+    - class: local # these special tools that aren't parameterized for remote execution - expression tools, upload, etc\n+      environment: local_env\n+\n</span> galaxy_config:\n   galaxy:\n     # Main Configuration\n<span class=\"p\">@@ -21,6 +39,7 @@</span> galaxy_config:\n     job_working_directory: /data/jobs\n     object_store_store_by: uuid\n     id_secret: \"{{ vault_id_secret }}\"\n<span class=\"gi\">+    job_config: \"{{ galaxy_job_config }}\" # Use the variable we defined above\n</span>   gravity:\n     process_manager: systemd\n     galaxy_root: \"{{ galaxy_root }}/server\"\n   \n</code></pre></div>      </div>\n\n      <blockquote class=\"tip\">\n        <tip-title>workers: 4</tip-title>\n        <p>In the local runner, <code class=\"language-plaintext highlighter-rouge\">workers: 4</code> means “number of jobs that can be running at one time”. For every other job runner, it means the number of threads that are created to handle Galaxy’s internal pre- and post-job tasks. E.g. if you are in a class and 50 people submit jobs, then there are four threads that can handle these jobs at once. But additional job handlers can be more useful as well.</p>\n      </blockquote>\n\n      <blockquote class=\"tip\">\n        <tip-title>tmp_dir: true</tip-title>\n        <p>In the environment local_env, <code class=\"language-plaintext highlighter-rouge\">tmp_dir: true</code> means “create a temp directory in the job directory”. By default, it is set to <code class=\"language-plaintext highlighter-rouge\">false</code> and if the job uses a temp directory it will create one in the <code class=\"language-plaintext highlighter-rouge\">/tmp/</code> partition and galaxy will not clean it at the end of the job. This can be problematic if the admin does not do regular cleanup of the <code class=\"language-plaintext highlighter-rouge\">/tmp/</code> partition or if the <code class=\"language-plaintext highlighter-rouge\">/tmp/</code> partition is rather small. That’s why we recommand to set this option to <code class=\"language-plaintext highlighter-rouge\">true</code> so the admin does not need to worry about the <code class=\"language-plaintext highlighter-rouge\">/tmp/</code> partition for galaxy jobs.</p>\n      </blockquote>\n    </li>\n    <li>\n      <p>Run the playbook. At the very end, you should see output like the following indicating that Galaxy has been restarted:</p>\n\n      <blockquote class=\"code-2col\">\n        <blockquote class=\"code-in\">\n          <code-in-title>Bash</code-in-title>\n          <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook galaxy.yml\n</code></pre></div>          </div>\n        </blockquote>\n        <blockquote class=\"code-out\">\n          <code-out-title>Output</code-out-title>\n          <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>...\nRUNNING HANDLER [galaxyproject.galaxy : galaxy gravity restart] ****************\nchanged: [gat-0.eu.galaxy.training]\n</code></pre></div>          </div>\n        </blockquote>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>We have installed a fairly simple job configuration that does pretty much the same as the default, with one exception: the <code class=\"language-plaintext highlighter-rouge\">handling</code> section contains an instruction for Galaxy to use the <code class=\"language-plaintext highlighter-rouge\">db-skip-locked</code> method for assigning which process will handle Galaxy jobs. This causes Galaxy to use the job handler processes we defined earlier in the tutorial to handle jobs, rather than handling them in the (gunicorn) web server process. More details can be found in the <a href=\"https://docs.galaxyproject.org/en/master/admin/scaling.html#job-handler-assignment-methods\">Scaling and Load Balancing</a> section of the Galaxy documentation.</p>\n\n<p>Later tutorials will build on this simple job configuration.</p>\n\n<h2 id=\"productionising-galaxy\">Productionising Galaxy</h2>\n\n<p>This is a fantastic base Galaxy installation but there are numerous additional options we should be setting for a real production Galaxy.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>More Features!</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Make the following changes to your <code class=\"language-plaintext highlighter-rouge\">group_vars/galaxyservers.yml</code>:</p>\n\n      <div data-commit=\"Add production facing vars\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/group_vars/galaxyservers.yml\n</span><span class=\"gi\">+++ b/group_vars/galaxyservers.yml\n</span><span class=\"p\">@@ -40,6 +40,28 @@</span> galaxy_config:\n     object_store_store_by: uuid\n     id_secret: \"{{ vault_id_secret }}\"\n     job_config: \"{{ galaxy_job_config }}\" # Use the variable we defined above\n<span class=\"gi\">+    # SQL Performance\n+    slow_query_log_threshold: 5\n+    enable_per_request_sql_debugging: true\n+    # File serving Performance\n+    nginx_x_accel_redirect_base: /_x_accel_redirect\n+    # Automation / Ease of Use / User-facing features\n+    watch_job_rules: 'auto'\n+    allow_path_paste: true\n+    enable_quotas: true\n+    allow_user_deletion: true\n+    show_welcome_with_login: true\n+    expose_user_name: true\n+    expose_dataset_path: true\n+    expose_potentially_sensitive_job_metrics: true\n+    # NFS workarounds\n+    retry_job_output_collection: 3\n+    # Debugging\n+    cleanup_job: onsuccess\n+    allow_user_impersonation: true\n+    # Tool security\n+    outputs_to_working_directory: true\n+    new_user_dataset_access_role_default_private: true # Make datasets private by default\n</span>   gravity:\n     process_manager: systemd\n     galaxy_root: \"{{ galaxy_root }}/server\"\n   \n</code></pre></div>      </div>\n\n      <blockquote class=\"tip\">\n        <tip-title>What do these do?</tip-title>\n        <p>Check out the full details in the <a href=\"https://docs.galaxyproject.org/en/master/admin/config.html#configuration-options\">Galaxy documentation</a>, but we’ll discuss a couple briefly:</p>\n        <ul>\n          <li><code class=\"language-plaintext highlighter-rouge\">nginx_x_accel_redirect_base</code>: This is required to have NGINX serve user files. You don’t want Galaxy to waste time reading a 100GB fastq file a user has asked for, so you offload that to NGINX. The request is passed through to Galaxy, so permissions checks still occur, but Galaxy instead replies to NGINX just the path to the file that it should send to the requesting user.</li>\n          <li><code class=\"language-plaintext highlighter-rouge\">enable_quotas</code>: You definitely want to set a default quota for your users!</li>\n          <li><code class=\"language-plaintext highlighter-rouge\">expose_user_name</code>: This exposes usernames in the history and dataset sharing forms which makes life easier for your users.</li>\n          <li><code class=\"language-plaintext highlighter-rouge\">expose_dataset_path</code>: This shares the entire dataset path and enable the user to have access to the command line that the wrapper launched.</li>\n          <li><code class=\"language-plaintext highlighter-rouge\">cleanup_job</code>: This prevents a job’s files from being cleaned up from disk if it failed, allowing you to debug and see what went wrong.</li>\n          <li><code class=\"language-plaintext highlighter-rouge\">allow_user_impersonation</code>: Users submit horrible bug reports (often screenshots of unrelated things), impersonation means you can just see their history and look at what went wrong.</li>\n        </ul>\n      </blockquote>\n    </li>\n    <li>\n      <p>Make the following changes to your <code class=\"language-plaintext highlighter-rouge\">templates/nginx/galaxy.j2</code>:</p>\n\n      <div data-commit=\"Add nginx x-accel-redir and g-i-g webhook config to nginx\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/templates/nginx/galaxy.j2\n</span><span class=\"gi\">+++ b/templates/nginx/galaxy.j2\n</span><span class=\"p\">@@ -58,4 +58,14 @@</span> server {\n \tlocation /favicon.ico {\n \t\talias {{ galaxy_server_dir }}/static/favicon.ico;\n \t}\n<span class=\"gi\">+\n+\tlocation /_x_accel_redirect {\n+\t\tinternal;\n+\t\talias /;\n+\t}\n+\n+\t# Support click-to-run in the GTN-in-Galaxy Webhook\n+\tlocation /training-material/ {\n+\t\tproxy_pass https://training.galaxyproject.org/training-material/;\n+\t}\n</span> }\n   \n</code></pre></div>      </div>\n\n      <blockquote class=\"tip\">\n        <tip-title>What do these do?</tip-title>\n        <p>The <code class=\"language-plaintext highlighter-rouge\">_x_accel_redirect</code> is required for the NGINX file serving discussed above. For information on the GTN-in-Galaxy Webhook, see the <a href=\"https://docs.galaxyproject.org/en/master/admin/special_topics/gtn.html?highlight=gtn%20galaxy\">Galaxy Documentation</a>. It’s a very cool feature which helps your users access training materials directly in Galaxy.</p>\n      </blockquote>\n    </li>\n    <li>\n      <p>Run the playbook</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook galaxy.yml\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<blockquote class=\"hidden\">\n  <div data-test=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1-galaxy-up.sh\n</code></pre></div>  </div>\n</blockquote>\n\n<h2 id=\"disaster-strikes-optional\">Disaster Strikes! (Optional)</h2>\n\n<p>Because you’re an admin, you need to be prepared for any situation, including the worst case scenarios. So we’re going to simulate a disaster and show you how you can recover from it. It’ll be fun!</p>\n\n<p>For this “disaster”, we will pretend that:</p>\n\n<ol>\n  <li>Your database is on another machine</li>\n  <li>Your datasets are on an NFS server or some other remote machine.</li>\n</ol>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Summon the Apocalypse</hands-on-title>\n\n  <p>So let’s have a “worst case scenario”, where your Galaxy server gets destroyed</p>\n\n  <ol>\n    <li>Log on to your machine.</li>\n    <li><strong>Carefully</strong>, as root, <code class=\"language-plaintext highlighter-rouge\">rm -rf /srv/galaxy</code>, completely wipe out your Galaxy home directory.</li>\n  </ol>\n\n</blockquote>\n\n<p>Your entire Galaxy server is gone! 😱</p>\n\n<p>You were a responsible admin and had your user data and database stored on a separate system (and backed up), so at least those survived. Nevertheless, this is when most of us start feeling really bad; bosses start yelling, we start crying or reaching for bad coping habits.</p>\n\n<p>But not you! You spent the day writing this Ansible playbook that describes your environment completely; all of the software that was installed, all of the configuration changes you have made. It leverages many community maintained roles and can be used to completely rebuild the server! With minimal effort on your part.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Revert the Apocalypse</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Run the playbook</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook galaxy.yml\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n    <li>\n      <p>Get a hot beverage of your choice while it rebuilds.</p>\n    </li>\n    <li>\n      <p>Congratulate yourself for saving the day.</p>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>And with that, Galaxy should be up and running again. If you log in, you should see the results of any jobs you ran earlier, you should still be able to log in with your old account, and everything should just work.</p>\n\n<p>Ansible can save you from some really bad scenarios, <em>if and only if</em>:</p>\n\n<ul>\n  <li>You can replace the hardware or find somewhere new to re-deploy</li>\n  <li>You’ve made absolutely certain that every change made to a system is recorded within your playbooks and roles (i.e. no manual package installation)</li>\n</ul>\n\n<p>Then you can potentially use it to recover.</p>\n\n<blockquote class=\"comment\">\n  <comment-title>We have experience</comment-title>\n\n  <p>We can tell you this, we can repeat it over and over, but unless you really have a disaster happen to you, it is hard to appreciate how important it is that machines are completely controlled in terms of configuration and software deployment.</p>\n\n  <p>We’ve experienced these incidents and we know how horribly stressful it can be if an important service like Galaxy goes down and you cannot immediately replace it with another instance. We hope you will immediately apply the lessons from this training material, it can potentially save you a lot of stress and worry.</p>\n\n</blockquote>\n\n<h1 id=\"production--maintenance\">Production &amp; Maintenance</h1>\n\n<p>The time required to maintain a production Galaxy instance depends on the number of users and their specific needs, but a smallish server (&lt;= 25 users) will typically require a day or two per month of maintenance. Large public servers like usegalaxy.org and usegalaxy.eu are largely full time jobs (although even their admins do find time to do other things).</p>\n\n<h2 id=\"keeping-galaxy-updated\">Keeping Galaxy Updated</h2>\n\n<p>If you have set your <code class=\"language-plaintext highlighter-rouge\">galaxy_commit_id</code> group variable to a branch name like <code class=\"language-plaintext highlighter-rouge\">release_23.0</code>, then all you need to do to keep Galaxy up to date (e.g. for security and bug fixes) is to run the playbook regularly. The <code class=\"language-plaintext highlighter-rouge\">git</code> module in Ansible checks if you are on the latest commit of a given branch, and will update the clone of the repository if it is not.</p>\n\n<h2 id=\"upgrading-galaxy-optional\">Upgrading Galaxy (Optional)</h2>\n\n<p>With Ansible, upgrading Galaxy to a new release is incredibly easy. Here is a commit from UseGalaxy.eu’s upgrade:</p>\n\n<div class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/group_vars/galaxyservers.yml\n</span><span class=\"gi\">+++ b/group_vars/galaxyservers.yml\n</span><span class=\"p\">@@ -345,7 +345,7 @@</span> galaxy_instance_hostname: usegalaxy.eu\n<span class=\"err\">\n</span> galaxy_repo: 'https://github.com/usegalaxy-eu/galaxy.git'\n<span class=\"gd\">-galaxy_commit_id: 'release_19.05'\n</span><span class=\"gi\">+galaxy_commit_id: 'release_19.09'\n</span> galaxy_force_checkout: true # discard any modified files\n</code></pre></div></div>\n\n<p>This is all that is required, changing the <code class=\"language-plaintext highlighter-rouge\">galaxy_commit_id</code> and re-running the playbook. Everything else (building the client, database migrations, etc.) are taken care of for you.</p>\n\n<p>It is recommend that you also do the following during an upgrade:</p>\n\n<ul>\n  <li><a href=\"https://docs.galaxyproject.org/en/latest/releases/index.html\"><strong>Read the release notes</strong></a> for the new version of Galaxy</li>\n  <li>Check out the latest <a href=\"https://github.com/galaxyproject/galaxy/blob/master/config/galaxy.yml.sample\"><code class=\"language-plaintext highlighter-rouge\">galaxy.yml.sample</code></a> for the new release, and see if there are any variables you want to set for your server</li>\n  <li>Compare the <a href=\"https://github.com/galaxyproject/galaxy/tree/master/config\">other configuration files</a> to see if there are new features you want to take advantage of (e.g. new job runner options or metrics you wish to capture.)</li>\n</ul>\n\n<p>When you’ve read the documentation and checked out the new features, you can then run the playbook and you’re done!</p>\n\n<h2 id=\"user-support\">User Support</h2>\n\n<p>There are many user support resources available to you and your users online. <a href=\"https://help.galaxyproject.org\">help.galaxyproject.org</a> is the primary landing point for Galaxy users. For helping individual users, you might find it useful to impersonate them if they fail to send adequate bug reports.</p>\n\n<h3 id=\"impersonating\">Impersonating</h3>\n\n<p>You can activate user impersonation with:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>allow_user_impersonation: true\n</code></pre></div></div>\n\n<p>It is recommended to ask permission or consent before impersonating a user: “Hey, mind if we look at your history?”\nAlso, since Galaxy is not normally a real-time collaborative activity, you should avoid running jobs in their history, which can confuse users when datasets show up unexpectedly.\nAdditionally you can automatically send failing job error reports, even if users do not submit one, and maybe proactively address those issues (depending on the number of your users).</p>\n\n<h2 id=\"running-on-a-cluster\">Running on a cluster</h2>\n\n<p>If you need to run on a cluster with a shared file system, you will need to expose several directories to your cluster:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">galaxy_shed_tools_dir</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">galaxy_tool_dependency_dir</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">galaxy_file_path</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">galaxy_job_working_directory</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">galaxy_server_dir</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">galaxy_venv_dir</code></li>\n</ul>\n\n<p>But this isn’t strictly true, not every one of these directories needs to be exported over the network. Instead, there are a couple of those directories that can be recreated in different locations (e.g. locally to nodes) using playbook tasks or simply by copying them to the relevant locations. Sometimes admins choose to do this for performance reasons when NFS can be slow or simply unnecessary:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">galaxy_server_dir</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">galaxy_venv_dir</code></li>\n</ul>\n\n<p>Both of those directories can be re-created by running parts of the <code class=\"language-plaintext highlighter-rouge\">galaxyproject.galaxy</code> role on different machines. As neither of these directories is written to during system operations, it is fine for them to be copies living on different machines, rather coming from a single source of truth like an NFS server. For the other directories (e.g. job working directory or tools directory) these need to be written to, and read from, simultaneously from different machines, and should be consistent across the network.</p>\n\n<p>Most of us use NFS, those who are using something more exotic (ceph, gluster, etc) have some reason for that like “my uni provided it” or “we really wanted to try something shiny”. But NFS in most cases is decent and well tested and can be used. For larger deployments, a single NFS node may be insufficient, but at these scales it is common that your university or organisation provides some managed NFS service, e.g. Isilon which has load balancing built into its NFS service.</p>\n\n<h2 id=\"other-software\">Other software</h2>\n\n<p>But what about your other software, things that are deployed along with Galaxy? Things without an ansible role or are quite weird and require “manual tricks” to deploy?</p>\n\n<p>You can write roles for that! Sometimes they are really ugly roles, but it at least keeps it documented + in place. E.g. UseGalaxy.eu has a custom role for rewriting users and it’s ugly and untested and should not be used by anyone else in case it breaks their site. But it’s one of these manual tricks or bits of glue code, but we can encapsulate it as ansible. You can include tarballs in your role to be deployed and so on.</p>\n\n<p>It may seem daunting to use ansible, but you don’t have to do everything in ansible! You can just do a little bit, for managing just Galaxy, and manage the rest of your stack separately. Whatever fits best for your deployment.</p>\n\n<h1 id=\"loving-ansible-convert-your-own-servers\">Loving Ansible? Convert your own servers!</h1>\n\n<p>A common question we get is:</p>\n\n<blockquote class=\"quote\">\n  <p>Is it possible to transform a Galaxy server which was installed by hand, into an ansible-managed one?</p>\n</blockquote>\n\n<p>Because of the great variance between sites and deployments it is not really possible to produce a guide for doing so. However, if you back your current deployment up and set all of the variables that control paths appropriately, it can be done!</p>\n\n<p>It’s very possible to do this piecemeal, taking one component at a time to ansibilise. nginx is a very easy place to start, the database is as well. Galaxy can be rebuilt in a new location, many of us ran a hand-managed galaxy setup somewhere like <code class=\"language-plaintext highlighter-rouge\">/home/janedoe/work/projects/galaxy</code> that suddenly became a permanent project, this is a good chance to keep that but rebuild an identical one in <code class=\"language-plaintext highlighter-rouge\">/srv/galaxy</code> or similar, and then switch over the traffic to that new, production Galaxy. Relocating data is a bit tougher and can require rewriting entries in the database.</p>\n\n<h1 id=\"final-notes\">Final Notes</h1>\n\n<p>If you’ve been following along you should have a production-ready Galaxy, secured, everything ready to go.</p>\n\n<!--SNIPPET-->\n<blockquote class=\"hands_on\">   <div class=\"box-title hands_on-title\" id=\"hands-on-time-to-git-commit\"><i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i> Hands-on: Time to git commit</div>   <p>It’s time to commit your work! Check the status with</p>   <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git status<br /></code></pre></div></div>   <p>Add your changed files with</p>   <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git add ... # any files you see that are changed<br /></code></pre></div></div>   <p>And then commit it!</p>   <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git commit -m 'Finished Galaxy Installation with Ansible'<br /></code></pre></div></div> </blockquote>\n<p><!--END_SNIPPET--></p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Using Git with Ansible Vaults</hands-on-title>\n  <p>When looking at <code class=\"language-plaintext highlighter-rouge\">git log</code> to see what you changed, you cannot easily look into\nAnsible Vault changes: you just see the changes in the encrypted versions, which\nis unpleasant to read.</p>\n\n  <p>Instead we can use <a href=\"https://www.git-scm.com/docs/gitattributes\"><code class=\"language-plaintext highlighter-rouge\">.gitattributes</code></a> to tell <code class=\"language-plaintext highlighter-rouge\">git</code> that we want to use a certain\nprogram to convert some files before calculating their diffs,\nin this case <code class=\"language-plaintext highlighter-rouge\">ansible-vault view</code>.</p>\n\n  <ol>\n    <li>Check your <code class=\"language-plaintext highlighter-rouge\">git log -p</code> and see how the Vault changes look (you can type <code class=\"language-plaintext highlighter-rouge\">/vault</code> to search). Notice that they’re just changed encoded content.</li>\n    <li>\n      <p>Create the file <code class=\"language-plaintext highlighter-rouge\">.gitattributes</code> in the same folder as your <code class=\"language-plaintext highlighter-rouge\">galaxy.yml</code> playbook, with the following contents:</p>\n\n      <div data-commit=\"Add git attributes\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- /dev/null\n</span><span class=\"gi\">+++ b/.gitattributes\n</span><span class=\"p\">@@ -0,0 +1 @@</span>\n<span class=\"gi\">+group_vars/secret.yml diff=ansible-vault merge=binary\n</span>   \n</code></pre></div>      </div>\n\n      <p>This set the <code class=\"language-plaintext highlighter-rouge\">diff</code> attribute to <code class=\"language-plaintext highlighter-rouge\">ansible-vault</code> for the <code class=\"language-plaintext highlighter-rouge\">group_vars/secret.yml</code> file.\nAdditionally, the <code class=\"language-plaintext highlighter-rouge\">merge=binary</code> option tells git not to attempt to do a three-way merge of this file.</p>\n    </li>\n    <li>\n      <p>Run the following command to configure git to convert the files having the <code class=\"language-plaintext highlighter-rouge\">diff</code> attribute set to <code class=\"language-plaintext highlighter-rouge\">ansible-vault</code>, using the <code class=\"language-plaintext highlighter-rouge\">ansible-vault view</code> command, before diffing them:</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git config <span class=\"nt\">--global</span> diff.ansible-vault.textconv <span class=\"s2\">\"ansible-vault view\"</span>\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n    <li>Try again to <code class=\"language-plaintext highlighter-rouge\">git log -p</code> and look for the vault changes. Note that you can now see the decrypted content! Very useful.</li>\n  </ol>\n</blockquote>\n\n<!--SNIPPET-->\n<blockquote class=\"comment\">   <div class=\"box-title comment-title\" id=\"comment-got-lost-along-the-way\"><i class=\"far fa-comment-dots\" aria-hidden=\"true\"></i> Comment: Got lost along the way?</div>   <p>If you missed any steps, you can compare against the <a href=\"https://github.com/hexylena/git-gat/tree/step-1\">reference files</a>, or see what changed since <a href=\"https://github.com/hexylena/git-gat/compare/step-0...step-1#files_bucket\">the previous tutorial</a>.</p>   <p>If you’re using <code class=\"language-plaintext highlighter-rouge\">git</code> to track your progress, remember to add your changes and commit with a good commit message!</p> </blockquote>\n<p><!--END_SNIPPET--></p>\n\n<figure id=\"figure-4\" style=\"max-width: 90%;\"><img src=\"../../images/ansible-galaxy-3.png\" alt=\"diagram of galaxy setup with postgres, galaxy, nginx, gunicorn, and storage.\" width=\"2796\" height=\"1457\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/ansible-galaxy-3.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 4</strong>:</span> This approximately represents what you have setup today, NGINX proxies requests to Gunicorn which runs the Galaxy App. That talks to Postgres, and Storage.</figcaption></figure>\n\n<!--SNIPPET-->\n<blockquote class=\"comment\">   <div class=\"box-title comment-title\" id=\"comment-galaxy-admin-training-path-1\"><i class=\"far fa-comment-dots\" aria-hidden=\"true\"></i> Comment: Galaxy Admin Training Path</div>   <p>The yearly Galaxy Admin Training follows a specific ordering of tutorials. Use this timeline to help keep track of where you are in Galaxy Admin Training.</p>   <ol id=\"git-gat-timeline\">                    <li class=\"active\">         <a href=\"/training-material/topics/admin/tutorials/ansible-galaxy/tutorial.html\">             <div>Step 1</div>             <div>ansible-galaxy</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/backup-cleanup/tutorial.html\">             <div>Step 2</div>             <div>backup-cleanup</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/customization/tutorial.html\">             <div>Step 3</div>             <div>customization</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/tus/tutorial.html\">             <div>Step 4</div>             <div>tus</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/cvmfs/tutorial.html\">             <div>Step 5</div>             <div>cvmfs</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/apptainer/tutorial.html\">             <div>Step 6</div>             <div>apptainer</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/tool-management/tutorial.html\">             <div>Step 7</div>             <div>tool-management</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/reference-genomes/tutorial.html\">             <div>Step 8</div>             <div>reference-genomes</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/data-library/tutorial.html\">             <div>Step 9</div>             <div>data-library</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/dev/tutorials/bioblend-api/tutorial.html\">             <div>Step 10</div>             <div>dev/bioblend-api</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/connect-to-compute-cluster/tutorial.html\">             <div>Step 11</div>             <div>connect-to-compute-cluster</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/job-destinations/tutorial.html\">             <div>Step 12</div>             <div>job-destinations</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/pulsar/tutorial.html\">             <div>Step 13</div>             <div>pulsar</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/celery/tutorial.html\">             <div>Step 14</div>             <div>celery</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/gxadmin/tutorial.html\">             <div>Step 15</div>             <div>gxadmin</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/reports/tutorial.html\">             <div>Step 16</div>             <div>reports</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/monitoring/tutorial.html\">             <div>Step 17</div>             <div>monitoring</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/tiaas/tutorial.html\">             <div>Step 18</div>             <div>tiaas</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/sentry/tutorial.html\">             <div>Step 19</div>             <div>sentry</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/ftp/tutorial.html\">             <div>Step 20</div>             <div>ftp</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/beacon/tutorial.html\">             <div>Step 21</div>             <div>beacon</div>         </a>     </li>           </ol> </blockquote>\n<p><!--END_SNIPPET--></p>\n"],"ref_slides":["## Install PostgreSQL & Galaxy extensions\n\n![Graph showing a Postgres DB in a minimal deployment (one node)](../../images/ansible-galaxy-0.png)\n\n???\n\n- The first step of a Galaxy deployment is the database.\n- This is the foundation of everything.\n\n---\n\n## Install Galaxy & Attach Storage\n\n![Galaxy is now attached to the DB. Storage is connected to Galaxy](../../images/ansible-galaxy-1.png)\n\n???\n\n- Galaxy is deployed, and attached to the database.\n- Storage must be available for Galaxy\n\n---\n\n## Setup Gunicorn\n\n![Gunicorn is attached to Galaxy](../../images/ansible-galaxy-2.png)\n\n???\n\n- Next, Gunicorn is setup to run the Galaxy app.\n\n---\n\n## Configure NGINX\n\n![NGINX is added to proxy Gunicorn](../../images/ansible-galaxy-3.png)\n\n???\n\n- Next, nginx is attached to UWSGI to proxy connections and speed up access.\n\n---\n\n## Configure Backup\n\n![A backup location area is added, with a node DB backup inside connected to the PostgreSQL db](../../images/ansible-galaxy-4.png)\n\n???\n\n- A backup location is a very important part of a Galaxy deployment.\n- We only backup the database, as the Galaxy configuration is stored in your playbooks\n- You probably also want to backup the user data storage.\n\n---\n\n## Configure CVMFS\n\n![A cvmfs cache is added connected to Galaxy, next to storage](../../images/ansible-galaxy-5.png)\n\n???\n\n- CVMFS provides reference data and can be attached to your storage.\n- Galaxy is configured to read data from CVMFS.\n- Compute is configured to access it as well for jobs that need reference data.\n\n---\n\n## Configure Job Handlers\n\n![Job Handlers are added, connected to Galaxy. This connects to a Slurm deployment which is connected to a compute node which points to storage and cvmfs](../../images/ansible-galaxy-6.png)\n\n???\n\n- Job handlers are configured and deployed with the app.\n- These connect to the compute and manage jobs.\n- Slurm is a much more intelligent resource manager than Galaxy.\n- The job handlers are configured to connect to Slurm.\n- Slurm deployment is explained in a separate tutorial.\n\n---\n\n## Setup Remote Compute\n\n![Remote compute site, with Pulsar and compute is attached to the job handlers](../../images/ansible-galaxy-7.png)\n\n???\n\n- Lastly, we can scale Galaxy further with remote compute.\n- Pulsar connected at a remote site will handle this.\n\n---\n\n## Major Initial Decisions\n\n* Where to install Galaxy\n* Where to store Galaxy datasets\n* Database location\n\n???\n\n- These are the major initial decisions you will face.\n- Where to install Galaxy, what servers or VMs do you have available?\n- Where to store the data?\n- Do you have enough space for your users?\n- Where to reliably store the database?\n\n---\n## Where to install Galaxy\n\n* Must be at same path on cluster - more on this in cluster sessions\n\n???\n\n- Galaxy should be installed somewhere that is available across the cluster.\n- We'll cover this in detail in the lesson.\n\n---\n## Where to store Galaxy datasets\n\n* Must be at same path on cluster\n* Consider future scalability\n\n???\n\n- Where should data be stored?\n- Do you have network-attached storage available?\n- It must be available to the entire cluster where compute happens.\n\n---\n## Database location\n\n* Fast local, reliable storage\n* Consider future scalability\n\n???\n\n- The database server should be very reliable.\n- It does not need so much disk space, but consider future scalability.\n\n---\n## Basic best practices\n\n* Run as an **unprivileged user**\n* When possible, separate *code* from *data* and *configs*\n* Write protect code and configs\n\n.left[All of these practices are supported in the [galaxyproject.galaxy][galaxy-role] Ansible role and covered in the [Galaxy Installation with Ansible][ansible-galaxy-tutorial] tutorial!]\n\n[galaxy-role]: https://galaxy.ansible.com/galaxyproject/galaxy\n[ansible-galaxy-tutorial]: /training-material/topics/admin/tutorials/ansible-galaxy/tutorial.html\n\n???\n\n- Here are the basic best practices.\n- Run without privileges so if someone gains access they are limited in what they can do.\n- Ensure the code and configuration are separate.\n- If someone manages to act as the galaxy user, this will prevent them from changing galaxy's behaviour.\n- All of these best practices are built into the ansible role.\n\n---\n\n## Example \"Advanced\" UseGalaxy.* Deployment\n\n![The same deployment as before, but now they are segmented differently. Postgres and Rabbit MQ on their own hosts, storage on an NFS server, slurm and compute on a Cluster, and then nginx, gunicorn, galaxy, and job handlers on a Head Node](../../images/ansible-galaxy-usegalaxy.png)\n\n???\n\n- Here we can see what a UseGalaxy.* deployment looks like\n- This is roughly representative of UseGalaxy.eu, but all Galaxies are slightly different.\n- For instance some Galaxies have multiple head nodes to balance the load.\n"],"video_library":{"tutorial":{"description":null,"force_archive_materials":true,"materials":[{"link":"topics/admin/tutorials/ansible-galaxy/tutorial.html","title":"Tutorial (All Parts)","type":"Tutorial"},{"link":"topics/admin/tutorials/database/slides.html","title":"Database Slides","type":"Slides"},{"link":"topics/admin/tutorials/systemd-supervisor/slides.html","title":"systemd Slides","type":"Slides"},{"link":"topics/admin/tutorials/production/slides.html","title":"Moving Towards Production Slides","type":"Slides"}],"tags":["admin"],"type":"Tutorial","versions":[{"captions":["natefoo","hexylena"],"date":"2022-03-01","galaxy_version":"21.05","length":"2H50M","link":"LPK8rP_qUiA","speakers":["natefoo","hexylena"]},{"captions":["natefoo","hexylena"],"date":"2021-06-28","galaxy_version":"21.05","length":"2H47M","link":"zT70luZqPOU","speakers":["natefoo"]},{"captions":["shiltemann","hexylena"],"date":"2021-02-15","galaxy_version":"21.01","length":"53M","link":"il83uApg7Hc","speakers":["hexylena"]}],"gtn_id":"admin/ansible-galaxy","title":"Galaxy Installation with Ansible","captioned":true},"slides":null,"demo":null,"both":null,"session":null},"hands_on":true,"slides":true,"mod_date":"2024-05-27 14:47:09 +0000","pub_date":"2019-01-28 10:40:06 +0000","version":376,"api":"https://training.galaxyproject.org/training-material/api/topics/admin/tutorials/ansible-galaxy/tutorial.json","tools":[],"supported_servers":[],"topic_name_human":"Galaxy Server administration","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":true,"translations":{"tutorial":[],"slides":[],"video":true},"license":"CC-BY-4.0","type":"tutorial","time":"13:00","contributors":[{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"},{"name":"Nate Coraor","matrix":"natefoo:matrix.org","twitter":"natefoo","email":"nate@bx.psu.edu","joined":"2017-12","orcid":"0000-0001-8083-2963","id":"natefoo","url":"https://training.galaxyproject.org/training-material/api/contributors/natefoo.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/natefoo/"},{"name":"Simon Gladman","email":"simon.gladman@unimelb.edu.au","joined":"2017-09","elixir_node":"au","orcid":"0000-0002-6100-4385","in_memoriam":"<a href=\"https://www.biocommons.org.au/news/simon-gladman\">Simon Gladman, system administrator of UseGalaxy.org.au, passed away on November 26, 2022</a>\n\n<a href=\"https://galaxyproject.org/news/2022-11-28-simon-gladman/\">He was a fantastic teacher, tutorial author, system administrator, and warm and welcoming friend.</a> He contributed heavily to the Galaxy Training Network and especially the Galaxy Administration community over the years, we will miss him dearly. The GTN and GAT would not be what they are today, without him.\n\n“Have I told you about my watch?”","id":"slugger70","url":"https://training.galaxyproject.org/training-material/api/contributors/slugger70.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/slugger70/"},{"name":"Saskia Hiltemann","maintainer_contact":"gitter","email":"saskia.hiltemann@gmail.com","fediverse":"https://mstdn.science/@shiltemann","fediverse_flavor":"mastodon","bluesky":"shiltemann.bsky.social","linkedin":"shiltemann","matrix":"shiltemann:matrix.org","orcid":"0000-0003-3803-468X","joined":"2017-09","bio":"Researcher at Erasmus Medical Center","elixir_node":"nl","contact_for_training":true,"affiliations":["CINECA-Project","gallantries","erasmusmc","elixir-europe","uni-freiburg"],"location":{"country":"NL","lat":51.912,"lon":4.462},"id":"shiltemann","url":"https://training.galaxyproject.org/training-material/api/contributors/shiltemann.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/shiltemann/"},{"name":"Nicola Soranzo","matrix":"nsoranzo:matrix.org","orcid":"0000-0003-3627-5340","twitter":"NicolaSoranzo","joined":"2017-09","elixir_node":"uk","fediverse":"https://mstdn.science/@nsoranzo","fediverse_flavor":"mastodon","linkedin":"nicola-soranzo-7884125","affiliations":["earlham","elixir-europe"],"id":"nsoranzo","url":"https://training.galaxyproject.org/training-material/api/contributors/nsoranzo.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/nsoranzo/"},{"name":"Gianmauro Cuccuru","joined":"2019-03","elixir_node":"de","orcid":"0000-0002-5335-545X","former_affiliations":["uni-freiburg","elixir-europe"],"id":"gmauro","url":"https://training.galaxyproject.org/training-material/api/contributors/gmauro.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/gmauro/"},{"name":"Marius van den Beek","joined":"2018-06","id":"mvdbeek","url":"https://training.galaxyproject.org/training-material/api/contributors/mvdbeek.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/mvdbeek/"},{"name":"Martin Čech","email":"marten@bx.psu.edu","matrix":"martenson:matrix.org","orcid":"0000-0002-9318-1781","elixir_node":"cz","contact_for_training":true,"location":{"country":"USA","lat":37.0,"lon":-122.0},"fediverse":"https://mastodon.world/@martenson","fediverse_flavor":"mastodon","joined":"2017-09","affiliations":["elixir-europe"],"id":"martenson","url":"https://training.galaxyproject.org/training-material/api/contributors/martenson.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/martenson/"},{"name":"John Chilton","email":"jmchilton@gmail.com","joined":"2017-09","twitter":"jmchilton","matrix":"jmchilton:matrix.org","orcid":"0000-0002-6794-0756","id":"jmchilton","url":"https://training.galaxyproject.org/training-material/api/contributors/jmchilton.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/jmchilton/"},{"name":"Dave B.","joined":"2021-06","id":"davebx","url":"https://training.galaxyproject.org/training-material/api/contributors/davebx.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/davebx/"},{"name":"Gildas Le Corguillé","joined":"2017-09","elixir_node":"fr","affiliations":["elixir-europe"],"id":"lecorguille","url":"https://training.galaxyproject.org/training-material/api/contributors/lecorguille.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/lecorguille/"},{"name":"Anthony Bretaudeau","email":"anthony.bretaudeau@inrae.fr","twitter":"abretau","matrix":"abretaud:matrix.org","orcid":"0000-0003-0914-2470","joined":"2017-09","elixir_node":"fr","contact_for_training":true,"location":{"country":"FR","lat":48.11,"lon":-1.64},"fediverse":"https://genomic.social/@abretaud","fediverse_flavor":"mastodon","affiliations":["gallantries","eurosciencegateway","elixir-europe"],"id":"abretaud","url":"https://training.galaxyproject.org/training-material/api/contributors/abretaud.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/abretaud/"},{"name":"Lucille Delisle","email":"lucille.delisle@epfl.ch","orcid":"0000-0002-1964-4960","joined":"2019-08","elixir_node":"ch","contact_for_training":true,"location":{"country":"CH","lat":46.52,"lon":6.56},"affiliations":["elixir-europe"],"id":"lldelisle","url":"https://training.galaxyproject.org/training-material/api/contributors/lldelisle.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/lldelisle/"},{"name":"Mira Kuntz","orcid":"0000-0003-4302-5091","matrix":"mira-miracoli:matrix.org","email":"kuntzm@informatik.uni-freiburg.de","joined":"2022-07","elixir_node":"de","affiliations":["uni-freiburg","elixir-europe","deNBI"],"id":"mira-miracoli","url":"https://training.galaxyproject.org/training-material/api/contributors/mira-miracoli.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/mira-miracoli/"},{"name":"Edwin den Haas","matrix":"edmontosaurus:matrix.org","joined":"2023-11","id":"edmontosaurus","url":"https://training.galaxyproject.org/training-material/api/contributors/edmontosaurus.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/edmontosaurus/"}],"logo":"assets/images/gat.png","redirect_from":["/short/admin/ansible-galaxy/slides","/short/S00002"]}