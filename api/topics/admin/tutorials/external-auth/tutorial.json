{"layout":"tutorial_hands_on","redirect_from":["/topics/admin/tutorials/upstream-auth/tutorial","/short/admin/external-auth","/short/T00007"],"title":"External Authentication","questions":["How can I connect Galaxy with CAS, SAML, etc."],"objectives":["be familiar with configuring Galaxy to use an upstream (proxy) authentication provider","be able to log in to your Galaxy server with a file-configured user."],"time_estimation":"30m","key_points":["Remote auth is not complex to set up and can help you meet institutional requirements"],"contributors":[{"name":"Nate Coraor","matrix":"natefoo:matrix.org","twitter":"natefoo","email":"nate@bx.psu.edu","joined":"2017-12","orcid":"0000-0001-8083-2963","id":"natefoo","url":"https://training.galaxyproject.org/training-material/api/contributors/natefoo.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/natefoo/"},{"name":"Nicola Soranzo","matrix":"nsoranzo:matrix.org","orcid":"0000-0003-3627-5340","twitter":"NicolaSoranzo","joined":"2017-09","elixir_node":"uk","fediverse":"https://mstdn.science/@nsoranzo","fediverse_flavor":"mastodon","linkedin":"nicola-soranzo-7884125","affiliations":["earlham","elixir-europe"],"id":"nsoranzo","url":"https://training.galaxyproject.org/training-material/api/contributors/nsoranzo.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/nsoranzo/"},{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"}],"subtopic":"features","tags":["authentication"],"requirements":[{"type":"internal","topic_name":"admin","tutorials":["ansible","ansible-galaxy"]}],"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00007","url":"/topics/admin/tutorials/external-auth/tutorial.html","topic_name":"admin","tutorial_name":"external-auth","dir":"topics/admin/tutorials/external-auth","symlink":null,"id":"admin/external-auth","ref_tutorials":["<h1 id=\"overview\">Overview</h1>\n\n<p>For this exercise we will use a basic password file method for authenticating - this is probably not a very useful method in production, but it demonstrates how the proxy server can be configured to provide the correct header to Galaxy, and how Galaxy integrates with upstream authentication providers. This same method can be used with NGINX and Apache modules for CAS or SAML authentication.</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#overview\" id=\"markdown-toc-overview\">Overview</a></li>\n  <li><a href=\"#configuring-authentication\" id=\"markdown-toc-configuring-authentication\">Configuring Authentication</a></li>\n  <li><a href=\"#testing\" id=\"markdown-toc-testing\">Testing</a></li>\n  <li><a href=\"#api-access\" id=\"markdown-toc-api-access\">API access</a></li>\n  <li><a href=\"#reverting\" id=\"markdown-toc-reverting\">Reverting</a></li>\n</ol>\n\n</blockquote>\n\n<h1 id=\"configuring-authentication\">Configuring Authentication</h1>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Configuring everything</hands-on-title>\n\n  <ol>\n    <li>Edit the galaxy.j2 template file in the templates/nginx directory and update the main location block defined for serving galaxy. Add the parameters:\n      <ul>\n        <li><code class=\"language-plaintext highlighter-rouge\">auth_basic galaxy;</code></li>\n        <li><code class=\"language-plaintext highlighter-rouge\">auth_basic_user_file /etc/nginx/passwd;</code></li>\n        <li><code class=\"language-plaintext highlighter-rouge\">proxy_set_header HTTP_REMOTE_USER $remote_user;</code></li>\n        <li><code class=\"language-plaintext highlighter-rouge\">proxy_set_header HTTP_GX_SECRET SOME_SECRET_STRING;</code></li>\n      </ul>\n\n      <p>It should look like:</p>\n\n      <div class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">@@ -14,6 +14,10 @@</span>\n<span class=\"gi\">+        auth_basic           galaxy;\n+        auth_basic_user_file /etc/nginx/passwd;\n+        proxy_set_header          HTTP_REMOTE_USER $remote_user;\n+        proxy_set_header          HTTP_GX_SECRET SOME_SECRET_STRING;\n</span>     }\n    \n     # Static files can be more efficiently served by Nginx. Why send the\n</code></pre></div>      </div>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-how-to-read-a-diff\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-how-to-read-a-diff\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: How to read a Diff</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <p>If you haven’t worked with diffs before, this can be something quite new or different.</p>   <p>If we have two files, let’s say a grocery list, in two files. We’ll call them ‘a’ and ‘b’.</p>   <blockquote class=\"code-2col\">   <blockquote class=\"code-in\">     <code-in-title>Old</code-in-title>     <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ cat old<br />🍎<br />🍐<br />🍊<br />🍋<br />🍒<br />🥑<br /></code></pre></div>    </div>   </blockquote>   <blockquote class=\"code-out\">     <code-out-title>New</code-out-title>     <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ cat new<br />🍎<br />🍐<br />🍊<br />🍋<br />🍍<br />🥑<br /></code></pre></div>    </div>   </blockquote> </blockquote>   <p>We can see that they have some different entries. We’ve removed 🍒 because they’re awful, and replaced them with an 🍍</p>   <p>Diff lets us compare these files</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>diff old new<br />5c5<br />&lt; 🍒<br /><span class=\"nt\">---</span><br /><span class=\"o\">&gt;</span> 🍍<br /></code></pre></div></div>   <p>Here we see that 🍒 is only in a, and 🍍 is only in b. But otherwise the files are identical.</p>   <p>There are a couple different formats to diffs, one is the ‘unified diff’</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>diff <span class=\"nt\">-U2</span> old new<br /><span class=\"nt\">---</span> old\t2022-02-16 14:06:19.697132568 +0100<br />+++ new\t2022-02-16 14:06:36.340962616 +0100<br />@@ <span class=\"nt\">-3</span>,4 +3,4 @@<br /> 🍊<br /> 🍋<br />-🍒<br />+🍍<br /> 🥑<br /></code></pre></div></div>   <p>This is basically what you see in the training materials which gives you a lot of context about the changes:</p>   <ul>   <li><code class=\"language-plaintext highlighter-rouge\">--- old</code> is the ‘old’ file in our view</li>   <li><code class=\"language-plaintext highlighter-rouge\">+++ new</code> is the ‘new’ file</li>   <li>@@ these lines tell us where the change occurs and how many lines are added or removed.</li>   <li>Lines starting with a - are removed from our ‘new’ file</li>   <li>Lines with a + have been added.</li> </ul>   <p>So when you go to apply these diffs to your files in the training:</p>   <ol>   <li>Ignore the header</li>   <li>Remove lines starting with - from your file</li>   <li>Add lines starting with + to your file</li> </ol>   <p>The other lines (🍊/🍋 and 🥑) above just provide “context”, they help you know where a change belongs in a file, but <strong>should not be edited</strong> when you’re making the above change. Given the above diff, you would find a line with a 🍒, and replace it with a 🍍</p>   <h4 id=\"added--removed-lines\">Added &amp; Removed Lines</h4>   <p>Removals are very easy to spot, we just have removed lines</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">---</span> old\t2022-02-16 14:06:19.697132568 +0100<br />+++ new\t2022-02-16 14:10:14.370722802 +0100<br />@@ <span class=\"nt\">-4</span>,3 +4,2 @@<br /> 🍋<br /> 🍒<br />-🥑<br /></code></pre></div></div>   <p>And additions likewise are very easy, just add a new line, between the other lines in your file.</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">---</span> old\t2022-02-16 14:06:19.697132568 +0100<br />+++ new\t2022-02-16 14:11:11.422135393 +0100<br />@@ <span class=\"nt\">-1</span>,3 +1,4 @@<br /> 🍎<br />+🍍<br /> 🍐<br /> 🍊<br /></code></pre></div></div>   <h4 id=\"completely-new-files\">Completely new files</h4>   <p>Completely new files look a bit different, there the “old” file is <code class=\"language-plaintext highlighter-rouge\">/dev/null</code>, the empty file in a Linux machine.</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>diff <span class=\"nt\">-U2</span> /dev/null old<br /><span class=\"nt\">---</span> /dev/null\t2022-02-15 11:47:16.100000270 +0100<br />+++ old\t2022-02-16 14:06:19.697132568 +0100<br />@@ <span class=\"nt\">-0</span>,0 +1,6 @@<br />+🍎<br />+🍐<br />+🍊<br />+🍋<br />+🍒<br />+🥑<br /></code></pre></div></div>   <p>And removed files are similar, except with the new file being /dev/null</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">---</span> old\t2022-02-16 14:06:19.697132568 +0100<br />+++ /dev/null\t2022-02-15 11:47:16.100000270 +0100<br />@@ <span class=\"nt\">-1</span>,6 +0,0 @@<br />-🍎<br />-🍐<br />-🍊<br />-🍋<br />-🍒<br />-🥑<br /></code></pre></div></div> </blockquote>\n      <p><!--END_SNIPPET--></p>\n\n      <blockquote class=\"tip\">\n        <tip-title>Running this tutorial <i>just</i> for Reports?</tip-title>\n        <p>Add the <code class=\"language-plaintext highlighter-rouge\">auth_basic</code> and <code class=\"language-plaintext highlighter-rouge\">auth_basic_user_file</code> lines to your <code class=\"language-plaintext highlighter-rouge\">location /reports/</code></p>\n      </blockquote>\n\n      <p><code class=\"language-plaintext highlighter-rouge\">auth_basic</code> enables validation of username and password using the “HTTP Basic Authentication” protocol. Its value <code class=\"language-plaintext highlighter-rouge\">galaxy</code> is used as a realm name to be displayed to the user when prompting for credentials.\n<code class=\"language-plaintext highlighter-rouge\">auth_basic_user_file</code> specifies the file that keeps usernames and passwords.\n<code class=\"language-plaintext highlighter-rouge\">proxy_set_header</code> adds <code class=\"language-plaintext highlighter-rouge\">HTTP_REMOTE_USER</code> to the special variables passed by nginx to Galaxy, with value <code class=\"language-plaintext highlighter-rouge\">$remote_user</code>, which is a nginx embedded variable containing the username supplied with the Basic authentication.</p>\n\n      <p><code class=\"language-plaintext highlighter-rouge\">GX_SECRET</code> is added as a header for security purposes, to prevent any other users on the system impersonating nginx and sending requests to Galaxy. NGINX and other webservers like Apache will strip any user-sent <code class=\"language-plaintext highlighter-rouge\">REMOTE_USER</code> headers, as that header defines the authenticated user. If you can talk directly to Galaxy (e.g. via curl) and provide the <code class=\"language-plaintext highlighter-rouge\">REMOTE_USER</code> header, you can impersonate any other use. While having Galaxy listen on <code class=\"language-plaintext highlighter-rouge\">127.0.0.1</code> prevents any requests from outside of the system reaching Galaxy, anyone on the system can still send requests to that port. Here you can choose to switch to a unix socket with permissions only permitting Galaxy and Nginx to connect. <code class=\"language-plaintext highlighter-rouge\">GX_SECRET</code> adds additional security as it needs to match <code class=\"language-plaintext highlighter-rouge\">remote_user_secret</code> in your galaxy configutation.</p>\n\n      <blockquote class=\"tip\">\n        <tip-title>Proxy bypass</tip-title>\n        <p>Users can bypass the authentication only if they can talk directly to the gunicorn processes (if you have socket/http: 0.0.0.0, or if it is directly responsible for serving galaxy, and there is no proxy.)\nThis can happen mostly when some users have command line access to the Galaxy server, which is considered a bad practice.</p>\n      </blockquote>\n    </li>\n    <li>\n      <p>Add a pre_task using the <a href=\"https://docs.ansible.com/ansible/2.9/modules/pip_module.html\"><code class=\"language-plaintext highlighter-rouge\">pip</code></a> module which installs the library <code class=\"language-plaintext highlighter-rouge\">passlib</code>, which is required for <code class=\"language-plaintext highlighter-rouge\">htpasswd</code>.</p>\n\n      <p>Add a pre_task using the <a href=\"https://docs.ansible.com/ansible/2.4/htpasswd_module.html\"><code class=\"language-plaintext highlighter-rouge\">htpasswd</code></a> module which sets up a password file in <code class=\"language-plaintext highlighter-rouge\">/etc/nginx/passwd</code>, with owner and group set to root, and a name and password, and a mode of 0640.</p>\n      <blockquote class=\"question\">\n        <question-title></question-title>\n\n        <p>How does your final configuration look?</p>\n\n        <blockquote class=\"solution\">\n          <solution-title></solution-title>\n\n          <div class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">@@ -7,6 +7,15 @@</span>\n         name: galaxy\n         state: restarted\n   pre_tasks:\n<span class=\"gi\">+    - pip:\n+        name: passlib\n+    - htpasswd:\n+        path: /etc/nginx/passwd\n+        name: user1        # Pick a username\n+        password: changeme # and a password\n+        owner: www-data    # nginx on centos\n+        group: root\n+        mode: 0640\n</span>     - name: Install Dependencies\n       package:\n         name: ['git', 'make', 'python3-psycopg2', 'virtualenv']\n</code></pre></div>          </div>\n        </blockquote>\n\n      </blockquote>\n    </li>\n    <li>\n      <p>Galaxy needs to be instructed to expect authentication to come from the upstream proxy. In order to do this, set the following two options in your Galaxy group variables:</p>\n\n      <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nn\">...</span>\n<span class=\"na\">galaxy_config</span><span class=\"pi\">:</span>\n  <span class=\"na\">galaxy</span><span class=\"pi\">:</span>\n    <span class=\"s\">...</span>\n    <span class=\"s\">use_remote_user</span><span class=\"err\">:</span> <span class=\"kc\">true</span>\n    <span class=\"s\">remote_user_maildomain</span><span class=\"err\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">inventory_hostname</span><span class=\"nv\"> </span><span class=\"s\">}}\"</span>\n    <span class=\"na\">remote_user_secret</span><span class=\"pi\">:</span> <span class=\"s\">SOME_SECRET_STRING</span>\n</code></pre></div>      </div>\n\n      <blockquote class=\"tip\">\n        <tip-title>Running this tutorial <i>just</i> for Reports?</tip-title>\n        <p>You don’t need to make the above changes for Galaxy then.</p>\n      </blockquote>\n\n      <p>Set the <code class=\"language-plaintext highlighter-rouge\">remote_user_maildomain</code> option to the appropriate domain name for your site.</p>\n    </li>\n    <li>Run the playbook</li>\n  </ol>\n\n</blockquote>\n\n<blockquote class=\"comment\">\n  <comment-title>Access denied</comment-title>\n\n  <p>If you see this message, it is because nginx is not correctly sending the <code class=\"language-plaintext highlighter-rouge\">REMOTE_USER</code> or the <code class=\"language-plaintext highlighter-rouge\">GX_SECRET</code> values.</p>\n\n  <p><a href=\"../../images/access_denied.png\" rel=\"noopener noreferrer\"><img src=\"../../images/access_denied.png\" alt=\"access denied message. \" width=\"1062\" height=\"326\" loading=\"lazy\" /></a></p>\n\n</blockquote>\n\n<h1 id=\"testing\">Testing</h1>\n\n<p>You should now be presented with a password dialog when attempting to load the Galaxy UI.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Testing</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Log in using the username and password you provided when creating the <code class=\"language-plaintext highlighter-rouge\">passwd</code> file. If your username and the value of <code class=\"language-plaintext highlighter-rouge\">remote_user_maildomain</code> match an existing user, you will be logged in to that account. If not, a new account will be created for that user.</p>\n    </li>\n    <li>\n      <p>Click on the “User” menu at the top, to see how the username appears.</p>\n    </li>\n    <li>\n      <p>Note that some user features are not available when remote user support is enabled.</p>\n\n      <p>Try logging out by selecting <strong>User</strong> -&gt; <strong>Logout</strong>. You will discover that when returning to the user interface, you are still logged in. This is because Galaxy has no way of logging you out of the proxy’s authentication system. Instead, you should set <code class=\"language-plaintext highlighter-rouge\">remote_user_logout_href</code> in <code class=\"language-plaintext highlighter-rouge\">galaxy.yml</code> to point to the URL of your authentication system’s logout page.</p>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h1 id=\"api-access\">API access</h1>\n\n<p>If you wish your Galaxy to be accessible to command line clients (e.g. bioblend, blend4j, parsec), you will need to add an exception for authentication on the API. Galaxy will still be secure and protected, but non-browser access will be permitted with an API key.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>location /api/ {\n    satisfy any;\n    allow all;\n}\n</code></pre></div></div>\n\n<blockquote class=\"tip\">\n  <tip-title>Notification of Registration</tip-title>\n  <p>There is no built-in way to be notified if users are registered, with external authentication or built-in. However, you could automate this easily. There is a <a href=\"https://github.com/usegalaxy-eu/gxadmin\">gxadmin</a> command we use called <code class=\"language-plaintext highlighter-rouge\">gxadmin query latest-users</code> which Björn uses often. Other sites have other methods, e.g. Nicola’s <a href=\"https://gist.github.com/nsoranzo/f023e26aa60024ef6a7e3a3fe5fb2e4f\">cron script</a> which runs daily on his server, to add new users to a group according to their email domain name.</p>\n</blockquote>\n\n<h1 id=\"reverting\">Reverting</h1>\n\n<p>We don’t want to leave Galaxy this way for the rest of our workshop.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Reverting the changes</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Edit your group variables file and comment out:</p>\n\n      <ul>\n        <li>the NGINX changes</li>\n        <li><code class=\"language-plaintext highlighter-rouge\">use_remote_user: true</code></li>\n      </ul>\n    </li>\n    <li>\n      <p>Run the playbook</p>\n    </li>\n  </ol>\n\n</blockquote>\n"],"ref_slides":["# Auth Mechanisms supported\n\n* Galaxy-specific account database\n* HTTP remote user provided by a reverse proxy server\n* Galaxy authentication framework (LDAP/AD, PAM)\n\n---\n# Galaxy account\n\n* Stored in the Galaxy DB\n  * Unique in both email and username\n  * Passwords hashed and salted, using PBKDF2 (default)\n  * Table `galaxy_user`\n  * Abstracted as `User` in `lib/galaxy/model/mapping.py`\n* Session cookie expires after 3 months\n  * Configurable with `session_duration`\n* Password reset uses 'visit-link' mechanism\n* `require_login` can be set to disable anonymous access\n\n---\n# Authentication tweaks\n\nIn `galaxy.yml`:\n* Activation\n  * `user_activation_on` will prevent accounts from running jobs until they visit activation link\n  * `activation_grace_period` gives users some time before their jobs are ignored\n  * `inactivity_box_content` defines the message shown to inactive users\n* Expiration\n  * `password_expiration_period` forces users to change password\n* Disposable domain blacklist\n  * `blacklist_file` defines domains (e.g. `example.org`) that will be rejected as user emails\n\n???\nhttps://github.com/martenson/disposable-email-domains\n\n---\n# Reverse proxy\n\nIn `galaxy.yml`:\n* Set `use_remote_user: true` to delegate authentication to the upstream proxy server\n  * The proxy server should set the `REMOTE_USER` HTTP header\n  * Disables regular logins\n\nDedicated Galaxy external auth [documentation](https://docs.galaxyproject.org/en/master/admin/authentication.html#remote-user-authentication).\n\n---\n# General configuration\n\n* If the proxy server returns only usernames, set `remote_user_maildomain` to a default mail domain to be appended\n* If a client can bypass the proxy, it can impersonate any user by forging the `REMOTE_USER` HTTP header:\n    * Configure the proxy server to define a `GX_SECRET` header and set `remote_user_secret` to the same value\n* Set `remote_user_logout_href` to point to your logout URL\n\n---\n# Nginx\n\n* Modules exist for PAM, Kerberos and LDAP.\n* Most likely you'll need to recompile Nginx as none of them are included by default.\n\n---\n# Example PAM stack\n\n* You need to set up your system's PAM stack (very site-specific)\n* A PAM configuration that would be suitable for authentication with Kerberos (placed in `/etc/pam.d/nginx`) might look like:\n  ```\n  auth  [success=1 default=ignore]  pam_krb5.so minimum_uid=1000 ignore_k5login\n  auth  requisite                   pam_deny.so\n  auth  required                    pam_permit.so\n  ```\n\n---\n# Example nginx.conf\n\n```ini\nlocation / {\n    auth_pam \"Basic Auth Realm Name\";\n    auth_pam_service_name \"nginx\";\n    ...\n    proxy_set_header REMOTE_USER $remote_user;\n}\n```\n\nThe value of `auth_pam_service_name` must match the filename of the pam configuration you created in `/etc/pam.d/` .\n\nDedicated Galaxy with Nginx [documentation](https://galaxyproject.org/admin/config/nginx-external-user-auth/).\n\n---\n# Apache httpd\n\nThe authentication module (basic authentication, `mod_auth_kerb`, `mod_authnz_ldap`, `mod_auth_cas`, `Cosign`, etc.) is responsible for providing a username, which we will pass through the proxy to Galaxy as `$REMOTE_USER`.\n\nIn addition to the modules above, `mod_headers` must be enabled in the Apache config, for some types of authentication.\n\n\nDedicated Galaxy with Apache [documentation](https://galaxyproject.org/admin/config/apache-external-user-auth/).\n\n---\n# Galaxy Authentication Framework\n\nAuthenticate to external services directly in Galaxy\n\nAvailable [provider modules](https://github.com/galaxyproject/galaxy/tree/dev/lib/galaxy/auth/providers) for:\n- Local Galaxy DB (default)\n- LDAP/Active Directory\n- [System (Linux) PAM](http://www.linux-pam.org/)\n"],"hands_on":true,"slides":true,"mod_date":"2022-10-18 14:23:35 +0000","pub_date":"2019-01-28 04:08:04 +0000","version":22,"api":"https://training.galaxyproject.org/training-material/api/topics/admin/tutorials/external-auth/tutorial.json","tools":[],"supported_servers":[],"topic_name_human":"Galaxy Server administration","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial"}