{"layout":"tutorial_slides","title":"Galaxy Interactive Tools","zenodo_link":"","questions":null,"objectives":["Learn the differences between Galaxy Interactive Environments and Galaxy Interactive Tools","Have an understanding of what Galaxy Interactive Tools are and how they work"],"time_estimation":"2h","key_points":["Galaxy Interactive Tools run as jobs in largely the same manner as any other Galaxy job","nginx routes GxIT requests to the GxIT(/GIE) Proxy, which routes them to the node/port on which the GxIT is running","GxITs require wildcard SSL certificates","GxITs expose your Galaxy server's user datasets unless configured to use Pulsar"],"contributors":["natefoo","eancelet","abretaud"],"tags":["ansible","interactive-tools"],"requirements":[{"type":"internal","topic_name":"admin","tutorials":["ansible","ansible-galaxy","connect-to-compute-cluster","job-destinations"]}],"subtopic":"features","recordings":[{"captioners":["abretaud","hexylena"],"date":"2021-02-15","galaxy_version":"21.01","length":"44M","youtube_id":"lACsIhnbTbE","speakers":["abretaud"]}],"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"S00014","url":"/topics/admin/tutorials/interactive-tools/slides.html","topic_name":"admin","tutorial_name":"interactive-tools","dir":"topics/admin/tutorials/interactive-tools","symlink":null,"id":"admin/interactive-tools","ref_tutorials":["<p>Galaxy Interactive Tools (GxITs) are a method to run containerized tools that are interactive in nature. Interactive Tools typically run a persistent service accessed on a specific port and run until terminated by the user. One common example of such a tool is <a href=\"https://jupyter.org/\">Jupyter Notebook</a>. Galaxy Interactive Tools are similar in purpose to <a href=\"https://docs.galaxyproject.org/en/release_19.09/admin/special_topics/interactive_environments.html\">Galaxy Interactive Environments</a> (GIEs), but are implemented in a significantly different manner. Most notably, instead of directly invoking containers on the Galaxy server, dedicated Docker node, or as a Docker Swarm service (as is done for GIEs), Interactive Tools are submitted through Galaxy’s job management system and thus are scheduled the same as any other Galaxy tool - on a Slurm cluster, for instance. Galaxy Interactive Tools were introduced in Galaxy Release 19.09.</p>\n\n<blockquote class=\"warning\">\n  <warning-title>Evolving Topic, Not Updated for 23.0 + Gravity</warning-title>\n  <p>Galaxy Interactive Tools are a <strong>new feature</strong> and there are some rough edges. Work to improve the experience of deploying and using them is ongoing.</p>\n</blockquote>\n\n<blockquote class=\"warning\">\n  <warning-title>Before You Continue</warning-title>\n  <p>If you are <em>not</em> completing this tutorial as part of a <a href=\"https://github.com/galaxyproject/dagobah-training\">Galaxy Admin Training</a> course, <strong>you will need a wildcard DNS record for your Galaxy server and a method for obtaining a wildcard SSL certificate for your Galaxy server</strong>.</p>\n\n  <p><br /></p>\n\n  <p>Galaxy Interactive Tools require a <a href=\"https://en.wikipedia.org/wiki/Wildcard_certificate\">wildcard SSL certificate</a>. Because the <strong>Galaxy Installation with Ansible</strong> tutorial fetches <a href=\"https://letsencrypt.org/\">Let’s Encrypt</a> certificates, this tutorial fetches Let’s Encrypt wildcard certificates. However, this process is only valid for Galaxy Admin Training courses, because Let’s Encrypt wildcard certificates <a href=\"https://letsencrypt.org/docs/faq/\">can only be fetched using the DNS-01 challenge method</a>, which requires control of a <a href=\"https://en.wikipedia.org/wiki/Dynamic_DNS\">dynamic DNS</a> server (which we have preconfigured for use at training courses). Configuring your DNS service for dynamic updates is outside the scope of this tutorial, but it will show you how to request certificates using DNS-01, which can be adapted for your site.</p>\n\n  <p><br /></p>\n\n  <p>If you are using Let’s Encrypt, <a href=\"https://certbot.eff.org/docs/using.html#dns-plugins\">a list of available DNS plugins for Certbot</a> can be found in the Certbot documentation. If you are not using Let’s Encrypt, please consult your certificate vendor’s documentation for information on how to obtain a wildcard certificate. You will need a certificate with (at least) the <a href=\"https://en.wikipedia.org/wiki/Subject_Alternative_Name\">subject alternative name</a>s <code class=\"language-plaintext highlighter-rouge\">galaxy.example.org</code> and <code class=\"language-plaintext highlighter-rouge\">*.interactivetoolentrypoint.interactivetool.galaxy.example.org</code> (where <code class=\"language-plaintext highlighter-rouge\">galaxy.example.org</code> is the hostname of your Galaxy server).</p>\n\n  <p><br /></p>\n\n  <p>You will also need a wildcard DNS <code class=\"language-plaintext highlighter-rouge\">CNAME</code> record for <code class=\"language-plaintext highlighter-rouge\">*.interactivetoolentrypoint.interactivetool.galaxy.example.org</code>. You can verify that your Galaxy server has such a record using the <code class=\"language-plaintext highlighter-rouge\">host</code> or <code class=\"language-plaintext highlighter-rouge\">dig</code> command line tools like so:</p>\n\n  <div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">   $</span><span class=\"w\"> </span>host <span class=\"nt\">-t</span> cname foo.interactivetoolentrypoint.interactivetool.live.usegalaxy.eu\n<span class=\"go\">   foo.interactivetoolentrypoint.interactivetool.live.usegalaxy.eu is an alias for usegalaxy.eu.\n</span><span class=\"gp\">   $</span><span class=\"w\"> </span>host <span class=\"nt\">-t</span> cname bar.interactivetoolentrypoint.interactivetool.live.usegalaxy.eu\n<span class=\"go\">   bar.interactivetoolentrypoint.interactivetool.live.usegalaxy.eu is an alias for usegalaxy.eu.\n</span></code></pre></div>  </div>\n\n  <p>Please consult your DNS server software or cloud provider’s documentation for information on how to set up a wildcard record.</p>\n</blockquote>\n\n<p>There are two sections to this exercise. The first shows you how to use Ansible to setup and configure Galaxy Interactive Tools. The second shows you how to do everything manually. It is recommended that you use the Ansible method. The manual method is included here mainly for a more in depth understanding of what is happening.</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#configuring-galaxy-interactive-tools-using-ansible\" id=\"markdown-toc-configuring-galaxy-interactive-tools-using-ansible\">Configuring Galaxy Interactive Tools using Ansible</a>    <ol>\n      <li><a href=\"#installing-ansible-roles\" id=\"markdown-toc-installing-ansible-roles\">Installing Ansible Roles</a></li>\n      <li><a href=\"#installing-docker\" id=\"markdown-toc-installing-docker\">Installing Docker</a></li>\n      <li><a href=\"#installing-the-interactive-tools-proxy\" id=\"markdown-toc-installing-the-interactive-tools-proxy\">Installing the Interactive Tools Proxy</a></li>\n      <li><a href=\"#proxying-the-proxy\" id=\"markdown-toc-proxying-the-proxy\">Proxying the Proxy</a></li>\n      <li><a href=\"#getting-a-wildcard-ssl-certificate\" id=\"markdown-toc-getting-a-wildcard-ssl-certificate\">Getting a Wildcard SSL Certificate</a></li>\n      <li><a href=\"#enabling-interactive-tools-in-galaxy\" id=\"markdown-toc-enabling-interactive-tools-in-galaxy\">Enabling Interactive Tools in Galaxy</a></li>\n      <li><a href=\"#run-an-interactive-tool\" id=\"markdown-toc-run-an-interactive-tool\">Run an Interactive Tool</a></li>\n      <li><a href=\"#securing-interactive-tools\" id=\"markdown-toc-securing-interactive-tools\">Securing Interactive Tools</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#final-notes\" id=\"markdown-toc-final-notes\">Final Notes</a></li>\n</ol>\n\n</blockquote>\n\n<h1 id=\"configuring-galaxy-interactive-tools-using-ansible\">Configuring Galaxy Interactive Tools using Ansible</h1>\n\n<p>If the terms “Ansible,” “role,” and “playbook” mean nothing to you, please checkout <a href=\"/training-material/topics/admin/tutorials/ansible/slides.html\">the Ansible introduction slides</a> and <a href=\"/training-material/topics/admin/tutorials/ansible/tutorial.html\">the Ansible introduction tutorial</a>.</p>\n\n<blockquote class=\"warning\">\n  <warning-title>Uses Ansible!</warning-title>\n  <p>This section of the tutorial builds upon the work in the <a href=\"/training-material/topics/admin/tutorials/ansible-galaxy/tutorial.html\">Galaxy Installation with Ansible</a> tutorial, please ensure that you have completed that tutorial first.</p>\n</blockquote>\n\n<blockquote class=\"comment\">\n  <comment-title>Ansible Best Practices</comment-title>\n  <p>If you’ve set up your Galaxy server using the <a href=\"/training-material/topics/admin/tutorials/ansible-galaxy/tutorial.html\">Galaxy Installation with Ansible</a> tutorial, you will have created a <code class=\"language-plaintext highlighter-rouge\">galaxyservers</code> group in your inventory file, <code class=\"language-plaintext highlighter-rouge\">hosts</code>, and placed your variables in <code class=\"language-plaintext highlighter-rouge\">group_vars/galaxyservers.yml</code>. Although for the purposes of this tutorial, the Galaxy server and cluster node are one and the same, in a real world deployment they are very likely to be different hosts. We will continue to use the <code class=\"language-plaintext highlighter-rouge\">galaxyservers</code> group for simplicity, but in your own deployment you should consider creating an additional group for cluster nodes.</p>\n</blockquote>\n\n<h2 id=\"installing-ansible-roles\">Installing Ansible Roles</h2>\n\n<p>We will use several Ansible roles for this tutorial. In order to avoid repetetively adding them to <code class=\"language-plaintext highlighter-rouge\">requirements.yml</code> and installing them, we can simply install them all before getting started. Each role will be discussed in further detail later in the tutorial.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Installing New Ansible Roles</hands-on-title>\n\n  <ol>\n    <li>\n      <p>In your working directory, add the docker role to your <code class=\"language-plaintext highlighter-rouge\">requirements.yml</code>:</p>\n\n      <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"pi\">-</span> <span class=\"na\">src</span><span class=\"pi\">:</span> <span class=\"s\">geerlingguy.docker</span>\n  <span class=\"na\">version</span><span class=\"pi\">:</span> <span class=\"s\">6.1.0</span>\n<span class=\"pi\">-</span> <span class=\"na\">src</span><span class=\"pi\">:</span> <span class=\"s\">usegalaxy_eu.gie_proxy</span>\n  <span class=\"na\">version</span><span class=\"pi\">:</span> <span class=\"s\">0.0.2</span>\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Install the requirements with <code class=\"language-plaintext highlighter-rouge\">ansible-galaxy</code>:</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-galaxy role install -p roles -r requirements.yml\n</code></pre></div>      </div>\n    </li>\n  </ol>\n</blockquote>\n\n<h2 id=\"installing-docker\">Installing Docker</h2>\n\n<p>Currently, Galaxy Interactive Tools must be run in Docker containers. It may be possible to run them in Singularity or other types of containers in the future. Thus, the first step is ensuring that the <em>nodes</em> where Galaxy will run have Docker installed. Both the Galaxy Project and Galaxy Project EU organizations have their own docker roles, but these are not published to Ansible Galaxy because they were mostly developed for internal purposes. For now, we will use the <a href=\"https://galaxy.ansible.com/geerlingguy/docker\">docker role</a> by the prolific Ansible Galaxy publisher, <a href=\"https://galaxy.ansible.com/geerlingguy\">Jeff Geerling (geerlingguy)</a>. Have a look at the geerlingguy.docker <a href=\"https://github.com/geerlingguy/ansible-role-docker/blob/master/README.md\">README</a> and <a href=\"https://github.com/geerlingguy/ansible-role-docker/blob/master/defaults/main.yml\">defaults/main.yml</a> to get an understanding of what variables are used to control the role.</p>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <p>What variables might be relevant to using this role?</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <p>The <code class=\"language-plaintext highlighter-rouge\">docker_users</code> variable (a <em>list</em>) controls which users are able to interact with the Docker daemon, which our Galaxy user will need to do. Additionally, Docker Compose is configured by default, which we do not need, so it can be disabled with <code class=\"language-plaintext highlighter-rouge\">docker_install_compose: false</code>.</p>\n\n  </blockquote>\n\n</blockquote>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Installing Docker with Ansible</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Edit the group variables file, <code class=\"language-plaintext highlighter-rouge\">group_vars/galaxyservers.yml</code>:</p>\n\n      <p>The relevant variables to set for this role are:</p>\n\n      <table>\n        <thead>\n          <tr>\n            <th>Variable</th>\n            <th>Type</th>\n            <th>Description</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">docker_users</code></td>\n            <td>list of strings</td>\n            <td>List of users to be added to the <code class=\"language-plaintext highlighter-rouge\">docker</code> group</td>\n          </tr>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">docker_install_compose</code></td>\n            <td>boolean</td>\n            <td>Whether to install and configure Docker Compose</td>\n          </tr>\n        </tbody>\n      </table>\n\n      <p>Add the following lines to your <code class=\"language-plaintext highlighter-rouge\">group_vars/galaxyservers.yml</code> file:</p>\n\n      <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Interactive Tools</span>\n<span class=\"na\">docker_install_compose</span><span class=\"pi\">:</span> <span class=\"kc\">false</span>\n<span class=\"na\">docker_users</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">galaxy_user.name</span><span class=\"nv\"> </span><span class=\"s\">}}\"</span>\n</code></pre></div>      </div>\n\n      <blockquote class=\"question\">\n        <question-title></question-title>\n\n        <p>Why is <code class=\"language-plaintext highlighter-rouge\">\"{{ galaxy_user.name }}\"</code> specified instead of just the user <code class=\"language-plaintext highlighter-rouge\">galaxy</code>?</p>\n\n        <blockquote class=\"solution\">\n          <solution-title></solution-title>\n          <p>Duplicating values is never a good idea. If we needed to change the Galaxy user down the line or wanted to reuse this playbook on another host where the Galaxy username was different, we would have to change the value in multiple locations.</p>\n\n        </blockquote>\n\n      </blockquote>\n    </li>\n    <li>\n      <p>Add the new role to the list of roles under the <code class=\"language-plaintext highlighter-rouge\">roles</code> key in your playbook, <code class=\"language-plaintext highlighter-rouge\">galaxy.yml</code>:</p>\n\n      <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nn\">---</span>\n<span class=\"pi\">-</span> <span class=\"na\">hosts</span><span class=\"pi\">:</span> <span class=\"s\">galaxyservers</span>\n  <span class=\"na\">become</span><span class=\"pi\">:</span> <span class=\"kc\">true</span>\n  <span class=\"na\">roles</span><span class=\"pi\">:</span>\n    <span class=\"c1\"># ... existing roles ...</span>\n    <span class=\"pi\">-</span> <span class=\"s\">geerlingguy.docker</span>\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Run the playbook:</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook galaxy.yml\n</code></pre></div>      </div>\n    </li>\n  </ol>\n</blockquote>\n\n<p>Congratulations, you’ve set up Docker. Verify the installation using the <code class=\"language-plaintext highlighter-rouge\">docker info</code> command (but keep in mind: what users did we authorize to interact with Docker?).</p>\n\n<h2 id=\"installing-the-interactive-tools-proxy\">Installing the Interactive Tools Proxy</h2>\n\n<p>When an Interactive Tool’s Docker container starts, it will be assigned a random port. In order to connect clients to the Interactive Tool, Galaxy needs to determine this port (and the node on which the tool is running) and configure a <em>proxy</em> from Galaxy to the GxIT’s host and port. Consider the following example of running the Jupyter Notebook Interactive Tool, shown in Figure 1 below:</p>\n\n<ul>\n  <li>nginx listens for requests from the client on <strong>port 443</strong> (https)</li>\n  <li>Requests for Galaxy are delivered from nginx to Galaxy over a UNIX domain socket</li>\n  <li>Requests for Interactive Tools are delivered from nginx to the Interactive Tools Proxy over (by default) <strong>port 8000</strong> (http)\n    <ul>\n      <li>GxIT http requests are forwarded by the proxy to Docker on the node on the container’s (randomly assigned) <strong>port 32768</strong></li>\n      <li>GxIT http requests are again forwarded by Docker to Jupyter on its in-container “published” <strong>port 8888</strong></li>\n    </ul>\n  </li>\n</ul>\n\n<figure id=\"figure-1\" style=\"max-width: 90%;\"><img src=\"../../images/interactive-tools/gxit-proxy-diagram.png\" alt=\"Galaxy Interactive Tools Proxy Diagram. \" width=\"565\" height=\"470\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/interactive-tools/gxit-proxy-diagram.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 1</strong>:</span> Galaxy Interactive Tools Proxy Diagram</figcaption></figure>\n\n<p>As you can see, the client only ever speaks to nginx on the Galaxy server running on the standard https port (443), never directly to the interactive tool (which may be running on a node that does not even have a public IP address). The mapping of GxIT invocation and its corresponding host/port is kept in a SQLite database known as the <em>Interactive Tools Session Map</em>, and the path to this database is important, since both Galaxy and the proxy need access to it.</p>\n\n<p>The GIE Proxy is written in <a href=\"https://nodejs.org/\">Node.js</a> and requires some configuration. Thankfully there is an Ansible role, <a href=\"https://galaxy.ansible.com/usegalaxy_eu/gie_proxy\">usegalaxy_eu.gie_proxy</a>, that can install the proxy and its dependencies, and configure it for you. As usual, have a look through the <a href=\"https://github.com/usegalaxy-eu/ansible-gie-proxy/blob/master/README.md\">README</a> and <a href=\"https://github.com/usegalaxy-eu/ansible-gie-proxy/blob/master/defaults/main.yml\">defaults</a> to investigate which variables you might need to set before continuing.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Installing the Proxy with Ansible</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Edit the group variables file, <code class=\"language-plaintext highlighter-rouge\">group_vars/galaxyservers.yml</code>:</p>\n\n      <p>The relevant variables to set for this role are:</p>\n\n      <table>\n        <thead>\n          <tr>\n            <th>Variable</th>\n            <th>Type</th>\n            <th>Description</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">gie_proxy_dir</code></td>\n            <td>path (string)</td>\n            <td>Path of directory into which the proxy application will be installed</td>\n          </tr>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">gie_proxy_git_version</code></td>\n            <td>string</td>\n            <td>Git reference to clone</td>\n          </tr>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">gie_proxy_setup_nodejs</code></td>\n            <td>string</td>\n            <td>Whether to install Node.js, options are <code class=\"language-plaintext highlighter-rouge\">package</code> and <code class=\"language-plaintext highlighter-rouge\">nodeenv</code></td>\n          </tr>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">gie_proxy_virtualenv_command</code></td>\n            <td>string</td>\n            <td>Command to create virtualenv when using <code class=\"language-plaintext highlighter-rouge\">nodeenv</code> method</td>\n          </tr>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">gie_proxy_nodejs_version</code></td>\n            <td>string</td>\n            <td>Version of Node.js to install if using <code class=\"language-plaintext highlighter-rouge\">nodeenv</code> method</td>\n          </tr>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">gie_proxy_virtualenv</code></td>\n            <td>path (string)</td>\n            <td>Path of virtualenv into which nodeenv/Node.js/npm will be installed</td>\n          </tr>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">gie_proxy_setup_service</code></td>\n            <td>string</td>\n            <td>Whether to configure the proxy as a service, only option is <code class=\"language-plaintext highlighter-rouge\">systemd</code></td>\n          </tr>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">gie_proxy_sessions_path</code></td>\n            <td>path (string)</td>\n            <td>Path of Interactive Tools sessions map</td>\n          </tr>\n        </tbody>\n      </table>\n\n      <p>Add the following lines to your <code class=\"language-plaintext highlighter-rouge\">group_vars/galaxyservers.yml</code> file:</p>\n\n      <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">gie_proxy_dir</span><span class=\"pi\">:</span> <span class=\"s\">/srv/galaxy/gie-proxy/proxy</span>\n<span class=\"na\">gie_proxy_git_version</span><span class=\"pi\">:</span> <span class=\"s\">main</span>\n<span class=\"na\">gie_proxy_setup_nodejs</span><span class=\"pi\">:</span> <span class=\"s\">nodeenv</span>\n<span class=\"na\">gie_proxy_virtualenv_command</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">pip_virtualenv_command</span><span class=\"nv\"> </span><span class=\"s\">}}\"</span>\n<span class=\"na\">gie_proxy_nodejs_version</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">10.13.0\"</span>\n<span class=\"na\">gie_proxy_virtualenv</span><span class=\"pi\">:</span> <span class=\"s\">/srv/galaxy/gie-proxy/venv</span>\n<span class=\"na\">gie_proxy_setup_service</span><span class=\"pi\">:</span> <span class=\"s\">systemd</span>\n<span class=\"na\">gie_proxy_sessions_path</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">galaxy_mutable_data_dir</span><span class=\"nv\"> </span><span class=\"s\">}}/interactivetools_map.sqlite\"</span>\n</code></pre></div>      </div>\n\n      <p>We have chosen to install Node.js using <a href=\"https://github.com/ekalinin/nodeenv\">nodeenv</a> because the version in the training image’s package manager is fairly old.</p>\n    </li>\n    <li>\n      <p>Add the new role to <code class=\"language-plaintext highlighter-rouge\">galaxy.yml</code>:</p>\n\n      <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"pi\">-</span> <span class=\"na\">hosts</span><span class=\"pi\">:</span> <span class=\"s\">galaxyservers</span>\n  <span class=\"na\">become</span><span class=\"pi\">:</span> <span class=\"kc\">true</span>\n  <span class=\"na\">roles</span><span class=\"pi\">:</span>\n    <span class=\"c1\"># ... existing roles ...</span>\n    <span class=\"pi\">-</span> <span class=\"s\">geerlingguy.docker</span>\n    <span class=\"pi\">-</span> <span class=\"s\">usegalaxy_eu.gie_proxy</span>\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Run the playbook:</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook galaxy.yml\n</code></pre></div>      </div>\n    </li>\n  </ol>\n\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <p>What did running the playbook change?</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <ol>\n      <li>A new Python venv was created at <code class=\"language-plaintext highlighter-rouge\">/srv/galaxy/gie-proxy/venv</code></li>\n      <li>Node.js version 10.13.0 was installed in to the venv</li>\n      <li>The proxy was cloned to <code class=\"language-plaintext highlighter-rouge\">/srv/galaxy/gie-proxy/proxy</code></li>\n      <li>The proxy’s Node dependencies were installed to <code class=\"language-plaintext highlighter-rouge\">/srv/galaxy/gie-proxy/proxy/node_modules</code> using the venv’s <code class=\"language-plaintext highlighter-rouge\">npm</code></li>\n      <li>A systemd service unit was installed at <code class=\"language-plaintext highlighter-rouge\">/etc/systemd/system/galaxy-gie-proxy.service</code></li>\n      <li>The systemd daemon was reloaded to read this new service unit</li>\n      <li>The service was set to start on boot and started</li>\n    </ol>\n\n  </blockquote>\n\n</blockquote>\n\n<p>Because the proxy runs as a systemd service, you can inspect the log of the service using <code class=\"language-plaintext highlighter-rouge\">journalctl</code>. The service name is <code class=\"language-plaintext highlighter-rouge\">galaxy-gie-proxy</code>:</p>\n\n<div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>journalctl <span class=\"nt\">-eu</span> galaxy-gie-proxy\n<span class=\"go\">Feb 14 17:38:49 gcc-4 systemd[1]: Started Galaxy IE/IT Proxy.\nFeb 14 17:38:49 gcc-4 node[3679]: Watching path /srv/galaxy/var/interactivetools_map.sqlite\n</span></code></pre></div></div>\n\n<blockquote class=\"comment\">\n  <comment-title>Note</comment-title>\n\n  <p>You can ignore errors about failing to read the sessions map file for now - Galaxy will create it when it’s needed.</p>\n\n</blockquote>\n\n<h2 id=\"proxying-the-proxy\">Proxying the Proxy</h2>\n\n<p>As explained in the previous section, we will proxy the Interactive Tools Proxy with nginx so that it can serve requests on the standard HTTPS port, 443. Because we’ve configured nginx with Ansible, this is relatively simple.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Installing the Proxy with Ansible</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Edit the group variables file, <code class=\"language-plaintext highlighter-rouge\">group_vars/galaxyservers.yml</code> and add a new item to the <strong>existing</strong> <code class=\"language-plaintext highlighter-rouge\">nginx_ssl_servers</code> so it matches:</p>\n\n      <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">nginx_ssl_servers</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"s\">galaxy</span>\n  <span class=\"pi\">-</span> <span class=\"s\">galaxy-gie-proxy</span>\n</code></pre></div>      </div>\n\n      <p>The nginx configuration <code class=\"language-plaintext highlighter-rouge\">galaxy-gie-proxy</code> doesn’t exist yet, but we’ll create it in a moment.</p>\n    </li>\n    <li>\n      <p>Create <code class=\"language-plaintext highlighter-rouge\">templates/nginx/galaxy-gie-proxy.j2</code> with the following contents:</p>\n\n      <div class=\"language-nginx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">server</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># Listen on port 443</span>\n    <span class=\"kn\">listen</span>       <span class=\"s\">*:443</span> <span class=\"s\">ssl</span><span class=\"p\">;</span>\n    <span class=\"c1\"># Match all requests for the interactive tools subdomain</span>\n    <span class=\"kn\">server_name</span>  <span class=\"s\">*.interactivetool.</span><span class=\"p\">{</span><span class=\"err\">{</span> <span class=\"kn\">inventory_hostname</span> <span class=\"err\">}}</span><span class=\"p\">;</span>\n\n    <span class=\"c1\"># Our log files will go here.</span>\n    <span class=\"kn\">access_log</span>  <span class=\"s\">syslog:server=unix:/dev/log</span><span class=\"p\">;</span>\n    <span class=\"kn\">error_log</span>   <span class=\"s\">syslog:server=unix:/dev/log</span><span class=\"p\">;</span>\n\n    <span class=\"c1\"># Proxy all requests to the GIE Proxy application</span>\n    <span class=\"kn\">location</span> <span class=\"n\">/</span> <span class=\"p\">{</span>\n        <span class=\"kn\">proxy_redirect</span> <span class=\"no\">off</span><span class=\"p\">;</span>\n        <span class=\"kn\">proxy_http_version</span> <span class=\"mi\">1</span><span class=\"s\">.1</span><span class=\"p\">;</span>\n        <span class=\"kn\">proxy_set_header</span> <span class=\"s\">Host</span> <span class=\"nv\">$host</span><span class=\"p\">;</span>\n        <span class=\"kn\">proxy_set_header</span> <span class=\"s\">X-Real-IP</span> <span class=\"nv\">$remote_addr</span><span class=\"p\">;</span>\n        <span class=\"kn\">proxy_set_header</span> <span class=\"s\">Upgrade</span> <span class=\"nv\">$http_upgrade</span><span class=\"p\">;</span>\n        <span class=\"kn\">proxy_set_header</span> <span class=\"s\">Connection</span> <span class=\"s\">\"upgrade\"</span><span class=\"p\">;</span>\n        <span class=\"kn\">proxy_pass</span> <span class=\"s\">http://localhost:</span><span class=\"p\">{</span><span class=\"err\">{</span> <span class=\"kn\">gie_proxy_port</span> <span class=\"err\">}}</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Run the playbook:</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook galaxy.yml\n</code></pre></div>      </div>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"getting-a-wildcard-ssl-certificate\">Getting a Wildcard SSL Certificate</h2>\n\n<p>During the <a href=\"/training-material/topics/admin/tutorials/ansible-galaxy/tutorial.html\">Galaxy Installation with Ansible</a> tutorial, we acquired an SSL certificate for our Galaxy server from <a href=\"https://letsencrypt.org/\">Let’s Encrypt</a>. This certificate was issued for the hostname of your Galaxy server (e.g. <code class=\"language-plaintext highlighter-rouge\">galaxy.example.org</code>). SSL certificates are valid <em>only for the name to which they were issued</em>. This presents a problem for us due to the way that Galaxy Interactive Tools work.</p>\n\n<p>In order to ensure each Interactive Tool’s cookies are unique, and to provide each tool with a unique entry point, they are served from a subdomain of your Galaxy server (e.g. <code class=\"language-plaintext highlighter-rouge\">&lt;unique-id&gt;.interactivetoolentrypoint.interactivetool.galaxy.example.org</code>). Your SSL cert is not valid for this subdomain. Further, in order to support the random <code class=\"language-plaintext highlighter-rouge\">&lt;unique-id&gt;</code> in the hostname, we need a <em>wildcard certificate</em> for <code class=\"language-plaintext highlighter-rouge\">*.interactivetoolentrypoint.interactivetool.galaxy.example.org</code>.</p>\n\n<p>This process is highly dependent on your site; specifically, your SSL certificate vendor, and your DNS server software or cloud provider.</p>\n\n<p>Let’s Encrypt, the SSL certificate vendor we use in our tutorials, <a href=\"https://letsencrypt.org/docs/faq/\">can only generate wildcard certificates using the DNS-01 challenge method</a>, which works by issuing a <a href=\"https://en.wikipedia.org/wiki/Dynamic_DNS\">dynamic DNS</a> update to set the requested domain’s <code class=\"language-plaintext highlighter-rouge\">TXT</code> record.</p>\n\n<p>If you are completing this tutorial as part of a <a href=\"https://github.com/galaxyproject/dagobah-training\">Galaxy Admin Training</a> course, we might have precreated a dynamic DNS server that you will use for this step. The <em>TSIG key</em> that allows you to perform dynamic DNS updates will be provided to you. Your instructor will also tell you which option to follow (1 or 2), depending on the DNS provider that was chosen for this course.</p>\n\n<p>As we use Let’s Encrypt in staging mode, the wildcard certificates generated with either option 1 or 2 will still be invalid, and you will still see a warning in your web browser when accessing an Interactive Tool. If this warning is not a problem for you, you can just skip this section of the tutorial, and move on to “Enabling Interactive Tools in Galaxy”.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Requesting a Wildcard Certificate with Certbot using Ansible - Option 1 (rfc2136)</hands-on-title>\n\n  <p>This method uses a DNS provider hosted by the Galaxy Project.</p>\n\n  <ol>\n    <li>\n      <p>Edit the group variables file, <code class=\"language-plaintext highlighter-rouge\">group_vars/galaxyservers.yml</code>:</p>\n\n      <p>The relevant variables to set for this role are:</p>\n\n      <table>\n        <thead>\n          <tr>\n            <th>Variable</th>\n            <th>Type</th>\n            <th>Description</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">certbot_domains</code></td>\n            <td>list</td>\n            <td>List of domains to include as subject alternative names (the first will also be the certificate’s <em>common name</em>)</td>\n          </tr>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">certbot_dns_provider</code></td>\n            <td>string</td>\n            <td>Name of <a href=\"https://certbot.eff.org/docs/using.html#dns-plugins\">Certbot DNS plugin</a> to use</td>\n          </tr>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">certbot_dns_credentials</code></td>\n            <td>dictionary</td>\n            <td>Plugin-specific credentials for performing dynamic DNS updates</td>\n          </tr>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">certbot_expand</code></td>\n            <td>boolean</td>\n            <td>Whether to “expand” an existing certificate (add new domain names to it)</td>\n          </tr>\n        </tbody>\n      </table>\n\n      <ul>\n        <li>\n          <p>Add a new item to the <strong>existing</strong> <code class=\"language-plaintext highlighter-rouge\">certbot_domains</code> list so it matches:</p>\n\n          <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">certbot_domains</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">inventory_hostname</span><span class=\"nv\"> </span><span class=\"s\">}}\"</span>\n  <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">*.interactivetoolentrypoint.interactivetool.{{</span><span class=\"nv\"> </span><span class=\"s\">inventory_hostname</span><span class=\"nv\"> </span><span class=\"s\">}}\"</span>\n</code></pre></div>          </div>\n        </li>\n        <li>\n          <p>Comment out the existing <code class=\"language-plaintext highlighter-rouge\">certbot_auth_method</code> like so:</p>\n\n          <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#certbot_auth_method: --webroot</span>\n</code></pre></div>          </div>\n\n          <p>Although this is not explicitly required (setting <code class=\"language-plaintext highlighter-rouge\">certbot_dns_provider</code> as we do overrides this setting), doing so is less confusing in the future, since it makes it clear that the “webroot” method for Let’s Encrypt WEB-01 challenges is no longer in use for this server.</p>\n        </li>\n        <li>\n          <p>Add the following lines to your <code class=\"language-plaintext highlighter-rouge\">group_vars/galaxyservers.yml</code> file:</p>\n\n          <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">certbot_dns_provider</span><span class=\"pi\">:</span> <span class=\"s\">rfc2136</span>\n<span class=\"na\">certbot_dns_credentials</span><span class=\"pi\">:</span>\n  <span class=\"na\">server</span><span class=\"pi\">:</span> <span class=\"s\">ns-training.galaxyproject.org</span>\n  <span class=\"na\">port</span><span class=\"pi\">:</span> <span class=\"m\">53</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">certbot-training.</span>\n  <span class=\"na\">secret</span><span class=\"pi\">:</span> <span class=\"s\">&lt;SECRET PROVIDED BY INSTRUCTOR&gt;</span>\n  <span class=\"na\">algorithm</span><span class=\"pi\">:</span> <span class=\"s\">HMAC-SHA512</span>\n</code></pre></div>          </div>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <p>Run the playbook <strong>with <code class=\"language-plaintext highlighter-rouge\">certbot_expand</code></strong>:</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook galaxy.yml -e certbot_expand=true\n</code></pre></div>      </div>\n\n      <blockquote class=\"question\">\n        <question-title></question-title>\n\n        <p>What is the <code class=\"language-plaintext highlighter-rouge\">-e</code> flag to <code class=\"language-plaintext highlighter-rouge\">ansible-playbook</code> and why did we use it?</p>\n\n        <blockquote class=\"solution\">\n          <solution-title></solution-title>\n\n          <p>As per <code class=\"language-plaintext highlighter-rouge\">ansible-playbook --help</code>:</p>\n\n          <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  -e EXTRA_VARS, --extra-vars EXTRA_VARS\n                        set additional variables as key=value or YAML/JSON, if\n                        filename prepend with @\n</code></pre></div>          </div>\n\n          <p>We used this flag because <code class=\"language-plaintext highlighter-rouge\">certbot_expand</code> only needs to be set <em>once</em>, when we are adding a new domain to the certificate. It should not be enabled on subsequent runs of the playbook, or else we would request a new certificate on each run! Thus, it does not make sense to add it to a vars file.</p>\n\n        </blockquote>\n\n      </blockquote>\n\n      <p>Be patient! The certificate request step can take time due to the time allowed for DNS propagation to occur.</p>\n    </li>\n  </ol>\n\n</blockquote>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Requesting a Wildcard Certificate with Certbot using Ansible - Option 2 (route53)</hands-on-title>\n\n  <p>This method uses route53, the Amazon Web Services DNS provider. To manage connection to AWS, we will first install a specific role.</p>\n\n  <ol>\n    <li>\n      <p>In your working directory, add the aws_cli role to your <code class=\"language-plaintext highlighter-rouge\">requirements.yml</code>:</p>\n\n      <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"pi\">-</span> <span class=\"na\">src</span><span class=\"pi\">:</span> <span class=\"s\">usegalaxy_eu.aws_cli</span>\n  <span class=\"na\">version</span><span class=\"pi\">:</span> <span class=\"s\">0.0.1</span>\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Install the requirements with <code class=\"language-plaintext highlighter-rouge\">ansible-galaxy</code>:</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-galaxy role install -p roles -r requirements.yml\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Open <code class=\"language-plaintext highlighter-rouge\">galaxy.yml</code> with your text editor to add the role <code class=\"language-plaintext highlighter-rouge\">usegalaxy_eu.aws_cli</code> just before the nginx role:</p>\n\n      <div class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gh\">diff --git a/galaxy.yml b/galaxy.yml\n</span><span class=\"gd\">--- a/galaxy.yml\n</span><span class=\"gi\">+++ b/galaxy.yml\n</span><span class=\"p\">@@ -21,6 +21,7 @@</span>\n       become: true\n       become_user: galaxy\n     - usegalaxy_eu.galaxy_systemd\n<span class=\"gi\">+    - usegalaxy_eu.aws_cli\n</span>     - galaxyproject.nginx\n     - geerlingguy.docker\n     - usegalaxy_eu.gie_proxy\n</code></pre></div>      </div>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-how-to-read-a-diff\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-how-to-read-a-diff\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: How to read a Diff</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <p>If you haven’t worked with diffs before, this can be something quite new or different.</p>   <p>If we have two files, let’s say a grocery list, in two files. We’ll call them ‘a’ and ‘b’.</p>   <blockquote class=\"code-2col\">   <blockquote class=\"code-in\">     <code-in-title>Old</code-in-title>     <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ cat old<br />🍎<br />🍐<br />🍊<br />🍋<br />🍒<br />🥑<br /></code></pre></div>    </div>   </blockquote>   <blockquote class=\"code-out\">     <code-out-title>New</code-out-title>     <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ cat new<br />🍎<br />🍐<br />🍊<br />🍋<br />🍍<br />🥑<br /></code></pre></div>    </div>   </blockquote> </blockquote>   <p>We can see that they have some different entries. We’ve removed 🍒 because they’re awful, and replaced them with an 🍍</p>   <p>Diff lets us compare these files</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>diff old new<br />5c5<br />&lt; 🍒<br /><span class=\"nt\">---</span><br /><span class=\"o\">&gt;</span> 🍍<br /></code></pre></div></div>   <p>Here we see that 🍒 is only in a, and 🍍 is only in b. But otherwise the files are identical.</p>   <p>There are a couple different formats to diffs, one is the ‘unified diff’</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>diff <span class=\"nt\">-U2</span> old new<br /><span class=\"nt\">---</span> old\t2022-02-16 14:06:19.697132568 +0100<br />+++ new\t2022-02-16 14:06:36.340962616 +0100<br />@@ <span class=\"nt\">-3</span>,4 +3,4 @@<br /> 🍊<br /> 🍋<br />-🍒<br />+🍍<br /> 🥑<br /></code></pre></div></div>   <p>This is basically what you see in the training materials which gives you a lot of context about the changes:</p>   <ul>   <li><code class=\"language-plaintext highlighter-rouge\">--- old</code> is the ‘old’ file in our view</li>   <li><code class=\"language-plaintext highlighter-rouge\">+++ new</code> is the ‘new’ file</li>   <li>@@ these lines tell us where the change occurs and how many lines are added or removed.</li>   <li>Lines starting with a - are removed from our ‘new’ file</li>   <li>Lines with a + have been added.</li> </ul>   <p>So when you go to apply these diffs to your files in the training:</p>   <ol>   <li>Ignore the header</li>   <li>Remove lines starting with - from your file</li>   <li>Add lines starting with + to your file</li> </ol>   <p>The other lines (🍊/🍋 and 🥑) above just provide “context”, they help you know where a change belongs in a file, but <strong>should not be edited</strong> when you’re making the above change. Given the above diff, you would find a line with a 🍒, and replace it with a 🍍</p>   <h4 id=\"added--removed-lines\">Added &amp; Removed Lines</h4>   <p>Removals are very easy to spot, we just have removed lines</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">---</span> old\t2022-02-16 14:06:19.697132568 +0100<br />+++ new\t2022-02-16 14:10:14.370722802 +0100<br />@@ <span class=\"nt\">-4</span>,3 +4,2 @@<br /> 🍋<br /> 🍒<br />-🥑<br /></code></pre></div></div>   <p>And additions likewise are very easy, just add a new line, between the other lines in your file.</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">---</span> old\t2022-02-16 14:06:19.697132568 +0100<br />+++ new\t2022-02-16 14:11:11.422135393 +0100<br />@@ <span class=\"nt\">-1</span>,3 +1,4 @@<br /> 🍎<br />+🍍<br /> 🍐<br /> 🍊<br /></code></pre></div></div>   <h4 id=\"completely-new-files\">Completely new files</h4>   <p>Completely new files look a bit different, there the “old” file is <code class=\"language-plaintext highlighter-rouge\">/dev/null</code>, the empty file in a Linux machine.</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>diff <span class=\"nt\">-U2</span> /dev/null old<br /><span class=\"nt\">---</span> /dev/null\t2022-02-15 11:47:16.100000270 +0100<br />+++ old\t2022-02-16 14:06:19.697132568 +0100<br />@@ <span class=\"nt\">-0</span>,0 +1,6 @@<br />+🍎<br />+🍐<br />+🍊<br />+🍋<br />+🍒<br />+🥑<br /></code></pre></div></div>   <p>And removed files are similar, except with the new file being /dev/null</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">---</span> old\t2022-02-16 14:06:19.697132568 +0100<br />+++ /dev/null\t2022-02-15 11:47:16.100000270 +0100<br />@@ <span class=\"nt\">-1</span>,6 +0,0 @@<br />-🍎<br />-🍐<br />-🍊<br />-🍋<br />-🍒<br />-🥑<br /></code></pre></div></div> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n    <li>\n      <p>Edit the group variables file, <code class=\"language-plaintext highlighter-rouge\">group_vars/galaxyservers.yml</code>:</p>\n\n      <p>The relevant variables to set for this role are:</p>\n\n      <table>\n        <thead>\n          <tr>\n            <th>Variable</th>\n            <th>Type</th>\n            <th>Description</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">certbot_domains</code></td>\n            <td>list</td>\n            <td>List of domains to include as subject alternative names (the first will also be the certificate’s <em>common name</em>)</td>\n          </tr>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">certbot_dns_provider</code></td>\n            <td>string</td>\n            <td>Name of <a href=\"https://certbot.eff.org/docs/using.html#dns-plugins\">Certbot DNS plugin</a> to use</td>\n          </tr>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">certbot_dns_credentials</code></td>\n            <td>dictionary</td>\n            <td>Plugin-specific credentials for performing dynamic DNS updates</td>\n          </tr>\n          <tr>\n            <td><code class=\"language-plaintext highlighter-rouge\">certbot_expand</code></td>\n            <td>boolean</td>\n            <td>Whether to “expand” an existing certificate (add new domain names to it)</td>\n          </tr>\n        </tbody>\n      </table>\n\n      <ul>\n        <li>\n          <p>Add a new item to the <strong>existing</strong> <code class=\"language-plaintext highlighter-rouge\">certbot_domains</code> list so it matches:</p>\n\n          <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">certbot_domains</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">inventory_hostname</span><span class=\"nv\"> </span><span class=\"s\">}}\"</span>\n  <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">*.interactivetoolentrypoint.interactivetool.{{</span><span class=\"nv\"> </span><span class=\"s\">inventory_hostname</span><span class=\"nv\"> </span><span class=\"s\">}}\"</span>\n</code></pre></div>          </div>\n        </li>\n        <li>\n          <p>Comment out the existing <code class=\"language-plaintext highlighter-rouge\">certbot_auth_method</code> like so:</p>\n\n          <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#certbot_auth_method: --webroot</span>\n</code></pre></div>          </div>\n\n          <p>Although this is not explicitly required (setting <code class=\"language-plaintext highlighter-rouge\">certbot_dns_provider</code> as we do overrides this setting), doing so is less confusing in the future, since it makes it clear that the “webroot” method for Let’s Encrypt WEB-01 challenges is no longer in use for this server.</p>\n        </li>\n        <li>\n          <p>Add the following lines to your <code class=\"language-plaintext highlighter-rouge\">group_vars/galaxyservers.yml</code> file:</p>\n\n          <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">certbot_dns_provider</span><span class=\"pi\">:</span> <span class=\"s\">route53</span>\n<span class=\"na\">aws_cli_credentials</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"na\">access_key</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">&lt;SECRET</span><span class=\"nv\"> </span><span class=\"s\">PROVIDED</span><span class=\"nv\"> </span><span class=\"s\">BY</span><span class=\"nv\"> </span><span class=\"s\">INSTRUCTOR&gt;\"</span>\n    <span class=\"na\">secret_key</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">&lt;SECRET</span><span class=\"nv\"> </span><span class=\"s\">PROVIDED</span><span class=\"nv\"> </span><span class=\"s\">BY</span><span class=\"nv\"> </span><span class=\"s\">INSTRUCTOR&gt;\"</span>\n    <span class=\"na\">homedir</span><span class=\"pi\">:</span> <span class=\"s\">/root</span>\n    <span class=\"na\">owner</span><span class=\"pi\">:</span> <span class=\"s\">root</span>\n    <span class=\"na\">group</span><span class=\"pi\">:</span> <span class=\"s\">root</span>\n</code></pre></div>          </div>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <p>Run the playbook <strong>with <code class=\"language-plaintext highlighter-rouge\">certbot_expand</code></strong>:</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook galaxy.yml -e certbot_expand=true\n</code></pre></div>      </div>\n\n      <blockquote class=\"question\">\n        <question-title></question-title>\n\n        <p>What is the <code class=\"language-plaintext highlighter-rouge\">-e</code> flag to <code class=\"language-plaintext highlighter-rouge\">ansible-playbook</code> and why did we use it?</p>\n\n        <blockquote class=\"solution\">\n          <solution-title></solution-title>\n\n          <p>As per <code class=\"language-plaintext highlighter-rouge\">ansible-playbook --help</code>:</p>\n\n          <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  -e EXTRA_VARS, --extra-vars EXTRA_VARS\n                        set additional variables as key=value or YAML/JSON, if\n                        filename prepend with @\n</code></pre></div>          </div>\n\n          <p>We used this flag because <code class=\"language-plaintext highlighter-rouge\">certbot_expand</code> only needs to be set <em>once</em>, when we are adding a new domain to the certificate. It should not be enabled on subsequent runs of the playbook, or else we would request a new certificate on each run! Thus, it does not make sense to add it to a vars file.</p>\n\n        </blockquote>\n\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>You can verify that your certificate has been expanded using your browser’s developer tools:</p>\n\n<figure id=\"figure-2\" style=\"max-width: 90%;\"><img src=\"../../images/interactive-tools/wildcard-cert.png\" alt=\"Wildcard Certificate Dialog. \" width=\"2084\" height=\"942\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/interactive-tools/wildcard-cert.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 2</strong>:</span> Wildcard Certificate Dialog</figcaption></figure>\n\n<h2 id=\"enabling-interactive-tools-in-galaxy\">Enabling Interactive Tools in Galaxy</h2>\n\n<p>A few Interactive Tool wrappers are provided with Galaxy, but they are <a href=\"https://github.com/galaxyproject/galaxy/blob/9d788cb144a18570e7e5e948ac1f7bc04fec4e75/lib/galaxy/config/sample/tool_conf.xml.sample#L126\">commented out in Galaxy’s default tool config file</a>. As a result, we need to instruct the <a href=\"https://github.com/galaxyproject/ansible-galaxy\">galaxyproject.galaxy role</a> to install a tool panel configuration file containing at least one of these tools in order to try them out. For the purposes of this tutorial, a good choice is the <a href=\"https://ethercalc.net/\">EtherCalc</a> GxIT, because it has a relatively small <a href=\"https://hub.docker.com/r/shiltemann/ethercalc-galaxy-ie\">Docker image</a>.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Enabling Interactive Tools in Galaxy</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Rather than modifying the default tool configuration file, we’ll add a new one that only references the Interactive Tools. This way, the default set of tools will still load without us having to incorporate the entire default tool config into our playbook.</p>\n\n      <p>If the folder does not exist, create <code class=\"language-plaintext highlighter-rouge\">templates/galaxy/config</code> next to your <code class=\"language-plaintext highlighter-rouge\">galaxy.yml</code> (<code class=\"language-plaintext highlighter-rouge\">mkdir -p templates/galaxy/config/</code>)</p>\n\n      <p>Create <code class=\"language-plaintext highlighter-rouge\">templates/galaxy/config/tool_conf_interactive.xml.j2</code> with the following contents:</p>\n\n      <div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;toolbox</span> <span class=\"na\">monitor=</span><span class=\"s\">\"true\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;section</span> <span class=\"na\">id=</span><span class=\"s\">\"interactivetools\"</span> <span class=\"na\">name=</span><span class=\"s\">\"Interactive Tools\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;tool</span> <span class=\"na\">file=</span><span class=\"s\">\"interactive/interactivetool_ethercalc.xml\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/section&gt;</span>\n<span class=\"nt\">&lt;/toolbox&gt;</span>\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>We need to modify <code class=\"language-plaintext highlighter-rouge\">job_conf.xml</code> to instruct Galaxy on how to run Interactive Tools (and specifically, how to run them in Docker). We will begin with a basic job conf:</p>\n\n      <p>Create <code class=\"language-plaintext highlighter-rouge\">templates/galaxy/config/job_conf.xml.j2</code> with the following contents:</p>\n\n      <div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;job_conf&gt;</span>\n    <span class=\"nt\">&lt;plugins</span> <span class=\"na\">workers=</span><span class=\"s\">\"4\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;plugin</span> <span class=\"na\">id=</span><span class=\"s\">\"local\"</span> <span class=\"na\">type=</span><span class=\"s\">\"runner\"</span> <span class=\"na\">load=</span><span class=\"s\">\"galaxy.jobs.runners.local:LocalJobRunner\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/plugins&gt;</span>\n    <span class=\"nt\">&lt;destinations&gt;</span>\n        <span class=\"nt\">&lt;destination</span> <span class=\"na\">id=</span><span class=\"s\">\"local\"</span> <span class=\"na\">runner=</span><span class=\"s\">\"local\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/destinations&gt;</span>\n<span class=\"nt\">&lt;/job_conf&gt;</span>\n</code></pre></div>      </div>\n\n      <blockquote class=\"comment\">\n        <comment-title>Note</comment-title>\n        <p>Depending on the order in which you are completing this tutorial in relation to other tutorials, you may have already created the <code class=\"language-plaintext highlighter-rouge\">job_conf.xml.j2</code> file, as well as defined <code class=\"language-plaintext highlighter-rouge\">galaxy_config_templates</code> and set the <code class=\"language-plaintext highlighter-rouge\">job_config_file</code> option in <code class=\"language-plaintext highlighter-rouge\">galaxy_config</code> (step 4). If this is the case, be sure to <strong>merge the changes in this section with your existing playbook</strong>.</p>\n      </blockquote>\n    </li>\n    <li>\n      <p>Next, we need to configure the interactive tools destination. First, we explicitly set the destination to the default <code class=\"language-plaintext highlighter-rouge\">local</code> destination since there will now be two destinations defined. Then we add a destination for submitting jobs as docker containers using the <a href=\"https://github.com/galaxyproject/galaxy/blob/6622ad1acb91866febb3d2f229de7cfb8af3a9f6/lib/galaxy/config/sample/job_conf.xml.sample_advanced#L410\">advanced sample job configuration</a> as a guide. Finally, use the <a href=\"https://github.com/galaxyproject/galaxy/blob/6622ad1acb91866febb3d2f229de7cfb8af3a9f6/tools/interactive/interactivetool_ethercalc.xml\">EtherCalc GxIT’s</a> tool ID to route executions of the EtherCalc GxIT to the newly created destination:</p>\n\n      <div class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/templates/galaxy/config/job_conf.xml.j2\n</span><span class=\"gi\">+++ b/templates/galaxy/config/job_conf.xml.j2\n</span>     &lt;plugins workers=\"4\"&gt;\n         &lt;plugin id=\"local\" type=\"runner\" load=\"galaxy.jobs.runners.local:LocalJobRunner\"/&gt;\n     &lt;/plugins&gt;\n<span class=\"gd\">-    &lt;destinations&gt;\n</span><span class=\"gi\">+    &lt;destinations default=\"local\"&gt;\n</span>         &lt;destination id=\"local\" runner=\"local\"/&gt;\n<span class=\"gi\">+        &lt;destination id=\"interactive_local\" runner=\"local\"&gt;\n+            &lt;param id=\"docker_enabled\"&gt;true&lt;/param&gt;\n+            &lt;param id=\"docker_volumes\"&gt;$defaults&lt;/param&gt;\n+            &lt;param id=\"docker_sudo\"&gt;false&lt;/param&gt;\n+            &lt;param id=\"docker_net\"&gt;bridge&lt;/param&gt;\n+            &lt;param id=\"docker_auto_rm\"&gt;true&lt;/param&gt;\n+            &lt;param id=\"docker_set_user\"&gt;&lt;/param&gt;\n+            &lt;param id=\"require_container\"&gt;true&lt;/param&gt;\n+        &lt;/destination&gt;\n</span>     &lt;/destinations&gt;\n<span class=\"gi\">+    &lt;tools&gt;\n+        &lt;tool destination=\"interactive_local\" id=\"interactive_tool_ethercalc\" /&gt;\n+    &lt;/tools&gt;\n</span> &lt;/job_conf&gt;\n</code></pre></div>      </div>\n\n      <p>Of considerable note is the <code class=\"language-plaintext highlighter-rouge\">docker_volumes</code> param: the variable expansions are explained in the <a href=\"https://github.com/galaxyproject/galaxy/blob/6622ad1acb91866febb3d2f229de7cfb8af3a9f6/lib/galaxy/config/sample/job_conf.xml.sample_advanced#L410\">advanced sample job configuration</a>.  We’ll use this volume configuration for now but it has some considerable data security problems. We’ll discuss a better solution at the end of this tutorial.</p>\n    </li>\n    <li>\n      <p>Inform <code class=\"language-plaintext highlighter-rouge\">galaxyproject.galaxy</code> of what tool configuration files to load in your group variables (<code class=\"language-plaintext highlighter-rouge\">group_vars/galaxyservers.yml</code>):</p>\n\n      <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">galaxy_tool_config_files</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">galaxy_server_dir</span><span class=\"nv\"> </span><span class=\"s\">}}/config/tool_conf.xml.sample\"</span>\n  <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">galaxy_config_dir</span><span class=\"nv\"> </span><span class=\"s\">}}/tool_conf_interactive.xml\"</span>\n</code></pre></div>      </div>\n\n      <p>Next, inform <code class=\"language-plaintext highlighter-rouge\">galaxyproject.galaxy</code> of where you would like the <code class=\"language-plaintext highlighter-rouge\">job_conf.xml</code> to reside, that GxITs should be enabled, and where the GxIT map database can be found. Watch for other conflicting configurations from previous tutorials (e.g. <code class=\"language-plaintext highlighter-rouge\">job_config: ...</code>):</p>\n\n      <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">galaxy_config</span><span class=\"pi\">:</span>\n  <span class=\"na\">galaxy</span><span class=\"pi\">:</span>\n    <span class=\"c1\"># ... existing configuration options in the `galaxy` section ...</span>\n    <span class=\"na\">job_config_file</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">galaxy_config_dir</span><span class=\"nv\"> </span><span class=\"s\">}}/job_conf.xml\"</span>\n    <span class=\"na\">interactivetools_enable</span><span class=\"pi\">:</span> <span class=\"kc\">true</span>\n    <span class=\"na\">interactivetools_map</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">gie_proxy_sessions_path</span><span class=\"nv\"> </span><span class=\"s\">}}\"</span>\n</code></pre></div>      </div>\n\n      <p>And then deploy the new config templates using the <code class=\"language-plaintext highlighter-rouge\">galaxy_config_templates</code> var in your group vars:</p>\n\n      <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">galaxy_config_templates</span><span class=\"pi\">:</span>\n  <span class=\"c1\"># ... possible existing config file definitions</span>\n  <span class=\"pi\">-</span> <span class=\"na\">src</span><span class=\"pi\">:</span> <span class=\"s\">templates/galaxy/config/tool_conf_interactive.xml.j2</span>\n    <span class=\"na\">dest</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">galaxy_config_dir</span><span class=\"nv\"> </span><span class=\"s\">}}/tool_conf_interactive.xml\"</span>\n  <span class=\"pi\">-</span> <span class=\"na\">src</span><span class=\"pi\">:</span> <span class=\"s\">templates/galaxy/config/job_conf.xml.j2</span>\n    <span class=\"na\">dest</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">galaxy_config.galaxy.job_config_file</span><span class=\"nv\"> </span><span class=\"s\">}}\"</span>\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Run the playbook:</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook galaxy.yml\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Follow the Galaxy logs with <code class=\"language-plaintext highlighter-rouge\">journalctl -f -u galaxy</code></p>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"run-an-interactive-tool\">Run an Interactive Tool</h2>\n\n<p>You should now be ready to run an Interactive Tool in Galaxy!</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Running an Interactive Tool</hands-on-title>\n\n  <ol>\n    <li>Ensure that you are logged in to your Galaxy server by checking the <strong>User</strong> menu in the masthead.</li>\n    <li>\n      <p>We’ll need an input for our test GxIT (EtherCalc). Any tabular file can be used, such as Galaxy’s <a href=\"https://raw.githubusercontent.com/galaxyproject/galaxy/release_20.01/test-data/1.tabular\">1.tabular</a> test data. Copy this file’s URL:</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://raw.githubusercontent.com/galaxyproject/galaxy/release_20.01/test-data/1.tabular\n</code></pre></div>      </div>\n    </li>\n    <li>Click <i class=\"fas fa-upload\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-upload</span> <strong>Upload</strong> at the top of the tool panel (on the left side of the Galaxy UI).</li>\n    <li>In the resulting modal dialog, click the <strong>Paste/Fetch data</strong> button.</li>\n    <li>Paste the URL in the <strong>text field</strong> that has just appeared.</li>\n    <li>Give the new dataset a name such as <code class=\"language-plaintext highlighter-rouge\">tabular</code>, if you like.</li>\n    <li>Click <strong>Start</strong> and then <strong>Close</strong>.</li>\n    <li>From the tool menu, click the <strong>Interactive Tools</strong> section, then click <strong>EtherCalc</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>.</li>\n    <li>Ensure that your newly uploaded tabular dataset is selected as the input <strong>Some tabular dataset</strong>, then click <strong>Execute</strong>.</li>\n    <li>\n      <p>Monitor the blue <strong>info box</strong> on the next page, which will inform you when the Interactive Tool is accessible and provide you with a link to access it.</p>\n\n      <p><br /></p>\n\n      <p>If you navigate away from this page, you can view your running Interactive Tools from the <strong>Active InteractiveTools</strong> menu item in the <strong>User</strong> menu.</p>\n    </li>\n    <li>Click the <strong>click here to display</strong> link.</li>\n  </ol>\n\n</blockquote>\n\n<p>If everything has worked correctly, your browser will load EtherCalc with your tabular data preloaded. Once you’re done working with the data, return to Galaxy and stop EtherCalc by deleting its output dataset from your history, or stopping it via the interface from the <strong>Active InteractiveTools</strong> menu item in the <strong>User</strong> menu.</p>\n\n<h2 id=\"securing-interactive-tools\">Securing Interactive Tools</h2>\n\n<p>Inspecting the Docker container of a running Interactive Tool shows the volume configuration expanded from <code class=\"language-plaintext highlighter-rouge\">$galaxy_root</code> in the job destination’s <code class=\"language-plaintext highlighter-rouge\">docker_volumes</code> param:</p>\n\n<div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>docker inspect <span class=\"si\">$(</span>docker ps <span class=\"nt\">-q</span><span class=\"si\">)</span> | jq <span class=\"s1\">'.[0].HostConfig.Binds'</span>\n<span class=\"go\">[\n</span><span class=\"gp\">  \"/srv/galaxy/server:/srv/galaxy/server:ro\",                                     #</span><span class=\"w\"> </span>Galaxy server <span class=\"nb\">dir</span>\n<span class=\"gp\">  \"/srv/galaxy/server/tools/interactive:/srv/galaxy/server/tools/interactive:ro\", #</span><span class=\"w\"> </span>EtherCalc tool wrapper parent <span class=\"nb\">dir</span>\n<span class=\"gp\">  \"/srv/galaxy/jobs/000/1:/srv/galaxy/jobs/000/1:ro\",                             #</span><span class=\"w\"> </span>Per-job root <span class=\"nb\">dir</span>\n<span class=\"gp\">  \"/srv/galaxy/jobs/000/1/outputs:/srv/galaxy/jobs/000/1/outputs:rw\",             #</span><span class=\"w\"> </span>Job outputs <span class=\"nb\">dir</span>\n<span class=\"gp\">  \"/srv/galaxy/jobs/000/1/configs:/srv/galaxy/jobs/000/1/configs:rw\",             #</span><span class=\"w\"> </span>Job config files <span class=\"nb\">dir</span>\n<span class=\"gp\">  \"/srv/galaxy/jobs/000/1/working:/srv/galaxy/jobs/000/1/working:rw\",             #</span><span class=\"w\"> </span>Job working <span class=\"o\">(</span>cwd<span class=\"o\">)</span> <span class=\"nb\">dir</span>\n<span class=\"gp\">  \"/data:/data:rw\",                                                               #</span><span class=\"w\"> </span>GALAXY USER DATASETS DIR <span class=\"o\">(</span>RW!<span class=\"o\">)</span>\n<span class=\"gp\">  \"/srv/galaxy/server/tool-data:/srv/galaxy/server/tool-data:ro\"                  #</span><span class=\"w\"> </span>Galaxy reference data <span class=\"nb\">dir</span>\n<span class=\"go\">]\n</span></code></pre></div></div>\n\n<p>As hinted earlier, there is a concerning state here: The directory containing <strong>all</strong> of the the user-generated data in Galaxy (not just the data for this job) has been mounted <strong>read-write</strong> in to the container. <strong>This configuration grants users running interactive tools full access to all the data in Galaxy, which is a very bad idea.</strong> Unlike standard Galaxy tools, where the tool’s design prevents users from writing to arbitrary paths, Interactive Tools are fully user controllable. Although EtherCalc does not provide a mechanism for writing to this path, other Interactive Tools (such as Jupyter Notebook) do.</p>\n\n<p>Two solutions are discussed in the <a href=\"https://github.com/galaxyproject/galaxy/blob/6622ad1acb91866febb3d2f229de7cfb8af3a9f6/lib/galaxy/config/sample/job_conf.xml.sample_advanced#L410\">advanced sample job configuration</a>:</p>\n\n<ol>\n  <li>Use the <code class=\"language-plaintext highlighter-rouge\">outputs_to_working_directory</code> job configuration option, which allows you to mount datasets read-only: this prevents manipulation, but still allows GxIT users to read any dataset in your Galaxy server.</li>\n  <li>Use <a href=\"https://github.com/galaxyproject/pulsar\">Pulsar</a>, Galaxy’s remote job execution engine, to provide full job isolation: this avoids all access to Galaxy data, with the performance penalty of copying input dataset(s) to the job directory.</li>\n</ol>\n\n<p>Because we want to maintain dataset privacy, Pulsar is the better choice here. And in fact, we don’t even need to set up a Pulsar server: because we only need Pulsar’s input staging and isolation features, we can use <a href=\"https://github.com/galaxyproject/galaxy/blob/6622ad1acb91866febb3d2f229de7cfb8af3a9f6/lib/galaxy/config/sample/job_conf.xml.sample_advanced#L106\">Embedded Pulsar</a>, which runs a Pulsar server within the Galaxy application to perform these tasks. Embedded Pulsar can even interface with your distributed resource manager (aka cluster scheduler) of choice, as long as your Galaxy server and cluster both have access to a common filesystem (otherwise, you will need to use Pulsar in standalone mode; see the <a href=\"/training-material/topics/admin/tutorials/pulsar/tutorial.html\">Running Jobs on Remote Resources with Pulsar</a> tutorial).</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Running Interactive Tools with Embedded Pulsar</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Create a configuration file <em>template</em> for the Pulsar application at <code class=\"language-plaintext highlighter-rouge\">templates/galaxy/config/pulsar_app.yml.j2</code>.</p>\n\n      <p><br /></p>\n\n      <p>If the folder does not exist, create <code class=\"language-plaintext highlighter-rouge\">templates/galaxy/config</code> next to your <code class=\"language-plaintext highlighter-rouge\">galaxy.yml</code> (<code class=\"language-plaintext highlighter-rouge\">mkdir -p templates/galaxy/config/</code>).</p>\n\n      <p><br /></p>\n\n      <p>Add the following contents to the template:</p>\n\n      <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nn\">---</span>\n\n<span class=\"c1\"># The path where per-job directories will be created</span>\n<span class=\"na\">staging_directory</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">galaxy_job_working_directory</span><span class=\"nv\"> </span><span class=\"s\">}}/_interactive\"</span>\n\n<span class=\"c1\"># Where Pulsar state information will be stored (e.g. currently active jobs)</span>\n<span class=\"na\">persistence_directory</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">galaxy_mutable_data_dir</span><span class=\"nv\"> </span><span class=\"s\">}}/pulsar\"</span>\n\n<span class=\"c1\"># Where to find Galaxy tool dependencies</span>\n<span class=\"na\">tool_dependency_dir</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">galaxy_tool_dependency_dir</span><span class=\"nv\"> </span><span class=\"s\">}}\"</span>\n\n<span class=\"c1\"># How to run jobs (see https://pulsar.readthedocs.io/en/latest/job_managers.html)</span>\n<span class=\"na\">managers</span><span class=\"pi\">:</span>\n  <span class=\"na\">_default_</span><span class=\"pi\">:</span>\n    <span class=\"na\">type</span><span class=\"pi\">:</span> <span class=\"s\">queued_python</span>\n    <span class=\"na\">num_concurrent_jobs</span><span class=\"pi\">:</span> <span class=\"m\">1</span>\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Modify the job configuration file, <code class=\"language-plaintext highlighter-rouge\">templates/galaxy/config/job_conf.xml.j2</code>, to configure Interactive Tools to use the embedded Pulsar runner.</p>\n\n      <p><br /></p>\n\n      <p><strong>Add</strong> the embedded Pulsar runner plugin to the <code class=\"language-plaintext highlighter-rouge\">&lt;plugins&gt;</code> section of the config:</p>\n\n      <div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;plugin</span> <span class=\"na\">id=</span><span class=\"s\">\"pulsar_embedded\"</span> <span class=\"na\">type=</span><span class=\"s\">\"runner\"</span> <span class=\"na\">load=</span><span class=\"s\">\"galaxy.jobs.runners.pulsar:PulsarEmbeddedJobRunner\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;param</span> <span class=\"na\">id=</span><span class=\"s\">\"pulsar_config\"</span><span class=\"nt\">&gt;</span>/srv/galaxy/config/pulsar_app.yml<span class=\"nt\">&lt;/param&gt;</span>\n<span class=\"nt\">&lt;/plugin&gt;</span>\n</code></pre></div>      </div>\n\n      <blockquote class=\"tip\">\n        <tip-title>Ansible Best Practices</tip-title>\n        <p>We have used a bit of bad practice here: hardcoding the Pulsar config file path in to the job config file. At this point, we should convert the job config file to a template (in the same manner as the Pulsar config template). The reason we don’t do it in this tutorial is to maintain compatibility with other tutorials, but you may do so by following the same pattern as is used for the Pulsar config template.</p>\n      </blockquote>\n\n      <p>Next, <strong>modify</strong> the <code class=\"language-plaintext highlighter-rouge\">interactive_local</code> destination to use the new runner and set the new parameter <code class=\"language-plaintext highlighter-rouge\">container_monitor_result</code> to <code class=\"language-plaintext highlighter-rouge\">callback</code> (explained in more detail in the next step):</p>\n\n      <blockquote class=\"warning\">\n        <warning-title>Untrusted SSL Certificates</warning-title>\n        <p>If you are completing this tutorial as part of a <a href=\"https://github.com/galaxyproject/dagobah-training\">Galaxy Admin Training</a> course, you will also need the <code class=\"language-plaintext highlighter-rouge\">&lt;env&gt;</code> setting shown below to prevent problems with the untrusted SSL certificates in use during the course. Galaxy servers with valid SSL certificates <em>do not need this option</em>.</p>\n      </blockquote>\n\n      <div class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/templates/galaxy/config/job_conf.xml.j2\n</span><span class=\"gi\">+++ b/templates/galaxy/config/job_conf.xml.j2\n</span>     &lt;destinations default=\"local\"&gt;\n         &lt;destination id=\"local\" runner=\"local\"/&gt;\n<span class=\"gd\">-        &lt;destination id=\"interactive_local\" runner=\"local\"&gt;\n</span><span class=\"gi\">+        &lt;destination id=\"interactive_local\" runner=\"pulsar_embedded\"&gt;\n</span>             &lt;param id=\"docker_enabled\"&gt;true&lt;/param&gt;\n             &lt;param id=\"docker_volumes\"&gt;$defaults&lt;/param&gt;\n             &lt;param id=\"docker_sudo\"&gt;false&lt;/param&gt;\n             &lt;param id=\"docker_net\"&gt;bridge&lt;/param&gt;\n             &lt;param id=\"docker_auto_rm\"&gt;true&lt;/param&gt;\n             &lt;param id=\"docker_set_user\"&gt;&lt;/param&gt;\n             &lt;param id=\"require_container\"&gt;true&lt;/param&gt;\n<span class=\"gi\">+            &lt;param id=\"container_monitor_result\"&gt;callback&lt;/param&gt;\n+            &lt;env id=\"REQUESTS_CA_BUNDLE\"&gt;/etc/ssl/certs/ca-certificates.crt&lt;/env&gt;\n</span>         &lt;/destination&gt;\n     &lt;/destinations&gt;\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Open your <code class=\"language-plaintext highlighter-rouge\">galaxyservers</code> group variables file and instruct <code class=\"language-plaintext highlighter-rouge\">galaxyproject.galaxy</code> to install the Pulsar configuration file:</p>\n\n      <blockquote class=\"comment\">\n        <comment-title>Note</comment-title>\n        <p>Depending on the order in which you are completing this tutorial in relation to other tutorials, you may have already defined <code class=\"language-plaintext highlighter-rouge\">galaxy_config_templates</code>. If this is the case, be sure to <strong>merge the changes in this step with your existing playbook</strong>.</p>\n      </blockquote>\n\n      <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">galaxy_config_templates</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"na\">src</span><span class=\"pi\">:</span> <span class=\"s\">templates/galaxy/config/pulsar_app.yml.j2</span>\n    <span class=\"na\">dest</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">galaxy_config_dir</span><span class=\"nv\"> </span><span class=\"s\">}}/pulsar_app.yml\"</span>\n</code></pre></div>      </div>\n\n      <p>Additionally, you will need to set the <code class=\"language-plaintext highlighter-rouge\">galaxy_infrastructure_url</code> config option:</p>\n\n      <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">galaxy_config</span><span class=\"pi\">:</span>\n  <span class=\"na\">galaxy</span><span class=\"pi\">:</span>\n    <span class=\"c1\"># ... existing configuration options in the `galaxy` section ...</span>\n    <span class=\"na\">galaxy_infrastructure_url</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">https://{{</span><span class=\"nv\"> </span><span class=\"s\">inventory_hostname</span><span class=\"nv\"> </span><span class=\"s\">}}/\"</span>\n</code></pre></div>      </div>\n\n      <blockquote class=\"details\">\n        <details-title>Detail: Infrastructure URL/Callback</details-title>\n        <p>Galaxy must be made aware of the randomly selected port Docker has assigned after the GxIT begins operating, in order to update the proxy map. By default, this is done by writing a JSON file in the job directory. This method does not work with Pulsar since Pulsar uses a different job directory from the Galaxy job directory. As a result, Pulsar jobs use the <code class=\"language-plaintext highlighter-rouge\">callback</code> method configured in the previous step to make a request to Galaxy’s API, the URL for which is set in <code class=\"language-plaintext highlighter-rouge\">galaxy_infrastructure_url</code>.</p>\n      </blockquote>\n    </li>\n    <li>\n      <p>Run the playbook:</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook galaxy.yml\n</code></pre></div>      </div>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>Once the playbook run is complete and your Galaxy server has restarted, run the EtherCalc Interactive Tool again.</p>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <p>Once EtherCalc is running, check the mounts of its container. What do you observe?</p>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n\n    <div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>docker inspect <span class=\"si\">$(</span>docker ps <span class=\"nt\">-q</span><span class=\"si\">)</span> | jq <span class=\"s1\">'.[0].HostConfig.Binds'</span>\n<span class=\"go\">[\n</span><span class=\"gp\">  \"/srv/galaxy/jobs/_interactive/2:/srv/galaxy/jobs/_interactive/2:ro\",                       #</span><span class=\"w\"> </span>Per-job root <span class=\"nb\">dir</span>\n<span class=\"gp\">  \"/srv/galaxy/jobs/_interactive/2/tool_files:/srv/galaxy/jobs/_interactive/2/tool_files:ro\", #</span><span class=\"w\"> </span>EtherCalc tool wrapper parent <span class=\"nb\">dir</span>\n<span class=\"gp\">  \"/srv/galaxy/jobs/_interactive/2/outputs:/srv/galaxy/jobs/_interactive/2/outputs:rw\",       #</span><span class=\"w\"> </span>Job outputs <span class=\"nb\">dir</span>\n<span class=\"gp\">  \"/srv/galaxy/jobs/_interactive/2/working:/srv/galaxy/jobs/_interactive/2/working:rw\",       #</span><span class=\"w\"> </span>Job working <span class=\"o\">(</span>cwd<span class=\"o\">)</span> <span class=\"nb\">dir</span>\n<span class=\"gp\">  \"/srv/galaxy/server/tool-data:/srv/galaxy/server/tool-data:ro\"                              #</span><span class=\"w\"> </span>Galaxy reference data <span class=\"nb\">dir</span>\n<span class=\"go\">]\n</span></code></pre></div>    </div>\n\n    <p>Of note, the user data directory, <code class=\"language-plaintext highlighter-rouge\">/data</code>, is no longer mounted in the container!</p>\n\n  </blockquote>\n\n</blockquote>\n\n<h1 id=\"final-notes\">Final Notes</h1>\n\n<p>As mentioned at the beginning of this tutorial, Galaxy Interactive Tools are a relatively new and rapidly evolving feature. At the time of writing, there is no official documentation for Interactive Tools. Please watch the <a href=\"https://docs.galaxyproject.org/en/master/releases/index.html\">Galaxy Release Notes</a> for updates, changes, new documentation, and bug fixes.</p>\n\n"],"ref_slides":["# History\n\n## 2015\n\n@hexylena, @bgruening, and @jmchilton create Galaxy Interactive Environments (GIEs)\n\nGIEs use Galaxy's *visualization framework* to run certain types of *interactive* visualizations (e.g. Jupyter Notebook)\n\nGIEs run in a docker container on the Galaxy server or a single remote Docker server\n\n???\n\n- Galaxy Interactive Environments were added to Galaxy in 2015.\n- They are a type of visualization in Galaxy.\n- Accessible through the “Visualize” menu or under the visualization button on a dataset with a specific datatype.\n- Back then, the docker container serving an interactive environment could not be run on a cluster.\n- More details within Galaxy Interactive Environment slides.\n\n---\n# History\n\n## 2016\n\nSupport for Docker Swarm is added, allowing running a cluster for GIEs\n\n???\n\n- As of 2016, Docker includes swarm mode for natively managing a cluster of Docker Engines called a swarm.\n- This allowed to run Galaxy Interactive Environment on a cluster.\n\n---\n# History\n\n## 2019\n\n@blankenberg creates Galaxy Interactive Tools (GxITs)\n\nBuilding on the GIE concept, but run as *tools*\n\nTools run just as any other Galaxy job (e.g. via Slurm, HTCondor)\n\nYou will sometimes see Interactive Tools referred to as Interactive Environments version 2\n\n???\n\n- In 2019, were created the Galaxy Interactive Tools.\n- Like interactive environment, Galaxy Interactive Tools are built on docker containers and are accessible through the Galaxy interface.\n- But they are considered as tools.\n- They are launchable from the toolbox menu, on a predefined destination and prioritized as any other job.\n\n---\n# Tool config syntax\n\n```xml\n<tool id=\"interactive_tool_jupyter_notebook\" tool_type=\"interactive\" name=\"Interactive Jupyter Notebook\" version=\"0.1\">\n    <requirements>\n        <container type=\"docker\">quay.io/bgruening/docker-jupyter-notebook:ie2</container>\n    </requirements>\n    <entry_points>\n        <entry_point name=\"Jupyter Interactive Tool\" requires_domain=\"True\">\n            <port>8888</port>\n            <url>ipython/lab</url>\n        </entry_point>\n    </entry_points>\n</tool>\n```\n\n???\n\n- Some settings are needed to configure an interactive tool wrapper.\n- The tool type must be set to interactive.\n- As a requirement, set the path to the repository where the container is to be pulled from.\n- The tool entry point on the container must be defined.\n- For instance, for a Jupyter Notebook, you'll give the port the application is served on and the domain name suffix.\n\n---\n# Mapping clients to containers\n\n- GIEs: Unique path, e.g. `https://galaxy.example.org/gie-proxy/jupyter/...`\n  - Pros: Works with existing SSL certificate\n  - Cons: Requires Galaxy session cookie (no sharing), can only run one at a time, closing your browser loses your session\n- GxITs: Unique hostname, e.g. `https://<unique-id>.interactivetoolentrypoint.interactivetool.galaxy.example.org/`\n  - Pros: Needs no special credentials (can be shared)\n  - Cons: Requires *wildcard* DNS entry and *wildcard* SSL certificate (not possible at many sites)\n\n???\n\n- Diverse infrastructures behind Galaxy Interactive Environments and Galaxy Interactive Tools induces various constraints and benefits.\n- Particularly in building the path between the browser and the container.\n\n---\n# Anatomy of a running Interactive Tool\n\n![Galaxy Interactive Tools Proxy Diagram](../../images/interactive-tools/gxit-proxy-diagram.png \"Galaxy Interactive Tools Proxy Diagram\")\n\n.reduce70[.footnote[The source for this figure can be found at: https://docs.google.com/presentation/d/1_4PtfM6A4mOxOlgGh6OGWvzFcxD1bdw4CydEWtm5n8k/]]\n\n???\n\n- This slide illustrates the steps allowing a client to interact with a Galaxy Interactive Tool.\n- We consider a Galaxy server running behind a reverse proxy (NGINX).\n- The client only ever speaks to NGINX on the Galaxy server, running on the standard HTTPS 443 port.\n- Based on the elements provided by the URL, NGINX redirects the requests to Galaxy over a unix domain socket as usual.\n- On the other hand, HTTP requests targetting interactive tools are redirected by NGINX to a proxy, called GIE Proxy, running on port 8000.\n- At this point, remember, when an docker container starts, it will be assigned a host (server or node) and a random port on that host (in our example, port 32768).\n- This information is stored by Galaxy in a sqlite database.\n- So the GIE proxy checks in this sqlite database to know which node and port the IT container is to be found.\n- The GIE proxy forwards the HTTP request to Docker on that node and port.\n- Docker, in turn, forwards it to the application (e.g. Jupyter) on the container's port, defined in the wrapper.\n\n---\n# Galaxy configuration\n\nEnable docker on a destination in `job_conf.xml` and assign your GxITs to that destination\n\n.left[Set in `galaxy.yml`:]\n```yaml\ninteractivetools_enable: true\ninteractivetools_map: /srv/galaxy/var/gie-proxy-sessions.sqlite\n```\n\n???\n\n- A few settings are needed to get interactive tools running within your Galaxy instance.\n- In your galaxy configuration file, enable the use of interactive tools then set the path to the sqlite database storing the proxying data.\n- In the job configuration file, give to the tool a destination allowing the use of Docker (more details in the tutorial).\n\n---\n# Proxy configuration\n\nUse the proxy configuration that ships with Galaxy\n\nOr the [Node.js-based proxy][usegalaxy_eu-gie_proxy]\n\n[usegalaxy_eu-gie_proxy]: https://galaxy.ansible.com/usegalaxy_eu/gie_proxy\n\n???\n\n- In production, you are likely to use the Node.js based proxy, set up by the Galaxy admin team.\n- During developement, you can use the proxy configuration used by default by Galaxy.\n\n---\n# Security\n\nThe default docker-enabled container exposes all datasets to the tool\n\nNormally this isn't bad (normal tools can't be controlled by the user)\n\nInteractive tools are fully user controllable\n\nSolution: [Embedded Pulsar][job-conf-pulsar-embedded]\n\n[job-conf-pulsar-embedded]: https://github.com/galaxyproject/galaxy/blob/6622ad1acb91866febb3d2f229de7cfb8af3a9f6/lib/galaxy/config/sample/job_conf.xml.sample_advanced#L106\n\n???\n\n- As we have seen, interactive tools are launched in docker containers.\n- By default in galaxy, each container has full access to all user's data.\n- This is a security issue since a user could take control of an interactive tool and read, write or delete those data.\n\n---\n# Embedded Pulsar\n\nRuns a [Pulsar][pulsar] server within the Galaxy application to \"stage\" (i.e. copy) inputs.\n\n- Pros: Inputs in isolated dir so only that dir is mounted in the container: secure\n- Cons: Has to copy inputs on each Interactive Tool execution: slow\n\n[pulsar]: https://github.com/galaxyproject/pulsar\n\n???\n\n- A solution to this security issue is to use embedded pulsar.\n- This way, pulsar makes available only the job input data to the container.\n- Moreover, these data are read only.\n- You will have more details in the tutorial.\n"],"hands_on":true,"slides":true,"mod_date":"2024-05-29 15:37:52 +0000","pub_date":"2020-02-27 15:21:14 +0000","version":43,"api":"https://training.galaxyproject.org/training-material/api/topics/admin/tutorials/interactive-tools/tutorial.json","tools":[],"supported_servers":[],"topic_name_human":"Galaxy Server administration","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":true,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":true},"license":"CC-BY-4.0","type":"tutorial","logo":"assets/images/gat.png","redirect_from":["/short/admin/interactive-tools/slides","/short/S00014"]}