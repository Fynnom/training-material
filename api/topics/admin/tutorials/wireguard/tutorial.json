{"layout":"tutorial_hands_on","title":"Deploying Wireguard for private mesh networking","zenodo_link":"","questions":["What is wireguard?","When is it useful?","Is it right for me?"],"objectives":["Setup a wireguard mesh across a few nodes"],"time_estimation":"60m","key_points":["Wireguard is incredibly easy to deploy, and very secure."],"contributions":{"authorship":["hexylena"]},"requirements":[{"type":"internal","topic_name":"admin","tutorials":["ansible"]},{"type":"none","title":"Three or more VMs (they can be tiny, 1 CPU, <1GB RAM)"}],"subtopic":"cloud","tags":["wireguard","networking"],"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00026","url":"/topics/admin/tutorials/wireguard/tutorial.html","topic_name":"admin","tutorial_name":"wireguard","dir":"topics/admin/tutorials/wireguard","symlink":null,"id":"admin/wireguard","ref_tutorials":["<p>In this tutorial we will briefly cover what <a href=\"https://www.wireguard.com/\">Wireguard</a> is and how you can leverage it for your needs. This will not make you an expert on Wireguard but will give you the tools you need in order to setup a local Wireguard network.</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#what-is-wireguard\" id=\"markdown-toc-what-is-wireguard\">What is Wireguard?</a>    <ol>\n      <li><a href=\"#is-it-right-for-me\" id=\"markdown-toc-is-it-right-for-me\">Is it right for me?</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#setting-up-the-infrastructure\" id=\"markdown-toc-setting-up-the-infrastructure\">Setting up the infrastructure</a>    <ol>\n      <li><a href=\"#writing-the-playbook\" id=\"markdown-toc-writing-the-playbook\">Writing the playbook</a></li>\n    </ol>\n  </li>\n</ol>\n\n</blockquote>\n\n<h1 id=\"what-is-wireguard\">What is Wireguard?</h1>\n\n<p>Wireguard is a VPN like OpenVPN or IPSec, but instead of the hub and spoke model of those where all traffic must go through a central node, Wireguard creates a mesh network where machines can all talk individually to each other. Wireguard also uses modern encryption only, ensuring your data stays safe.</p>\n\n<h2 id=\"is-it-right-for-me\">Is it right for me?</h2>\n\n<p>If you have machines that need to talk to each other privately, and you don’t\nhave a better way to do it like a local network team, then yes, it’s a great\nsolution to private, secure, fast networking.\nIt has <a href=\"https://www.wireguard.com/performance/\">excellent performance</a>\ndespite the encryption, and is built directly into the kernel.</p>\n\n<p>By using wireguard, you can let services listen only on the wireguard interface, and thus only known and trusted machines can access those services.</p>\n\n<h1 id=\"setting-up-the-infrastructure\">Setting up the infrastructure</h1>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Configuration files</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Create a <code class=\"language-plaintext highlighter-rouge\">ansible.cfg</code> file (next to your playbook) to <a href=\"https://docs.ansible.com/ansible/2.9/reference_appendices/config.html\">configure settings</a> like the inventory file (and save ourselves some typing!), or the Python interpreter to use:</p>\n\n      <div data-commit=\"Add ansible.cfg\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- /dev/null\n</span><span class=\"gi\">+++ b/ansible.cfg\n</span><span class=\"p\">@@ -0,0 +1,6 @@</span>\n<span class=\"gi\">+[defaults]\n+interpreter_python = /usr/bin/python3\n+inventory = hosts\n+retry_files_enabled = false\n+[ssh_connection]\n+pipelining = true\n</span>   \n</code></pre></div>      </div>\n\n      <blockquote class=\"tip\">\n        <tip-title>CentOS7</tip-title>\n        <p>As mentioned in the “Ubuntu or Debian, CentOS or RHEL?” comment above, if you are using CentOS7 do not set <code class=\"language-plaintext highlighter-rouge\">interpreter_python</code> in <code class=\"language-plaintext highlighter-rouge\">ansible.cfg</code> .</p>\n      </blockquote>\n\n      <p>Pipelining will make <a href=\"https://docs.ansible.com/ansible/2.9/reference_appendices/config.html#ansible-pipelining\">Ansible run faster</a> by significantly reducing the number of new SSH connections that must be opened.</p>\n    </li>\n    <li>\n      <p>Create the <code class=\"language-plaintext highlighter-rouge\">hosts</code> inventory file if you have not done so yet, defining an <code class=\"language-plaintext highlighter-rouge\">[wireguard]</code> group with every host you want to be part of the cluster. For each machine, also set a variable <code class=\"language-plaintext highlighter-rouge\">wireguard_ip</code> with an address from <code class=\"language-plaintext highlighter-rouge\">192.168.0.0/24</code></p>\n\n      <blockquote class=\"code-2col\">\n        <blockquote class=\"code-in\">\n          <code-in-title>Bash</code-in-title>\n          <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cat </span>hosts\n</code></pre></div>          </div>\n        </blockquote>\n\n        <blockquote class=\"code-out\">\n          <code-out-title>Bash</code-out-title>\n\n          <p>Your hostname is probably different:</p>\n\n          <div data-commit=\"Add hosts\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- /dev/null\n</span><span class=\"gi\">+++ b/hosts\n</span><span class=\"p\">@@ -0,0 +1,5 @@</span>\n<span class=\"gi\">+[wireguard]\n+1-wg.galaxy.training wireguard_ip=192.168.0.1\n+2-wg.galaxy.training wireguard_ip=192.168.0.2\n+3-wg.galaxy.training wireguard_ip=192.168.0.3\n+4-wg.galaxy.training wireguard_ip=192.168.0.4\n</span><span class=\"err\">\n</span></code></pre></div>          </div>\n        </blockquote>\n      </blockquote>\n    </li>\n  </ol>\n</blockquote>\n\n<p>Wireguard can use any of the <a href=\"https://en.wikipedia.org/wiki/Private_network\">private network</a> blocks, here we use <code class=\"language-plaintext highlighter-rouge\">192.168.0.0/16</code> for familiarity, Tailscale uses <code class=\"language-plaintext highlighter-rouge\">100.0.0.0/8</code>, which is the <a href=\"https://en.wikipedia.org/wiki/Carrier-grade_NAT\">Carrier Grade NAT</a> range, and behaves somewhat differently to classic Private Network prefixes.</p>\n\n<h2 id=\"writing-the-playbook\">Writing the playbook</h2>\n\n<p>First lets set up the playbook and install Wireguard, without configuring it.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Installing Wireguard</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Create and open <code class=\"language-plaintext highlighter-rouge\">wg.yml</code> which will be our playbook. Add the following:</p>\n\n      <div data-commit=\"Add initial playbook, install wireguard\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- /dev/null\n</span><span class=\"gi\">+++ b/wg.yml\n</span><span class=\"p\">@@ -0,0 +1,16 @@</span>\n<span class=\"gi\">+---\n+- hosts: all\n+  become: yes\n+  vars:\n+    wireguard_mask_bits: 24\n+    wireguard_port: 51871\n+  tasks:\n+    - name: update packages\n+      apt:\n+        update_cache: yes\n+        cache_valid_time: 3600\n+\n+    - name: Install wireguard\n+      apt:\n+        name: wireguard\n+        state: present\n</span>   \n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Run the playbook:</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook wg.yml\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n  </ol>\n</blockquote>\n\n<p>Now we can start configuring it. Wireguard relies on each node having a private/public keypair which is used for encrypting communications between the nodes. By default this uses modern elliptic cryptography which is quite simple and provably secure, wireguard only has ~4k LOC compared to 400k+ LOC for most VPN solutions. Let’s generate those keys now:</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Generating a keypair</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Edit <code class=\"language-plaintext highlighter-rouge\">wg.yml</code> and add</p>\n\n      <div data-commit=\"Generate the keys\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/wg.yml\n</span><span class=\"gi\">+++ b/wg.yml\n</span><span class=\"p\">@@ -14,3 +14,8 @@</span>\n       apt:\n         name: wireguard\n         state: present\n<span class=\"gi\">+\n+    - name: Generate Wireguard keypair\n+      shell: wg genkey | tee /etc/wireguard/privatekey | wg pubkey | tee /etc/wireguard/publickey\n+      args:\n+        creates: /etc/wireguard/privatekey\n</span>   \n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Run the playbook:</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook wg.yml\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n    <li>\n      <p>Go check out what the keys look like!</p>\n    </li>\n  </ol>\n</blockquote>\n\n<p>Ok, that’s got wireguard setup, but it still isn’t running. As of 2018 or so, systemd added built in support for wireguard and we’ll use that to setup the network devices, and the network itself.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Setting up the network</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Edit <code class=\"language-plaintext highlighter-rouge\">wg.yml</code> and add the following. We want to register the contents of these keys, as they’ll be used to configure our networks later.</p>\n\n      <div data-commit=\"Register the keys\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/wg.yml\n</span><span class=\"gi\">+++ b/wg.yml\n</span><span class=\"p\">@@ -19,3 +19,13 @@</span>\n       shell: wg genkey | tee /etc/wireguard/privatekey | wg pubkey | tee /etc/wireguard/publickey\n       args:\n         creates: /etc/wireguard/privatekey\n<span class=\"gi\">+\n+    - name: register private key\n+      shell: cat /etc/wireguard/privatekey\n+      register: wireguard_private_key\n+      changed_when: false\n+\n+    - name: register public key\n+      shell: cat /etc/wireguard/publickey\n+      register: wireguard_public_key\n+      changed_when: false\n</span>   \n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Again editing <code class=\"language-plaintext highlighter-rouge\">wg.yml</code>, we’ll setup the network device:</p>\n\n      <div data-commit=\"Setup the netdev\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/wg.yml\n</span><span class=\"gi\">+++ b/wg.yml\n</span><span class=\"p\">@@ -29,3 +29,28 @@</span>\n       shell: cat /etc/wireguard/publickey\n       register: wireguard_public_key\n       changed_when: false\n<span class=\"gi\">+\n+    - name: Setup wg0 device\n+      copy:\n+        content: |\n+          [NetDev]\n+          Name=wg0\n+          Kind=wireguard\n+          Description=WireGuard tunnel wg0\n+          [WireGuard]\n+          ListenPort={{ wireguard_port }}\n+          PrivateKey={{ wireguard_private_key.stdout }}\n+          {% for peer in groups['all'] %}\n+          {% if peer != inventory_hostname %}\n+          [WireGuardPeer]\n+          PublicKey={{ hostvars[peer].wireguard_public_key.stdout }}\n+          AllowedIPs={{ hostvars[peer].wireguard_ip }}/32\n+          Endpoint={{ hostvars[peer].inventory_hostname }}:{{ wireguard_port }}\n+          PersistentKeepalive=25\n+          {% endif %}\n+          {% endfor %}\n+        dest: /etc/systemd/network/99-wg0.netdev\n+        owner: root\n+        group: systemd-network\n+        mode: 0640\n+      notify: systemd network restart\n</span>   \n</code></pre></div>      </div>\n\n      <p>Here we do a number of things:</p>\n      <ul>\n        <li>We configure a <a href=\"https://freedesktop.org/software/systemd/man/systemd.netdev.html\">NetDev</a>, a virtual network device. Systemd supports many types but we’ll use wireguard.</li>\n        <li>Next we setup wireguard, specifying a <code class=\"language-plaintext highlighter-rouge\">ListenPort</code> which is used for all wireguard communication, and specifies our PrivateKey which is used by the tunnel.</li>\n        <li>For every peer (all other instances than ourselves), we setup a <code class=\"language-plaintext highlighter-rouge\">WireGuardPeer</code> with that peer’s public key, and which IPs are allowed to connect.</li>\n      </ul>\n    </li>\n    <li>\n      <p>Again editing <code class=\"language-plaintext highlighter-rouge\">wg.yml</code>, we’ll setup the final bit, the network service.</p>\n\n      <div data-commit=\"Setup the network\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/wg.yml\n</span><span class=\"gi\">+++ b/wg.yml\n</span><span class=\"p\">@@ -54,3 +54,16 @@</span>\n         group: systemd-network\n         mode: 0640\n       notify: systemd network restart\n<span class=\"gi\">+\n+    - name: Setup wg0 network\n+      copy:\n+        content: |\n+          [Match]\n+          Name=wg0\n+          [Network]\n+          Address={{ wireguard_ip }}/{{ wireguard_mask_bits }}\n+        dest: /etc/systemd/network/99-wg0.network\n+        owner: root\n+        group: systemd-network\n+        mode: 0640\n+      notify: systemd network restart\n</span>   \n</code></pre></div>      </div>\n\n      <p>Here we just setup the network, declare the interface name, and the address for it.</p>\n    </li>\n    <li>\n      <p>And last let’s restart the appropriate services.</p>\n\n      <div data-commit=\"Restart the network\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/wg.yml\n</span><span class=\"gi\">+++ b/wg.yml\n</span><span class=\"p\">@@ -67,3 +67,10 @@</span>\n         group: systemd-network\n         mode: 0640\n       notify: systemd network restart\n<span class=\"gi\">+\n+  handlers:\n+    - name: systemd network restart\n+      service:\n+        name: systemd-networkd\n+        state: restarted\n+        enabled: yes\n</span>   \n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Run the playbook:</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook wg.yml\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n    <li>\n      <p>Go check out the network! Try pinging each of the wireguard IPs to see if you can reach each of the machines.</p>\n    </li>\n  </ol>\n</blockquote>\n"],"ref_slides":[],"hands_on":true,"slides":false,"mod_date":"2022-12-09 12:24:27 +0000","pub_date":"2022-09-21 08:23:59 +0000","version":8,"api":"https://training.galaxyproject.org/training-material/api/topics/admin/tutorials/wireguard/tutorial.json","tools":[],"supported_servers":[],"topic_name_human":"Galaxy Server administration","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial","contributors":[{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"}]}