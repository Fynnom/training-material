{"layout":"tutorial_slides","redirect_from":["/topics/admin/tutorials/heterogeneous-compute/slides","/short/admin/pulsar/slides","/short/S00020"],"title":"Running Jobs on Remote Resources with Pulsar","questions":["How does pulsar work?","How can I deploy it?"],"objectives":["Have an understanding of what Pulsar is and how it works","Install and configure a Pulsar server on a remote linux machine","Be able to get Galaxy to send jobs to a remote Pulsar server"],"time_estimation":"60m","key_points":["Pulsar allows you to easily add geographically distributed compute resources into your Galaxy instance","It also works well in situations where the compute resources cannot share storage pools."],"contributors":["natefoo","slugger70","mvdbeek","hexylena"],"subtopic":"features","tags":["jobs"],"requirements":[{"type":"internal","topic_name":"admin","tutorials":["ansible","ansible-galaxy"]},{"title":"A server/VM on which to deploy Pulsar","type":"none"}],"recordings":[{"captioners":["shiltemann"],"date":"2021-02-15","galaxy_version":"21.01","length":"14M","youtube_id":"M1-Z_2tuQPI","speakers":["slugger70"]}],"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"S00020","url":"/topics/admin/tutorials/pulsar/slides.html","topic_name":"admin","tutorial_name":"pulsar","dir":"topics/admin/tutorials/pulsar","symlink":null,"id":"admin/pulsar","ref_tutorials":["<p>Pulsar is the Galaxy Project’s remote job running system. It was written by John Chilton (<a href=\"https://github.com/jmchilton\">@jmchilton</a>) of the Galaxy Project. It is a python server application that can accept jobs from a Galaxy server, submit them to a local resource and then send the results back to the originating Galaxy server.</p>\n\n<p>More details on Pulsar can be found at:</p>\n\n<ul>\n  <li><a href=\"https://pulsar.readthedocs.io/en/latest/index.html\">Pulsar’s Documentation</a></li>\n  <li><a href=\"https://github.com/galaxyproject/pulsar\">Pulsar’s Github Repository</a></li>\n  <li><a href=\"https://github.com/galaxyproject/ansible-pulsar\">Pulsar Ansible Role</a></li>\n</ul>\n\n<p>Transport of data, tool information and other metadata can be configured as a web application via a RESTful interface or using a message passing system such as RabbitMQ.</p>\n\n<p>At the Galaxy end, it is configured within the job configuraiton, and uses one of two special Galaxy job runners.</p>\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">galaxy.jobs.runners.pulsar:PulsarRESTJobRunner</code> for the RESTful interface</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">galaxy.jobs.runners.pulsar:PulsarMQJobRunner</code> for the message passing interface.</li>\n</ul>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#this-tutorial-assumes-that\" id=\"markdown-toc-this-tutorial-assumes-that\">This tutorial assumes that</a></li>\n  <li><a href=\"#overview\" id=\"markdown-toc-overview\">Overview</a></li>\n  <li><a href=\"#install-and-configure-a-message-queueing-system\" id=\"markdown-toc-install-and-configure-a-message-queueing-system\">Install and configure a message queueing system</a></li>\n  <li><a href=\"#installing-and-configuring-pulsar-on-a-remote-machine\" id=\"markdown-toc-installing-and-configuring-pulsar-on-a-remote-machine\">Installing and configuring Pulsar on a remote machine</a></li>\n  <li><a href=\"#configuring-galaxy-to-use-pulsar-as-a-job-destination\" id=\"markdown-toc-configuring-galaxy-to-use-pulsar-as-a-job-destination\">Configuring Galaxy to use Pulsar as a job destination</a></li>\n  <li><a href=\"#testing-pulsar\" id=\"markdown-toc-testing-pulsar\">Testing Pulsar</a></li>\n  <li><a href=\"#retries-of-the-staging-actions\" id=\"markdown-toc-retries-of-the-staging-actions\">Retries of the staging actions</a></li>\n  <li><a href=\"#pulsar-in-production\" id=\"markdown-toc-pulsar-in-production\">Pulsar in Production</a></li>\n  <li><a href=\"#conclusion\" id=\"markdown-toc-conclusion\">Conclusion</a></li>\n</ol>\n\n</blockquote>\n\n<!--SNIPPET-->\n<blockquote class=\"comment\">   <div class=\"box-title comment-title\" id=\"comment-galaxy-admin-training-path\"><i class=\"far fa-comment-dots\" aria-hidden=\"true\"></i> Comment: Galaxy Admin Training Path</div>   <p>The yearly Galaxy Admin Training follows a specific ordering of tutorials. Use this timeline to help keep track of where you are in Galaxy Admin Training.</p>   <ol id=\"git-gat-timeline\">                    <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/ansible-galaxy/tutorial.html\">             <div>Step 1</div>             <div>ansible-galaxy</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/backup-cleanup/tutorial.html\">             <div>Step 2</div>             <div>backup-cleanup</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/customization/tutorial.html\">             <div>Step 3</div>             <div>customization</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/tus/tutorial.html\">             <div>Step 4</div>             <div>tus</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/cvmfs/tutorial.html\">             <div>Step 5</div>             <div>cvmfs</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/apptainer/tutorial.html\">             <div>Step 6</div>             <div>apptainer</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/tool-management/tutorial.html\">             <div>Step 7</div>             <div>tool-management</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/reference-genomes/tutorial.html\">             <div>Step 8</div>             <div>reference-genomes</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/data-library/tutorial.html\">             <div>Step 9</div>             <div>data-library</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/dev/tutorials/bioblend-api/tutorial.html\">             <div>Step 10</div>             <div>dev/bioblend-api</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/connect-to-compute-cluster/tutorial.html\">             <div>Step 11</div>             <div>connect-to-compute-cluster</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/job-destinations/tutorial.html\">             <div>Step 12</div>             <div>job-destinations</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"active\">         <a href=\"/training-material/topics/admin/tutorials/pulsar/tutorial.html\">             <div>Step 13</div>             <div>pulsar</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/celery/tutorial.html\">             <div>Step 14</div>             <div>celery</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/gxadmin/tutorial.html\">             <div>Step 15</div>             <div>gxadmin</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/reports/tutorial.html\">             <div>Step 16</div>             <div>reports</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/monitoring/tutorial.html\">             <div>Step 17</div>             <div>monitoring</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/tiaas/tutorial.html\">             <div>Step 18</div>             <div>tiaas</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/sentry/tutorial.html\">             <div>Step 19</div>             <div>sentry</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/ftp/tutorial.html\">             <div>Step 20</div>             <div>ftp</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/beacon/tutorial.html\">             <div>Step 21</div>             <div>beacon</div>         </a>     </li>           </ol> </blockquote>\n<p><!--END_SNIPPET--></p>\n\n<h2 id=\"this-tutorial-assumes-that\">This tutorial assumes that</h2>\n\n<ul>\n  <li>You have a VM or machine where you will install Pulsar, and a directory in which the installation will be done. This tutorial assumes it is <code class=\"language-plaintext highlighter-rouge\">/mnt</code></li>\n  <li>You have completed the “Galaxy Installation with Ansible”, “Connecting Galaxy to a Compute Cluster”, and the “CVMFS” tutorials</li>\n  <li>You have access to the VM/computer where it is installed.</li>\n</ul>\n\n<blockquote class=\"tip\">\n  <tip-title>This is NOT intended as a standalone Pulsar guide</tip-title>\n  <p>This tutorial is not intended to be a standalone Pulsar setup guide. If you read carefully and understand Ansible, it is likely you can figure out which portions are required to just setup Pulsar.</p>\n</blockquote>\n\n<h2 id=\"overview\">Overview</h2>\n\n<p>We will be installing the RabbitMQ server daemon onto the Galaxy server to act as an intermediary message passing system between Galaxy and the remote Pulsar. The figure below shows a schematic representation of the system.</p>\n\n<figure id=\"figure-1\" style=\"max-width: 90%;\"><img src=\"../../images/pulsar_amqp_schema.png\" alt=\"Schematic diagram of Galaxy communicating with a Pulsar server via the RabbitMQ server. \" width=\"1390\" height=\"762\" loading=\"lazy\" /><a target=\"_blank\" href=\"../../images/pulsar_amqp_schema.png\" rel=\"noopener noreferrer\"><small>Open image in new tab</small></a><br /><br /><figcaption><span class=\"figcaption-prefix\"><strong>Figure 1</strong>:</span> Schematic diagram of Galaxy communicating with a Pulsar server via the RabbitMQ server. Red arrows represent AMQP communications and blue represent file transfers (initiated by the Pulsar server.)</figcaption></figure>\n\n<h3 id=\"how-it-will-work\">How it will work</h3>\n\n<ol>\n  <li>Galaxy will send a message to the RabbitMQ server on the Pulsar server’s particular queue saying that there is a job to be run and then will monitor the queue for job status updates.</li>\n  <li>The Pulsar server monitors this queue and when the job appears it will take control of it.</li>\n  <li>The Pulsar server will then download the required data etc. from the Galaxy server using <code class=\"language-plaintext highlighter-rouge\">curl</code>.</li>\n  <li>The Pulsar server will install any required tools/tool dependencies using Conda.</li>\n  <li>The Pulsar server will start running the job using it’s local mechanism and will send a message to the “queue” stating that the job has started.</li>\n  <li>Once the job has finished running, the Pulsar server will send a message to the queue stating that the job has finished.</li>\n  <li>Pulsar then sends the output data etc. back to the Galaxy server by <code class=\"language-plaintext highlighter-rouge\">curl</code> again.</li>\n  <li>The Galaxy server acknowledges the job status and closes the job.</li>\n</ol>\n\n<h3 id=\"some-notes\">Some notes</h3>\n\n<ul>\n  <li>RabbitMQ uses the Advanced Message Queueing Protocol (AMQP) to communicate with both the Galaxy server and the remote Pulsar VM.</li>\n  <li>Transport of files, meta-data etc. occur via <code class=\"language-plaintext highlighter-rouge\">curl</code> from the Pulsar end.</li>\n  <li>RabbitMQ is written in erlang and does not add much overhead to the Galaxy VM, although in larger installations, RabbitMQ is commonly installed on a separate VM to Galaxy. e.g. Galaxy Europe, Galaxy Main and Galaxy Australia.</li>\n</ul>\n\n<blockquote class=\"tip\">\n  <tip-title>Other file transport methods for Pulsar</tip-title>\n\n  <p>Pulsar can use a variety of file transport methods including:</p>\n  <ul>\n    <li>Default: Galaxy initiates file transfer and stages files to Pulsar via http transfer.\n      <ul>\n        <li>This requires that a http transfer port be open on the remote Pulsar.</li>\n      </ul>\n    </li>\n    <li>Remote transfer: Pulsar initiates file transfer. This can use a variety of lso available and can use a variety of methods:\n      <ul>\n        <li>Curl</li>\n        <li>Rsync</li>\n        <li>Http</li>\n      </ul>\n    </li>\n  </ul>\n\n  <p>We use remote transfer using <strong>Curl</strong> here so we don’t need an open port on the Pulsar server and tranfer robustness respectively.</p>\n\n</blockquote>\n\n<blockquote class=\"details\">\n  <details-title>Why are we using Pulsar in MQ mode here and not the RESTful interface?</details-title>\n  <p>We are teaching you to install Pulsar and configure it in MQ mode in this tutorial. Configuring Pulsar in RESTful mode is also possible and is quite useful in certain situations. However, in the most common situation MQ mode is preferable for a number of reasons:</p>\n  <ul>\n    <li>When running Pulsar in RESTful mode, all of the job control and data transfer is controlled by the Galaxy server usually using http transfers. This can place a limit on the size of files that can be transferred without constant configuring of the webserver.</li>\n    <li>When running in RESTful mode, Pulsar also needs to have an https server such as nginx, including securing it, configuring it, getting certificates and opening ports. This can be very difficult to do if you are attempting to submit jobs to an institutional HPC where the admins probably won’t let you do any of these things.</li>\n    <li>In MQ mode, you only need to open a port for the RabbitMQ server on a machine you are more likely to control. The HPC side running Pulsar can just connect back to you.</li>\n  </ul>\n\n  <p>See the <a href=\"https://pulsar.readthedocs.io/en/latest/\">Pulsar documentation</a> for details.</p>\n</blockquote>\n\n<h2 id=\"install-and-configure-a-message-queueing-system\">Install and configure a message queueing system</h2>\n\n<p>In this section we will install the RabbitMQ server on your Galaxy server VM.</p>\n\n<p>RabbitMQ is an AMQP server that can queue messages between systems for all sorts of reasons. Here, we will be using the queue so that Galaxy and Pulsar can communicate jobs, job status and job metadata between them easily and robustly. More information on RabbitMQ can be found <a href=\"https://www.rabbitmq.com/\">on their website</a>.</p>\n\n<h3 id=\"installing-the-roles\">Installing the roles</h3>\n\n<p>Firstly we will add and configure another <em>role</em> to our Galaxy playbook - a community role which runs RabbitMQ in docker and configures it. In order to have docker installed automatically, we use geelingguy’s docker role, which luckly needs no configuration changes. Additionally we will use the Galaxy community role for deploying Pulsar</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Install the Ansible roles</hands-on-title>\n\n  <ol>\n    <li>\n      <p>From your ansible working directory, edit the <code class=\"language-plaintext highlighter-rouge\">requirements.yml</code> file and add the following lines:</p>\n\n      <div data-commit=\"Add requirements\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/requirements.yml\n</span><span class=\"gi\">+++ b/requirements.yml\n</span><span class=\"p\">@@ -31,3 +31,10 @@</span>\n # TPV Linting\n - name: usegalaxy_eu.tpv_auto_lint\n   version: 0.4.3\n<span class=\"gi\">+# RabbitMQ for Pulsar\n+- src: geerlingguy.docker\n+  version: 6.1.0\n+- src: usegalaxy_eu.rabbitmqserver\n+  version: 1.4.4\n+- src: galaxyproject.pulsar\n+  version: 1.0.10\n</span>   \n</code></pre></div>      </div>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-how-to-read-a-diff\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-how-to-read-a-diff\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: How to read a Diff</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <p>If you haven’t worked with diffs before, this can be something quite new or different.</p>   <p>If we have two files, let’s say a grocery list, in two files. We’ll call them ‘a’ and ‘b’.</p>   <blockquote class=\"code-2col\">   <blockquote class=\"code-in\">     <code-in-title>Old</code-in-title>     <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ cat old<br />🍎<br />🍐<br />🍊<br />🍋<br />🍒<br />🥑<br /></code></pre></div>    </div>   </blockquote>   <blockquote class=\"code-out\">     <code-out-title>New</code-out-title>     <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ cat new<br />🍎<br />🍐<br />🍊<br />🍋<br />🍍<br />🥑<br /></code></pre></div>    </div>   </blockquote> </blockquote>   <p>We can see that they have some different entries. We’ve removed 🍒 because they’re awful, and replaced them with an 🍍</p>   <p>Diff lets us compare these files</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>diff old new<br />5c5<br />&lt; 🍒<br /><span class=\"nt\">---</span><br /><span class=\"o\">&gt;</span> 🍍<br /></code></pre></div></div>   <p>Here we see that 🍒 is only in a, and 🍍 is only in b. But otherwise the files are identical.</p>   <p>There are a couple different formats to diffs, one is the ‘unified diff’</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>diff <span class=\"nt\">-U2</span> old new<br /><span class=\"nt\">---</span> old\t2022-02-16 14:06:19.697132568 +0100<br />+++ new\t2022-02-16 14:06:36.340962616 +0100<br />@@ <span class=\"nt\">-3</span>,4 +3,4 @@<br /> 🍊<br /> 🍋<br />-🍒<br />+🍍<br /> 🥑<br /></code></pre></div></div>   <p>This is basically what you see in the training materials which gives you a lot of context about the changes:</p>   <ul>   <li><code class=\"language-plaintext highlighter-rouge\">--- old</code> is the ‘old’ file in our view</li>   <li><code class=\"language-plaintext highlighter-rouge\">+++ new</code> is the ‘new’ file</li>   <li>@@ these lines tell us where the change occurs and how many lines are added or removed.</li>   <li>Lines starting with a - are removed from our ‘new’ file</li>   <li>Lines with a + have been added.</li> </ul>   <p>So when you go to apply these diffs to your files in the training:</p>   <ol>   <li>Ignore the header</li>   <li>Remove lines starting with - from your file</li>   <li>Add lines starting with + to your file</li> </ol>   <p>The other lines (🍊/🍋 and 🥑) above just provide “context”, they help you know where a change belongs in a file, but <strong>should not be edited</strong> when you’re making the above change. Given the above diff, you would find a line with a 🍒, and replace it with a 🍍</p>   <h4 id=\"added--removed-lines\">Added &amp; Removed Lines</h4>   <p>Removals are very easy to spot, we just have removed lines</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">---</span> old\t2022-02-16 14:06:19.697132568 +0100<br />+++ new\t2022-02-16 14:10:14.370722802 +0100<br />@@ <span class=\"nt\">-4</span>,3 +4,2 @@<br /> 🍋<br /> 🍒<br />-🥑<br /></code></pre></div></div>   <p>And additions likewise are very easy, just add a new line, between the other lines in your file.</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">---</span> old\t2022-02-16 14:06:19.697132568 +0100<br />+++ new\t2022-02-16 14:11:11.422135393 +0100<br />@@ <span class=\"nt\">-1</span>,3 +1,4 @@<br /> 🍎<br />+🍍<br /> 🍐<br /> 🍊<br /></code></pre></div></div>   <h4 id=\"completely-new-files\">Completely new files</h4>   <p>Completely new files look a bit different, there the “old” file is <code class=\"language-plaintext highlighter-rouge\">/dev/null</code>, the empty file in a Linux machine.</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>diff <span class=\"nt\">-U2</span> /dev/null old<br /><span class=\"nt\">---</span> /dev/null\t2022-02-15 11:47:16.100000270 +0100<br />+++ old\t2022-02-16 14:06:19.697132568 +0100<br />@@ <span class=\"nt\">-0</span>,0 +1,6 @@<br />+🍎<br />+🍐<br />+🍊<br />+🍋<br />+🍒<br />+🥑<br /></code></pre></div></div>   <p>And removed files are similar, except with the new file being /dev/null</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">---</span> old\t2022-02-16 14:06:19.697132568 +0100<br />+++ /dev/null\t2022-02-15 11:47:16.100000270 +0100<br />@@ <span class=\"nt\">-1</span>,6 +0,0 @@<br />-🍎<br />-🍐<br />-🍊<br />-🍋<br />-🍒<br />-🥑<br /></code></pre></div></div> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n    <li>\n      <p>Now install it with:</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-galaxy <span class=\"nb\">install</span> <span class=\"nt\">-p</span> roles <span class=\"nt\">-r</span> requirements.yml\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h3 id=\"configuring-rabbitmq\">Configuring RabbitMQ</h3>\n\n<p>We need to configure RabbitMQ to be able to handle Pulsar messages. To do this we will need to create some queues, Rabbit users, some queue vhosts and set some passwords. We also need to configure rabbit to listen on various interfaces and ports.</p>\n\n<h4 id=\"defining-virtual-hosts\">Defining Virtual Hosts</h4>\n\n<p>Each set of queues in RabbitMQ are grouped and accessed via virtual hosts. We need to create one of these for the transactions between the Galaxy server and Pulsar server. They are set as an array under the <code class=\"language-plaintext highlighter-rouge\">rabbitmq_vhosts</code> variable.</p>\n\n<h4 id=\"defining-users\">Defining users</h4>\n\n<p>Users need to be defined, given passwords and access to the various queues. We will need to create a user that can access this vhost. We will also create an admin user. The queue will need access to the Pulsar queue vhost. They are set as an array under the <code class=\"language-plaintext highlighter-rouge\">rabbitmq_users</code> variable with the following structure:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"na\">rabbitmq_users</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"na\">user</span><span class=\"pi\">:</span> <span class=\"s\">username</span>\n    <span class=\"na\">password</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{</span><span class=\"nv\"> </span><span class=\"s\">rabbitmq_password_username</span><span class=\"nv\"> </span><span class=\"s\">}}\"</span>\n    <span class=\"na\">vhost</span><span class=\"pi\">:</span> <span class=\"s\">/vhostname</span>\n\n</code></pre></div></div>\n\n<p>Notice the variable we used instead of directly placing the password there. It will be read from vault instead.</p>\n\n<blockquote class=\"tip\">\n  <tip-title>Tagging users</tip-title>\n  <p>Optional: You can add tags to each user if required. e.g. For an admin user it could be useful to add in a <em>administrator</em> tag. These tags allow you to grant permissions to every user with a specific tag.</p>\n</blockquote>\n\n<h4 id=\"rabbitmq-server-config\">RabbitMQ server config</h4>\n\n<p>We also need to set some RabbitMQ server configuration variables. Such as where its security certificates are and which ports to listen on (both via localhost and network).</p>\n\n<blockquote class=\"tip\">\n  <tip-title>Port accessibility is important!</tip-title>\n  <p>We will need to make sure that the RabbitMQ default port is open and accessible on the server we are installing RabbitMQ onto. (In our case this is the Galaxy server). Additionally, RabbitMQ provides a management interface for us, where we can see e.g. queues, connections and statistics.</p>\n\n  <table>\n    <tbody>\n      <tr>\n        <td>Port</td>\n        <td>Usage</td>\n        <td>Suggested Restrictions</td>\n      </tr>\n      <tr>\n        <td><code class=\"language-plaintext highlighter-rouge\">5671</code></td>\n        <td>SSL Listener</td>\n        <td>None</td>\n      </tr>\n      <tr>\n        <td><code class=\"language-plaintext highlighter-rouge\">5672</code></td>\n        <td>Plain text listener</td>\n        <td>Limit to just <code class=\"language-plaintext highlighter-rouge\">172.0.0.0/8</code> to ensure only the host machine and other containers can access it, and we aren’t sending plain text credentials over the internet.</td>\n      </tr>\n      <tr>\n        <td><code class=\"language-plaintext highlighter-rouge\">15672</code></td>\n        <td>Management interface</td>\n        <td>Limit to <code class=\"language-plaintext highlighter-rouge\">172.0.0.0/8</code> to only permit accessing management interface locally.</td>\n      </tr>\n    </tbody>\n  </table>\n</blockquote>\n\n<p>More information about the rabbitmq ansible role can be found <a href=\"https://github.com/usegalaxy-eu/ansible-rabbitmq\">in the repository</a>.</p>\n\n<h3 id=\"add-rabbitmq-configuration-to-galaxy-vm\">Add RabbitMQ configuration to Galaxy VM.</h3>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Add RabbitMQ settings to Galaxy VM groupvars file.</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Edit your <code class=\"language-plaintext highlighter-rouge\">group_vars/secret.yml</code> and define some random passwords:</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-vault edit group_vars/secret.yml\n</code></pre></div>        </div>\n      </blockquote>\n\n      <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">vault_rabbitmq_password_vhost</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">a-really-long-password-here\"</span>\n<span class=\"na\">vault_rabbitmq_admin_password</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">a-different-really-long-password\"</span>\n</code></pre></div>      </div>\n\n      <!-- Ignore this, just for the gat-automation. Vaults are ugly to work with :(\n\n   \n```diff\n--- a/group_vars/secret.yml\n+++ b/group_vars/secret.yml\n@@ -1,7 +1,13 @@\n $ANSIBLE_VAULT;1.1;AES256\n-32653961383866636531396135663630386630346237333333653633313436663439643535323964\n-6363626330336430363332643638646262316338313937320a666566306539373462386266383166\n-30326165393863633463353234613561393939326164376432633732316264636464313061383161\n-3532373937656138320a616361343664353264613332616236623231326137316635323465623562\n-66656539346130353639623736633034653932373438663330646436656336666637313933666264\n-3636313438626533633831323239373461373538646635613637\n+62346261323266656232393034396134316636376533376139666437363535393562663838613938\n+6336666266633563346337623265353935646361326337610a393834333233313461346439376438\n+63383338346530656561636631666134373238366364363164313166346461383736613162653237\n+3461363334323431370a656132303965653262386130353332623937376261396530393761353834\n+38336565666437666436643163363831633331333766653266356163613138393734656465323634\n+39366362383433366437353534663134313330316337393335383962613961386665633261616237\n+35366635373063313631323939396164336330356361393464326636353037336461323531336434\n+35613933303333623031353936393265636130363335376533393335663266313863376135383338\n+36613464373231623938373434306266373234633036343636633963353361356631363533353066\n+39323064336237646432323530313065303331326636353334343862373330313133326363363063\n+38383564636161396435666164643334656435393533643163393434623434656238633631633939\n+33353232666432376661\n   \n```\n{: data-commit=\"Add rabbitmq passwords to the vault\"}\n\n-->\n\n      <p>This is going in the vault as they are secrets we need to set. Both of our services, Galaxy and Pulsar, need these variables, so we’ll need to make sure they’re in both playbooks. Both Galaxy in the job configuration, and Pulsar in its configuration.</p>\n\n      <p>Replace both with long random (or not) string.</p>\n    </li>\n    <li>\n      <p>From your ansible working directory, edit the <code class=\"language-plaintext highlighter-rouge\">group_vars/galaxyservers.yml</code> file and add make the following changes.</p>\n\n      <div data-commit=\"Configure RabbitMQ\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/group_vars/galaxyservers.yml\n</span><span class=\"gi\">+++ b/group_vars/galaxyservers.yml\n</span><span class=\"p\">@@ -174,8 +174,11 @@</span> certbot_environment: staging\n certbot_well_known_root: /srv/nginx/_well-known_root\n certbot_share_key_users:\n   - www-data\n<span class=\"gi\">+certbot_share_key_ids:\n+  - \"999:999\"\n</span> certbot_post_renewal: |\n     systemctl restart nginx || true\n<span class=\"gi\">+    docker restart rabbit_hole || true\n</span> certbot_domains:\n  - \"{{ inventory_hostname }}\"\n certbot_agree_tos: --agree-tos\n<span class=\"p\">@@ -225,6 +228,47 @@</span> slurm_config:\n   SelectType: select/cons_res\n   SelectTypeParameters: CR_CPU_Memory  # Allocate individual cores/memory instead of entire node\n    \n<span class=\"gi\">+#Install pip docker package for ansible\n+pip_install_packages:\n+  - name: docker\n+# RabbitMQ\n+rabbitmq_container:\n+  name: rabbit_hole\n+  image: rabbitmq:3.11-management\n+  hostname: \"{{ inventory_hostname }}\"\n+\n+rabbitmq_plugins:\n+  - rabbitmq_management\n+\n+rabbitmq_config:\n+  listeners:\n+    tcp: none\n+  ssl_listeners:\n+    default: 5671\n+  ssl_options:\n+    verify: verify_peer\n+    cacertfile: /etc/ssl/certs/fullchain.pem\n+    certfile: /etc/ssl/certs/cert.pem\n+    keyfile: /etc/ssl/user/privkey-999:999.pem\n+    fail_if_no_peer_cert: 'false'\n+  management_agent:\n+    disable_metrics_collector: \"false\"\n+  management:\n+    disable_stats: 'false'\n+  consumer_timeout: 21600000 # 6 hours in milliseconds\n+\n+rabbitmq_vhosts:\n+  - /pulsar/pulsar_au\n+\n+rabbitmq_users:\n+  - user: admin\n+    password: \"{{ vault_rabbitmq_admin_password }}\"\n+    tags: administrator\n+    vhost: /\n+  - user: pulsar_au\n+    password: \"{{ vault_rabbitmq_password_vhost }}\"\n+    vhost: /pulsar/pulsar_au\n+\n</span> # TUS\n galaxy_tusd_port: 1080\n galaxy_tus_upload_store: /data/tus\n   \n</code></pre></div>      </div>\n\n      <blockquote class=\"tip\">\n        <tip-title>RabbitMQ installation errors?</tip-title>\n        <p>RabbitMQ depends on specific Erlang versions. If the Erlang version has been updated, you may need to change the value of <code class=\"language-plaintext highlighter-rouge\">rabbitmq_version:</code> in the configuration above. <a href=\"https://www.rabbitmq.com/which-erlang.html\">Information on the RabbitMQ Erlag version requirements.</a></p>\n      </blockquote>\n    </li>\n    <li>\n      <p>Update the Galaxy playbook to include the <em>usegalaxy_eu.rabbitmq</em> role.</p>\n\n      <div data-commit=\"Add role\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/galaxy.yml\n</span><span class=\"gi\">+++ b/galaxy.yml\n</span><span class=\"p\">@@ -43,6 +43,8 @@</span>\n       become: true\n       become_user: \"{{ galaxy_user_name }}\"\n     - galaxyproject.nginx\n<span class=\"gi\">+    - geerlingguy.docker\n+    - usegalaxy_eu.rabbitmqserver\n</span>     - galaxyproject.gxadmin\n     - galaxyproject.cvmfs\n   post_tasks:\n   \n</code></pre></div>      </div>\n\n      <blockquote class=\"tip\">\n        <tip-title>Why is this at the end?</tip-title>\n        <p>This is one of the constant problems with Ansible, how do you order everything correctly? Does an ordering exist such that a single run of the playbook will have everything up and working? We encounter one such instance of this problem now.</p>\n\n        <p>Here are the dependencies between the roles:</p>\n\n        <table>\n          <thead>\n            <tr>\n              <th>From</th>\n              <th>To</th>\n              <th>Purpose</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>nginx</td>\n              <td>galaxy</td>\n              <td>The nginx templates depend on variables only available after the Galaxy role is run</td>\n            </tr>\n            <tr>\n              <td>SSL certificates</td>\n              <td>nginx</td>\n              <td>A running nginx is required</td>\n            </tr>\n            <tr>\n              <td>RabbitMQ</td>\n              <td>SSL certificates</td>\n              <td>RabbitMQ will silently start with incorrect configuration if SSL certificates are not present at boot time.</td>\n            </tr>\n            <tr>\n              <td>Galaxy</td>\n              <td>RabbitMQ</td>\n              <td>Galaxy needs the RabbitMQ available to submit jobs.</td>\n            </tr>\n          </tbody>\n        </table>\n\n        <p>And as you can see there is a circular dependency. Galaxy requires RabbitMQ, but RabbitMQ depends on a long chain of things that depends finally on Galaxy.</p>\n\n        <p>There are some mitigating factors, some software will start with incomplete configuration. We can rely on Galaxy retrying access to RabbitMQ if it isn’t already present. Additionally on first run, Galaxy is restarted by a handler which runs at the end. (Except that the nginx role triggers all pending handlers as part of the SSL certificate deployment.)</p>\n\n        <p>We try to present the optimal version here but due to these interdependencies and Ansible specifics, sometimes it is not possible to determine a good ordering of roles, and multiple runs might be required.</p>\n\n      </blockquote>\n    </li>\n    <li>\n      <p>Run the playbook.</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook galaxy.yml\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n    <li>\n      <p>The rabbitmq server daemon will have been installed on your Galaxy VM. Check that it’s running now:</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>docker ps\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"code-out code-max-300\">\n        <code-out-title>Bash</code-out-title>\n\n        <div class=\"language-ini highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">CONTAINER</span> <span class=\"err\">ID</span>   <span class=\"err\">IMAGE</span>             <span class=\"err\">COMMAND</span>                  <span class=\"err\">CREATED</span>        <span class=\"err\">STATUS</span>       <span class=\"err\">PORTS</span>                                                                                              <span class=\"err\">NAMES</span>\n<span class=\"err\">d0d69d035768</span>   <span class=\"err\">rabbitmq:3.9.11</span>   <span class=\"err\">\"docker-entrypoint.s…\"</span>   <span class=\"err\">6</span> <span class=\"err\">months</span> <span class=\"err\">ago</span>   <span class=\"err\">Up</span> <span class=\"err\">5</span> <span class=\"err\">hours</span>   <span class=\"err\">4369/tcp,</span> <span class=\"err\">0.0.0.0:5671-&gt;5671/tcp,</span> <span class=\"err\">5672/tcp,</span> <span class=\"err\">15691-15692/tcp,</span> <span class=\"err\">25672/tcp,</span> <span class=\"err\">0.0.0.0:15672-&gt;15672/tcp</span>   <span class=\"err\">rabbit_hole</span>\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n    <li>\n      <p>But this doesn’t tell the whole story, so run the diagnostics command to\ncheck that the interfaces are setup and listening. RabbitMQ has a bad\nhabit of silently failing when processing the configuration, without any\nlogging information If RabbitMQ has any problem reading the configuration\nfile, it falls back to the default configuration (listens <em>without</em> ssl on\n<code class=\"language-plaintext highlighter-rouge\">tcp/5672</code>) so be sure to check that everything is OK before continuing.</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>docker <span class=\"nb\">exec </span>rabbit_hole rabbitmq-diagnostics status\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"code-out code-max-300\">\n        <code-out-title>Bash</code-out-title>\n\n        <div class=\"language-ini highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">...</span>\n\n<span class=\"err\">Listeners</span>\n\n<span class=\"err\">Interface:</span> <span class=\"nn\">[::]</span><span class=\"err\">,</span> <span class=\"err\">port:</span> <span class=\"err\">15672,</span> <span class=\"err\">protocol:</span> <span class=\"err\">http,</span> <span class=\"err\">purpose:</span> <span class=\"err\">HTTP</span> <span class=\"err\">API</span>\n<span class=\"err\">Interface:</span> <span class=\"nn\">[::]</span><span class=\"err\">,</span> <span class=\"err\">port:</span> <span class=\"err\">25672,</span> <span class=\"err\">protocol:</span> <span class=\"err\">clustering,</span> <span class=\"err\">purpose:</span> <span class=\"err\">inter-node</span> <span class=\"err\">and</span> <span class=\"err\">CLI</span> <span class=\"err\">tool</span> <span class=\"err\">communication</span>\n<span class=\"err\">Interface:</span> <span class=\"nn\">[::]</span><span class=\"err\">,</span> <span class=\"err\">port:</span> <span class=\"err\">5672,</span> <span class=\"err\">protocol:</span> <span class=\"err\">amqp,</span> <span class=\"err\">purpose:</span> <span class=\"err\">AMQP</span> <span class=\"err\">0-9-1</span> <span class=\"err\">and</span> <span class=\"err\">AMQP</span> <span class=\"err\">1.0</span>\n<span class=\"err\">Interface:</span> <span class=\"err\">0.0.0.0,</span> <span class=\"err\">port:</span> <span class=\"err\">5671,</span> <span class=\"err\">protocol:</span> <span class=\"err\">amqp/ssl,</span> <span class=\"err\">purpose:</span> <span class=\"err\">AMQP</span> <span class=\"err\">0-9-1</span> <span class=\"err\">and</span> <span class=\"err\">AMQP</span> <span class=\"err\">1.0</span> <span class=\"err\">over</span> <span class=\"err\">TLS</span>\n</code></pre></div>        </div>\n\n      </blockquote>\n    </li>\n    <li>\n      <p>Since we enabled metrics, let’s check if the api works:</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <p>Make sure to replace &lt;password&gt; with the one from your vault.\nIf you don’t have jq installed, just leave that part with the pipe out, it just makes it prettier.</p>\n        <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">--silent</span> <span class=\"nt\">-s</span> <span class=\"nt\">-u</span> admin:&lt;password&gt; http://localhost:15672/api/whoami | jq\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"code-out code-max-300\">\n        <code-out-title>Bash</code-out-title>\n\n        <p>This should report the following response:</p>\n\n        <div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"go\">{\n  \"name\": \"admin\",\n  \"tags\": [\n    \"administrator\"\n  ]\n}\n</span></code></pre></div>        </div>\n      </blockquote>\n\n      <p>But wait! There are more ways it can go wrong. To be extra sure, run a quick <code class=\"language-plaintext highlighter-rouge\">curl</code> command.</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl http://localhost:5672\n</code></pre></div>        </div>\n        <p>(the non-encrypted port)</p>\n      </blockquote>\n\n      <blockquote class=\"code-out code-max-300\">\n        <code-out-title>Bash</code-out-title>\n\n        <p>This should report the following response:</p>\n\n        <div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"go\">curl: (7) Failed to connect to localhost port 5672: Connection refused\n</span></code></pre></div>        </div>\n\n        <p>if it doesn’t, consider the following debugging steps:</p>\n\n        <ol>\n          <li>Restarting RabbitMQ</li>\n          <li>Check that the configuration looks correct (ssl private key path looks valid)</li>\n          <li>Check that the private key is shared correctly with the rabbitmq user</li>\n        </ol>\n      </blockquote>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-k</span> <span class=\"nt\">--http0</span>.9 https://localhost:5671 <span class=\"nt\">--output</span> - <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">printf</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n</code></pre></div>        </div>\n      </blockquote>\n\n      <blockquote class=\"code-out code-max-300\">\n        <code-out-title>Bash</code-out-title>\n\n        <p>This should report the following response:</p>\n\n        <div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"go\">AMQP\n</span></code></pre></div>        </div>\n\n        <p>if it doesn’t, consider the following debugging steps:</p>\n\n        <ol>\n          <li>Restarting RabbitMQ</li>\n          <li>Check that the configuration looks correct (ssl private key path looks valid)</li>\n          <li>Check that the private key is shared correctly with the rabbitmq user</li>\n        </ol>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>By this point you should have a functional RabbitMQ! Let’s check out the dashboard:</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Accessing the RabbitMQ Dashboard</hands-on-title>\n\n  <ol>\n    <li>\n      <p>RabbitMQ has a fancy dashboard, so we should make that accessible with our NGINX:</p>\n\n      <div data-commit=\"Add proxy\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/templates/nginx/galaxy.j2\n</span><span class=\"gi\">+++ b/templates/nginx/galaxy.j2\n</span><span class=\"p\">@@ -84,4 +84,14 @@</span> server {\n \tlocation /training-material/ {\n \t\tproxy_pass https://training.galaxyproject.org/training-material/;\n \t}\n<span class=\"gi\">+\n+\tlocation ~* /rabbitmq/(.*) {\n+\t\trewrite ^/rabbitmq/(.*)$ /$1 break;\n+\t\tproxy_pass http://127.0.0.1:15672;\n+\t\tproxy_buffering                    off;\n+\t\tproxy_set_header Host              $http_host;\n+\t\tproxy_set_header X-Real-IP         $remote_addr;\n+\t\tproxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;\n+\t\tproxy_set_header X-Forwarded-Proto $scheme;\n+\t}\n</span> }\n   \n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Run the playbook.</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook galaxy.yml\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n    <li>\n      <p>Now we can take a look at the RabbitMQ dashboard.</p>\n\n      <ol>\n        <li>Open a new tab in your browser and enter your server’s hostname followed by <code class=\"language-plaintext highlighter-rouge\">/rabbitmq/</code></li>\n        <li>A login window should appear. Use the admin credentials you defined earlier in this tutorial.</li>\n        <li>Click on connections and you can see how connections will be established and appear there during the next parts of the tutorial.</li>\n      </ol>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"installing-and-configuring-pulsar-on-a-remote-machine\">Installing and configuring Pulsar on a remote machine</h2>\n\n<p>Now that we have a message queueing system running on our Galaxy VM, we need to install and configure Pulsar on our remote compute VM. To do this we need to create a new ansible playbook to install Pulsar.</p>\n\n<h3 id=\"configuring-pulsar\">Configuring Pulsar</h3>\n\n<p>From the <a href=\"https://github.com/galaxyproject/ansible-pulsar#role-variables\"><code class=\"language-plaintext highlighter-rouge\">galaxyproject.pulsar</code> ansible role documentation</a>, we need to specify some variables.</p>\n\n<p>There is one required variable:</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">pulsar_server_dir</code> - The location in which to install pulsar</p>\n\n<p>Then there are a lot of optional variables. They are listed here for information. We will set some for this tutorial but not all.</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Variable Name</th>\n      <th>Description</th>\n      <th>Default</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">pulsar_yaml_config</code></td>\n      <td>a YAML dictionary whose contents will be used to create Pulsar’s <code class=\"language-plaintext highlighter-rouge\">app.yml</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">pulsar_venv_dir</code></td>\n      <td>The role will create a virtualenv from which Pulsar will run</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">&lt;pulsar_server_dir&gt;/venv</code> if installing via pip, <code class=\"language-plaintext highlighter-rouge\">&lt;pulsar_server_dir&gt;/.venv</code> if not.</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">pulsar_config_dir</code></td>\n      <td>Directory that will be used for Pulsar configuration files.</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">&lt;pulsar_server_dir&gt;/config</code> if installing via pip, <code class=\"language-plaintext highlighter-rouge\">&lt;pulsar_server_dir&gt;</code> if not</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">pulsar_optional_dependencies</code></td>\n      <td>List of optional dependency modules to install, depending on which features you are enabling.</td>\n      <td><code class=\"language-plaintext highlighter-rouge\">None</code></td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">pulsar_install_environments</code></td>\n      <td>Installing dependencies may require setting certain environment variables to compile successfully.</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">pulsar_create_user</code></td>\n      <td>Should a user be created for running pulsar?</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">pulsar_user</code></td>\n      <td>Define the user details</td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Some of the other options we will be using are:</p>\n\n<ul>\n  <li>\n    <p>We will set the tool dependencies to rely on <strong>conda</strong> for tool installs.</p>\n  </li>\n  <li>\n    <p>You will need to know the FQDN or IP address of the Galaxy server VM that you installed RabbitMQ on.</p>\n  </li>\n</ul>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Configure pulsar group variables</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Create a new file in <code class=\"language-plaintext highlighter-rouge\">group_vars</code> called <code class=\"language-plaintext highlighter-rouge\">pulsarservers.yml</code> and set some of the above variables as well as some others.</p>\n\n      <div data-commit=\"Add pulsar group variables\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- /dev/null\n</span><span class=\"gi\">+++ b/group_vars/pulsarservers.yml\n</span><span class=\"p\">@@ -0,0 +1,51 @@</span>\n<span class=\"gi\">+galaxy_server_hostname: \"{{ groups['galaxyservers'][0] }}\" # Important!!!\n+# Put your Galaxy server's fully qualified domain name (FQDN) (or the FQDN of the RabbitMQ server) above.\n+\n+pulsar_root: /mnt/pulsar\n+\n+pulsar_pip_install: true\n+pulsar_pycurl_ssl_library: openssl\n+pulsar_systemd: true\n+pulsar_systemd_runner: webless\n+\n+pulsar_create_user: true\n+pulsar_user: {name: pulsar, shell: /bin/bash}\n+\n+pulsar_optional_dependencies:\n+  - pyOpenSSL\n+  # For remote transfers initiated on the Pulsar end rather than the Galaxy end\n+  - pycurl\n+  # drmaa required if connecting to an external DRM using it.\n+  - drmaa\n+  # kombu needed if using a message queue\n+  - kombu\n+  # amqp 5.0.3 changes behaviour in an unexpected way, pin for now.\n+  - 'amqp==5.0.2'\n+  # psutil and pylockfile are optional dependencies but can make Pulsar\n+  # more robust in small ways.\n+  - psutil\n+\n+pulsar_yaml_config:\n+  staging_directory: \"{{ pulsar_staging_dir }}\"\n+  persistence_directory: \"{{ pulsar_persistence_dir }}\"\n+  tool_dependency_dir: \"{{ pulsar_dependencies_dir }}\"\n+  # The following are the settings for the pulsar server to contact the message queue with related timeouts etc.\n+  message_queue_url: \"pyamqp://pulsar_au:{{ vault_rabbitmq_password_vhost }}@{{ galaxy_server_hostname }}:5671//pulsar/pulsar_au?ssl=1\"\n+  min_polling_interval: 0.5\n+  amqp_publish_retry: True\n+  amqp_publish_retry_max_retries: 5\n+  amqp_publish_retry_interval_start: 10\n+  amqp_publish_retry_interval_step: 10\n+  amqp_publish_retry_interval_max: 60\n+  # We also need to create the dependency resolvers configuration so pulsar knows how to find and install dependencies\n+  # for the tools we ask it to run. The simplest method which covers 99% of the use cases is to use conda auto installs\n+  # similar to how Galaxy works.\n+  dependency_resolution:\n+    resolvers:\n+      - type: conda\n+        auto_init: true\n+        auto_install: true\n+\n+# Pulsar should use the same job metrics plugins as Galaxy. This will automatically set `job_metrics_config_file` in\n+# `pulsar_yaml_config` and create `{{ pulsar_config_dir }}/job_metrics_conf.yml`.\n+pulsar_job_metrics_plugins: \"{{ galaxy_job_metrics_plugins }}\"\n</span>   \n</code></pre></div>      </div>\n\n      <blockquote class=\"details\">\n        <details-title>Running non-conda tools</details-title>\n        <p>If the tool you want to run on Pulsar doesn’t have a conda package, you will need to make alternative arrangements! This is complex and beyond our scope here. See the <a href=\"https://pulsar.readthedocs.io/en/latest/\">Pulsar documentation</a> for details.</p>\n      </blockquote>\n    </li>\n    <li>\n      <p>Add the following lines to your <code class=\"language-plaintext highlighter-rouge\">hosts</code> file:</p>\n\n      <div data-commit=\"Add pulsar host\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/hosts\n</span><span class=\"gi\">+++ b/hosts\n</span><span class=\"p\">@@ -2,3 +2,5 @@</span>\n gat-0.eu.galaxy.training ansible_connection=local ansible_user=ubuntu\n [dbservers:children]\n galaxyservers\n<span class=\"gi\">+[pulsarservers]\n+gat-0.oz.galaxy.training ansible_user=ubuntu\n</span>   \n</code></pre></div>      </div>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>We will now write a new playbook for the pulsar installation as we are going to install it on a separate VM. We will also install the CVMFS client and the Galaxy CVMFS repos on this machine so Pulsar has the same access to reference data that Galaxy does.</p>\n\n<p>We need to include a couple of pre-tasks to install virtualenv, git, etc.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Creating the playbook</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Create a <code class=\"language-plaintext highlighter-rouge\">pulsar.yml</code> file with the following contents:</p>\n\n      <div data-commit=\"Add pulsar playbook\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- /dev/null\n</span><span class=\"gi\">+++ b/pulsar.yml\n</span><span class=\"p\">@@ -0,0 +1,21 @@</span>\n<span class=\"gi\">+- hosts: pulsarservers\n+  vars_files:\n+    - group_vars/secret.yml\n+  pre_tasks:\n+    - name: Install some packages\n+      package:\n+        name:\n+          - build-essential\n+          - git\n+          - python3-dev\n+          - libcurl4-openssl-dev\n+          - libssl-dev\n+          - virtualenv\n+          - python3-venv\n+        state: present\n+        update_cache: yes\n+      become: yes\n+  roles:\n+    - role: galaxyproject.cvmfs\n+      become: yes\n+    - galaxyproject.pulsar\n</span>   \n</code></pre></div>      </div>\n\n      <p>There are a couple of <em>pre-tasks</em> here. This is because we need to install some base packages on these very vanilla ubuntu instances as well as give ourselves ownership of the directory we are installing into.</p>\n    </li>\n  </ol>\n\n</blockquote>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Run the Playbook</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Run the playbook.</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook pulsar.yml\n</code></pre></div>        </div>\n      </blockquote>\n\n      <p>After the script has run, pulsar will be installed on the remote machines!</p>\n\n      <blockquote class=\"tip\">\n        <tip-title>Connection issues?</tip-title>\n        <p>If your remote pulsar machine uses a different key, you may need to supply the <code class=\"language-plaintext highlighter-rouge\">ansible-playbook</code> command with the private key for the connection using the <code class=\"language-plaintext highlighter-rouge\">--private-key key.pem</code> option.</p>\n      </blockquote>\n    </li>\n    <li>\n      <p>Log in to the machines and have a look in the <code class=\"language-plaintext highlighter-rouge\">/mnt/pulsar</code> directory. You will see the venv and config directories. All the config files created by Ansible can be perused.</p>\n    </li>\n    <li>\n      <p>Run <code class=\"language-plaintext highlighter-rouge\">journalctl -f -u pulsar</code></p>\n\n      <p>A log will now start scrolling, showing the startup of pulsar. You’ll notice that it will be initializing and installing conda. Once this is completed, Pulsar will be listening on the assigned port.</p>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"configuring-galaxy-to-use-pulsar-as-a-job-destination\">Configuring Galaxy to use Pulsar as a job destination</h2>\n\n<p>Now we have a Pulsar server up and running, we need to tell our Galaxy about it.</p>\n\n<p>Galaxy talks to the Pulsar server via it’s job configuration file. We need to let Galaxy know about Pulsar there and make sure Galaxy has loaded the requisite job runner, and has a destination set up.</p>\n\n<p>There are three things we need to do here:</p>\n\n<ul>\n  <li>Create a job runner which uses the  <code class=\"language-plaintext highlighter-rouge\">galaxy.jobs.runners.pulsar:PulsarMQJobRunner</code> code.</li>\n  <li>Create a job destination referencing the above job runner.</li>\n  <li>Tell Galaxy which tools to send to this job destination.</li>\n</ul>\n\n<p>For this tutorial, we will configure Galaxy to run the BWA and BWA-MEM tools on Pulsar.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Configure Galaxy</hands-on-title>\n\n  <ol>\n    <li>\n      <p>In your <code class=\"language-plaintext highlighter-rouge\">group_vars/galaxyservers.yml</code> file add the following job runner to the <code class=\"language-plaintext highlighter-rouge\">&lt;plugins&gt;</code> section:</p>\n\n      <div data-commit=\"Add pulsar plugin\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/group_vars/galaxyservers.yml\n</span><span class=\"gi\">+++ b/group_vars/galaxyservers.yml\n</span><span class=\"p\">@@ -21,6 +21,16 @@</span> galaxy_job_config:\n     slurm:\n       load: galaxy.jobs.runners.slurm:SlurmJobRunner\n       drmaa_library_path: /usr/lib/slurm-drmaa/lib/libdrmaa.so.1\n<span class=\"gi\">+    pulsar_runner:\n+      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner\n+      amqp_url: \"pyamqp://pulsar_au:{{ vault_rabbitmq_password_vhost }}@localhost:5671/{{ rabbitmq_vhosts[0] }}?ssl=1\"\n+      amqp_acknowledge: true\n+      amqp_ack_republish_time: 1200\n+      amqp_consumer_timeout: 2\n+      amqp_publish_retry: true\n+      amqp_publish_retry_max_retries: 60\n+      galaxy_url: \"https://{{ inventory_hostname }}\"\n+      manager: _default_\n</span>   handling:\n     assign: ['db-skip-locked']\n   execution:\n   \n</code></pre></div>      </div>\n\n      <p>Add the following to the <code class=\"language-plaintext highlighter-rouge\">destinations:</code> section of your <code class=\"language-plaintext highlighter-rouge\">tpv_rules_local</code> file:</p>\n\n      <div data-commit=\"Add pulsar destination\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/files/galaxy/config/tpv_rules_local.yml\n</span><span class=\"gi\">+++ b/files/galaxy/config/tpv_rules_local.yml\n</span><span class=\"p\">@@ -54,3 +54,18 @@</span> destinations:\n     max_mem: 8\n     params:\n       native_specification: --nodes=1 --ntasks=1 --cpus-per-task={cores} --time={params['walltime']}:00:00\n<span class=\"gi\">+\n+  pulsar:\n+    runner: pulsar_runner\n+    params:\n+      default_file_action: remote_transfer\n+      dependency_resolution: remote\n+      jobs_directory: /mnt/pulsar/files/staging\n+      persistence_directory: /mnt/pulsar/files/persisted_data\n+      remote_metadata: false\n+      rewrite_parameters: true\n+      transport: curl\n+      outputs_to_working_directory: false\n+    scheduling:\n+      require:\n+        - pulsar\n</span>   \n</code></pre></div>      </div>\n\n      <p>You’ll notice we need to know a lot about the configuration of the remote end, this is an unfortunate requirement with pulsar. Changes to e.g. the staging directory need to be coordinated between Pulsar and Galaxy. That’s fine if both are under your administration, but for a completely remote Pulsar it can be difficult.</p>\n\n      <p>Notably we also override <code class=\"language-plaintext highlighter-rouge\">outputs_to_working_directory</code>, as this option is incompatible with running Pulsar, and, unnecessary. Pulsar already provides the same job isolation and safety that we request when we set that option by default in Galaxy’s configuration.</p>\n    </li>\n    <li>\n      <p>Install the BWA and BWA-MEM tools, if needed.</p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-install-tools-via-the-admin-ui\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-install-tools-via-the-admin-ui\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Install tools via the Admin UI</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ol>   <li>Open Galaxy in your browser and type <code class=\"language-plaintext highlighter-rouge\">bwa</code> in the tool search box on the left. If “Map with BWA-MEM” is among the search results, you can skip the following steps.</li>   <li>Access the Admin menu from the top bar (you need to be logged-in with an email specified in the <code class=\"language-plaintext highlighter-rouge\">admin_users</code> setting)</li>   <li>Click “Install and Uninstall”, which can be found on the left, under “Tool Management”</li>   <li>Enter <code class=\"language-plaintext highlighter-rouge\">bwa</code> in the search interface</li>   <li>Click on the first hit, having <code class=\"language-plaintext highlighter-rouge\">devteam</code> as owner</li>   <li>Click the “Install” button for the latest revision</li>   <li>Enter “Mapping” as the target section and click “OK”.</li> </ol> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n    <li>\n      <p>We now need to tell Galaxy to send BWA and BWA-MEM jobs to the <code class=\"language-plaintext highlighter-rouge\">pulsar</code> destination. We specify this in the <code class=\"language-plaintext highlighter-rouge\">&lt;tools&gt;</code> section of your job conf.</p>\n\n      <p>Add the following to the end of the TPV rules file (inside the <code class=\"language-plaintext highlighter-rouge\">tools:</code> section if it exists or create it if it doesn’t.)</p>\n\n      <div data-commit=\"Send bwa and bwa-mem to pulsar\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/files/galaxy/config/tpv_rules_local.yml\n</span><span class=\"gi\">+++ b/files/galaxy/config/tpv_rules_local.yml\n</span><span class=\"p\">@@ -26,6 +26,14 @@</span> tools:\n         cores: int(job.get_param_values(app)['__job_resource']['cores'])\n         params:\n            walltime: \"{int(job.get_param_values(app)['__job_resource']['time'])}\"\n<span class=\"gi\">+  .*/bwa/.*:\n+    scheduling:\n+      require:\n+        - pulsar\n+  .*/bwa_mem/.*:\n+    scheduling:\n+      require:\n+        - pulsar\n</span>    \n destinations:\n   local_env:\n   \n</code></pre></div>      </div>\n\n      <p>Note that here we are using the short tool IDs. If you want to run only a specific version of a tool in Pulsar, you have to use the full tool ID (e.g. <code class=\"language-plaintext highlighter-rouge\">toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4</code>) instead. The full tool ID can be found inside the <code class=\"language-plaintext highlighter-rouge\">integrated_tool_panel.xml</code> file in the <code class=\"language-plaintext highlighter-rouge\">mutable-config</code> directory.</p>\n    </li>\n    <li>\n      <p>Finally run the Galaxy playbook in order to deploy the updated job configuration, and to restart Galaxy.</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook galaxy.yml\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<blockquote class=\"hidden\">\n  <div data-test=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1-pulsar.sh\n</code></pre></div>  </div>\n</blockquote>\n\n<h2 id=\"testing-pulsar\">Testing Pulsar</h2>\n\n<p>Now we will upload a small set of data to run bwa-mem with.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Testing the Pulsar destination</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Upload the following files from zenodo.</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://zenodo.org/record/582600/files/mutant_R1.fastq\nhttps://zenodo.org/record/582600/files/mutant_R2.fastq\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p><strong>Map with BWA-MEM</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> with the following parameters</p>\n      <ul>\n        <li><em>“Will you select a reference genome from your history or use a built-in index”</em>: <code class=\"language-plaintext highlighter-rouge\">Use a built-in genome index</code></li>\n        <li><em>“Using reference genome”</em>: <code class=\"language-plaintext highlighter-rouge\">Escherichia coli (str. K-12 substr MG1655): eschColi_K12</code></li>\n        <li><em>“Single or Paired-end reads”</em>: <code class=\"language-plaintext highlighter-rouge\">Paired end</code></li>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Select first set of reads”</em>: <code class=\"language-plaintext highlighter-rouge\">mutant_R1.fastq</code></li>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Select second set of reads”</em>: <code class=\"language-plaintext highlighter-rouge\">mutant_R2.fastq</code></li>\n      </ul>\n\n      <p>As soon as you press <em>execute</em> Galaxy will send the job to the pulsar server. You can watch the log in Galaxy using:</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>journalctl -fu galaxy\n</code></pre></div>      </div>\n\n      <p>You can watch the log in Pulsar by ssh’ing to it and tailing the log file with:</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>journalctl -fu pulsar\n</code></pre></div>      </div>\n    </li>\n  </ol>\n\n</blockquote>\n\n<blockquote class=\"hidden\">\n  <div data-test=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>2-run-job.sh\n</code></pre></div>  </div>\n</blockquote>\n\n<p>You’ll notice that the Pulsar server has received the job (all the way in Australia!) and now should be installing bwa-mem via conda. Once this is complete (which may take a while - first time only) the job will run. When it starts running it will realise it needs the <em>E. coli</em> genome from CVMFS and fetch that, and then results will be returned to Galaxy!</p>\n\n<p>How awesome is that? Pulsar in another continent with reference data automatically from CVMFS :)</p>\n\n<!--SNIPPET-->\n<blockquote class=\"hands_on\">   <div class=\"box-title hands_on-title\" id=\"hands-on-time-to-git-commit\"><i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i> Hands-on: Time to git commit</div>   <p>It’s time to commit your work! Check the status with</p>   <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git status<br /></code></pre></div></div>   <p>Add your changed files with</p>   <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git add ... # any files you see that are changed<br /></code></pre></div></div>   <p>And then commit it!</p>   <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git commit -m 'Finished Running Jobs on Remote Resources with Pulsar'<br /></code></pre></div></div> </blockquote>\n<p><!--END_SNIPPET--></p>\n\n<!--SNIPPET-->\n<blockquote class=\"comment\">   <div class=\"box-title comment-title\" id=\"comment-got-lost-along-the-way\"><i class=\"far fa-comment-dots\" aria-hidden=\"true\"></i> Comment: Got lost along the way?</div>   <p>If you missed any steps, you can compare against the <a href=\"https://github.com/hexylena/git-gat/tree/step-11\">reference files</a>, or see what changed since <a href=\"https://github.com/hexylena/git-gat/compare/step-10...step-11#files_bucket\">the previous tutorial</a>.</p>   <p>If you’re using <code class=\"language-plaintext highlighter-rouge\">git</code> to track your progress, remember to add your changes and commit with a good commit message!</p> </blockquote>\n<p><!--END_SNIPPET--></p>\n\n<h2 id=\"retries-of-the-staging-actions\">Retries of the staging actions</h2>\n\n<p>When the staging actions are carried out by the Pulsar server itself (like in the case when driving Pulsar by message queue), there are some parameters that can be tweaked to ensure reliable communication between the Galaxy server and the remote Pulsar server.\nThe aim of these parameters is to control the retrying of staging actions in the event of a failure.</p>\n\n<p>For each action (preprocess/input or postprocess/output), you can specify:</p>\n<div class=\"language-text highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> - *_action_max_retries    - the maximum number of retries before giving up\n - *_action_interval_start - how long start sleeping between retries (in seconds)\n - *_action_interval_step  - by how much the interval is increased for each retry (in seconds)\n - *_action_interval_max   - the maximum number of seconds to sleep between retries\n</code></pre></div></div>\n<p>substitute the * with <code class=\"language-plaintext highlighter-rouge\">preprocess</code> or <code class=\"language-plaintext highlighter-rouge\">postprocess</code></p>\n\n<p>In the following box, as an example, we have collected the values adopted in a Pulsar site with an unreliable network connection:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">preprocess_action_max_retries</span><span class=\"pi\">:</span> <span class=\"m\">30</span>\n<span class=\"na\">preprocess_action_interval_start</span><span class=\"pi\">:</span> <span class=\"m\">2</span>\n<span class=\"na\">preprocess_action_interval_step</span><span class=\"pi\">:</span> <span class=\"m\">10</span>\n<span class=\"na\">preprocess_action_interval_max</span><span class=\"pi\">:</span> <span class=\"m\">300</span>\n<span class=\"na\">postprocess_action_max_retries</span><span class=\"pi\">:</span> <span class=\"m\">30</span>\n<span class=\"na\">postprocess_action_interval_start</span><span class=\"pi\">:</span> <span class=\"m\">2</span>\n<span class=\"na\">postprocess_action_interval_step</span><span class=\"pi\">:</span> <span class=\"m\">10</span>\n<span class=\"na\">postprocess_action_interval_max</span><span class=\"pi\">:</span> <span class=\"m\">300</span>\n\n</code></pre></div></div>\n<p>In this case, for both actions, Pulsar will try to carry out the staging action 30 times, sleeping 2 secs after the first retry and adding 10 secs more to each next retries, until a maximum of 300 seconds between retries.</p>\n\n<p>We hope you never have to experience a situation like this one, but if needed just adapt the numbers to your case and add the parameters in the <code class=\"language-plaintext highlighter-rouge\">pulsar_yaml_config</code> section of your <code class=\"language-plaintext highlighter-rouge\">pulsarservers.yml</code> file.</p>\n\n<h2 id=\"pulsar-in-production\">Pulsar in Production</h2>\n\n<p>If you want to make use of Pulsar on a Supercomputer, you only need access to a submit node, and you will need to run Pulsar there. We recommend that if you need to run a setup with Pulsar, that you deploy an AMQP server (e.g. RabbitMQ) alongside your Galaxy. That way, you can run Pulsar on any submit nodes, and it can connect directly to the AMQP and Galaxy. Other Pulsar deployment options require exposing ports wherever Pulsar is running, and this requires significant more coordination effort.</p>\n\n<p>For each new Pulsar server, you will need to add:</p>\n<ol>\n  <li>In the RabbitMQ config:\n    <ul>\n      <li>A vhost</li>\n      <li>A user - configured with a password and the new vhost</li>\n    </ul>\n  </li>\n  <li>In the Galaxy job configuration\n    <ul>\n      <li>A new job runner with the new connection string</li>\n      <li>A new destination or multiple destinations for the new runner.</li>\n    </ul>\n  </li>\n</ol>\n\n<p>Pulsar servers can be the head node of a cluster. You can create a cluster and use your favourite job scheduler such as Slurm or PBS to schedule jobs. You can have many destinations in your Galaxy job conf file that change the number of cpus, amount of RAM etc. It can get quite complex and flexible if you like.</p>\n\n<h3 id=\"australia\">Australia</h3>\n\n<p>You can also create multiple queues on your RabbitMQ server for multiple Pulsar servers. On Galaxy Australia, we run 5 different Pulsar servers spread out all around the country. They all communicate with Galaxy via the one RabbitMQ server.</p>\n\n<p><a href=\"../../images/pulsar_australia.png\" rel=\"noopener noreferrer\"><img src=\"../../images/pulsar_australia.png\" alt=\"Map of australia with 6 pulsar nodes marked around the country.\" width=\"1567\" height=\"819\" loading=\"lazy\" /></a></p>\n\n<h3 id=\"europe\">Europe</h3>\n\n<p>Galaxy Europe has taken Pulsar and built <a href=\"https://pulsar-network.readthedocs.io/en/latest\">The Pulsar Network</a>. This provides a framework for easily deploying Pulsar clusters in the cloud, something needed to support compute centers which might not have as much experience. This way they get an easy package they can deploy and the European Galaxy team can manage.</p>\n\n<p><a href=\"https://pulsar-network.readthedocs.io/en/latest/_images/nodes.png\" rel=\"noopener noreferrer\"><img src=\"https://pulsar-network.readthedocs.io/en/latest/_images/nodes.png\" alt=\"Map of europe with pulsar nodes marked in many countries. An inset shows australia with a node there too.\" loading=\"lazy\" /></a></p>\n\n<p>The main purpose of this network is to support the workload of the UseGalaxy.eu instance by distributing it across several European data centers and clusters. If you’re interested in setting up something similar, they <a href=\"https://pulsar-network.readthedocs.io/en/latest/introduction.html\">provide documentation</a> on how to install and configure a Pulsar network endpoint on a cloud infrastructure and how to connect it to your server.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>You’re ready to ship your Galaxy jobs around the world! Now wherever you have compute space, you know how to setup a Pulsar node and connect it to Galaxy. Let us know if you come up with creative places to run your Galaxy jobs (coworker’s laptops, your IoT fridge, the sky is the limit if it’s x86 and has python)</p>\n\n<!--SNIPPET-->\n<blockquote class=\"comment\">   <div class=\"box-title comment-title\" id=\"comment-galaxy-admin-training-path-1\"><i class=\"far fa-comment-dots\" aria-hidden=\"true\"></i> Comment: Galaxy Admin Training Path</div>   <p>The yearly Galaxy Admin Training follows a specific ordering of tutorials. Use this timeline to help keep track of where you are in Galaxy Admin Training.</p>   <ol id=\"git-gat-timeline\">                    <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/ansible-galaxy/tutorial.html\">             <div>Step 1</div>             <div>ansible-galaxy</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/backup-cleanup/tutorial.html\">             <div>Step 2</div>             <div>backup-cleanup</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/customization/tutorial.html\">             <div>Step 3</div>             <div>customization</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/tus/tutorial.html\">             <div>Step 4</div>             <div>tus</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/cvmfs/tutorial.html\">             <div>Step 5</div>             <div>cvmfs</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/apptainer/tutorial.html\">             <div>Step 6</div>             <div>apptainer</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/tool-management/tutorial.html\">             <div>Step 7</div>             <div>tool-management</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/reference-genomes/tutorial.html\">             <div>Step 8</div>             <div>reference-genomes</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/data-library/tutorial.html\">             <div>Step 9</div>             <div>data-library</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/dev/tutorials/bioblend-api/tutorial.html\">             <div>Step 10</div>             <div>dev/bioblend-api</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/connect-to-compute-cluster/tutorial.html\">             <div>Step 11</div>             <div>connect-to-compute-cluster</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/job-destinations/tutorial.html\">             <div>Step 12</div>             <div>job-destinations</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"active\">         <a href=\"/training-material/topics/admin/tutorials/pulsar/tutorial.html\">             <div>Step 13</div>             <div>pulsar</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/celery/tutorial.html\">             <div>Step 14</div>             <div>celery</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/gxadmin/tutorial.html\">             <div>Step 15</div>             <div>gxadmin</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/reports/tutorial.html\">             <div>Step 16</div>             <div>reports</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/monitoring/tutorial.html\">             <div>Step 17</div>             <div>monitoring</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/tiaas/tutorial.html\">             <div>Step 18</div>             <div>tiaas</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/sentry/tutorial.html\">             <div>Step 19</div>             <div>sentry</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/ftp/tutorial.html\">             <div>Step 20</div>             <div>ftp</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/beacon/tutorial.html\">             <div>Step 21</div>             <div>beacon</div>         </a>     </li>           </ol> </blockquote>\n<p><!--END_SNIPPET--></p>\n"],"ref_slides":["# What are heterogenous compute resources?\n\nDifferences in:\n- Operating system or version\n- Users/groups\n- Data accessibility\n- Administrative control\n- Physical Location (i.e. Cities)\n\nGalaxy expects:\n- One OS, version (dependencies)\n- Shared filesystem w/ fixed paths\n\n---\n# Example - Australia\n\n![australia_locations.png](../../images/australia_locations.png)\n\n---\n# Partial solution - CLI job runner\n\nSSH to remote, submit jobs with CLI `sbatch`, `qsub`, etc.\n\nStill depends on shared FS\n\n---\n# Pulsar\n\n![pulsar_logo.png](../../images/pulsar_logo.png)\n\nGalaxy's remote job management system\n\n* Can run jobs on any(?) OS including Windows\n\n* Multiple modes of operation for every environment\n\n---\n# Pulsar - Architecture\n\n* Pulsar server runs on remote resource (e.g. cluster head node)\n\n* Galaxy Pulsar job runner is Pulsar client\n\n* Communication is via HTTP or AMQP, language is JSON\n\n* File transport is dependent on communication method\n\n---\n# Pulsar - Architecture\n\n![pulsar_schematic.png](../../images/pulsar_schematic.png)\n\n---\n# Pulsar Transports - RESTful\n\nPulsar server listens over HTTP(S)\n\nPulsar client (Galaxy) initiates connections to Pulsar server\n\nGood for:\n- Environments where firewall, open ports are not concerns\n- No external dependencies (AMQP server)\n\n---\n# Pulsar Transports - AMQP\n\nPulsar server and client connect to AMQP server\n\nGood for:\n- Firewalled/NATted remote compute\n- Networks w/ bad connectivity\n\n---\n# Pulsar Transports - Embedded\n\nGalaxy runs Pulsar server internally\n\nGood for:\n- Manipulating paths\n- Copying input datasets from non-shared filesystem\n\n---\n# Pulsar - Job file staging\n\nPulsar can be configured to *push* or *pull* when using RESTful:\n- Push\n  - Galaxy sends job inputs, metadata to Pulsar over HTTP\n  - Upon completion signal from Pulsar, Galaxy pulls from Pulsar over HTTP\n- Pull\n  - Upon setup signal, Pulsar pulls job inputs, metadata from Galaxy over HTTP\n  - Upon completion, Pulsar pushes to Galaxy over HTTP\n\nPulsar can use libcurl for more robust transfers with resume capability\n\nAMQP is pull-only because Pulsar does not run HTTP server\n\n---\n# Pulsar - Dependency management\n\nPulsar does not provide Tool Shed tool dependency management. But:\n- It has a similar dependency resolver config to Galaxy\n- It can auto-install **conda** dependencies\n- It can use containers too!\n\n---\n# Pulsar - Job management\n\nPulsar \"managers\" provide job running interfaces:\n- `queued_python`: Run locally on the Pulsar server\n- `queued_drmaa`: Run on a cluster with DRMAA\n- `queued_cli`: Run on a cluster with local `qsub`, `sbatch`, etc.\n- `queued_condor`: Run on HTCondor\n\n---\n# Pulsar Australia\n\n![pulsar_australia.png](../../images/pulsar_australia.png)\n\n---\n\n# Resources\n\n* Pulsar Read-the-docs\n    * [https://pulsar.readthedocs.io/en/latest/index.html](https://pulsar.readthedocs.io/en/latest/index.html)\n* Pulsar on galaxyproject.org\n    * [https://galaxyproject.org/admin/config/pulsar/](https://galaxyproject.org/admin/config/pulsar/)\n* Pulsar Github\n    * [https://github.com/galaxyproject/pulsar](https://github.com/galaxyproject/pulsar)\n* Pulsar Ansible\n    * [https://github.com/galaxyproject/ansible-pulsar](https://github.com/galaxyproject/ansible-pulsar)\n"],"hands_on":true,"slides":true,"mod_date":"2024-05-29 14:28:52 +0000","pub_date":"2019-01-28 04:02:36 +0000","version":171,"api":"https://training.galaxyproject.org/training-material/api/topics/admin/tutorials/pulsar/tutorial.json","tools":[],"supported_servers":[],"topic_name_human":"Galaxy Server administration","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"slides_recordings":[{"captioners":["shiltemann"],"date":"2021-02-15","galaxy_version":"21.01","length":"14M","youtube_id":"M1-Z_2tuQPI","speakers":["slugger70"]}],"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial","logo":"assets/images/gat.png"}