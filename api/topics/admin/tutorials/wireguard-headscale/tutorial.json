{"layout":"tutorial_hands_on","title":"Deploying Tailscale/Headscale for private mesh networking","zenodo_link":"","questions":["What is Tailscale?","When is it useful?","Is it right for me?"],"objectives":["Setup a tailnet across a few nodes"],"time_estimation":"60m","key_points":["Tailscale is a fantastic bit of software that Just Works™","We use headscale, an open source reimplementation of Tailscale's control server because it's easy to use in training","But if you can afford Tailscale, just use that.","There is a FOSS plan, go check it out!"],"contributions":{"authorship":["hexylena"],"editing":["natefoo"]},"requirements":[{"type":"internal","topic_name":"admin","tutorials":["ansible"]},{"type":"none","title":"Three or more VMs (they can be tiny, 1 CPU, <1GB RAM)"}],"subtopic":"cloud","tags":["wireguard","networking"],"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00027","url":"/topics/admin/tutorials/wireguard-headscale/tutorial.html","topic_name":"admin","tutorial_name":"wireguard-headscale","dir":"topics/admin/tutorials/wireguard-headscale","symlink":null,"id":"admin/wireguard-headscale","ref_tutorials":["<p><a href=\"https://tailscale.com/\">Tailscale</a> makes secure networking easy, it really is like magic. If you’ve used wireguard before, you know it takes a bit to setup and some configuration if you need to do anything fancy.</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#what-is-tailscale\" id=\"markdown-toc-what-is-tailscale\">What is Tailscale?</a>    <ol>\n      <li><a href=\"#is-it-right-for-me\" id=\"markdown-toc-is-it-right-for-me\">Is it right for me?</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#setting-up-the-infrastructure\" id=\"markdown-toc-setting-up-the-infrastructure\">Setting up the infrastructure</a></li>\n</ol>\n\n</blockquote>\n\n<h1 id=\"what-is-tailscale\">What is Tailscale?</h1>\n\n<p>It’s like Wireguard but easier and they built a <strong>lot</strong> of nice features on top of it. It’s networking that “Just Works™” even more than Wireguard. If you prefer to use plain Wireguard without Headscale/Tailscale, or just want to get an understanding of the technology that Headscale/Tailscale build off of, <a href=\"/training-material/topics/admin/tutorials/wireguard/tutorial.html\">there is a tutorial for that</a> as well.</p>\n\n<h2 id=\"is-it-right-for-me\">Is it right for me?</h2>\n\n<p>if you have machines that need to talk to each other privately, and you don’t\nhave a better way to do it like a local network team, then yes, it’s a great\nsolution to private, secure, fast networking. if you need auditing, tailscale\nwill do that, rather than you having to build it out yourself.\nit has <a href=\"https://www.wireguard.com/performance/\">excellent performance</a>\ndespite the encryption, and is built directly into the kernel.</p>\n\n<p>By using wireguard, you can let services listen only on the wireguard\ninterface, and thus only known and trusted machines can access those services.</p>\n\n<p>Tailscale makes wireguard setup even easier by removing the key management\nstep, which normally requires distributing keys to every machine. Instead that\nstep is handled centrally, and in the case of Tailscale enforceable with ACLs\nand SSO and 2FA policies, however the networking remains meshed, and machines\nconnect directly to one another.</p>\n\n<p>You can go one step further than trusting individual machines, with Tailscale,\nas every device is tied to a single user, and you can ask Tailscale what is the\nauthenticated identity of the specific TCP connection, allowing automatically\nlogging in your users.</p>\n\n<p>In the context of Galaxy, this can be useful for components like <a href=\"/training-material/topics/admin/tutorials/interactive-tools/tutorial.html\">Interactive \nTools</a>, which \nrequire a web proxy between Galaxy and the cluster node where the tool runs. If \nthe cluster is not on the local network, Wireguard can be used to securely \nbridge the gap, and Headscale or Tailscale can greatly simplify that process.</p>\n<h1 id=\"setting-up-the-infrastructure\">Setting up the infrastructure</h1>\n\n<blockquote class=\"notranslate hands_on gtn-cyoa\" id=\"gtn-cyoa\">\n\t<div class=\"box-title\" aria-label=\"hands-on box: choose your own tutorial\"><i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i><span class=\"visually-hidden\"></span> Hands-on: Choose Your Own Tutorial</div>\n\t<p>This is a \"Choose Your Own Tutorial\" section, where you can select between multiple paths. Click one of the buttons below to select how you want to follow the tutorial</p>\n\t\n\t\n\t\t<input id=\"cyoa-opt1\" type=\"radio\" name=\"cyoa\" value=\"Tailscale\" onclick=\"cyoaChoice('Tailscale', 'gtn-cyoa')\" />\n\t\t<label for=\"cyoa-opt1\" class=\"select btn btn-secondary\">Tailscale</label>\n\t\n\t\n\t\t<input id=\"cyoa-opt2\" type=\"radio\" name=\"cyoa\" value=\"Headscale\" onclick=\"cyoaChoice('Headscale', 'gtn-cyoa')\" />\n\t\t<label for=\"cyoa-opt2\" class=\"select btn btn-secondary\">Headscale</label>\n\t\n\t\n\t\n\n\t\n\t<script>\n\t\tfunction ready(fn) {\n\t\t\tif (document.readyState != 'loading'){\n\t\t\t\tfn();\n\t\t\t} else {\n\t\t\t\tdocument.addEventListener('DOMContentLoaded', fn);\n\t\t\t}\n\t\t}\n\t\tready(function() {\n\t\t\tcyoaDefault(\"Tailscale\", \"gtn-cyoa\");\n\t\t})\n\t</script>\n\t\n</blockquote>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Configuration files</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Create a <code class=\"language-plaintext highlighter-rouge\">ansible.cfg</code> file (next to your playbook) to <a href=\"https://docs.ansible.com/ansible/2.9/reference_appendices/config.html\">configure settings</a> like the inventory file (and save ourselves some typing!), or the Python interpreter to use:</p>\n\n      <div data-commit=\"Add ansible.cfg\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- /dev/null\n</span><span class=\"gi\">+++ b/ansible.cfg\n</span><span class=\"p\">@@ -0,0 +1,6 @@</span>\n<span class=\"gi\">+[defaults]\n+interpreter_python = /usr/bin/python3\n+inventory = hosts\n+retry_files_enabled = false\n+[ssh_connection]\n+pipelining = true\n</span>   \n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Create the <code class=\"language-plaintext highlighter-rouge\">hosts</code> inventory file if you have not done so yet.</p>\n\n      <blockquote class=\"code-2col\">\n        <blockquote class=\"code-in\">\n          <code-in-title>Bash</code-in-title>\n          <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cat </span>hosts\n</code></pre></div>          </div>\n        </blockquote>\n\n        <blockquote class=\"code-out\">\n          <code-out-title>Bash</code-out-title>\n\n          <p>Your hostname is probably different:</p>\n          <div class=\"Headscale\">\n            <p>Pick one to be the <code class=\"language-plaintext highlighter-rouge\">head</code>, and the rest to be the <code class=\"language-plaintext highlighter-rouge\">tail</code>. The head will act as the coordination server, the <code class=\"language-plaintext highlighter-rouge\">tail</code> will be the nodes that should talk to each other.</p>\n\n            <div data-commit=\"Add hosts\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- /dev/null\n</span><span class=\"gi\">+++ b/hosts\n</span><span class=\"p\">@@ -0,0 +1,5 @@</span>\n<span class=\"gi\">+[head]\n+1-wg.galaxy.training\n+[tail]\n+2-wg.galaxy.training\n+3-wg.galaxy.training\n+4-wg.galaxy.training\n</span><span class=\"err\">\n</span></code></pre></div>            </div>\n          </div>\n\n          <div class=\"Tailscale\">\n            <p>Place all of the nodes in a <code class=\"language-plaintext highlighter-rouge\">tail</code> group</p>\n            <div class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- /dev/null\n</span><span class=\"gi\">+++ b/hosts\n</span><span class=\"p\">@@ -0,0 +1,5 @@</span>\n<span class=\"gi\">+[tail]\n+1-wg.galaxy.training\n+2-wg.galaxy.training\n+3-wg.galaxy.training\n+4-wg.galaxy.training\n</span></code></pre></div>            </div>\n          </div>\n        </blockquote>\n      </blockquote>\n    </li>\n  </ol>\n</blockquote>\n\n<div class=\"Headscale\">\n\n  <blockquote class=\"details\">\n    <details-title>Consider using Tailscale</details-title>\n    <p>Tailscale has implemented the coordination server and infrastructure with much better, more robust infrastructure that you won’t have to be responsible for. If you can get your institution to pay for it, or grant money covering it, it’s <strong>probably worth it</strong>. They add many new features often, and things like the mobile apps only work with their service. Tailscale is free for personal use (i.e. to test things out) and offers a free plan for open source projects that you may qualify for.</p>\n\n    <p>For a training event obviously we want something free and quick to setup and destroy, so, we’re using <a href=\"https://github.com/juanfont/headscale\">Headscale</a> since it’s free and we’re just going to destroy it immediately, and no one will accidentally get billed ;)</p>\n\n    <p>Using Headscale will also teach you everything you need to know if you do choose to use Tailscale, which is simpler and has fewer components for you to manage yourself.</p>\n  </blockquote>\n\n  <blockquote class=\"hands_on\">\n    <hands-on-title>Installing Headscale</hands-on-title>\n\n    <ol>\n      <li>\n        <p>Install the role</p>\n\n        <blockquote class=\"code-in\">\n          <code-in-title>Bash</code-in-title>\n          <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-galaxy <span class=\"nb\">install</span> <span class=\"nt\">-p</span> roles ckstevenson.headscale\n</code></pre></div>          </div>\n        </blockquote>\n      </li>\n      <li>\n        <p>Create and open <code class=\"language-plaintext highlighter-rouge\">head.yml</code> which will be our playbook. Add the following:</p>\n\n        <div data-commit=\"Setup headscale\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- /dev/null\n</span><span class=\"gi\">+++ b/head.yml\n</span><span class=\"p\">@@ -0,0 +1,16 @@</span>\n<span class=\"gi\">+---\n+- name: Headscale\n+  hosts: head\n+  become: true\n+  vars:\n+    headscale_user: 'headscale'\n+    headscale_version: '0.15.0'\n+    headscale_namespaces:\n+    - galaxy\n+  roles:\n+    - ckstevenson.headscale\n+  post_tasks:\n+    - command: headscale --namespace galaxy preauthkeys create --reusable --expiration 1h\n+      register: authkey\n+    - debug:\n+        msg: \"{{ authkey.stdout.split('\\n')[-1] }}\"\n</span>   \n</code></pre></div>        </div>\n      </li>\n      <li>\n        <p>Run the playbook:</p>\n\n        <blockquote class=\"code-in\">\n          <code-in-title>Bash</code-in-title>\n          <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook headscale.yml\n</code></pre></div>          </div>\n        </blockquote>\n      </li>\n      <li>\n        <p>This will return a code in the debug output. Save this code, you’ll need it shortly</p>\n      </li>\n    </ol>\n  </blockquote>\n</div>\n\n<p>Now we can setup the nodes</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Configure the nodes</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Install the role</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-galaxy <span class=\"nb\">install</span> <span class=\"nt\">-p</span> roles artis3n.tailscale\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n    <li>\n      <p>Edit <code class=\"language-plaintext highlighter-rouge\">tail.yml</code> and add the following.</p>\n\n      <div class=\"Headscale\">\n\n        <div data-commit=\"Setup the clients\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- /dev/null\n</span><span class=\"gi\">+++ b/tail.yml\n</span><span class=\"p\">@@ -0,0 +1,17 @@</span>\n<span class=\"gi\">+---\n+- name: Tailscale\n+  hosts: tail\n+  become: true\n+  vars:\n+    tailscale_args: \"--advertise-exit-node --login-server http://{{ hostvars[groups['head'][0]].inventory_hostname }}:8080\"\n+  pre_tasks:\n+ - sysctl:\n+     name: net.ipv4.ip_forward\n+     value: '1'\n+     state: present\n+ - sysctl:\n+     name: net.ipv6.conf.all.forwarding\n+     value: '1'\n+     state: present\n+  roles:\n+    - artis3n.tailscale\n</span>   \n</code></pre></div>        </div>\n      </div>\n\n      <div class=\"Tailscale\">\n        <div class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- /dev/null\n</span><span class=\"gi\">+++ b/tail.yml\n</span><span class=\"p\">@@ -0,0 +1,17 @@</span>\n<span class=\"gi\">+---\n+- name: Tailscale\n+  hosts: tail\n+  become: true\n+  vars:\n+    tailscale_args: \"--advertise-exit-node\"\n+  pre_tasks:\n+ - sysctl:\n+     name: net.ipv4.ip_forward\n+     value: '1'\n+     state: present\n+ - sysctl:\n+     name: net.ipv6.conf.all.forwarding\n+     value: '1'\n+     state: present\n+  roles:\n+    - artis3n.tailscale\n</span></code></pre></div>        </div>\n      </div>\n    </li>\n    <li>\n      <p>Run the playbook:</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook tail.yml <span class=\"nt\">-e</span> <span class=\"nv\">tailscale_authkey</span><span class=\"o\">=</span>YOUR_CODE\n</code></pre></div>        </div>\n\n        <div class=\"Headscale\">\n          <p>Remember, you can find this code from the output of the first playbook</p>\n        </div>\n        <div class=\"Tailscale\">\n          <p>You can generate an authentication key under your <a href=\"https://login.tailscale.com/admin/authkeys\">Tailscale account page</a></p>\n        </div>\n      </blockquote>\n    </li>\n    <li>\n      <p>Go check out your tailnet! Play around with the tailscale command and pinging other nodes with the suffix <code class=\"language-plaintext Headscale highlighter-rouge\">.galaxy.example.org</code> <code class=\"language-plaintext Tailscale highlighter-rouge\">&lt;username&gt;.org.github.beta.tailscale.net</code></p>\n\n      <blockquote class=\"Tailscale\">\n        <p>Note that you’ll need to enable <a href=\"https://login.tailscale.com/admin/dns\">MagicDNS</a> in your acount settings.</p>\n      </blockquote>\n    </li>\n  </ol>\n</blockquote>\n\n<blockquote class=\"tip\">\n  <tip-title>Exit Nodes</tip-title>\n  <p>We’ve configured <code class=\"language-plaintext highlighter-rouge\">--advertise-exit-node</code>, which means you can direct ALL of your traffic to use one of your tailscale endpoints as an exit node, just run <code class=\"language-plaintext highlighter-rouge\">tailscale up --exit-node=...</code></p>\n\n  <p>Note that:</p>\n  <ul>\n    <li>If you’re using headscale you need to manually enable that route (check the node list via <code class=\"language-plaintext highlighter-rouge\">headscale nodes list</code> and then enable the specific route via <code class=\"language-plaintext highlighter-rouge\">headscale nodes routes enable -i ...</code>), this is automatic in Tailscale</li>\n    <li>If you enable it, on a remote machine, it will immediately become unresponsive. Only do this on your local machine, e.g. a laptop connected to your tailnet.</li>\n  </ul>\n</blockquote>\n"],"ref_slides":[],"hands_on":true,"slides":false,"mod_date":"2022-12-14 16:32:27 +0000","pub_date":"2022-09-21 14:40:57 +0000","version":8,"api":"https://training.galaxyproject.org/training-material/api/topics/admin/tutorials/wireguard-headscale/tutorial.json","tools":[],"supported_servers":[],"topic_name_human":"Galaxy Server administration","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial","contributors":[{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"},{"name":"Nate Coraor","matrix":"natefoo:matrix.org","twitter":"natefoo","email":"nate@bx.psu.edu","joined":"2017-12","orcid":"0000-0001-8083-2963","id":"natefoo","url":"https://training.galaxyproject.org/training-material/api/contributors/natefoo.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/natefoo/"}]}