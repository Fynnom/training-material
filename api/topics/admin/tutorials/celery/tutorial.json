{"layout":"tutorial_hands_on","title":"Setting up Celery Workers for Galaxy","zenodo_link":"","questions":null,"objectives":["Have an understanding of what Celery is and how it works","Install Redis","Configure and start Celery workers","Install Flower to the Galaxy venv and configure it","Use an Ansible playbook for all of the above.","Monitor a Celery task using the Flower dashboard"],"time_estimation":"1h","key_points":null,"contributions":{"authorship":["mira-miracoli"],"editing":["hexylena"]},"requirements":[{"type":"internal","topic_name":"admin","tutorials":["ansible","ansible-galaxy","pulsar"]}],"subtopic":"data","tags":["ansible","git-gat"],"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00326","url":"/topics/admin/tutorials/celery/tutorial.html","topic_name":"admin","tutorial_name":"celery","dir":"topics/admin/tutorials/celery","symlink":null,"id":"admin/celery","ref_tutorials":["<h1 id=\"overview\">Overview</h1>\n\n<p>Celery is a distributed task queue written in Python that can spawn multiple workers and enables asynchronous task processing on multiple nodes. It supports scheduling, but focuses more on real-time operations.</p>\n\n<p>From the Celery website:</p>\n\n<blockquote class=\"quote\" cite=\"https://docs.celeryq.dev/en/stable/getting-started/introduction.html#what-s-a-task-queue\">\n  <p>“Task queues are used as a mechanism to distribute work across threads or machines.</p>\n\n  <p>A task queue’s input is a unit of work called a task. Dedicated worker processes constantly monitor task queues for new work to perform.</p>\n\n  <p>Celery communicates via messages, usually using a broker to mediate between clients and workers. To initiate a task the client adds a message to the queue, the broker then delivers that message to a worker.</p>\n\n  <p>A Celery system can consist of multiple workers and brokers, giving way to high availability and horizontal scaling.</p>\n\n  <p>Celery is written in Python, but the protocol can be implemented in any language. In addition to Python there’s node-celery and node-celery-ts for Node.js, and a PHP client.</p>\n\n  <p>Language interoperability can also be achieved exposing an HTTP endpoint and having a task that requests it (webhooks).”</p>\n\n</blockquote>\n\n<p><a href=\"slides.html\">A slideshow presentation on this subject is available</a>.</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#overview\" id=\"markdown-toc-overview\">Overview</a></li>\n  <li><a href=\"#installing-and-configuring\" id=\"markdown-toc-installing-and-configuring\">Installing and Configuring</a></li>\n  <li><a href=\"#installing-and-configuring-1\" id=\"markdown-toc-installing-and-configuring-1\">Installing and Configuring</a></li>\n  <li><a href=\"#test-celery\" id=\"markdown-toc-test-celery\">Test Celery</a></li>\n</ol>\n\n</blockquote>\n\n<!--SNIPPET-->\n<blockquote class=\"comment\">   <div class=\"box-title comment-title\" id=\"comment-galaxy-admin-training-path\"><i class=\"far fa-comment-dots\" aria-hidden=\"true\"></i> Comment: Galaxy Admin Training Path</div>   <p>The yearly Galaxy Admin Training follows a specific ordering of tutorials. Use this timeline to help keep track of where you are in Galaxy Admin Training.</p>   <ol id=\"git-gat-timeline\">                    <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/ansible-galaxy/tutorial.html\">             <div>Step 1</div>             <div>ansible-galaxy</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/backup-cleanup/tutorial.html\">             <div>Step 2</div>             <div>backup-cleanup</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/customization/tutorial.html\">             <div>Step 3</div>             <div>customization</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/tus/tutorial.html\">             <div>Step 4</div>             <div>tus</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/cvmfs/tutorial.html\">             <div>Step 5</div>             <div>cvmfs</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/apptainer/tutorial.html\">             <div>Step 6</div>             <div>apptainer</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/tool-management/tutorial.html\">             <div>Step 7</div>             <div>tool-management</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/reference-genomes/tutorial.html\">             <div>Step 8</div>             <div>reference-genomes</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/data-library/tutorial.html\">             <div>Step 9</div>             <div>data-library</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/dev/tutorials/bioblend-api/tutorial.html\">             <div>Step 10</div>             <div>dev/bioblend-api</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/connect-to-compute-cluster/tutorial.html\">             <div>Step 11</div>             <div>connect-to-compute-cluster</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/job-destinations/tutorial.html\">             <div>Step 12</div>             <div>job-destinations</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/pulsar/tutorial.html\">             <div>Step 13</div>             <div>pulsar</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"active\">         <a href=\"/training-material/topics/admin/tutorials/celery/tutorial.html\">             <div>Step 14</div>             <div>celery</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/gxadmin/tutorial.html\">             <div>Step 15</div>             <div>gxadmin</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/reports/tutorial.html\">             <div>Step 16</div>             <div>reports</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/monitoring/tutorial.html\">             <div>Step 17</div>             <div>monitoring</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/tiaas/tutorial.html\">             <div>Step 18</div>             <div>tiaas</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/sentry/tutorial.html\">             <div>Step 19</div>             <div>sentry</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/ftp/tutorial.html\">             <div>Step 20</div>             <div>ftp</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/beacon/tutorial.html\">             <div>Step 21</div>             <div>beacon</div>         </a>     </li>           </ol> </blockquote>\n<p><!--END_SNIPPET--></p>\n\n<p>The agenda we’re going to follow today is: We’re going to enable and configure celery, install a Redis server, the Flower dashboard and start Celery workers.</p>\n\n<h1 id=\"installing-and-configuring\">Installing and Configuring</h1>\n\n<p>To proceed from here it is expected that:</p>\n\n<!--  TODO: port assumptions are not correct for GAT. -->\n\n<blockquote class=\"comment\">\n  <comment-title>Requirements for Running This Tutorial</comment-title>\n\n  <ol>\n    <li>\n      <p>You have set up a working Galaxy instance as described in the <a href=\"../ansible-galaxy/tutorial.html\">ansible-galaxy</a> tutorial.</p>\n    </li>\n    <li>\n      <p>You have a working RabbitMQ server installed and added the connection string to the galaxy configuration. (RabbitMQ is installed when doing the <a href=\"../pulsar/tutorial.html\">Pulsar</a> tutorial.)</p>\n    </li>\n    <li>\n      <p>Your VM has a public DNS name: this tutorial sets up SSL certificates from the start and as an integral part of the tutorial.</p>\n    </li>\n    <li>\n      <p>You have the following ports exposed:</p>\n\n      <ul>\n        <li>22 for SSH, this can be a different port or via VPN or similar.</li>\n        <li>80 for HTTP, this needs to be available to the world if you want to follow the LetsEncrypt portion of the tutorial.</li>\n        <li>443 for HTTPs, this needs to be available to the world if you want to follow the LetsEncrypt portion of the tutorial.</li>\n        <li>5671 for AMQP for Pulsar, needed if you plan to setup Pulsar for remote job running.</li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n<p>In order to run a production ready Celery setup, we need to discuss and install some other software that works together with Celery.<br />\nWe already learned about RabbitMQ in the Pulsar tutorial. The RabbitMQ server you already installed there will be our broker for Celery.\nAs a backend we are going to use Redis.<br />\nRedis is a very popular key-value-store database. It is very fast and easy to set up backend for Celery.\nIf you want to learn more about Redis, visit their website: <a href=\"https://redis.io/\">https://redis.io/</a></p>\n\n<p>For monitoring and debugging Celery, we use the <a href=\"https://github.com/mher/flower\">Flower</a> dashboard.<br />\nFlower is lightweight and has a clear but powerful UI and can be installed in Galaxy’s venv using our role.</p>\n\n<h1 id=\"installing-and-configuring-1\">Installing and Configuring</h1>\n\n<p>First we need to add our new Ansible Roles to the <code class=\"language-plaintext highlighter-rouge\">requirements.yml</code>:</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Set up Redis, Flower, Systemd and Celery with Ansible</hands-on-title>\n\n  <ol>\n    <li>\n      <p>In your working directory, add the roles to your <code class=\"language-plaintext highlighter-rouge\">requirements.yml</code></p>\n\n      <div data-commit=\"Add requirement\" data-ref=\"add-req\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/requirements.yml\n</span><span class=\"gi\">+++ b/requirements.yml\n</span><span class=\"p\">@@ -38,3 +38,8 @@</span>\n   version: 1.4.4\n - src: galaxyproject.pulsar\n   version: 1.0.10\n<span class=\"gi\">+# Celery, Redis, and Flower (dashboard)\n+- name: geerlingguy.redis\n+  version: 1.8.0\n+- name: usegalaxy_eu.flower\n+  version: 1.0.2\n</span>   \n</code></pre></div>      </div>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-how-to-read-a-diff\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-how-to-read-a-diff\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: How to read a Diff</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <p>If you haven’t worked with diffs before, this can be something quite new or different.</p>   <p>If we have two files, let’s say a grocery list, in two files. We’ll call them ‘a’ and ‘b’.</p>   <blockquote class=\"code-2col\">   <blockquote class=\"code-in\">     <code-in-title>Old</code-in-title>     <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ cat old<br />🍎<br />🍐<br />🍊<br />🍋<br />🍒<br />🥑<br /></code></pre></div>    </div>   </blockquote>   <blockquote class=\"code-out\">     <code-out-title>New</code-out-title>     <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ cat new<br />🍎<br />🍐<br />🍊<br />🍋<br />🍍<br />🥑<br /></code></pre></div>    </div>   </blockquote> </blockquote>   <p>We can see that they have some different entries. We’ve removed 🍒 because they’re awful, and replaced them with an 🍍</p>   <p>Diff lets us compare these files</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>diff old new<br />5c5<br />&lt; 🍒<br /><span class=\"nt\">---</span><br /><span class=\"o\">&gt;</span> 🍍<br /></code></pre></div></div>   <p>Here we see that 🍒 is only in a, and 🍍 is only in b. But otherwise the files are identical.</p>   <p>There are a couple different formats to diffs, one is the ‘unified diff’</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>diff <span class=\"nt\">-U2</span> old new<br /><span class=\"nt\">---</span> old\t2022-02-16 14:06:19.697132568 +0100<br />+++ new\t2022-02-16 14:06:36.340962616 +0100<br />@@ <span class=\"nt\">-3</span>,4 +3,4 @@<br /> 🍊<br /> 🍋<br />-🍒<br />+🍍<br /> 🥑<br /></code></pre></div></div>   <p>This is basically what you see in the training materials which gives you a lot of context about the changes:</p>   <ul>   <li><code class=\"language-plaintext highlighter-rouge\">--- old</code> is the ‘old’ file in our view</li>   <li><code class=\"language-plaintext highlighter-rouge\">+++ new</code> is the ‘new’ file</li>   <li>@@ these lines tell us where the change occurs and how many lines are added or removed.</li>   <li>Lines starting with a - are removed from our ‘new’ file</li>   <li>Lines with a + have been added.</li> </ul>   <p>So when you go to apply these diffs to your files in the training:</p>   <ol>   <li>Ignore the header</li>   <li>Remove lines starting with - from your file</li>   <li>Add lines starting with + to your file</li> </ol>   <p>The other lines (🍊/🍋 and 🥑) above just provide “context”, they help you know where a change belongs in a file, but <strong>should not be edited</strong> when you’re making the above change. Given the above diff, you would find a line with a 🍒, and replace it with a 🍍</p>   <h4 id=\"added--removed-lines\">Added &amp; Removed Lines</h4>   <p>Removals are very easy to spot, we just have removed lines</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">---</span> old\t2022-02-16 14:06:19.697132568 +0100<br />+++ new\t2022-02-16 14:10:14.370722802 +0100<br />@@ <span class=\"nt\">-4</span>,3 +4,2 @@<br /> 🍋<br /> 🍒<br />-🥑<br /></code></pre></div></div>   <p>And additions likewise are very easy, just add a new line, between the other lines in your file.</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">---</span> old\t2022-02-16 14:06:19.697132568 +0100<br />+++ new\t2022-02-16 14:11:11.422135393 +0100<br />@@ <span class=\"nt\">-1</span>,3 +1,4 @@<br /> 🍎<br />+🍍<br /> 🍐<br /> 🍊<br /></code></pre></div></div>   <h4 id=\"completely-new-files\">Completely new files</h4>   <p>Completely new files look a bit different, there the “old” file is <code class=\"language-plaintext highlighter-rouge\">/dev/null</code>, the empty file in a Linux machine.</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>diff <span class=\"nt\">-U2</span> /dev/null old<br /><span class=\"nt\">---</span> /dev/null\t2022-02-15 11:47:16.100000270 +0100<br />+++ old\t2022-02-16 14:06:19.697132568 +0100<br />@@ <span class=\"nt\">-0</span>,0 +1,6 @@<br />+🍎<br />+🍐<br />+🍊<br />+🍋<br />+🍒<br />+🥑<br /></code></pre></div></div>   <p>And removed files are similar, except with the new file being /dev/null</p>   <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">---</span> old\t2022-02-16 14:06:19.697132568 +0100<br />+++ /dev/null\t2022-02-15 11:47:16.100000270 +0100<br />@@ <span class=\"nt\">-1</span>,6 +0,0 @@<br />-🍎<br />-🍐<br />-🍊<br />-🍋<br />-🍒<br />-🥑<br /></code></pre></div></div> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n    <li>\n      <p>Install the roles with:</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" data-ref=\"req-install\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-galaxy <span class=\"nb\">install</span> <span class=\"nt\">-p</span> roles <span class=\"nt\">-r</span> requirements.yml\n</code></pre></div>        </div>\n      </blockquote>\n    </li>\n    <li>\n      <p>Let’s go now through all the Roles step-by-step:</p>\n\n      <ol>\n        <li>\n          <p>Since we can stick to the basic default settings of Redis, we will look only at a few variables:</p>\n\n          <table>\n            <thead>\n              <tr>\n                <th>Variable</th>\n                <th>Type</th>\n                <th>Description</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td><code class=\"language-plaintext highlighter-rouge\">redis_port</code></td>\n                <td>integer</td>\n                <td>The port Redis should listen on. 6379 by default.</td>\n              </tr>\n              <tr>\n                <td><code class=\"language-plaintext highlighter-rouge\">redis_bind_interface</code></td>\n                <td>string</td>\n                <td>The interface Redis should listen to. 127.0.0.1 is default.</td>\n              </tr>\n              <tr>\n                <td><code class=\"language-plaintext highlighter-rouge\">redis_conf_path</code></td>\n                <td>string</td>\n                <td>The path where your redis configuration will be stored. Default: /etc/redis</td>\n              </tr>\n            </tbody>\n          </table>\n\n          <p>Luckily we can leave them all on default and don’t need to change anything for Redis in the vars.</p>\n        </li>\n        <li>\n          <p>We only need to add Redis’ Python package in the <code class=\"language-plaintext highlighter-rouge\">group_vars/galaxyservers.yml</code>:</p>\n\n          <div data-commit=\"Configure rabbitmq users\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/group_vars/galaxyservers.yml\n</span><span class=\"gi\">+++ b/group_vars/galaxyservers.yml\n</span><span class=\"p\">@@ -282,3 +282,7 @@</span> rabbitmq_users:\n # TUS\n galaxy_tusd_port: 1080\n galaxy_tus_upload_store: /data/tus\n<span class=\"gi\">+\n+#Redis\n+galaxy_additional_venv_packages:\n+  - redis\n</span>       \n</code></pre></div>          </div>\n        </li>\n        <li>\n          <p>Let’s add the role to our playbook then:</p>\n\n          <div data-commit=\"Add requirement\" data-ref=\"add-req\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/galaxy.yml\n</span><span class=\"gi\">+++ b/galaxy.yml\n</span><span class=\"p\">@@ -42,6 +42,7 @@</span>\n     - role: galaxyproject.miniconda\n       become: true\n       become_user: \"{{ galaxy_user_name }}\"\n<span class=\"gi\">+    - geerlingguy.redis\n</span>     - galaxyproject.nginx\n     - geerlingguy.docker\n     - usegalaxy_eu.rabbitmqserver\n       \n</code></pre></div>          </div>\n        </li>\n        <li>\n          <p>Because Flower needs it’s own RabbitMQ user, we should add that to the respective part of our vars\nEdit your <code class=\"language-plaintext highlighter-rouge\">group_vars/secret.yml</code> and define some random passwords:</p>\n\n          <blockquote class=\"code-in\">\n            <code-in-title>Bash</code-in-title>\n            <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-vault edit group_vars/secret.yml\n</code></pre></div>            </div>\n          </blockquote>\n\n          <div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">vault_rabbitmq_password_flower</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">a-really-long-password-here\"</span>\n<span class=\"na\">vault_rabbitmq_password_galaxy</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">a-different-really-long-password\"</span>\n<span class=\"na\">vault_flower_user_password</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">another-different-really-long-password\"</span>\n</code></pre></div>          </div>\n\n          <!-- Ignore this, just for the gat-automation. Vaults are ugly to work with :(\n\n       \n```diff\n--- a/group_vars/secret.yml\n+++ b/group_vars/secret.yml\n@@ -1,13 +1,22 @@\n $ANSIBLE_VAULT;1.1;AES256\n-62346261323266656232393034396134316636376533376139666437363535393562663838613938\n-6336666266633563346337623265353935646361326337610a393834333233313461346439376438\n-63383338346530656561636631666134373238366364363164313166346461383736613162653237\n-3461363334323431370a656132303965653262386130353332623937376261396530393761353834\n-38336565666437666436643163363831633331333766653266356163613138393734656465323634\n-39366362383433366437353534663134313330316337393335383962613961386665633261616237\n-35366635373063313631323939396164336330356361393464326636353037336461323531336434\n-35613933303333623031353936393265636130363335376533393335663266313863376135383338\n-36613464373231623938373434306266373234633036343636633963353361356631363533353066\n-39323064336237646432323530313065303331326636353334343862373330313133326363363063\n-38383564636161396435666164643334656435393533643163393434623434656238633631633939\n-33353232666432376661\n+66653366633665383231303635643739396466653465626163633662623230643534346666303434\n+3531356339646666623364383435306363373534373833370a333964306130653236373438373264\n+34366433396135303064643932313135643064373034323865363939333565623238386161333465\n+3932623162353034370a653663333363383938393936623663343639376430653366646662353830\n+34383964326161383966306361633162653366353162633564623738353137333936313232363764\n+38383962396637636136316366633936316365643038333030333932336365326335373737663834\n+39363639303764343430336435313663313762353335366562656232646334356438343535303032\n+35636131323163323036383163363964643237313137333131303737346662373233663562343031\n+39396531306539623661376166313534303462623532323334393736316634616262313633626637\n+37393066663239303564356232366466333334316565363631363230626665333039386133383933\n+31656234363064646334623938383637393534313638643635396662643163346633346237353664\n+34666161373764663166653737323736373261363565666633653831363833393264333666356633\n+30373062333638366666316132623736386336383933326539663065653538386363323766313664\n+63323737396264306439303366343834326164393763376663316366353766663131303966393039\n+61343732313865613761623733356465336263633963376161663931653864383162393839643834\n+34373239386461666462643162613536316166656135323332316163336635393035653164363138\n+34336265383033663436306436663536383238366665653239313661666431666339323364646633\n+64366361653034393962316562373835623631356339313062393933633634653735656636373031\n+65376162633866623733623961303664663931636130373936326461623465363932373165356563\n+36323838323865326464346337393164343765613333663830636234666663303535616532323936\n+3230\n       \n```\n{: data-commit=\"Add rabbitmq passwords to the vault\"}\n\n-->\n\n          <p>This is going in the vault as they are secrets we need to set. Flower needs it’s own RabbitMQ user with admin access and we want a different vhost for galaxy and celery.</p>\n\n          <p>Replace both with long random (or not) string.<br />\nNow add new users to the RabbitMQ configuration:</p>\n\n          <div data-commit=\"Configure rabbitmq users\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/group_vars/galaxyservers.yml\n</span><span class=\"gi\">+++ b/group_vars/galaxyservers.yml\n</span><span class=\"p\">@@ -269,6 +269,7 @@</span> rabbitmq_config:\n        \n rabbitmq_vhosts:\n   - /pulsar/pulsar_au\n<span class=\"gi\">+  - galaxy_internal\n</span>        \n rabbitmq_users:\n   - user: admin\n<span class=\"p\">@@ -278,6 +279,13 @@</span> rabbitmq_users:\n   - user: pulsar_au\n     password: \"{{ vault_rabbitmq_password_vhost }}\"\n     vhost: /pulsar/pulsar_au\n<span class=\"gi\">+  - user: galaxy\n+    password: \"{{ vault_rabbitmq_password_galaxy }}\"\n+    vhost: galaxy_internal\n+  - user: flower\n+    password: \"{{ vault_rabbitmq_password_flower }}\"\n+    tags: administrator\n+    vhost: galaxy_internal\n</span>        \n # TUS\n galaxy_tusd_port: 1080\n       \n</code></pre></div>          </div>\n        </li>\n        <li>\n          <p>Flower\nFlower has a few variables, too, for example, we need to point it to our virtual environment:</p>\n\n          <table>\n            <thead>\n              <tr>\n                <th>Variable</th>\n                <th>Type</th>\n                <th>Description</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td><code class=\"language-plaintext highlighter-rouge\">flower_python_version</code></td>\n                <td>string</td>\n                <td>Python version to use when installing flower to a venv. Default: python39</td>\n              </tr>\n              <tr>\n                <td><code class=\"language-plaintext highlighter-rouge\">flower_port</code></td>\n                <td>integer</td>\n                <td>The port Flower should listen on. 5555 by default.</td>\n              </tr>\n              <tr>\n                <td><code class=\"language-plaintext highlighter-rouge\">flower_bind_interface</code></td>\n                <td>string</td>\n                <td>The interface Flower should listen to. 0.0.0.0 is default.</td>\n              </tr>\n              <tr>\n                <td><code class=\"language-plaintext highlighter-rouge\">flower_conf_dir</code></td>\n                <td>string</td>\n                <td>The path where your Flower configuration will be stored. Default: /etc/flower</td>\n              </tr>\n              <tr>\n                <td><code class=\"language-plaintext highlighter-rouge\">flower_venv_dir</code></td>\n                <td>string</td>\n                <td>The path to the venv where Flower should be installed. Default: <code class=\"language-plaintext highlighter-rouge\">/home//.local</code></td>\n              </tr>\n              <tr>\n                <td><code class=\"language-plaintext highlighter-rouge\">flower_user</code></td>\n                <td>string</td>\n                <td>User that owns the flower process. Default: galaxy</td>\n              </tr>\n              <tr>\n                <td><code class=\"language-plaintext highlighter-rouge\">flower_group</code></td>\n                <td>string</td>\n                <td>Group that owns the flower process. Default: galaxy</td>\n              </tr>\n              <tr>\n                <td><code class=\"language-plaintext highlighter-rouge\">flower_ui_users</code></td>\n                <td>list of dicts</td>\n                <td>Name and password of the UI users for basic auth.</td>\n              </tr>\n              <tr>\n                <td><code class=\"language-plaintext highlighter-rouge\">flower_app_dir</code></td>\n                <td>string</td>\n                <td>Root directory of your Python app to run with Celery. In our case <code class=\"language-plaintext highlighter-rouge\">galaxy_root</code></td>\n              </tr>\n              <tr>\n                <td><code class=\"language-plaintext highlighter-rouge\">flower_app_name</code></td>\n                <td>string</td>\n                <td>Python module to import. In our case ‘galaxy.celery’</td>\n              </tr>\n              <tr>\n                <td><code class=\"language-plaintext highlighter-rouge\">flower_python_path</code></td>\n                <td>string</td>\n                <td>Should point to galaxy’s <code class=\"language-plaintext highlighter-rouge\">server/lib</code> directory (default)</td>\n              </tr>\n              <tr>\n                <td><code class=\"language-plaintext highlighter-rouge\">flower_broker_api</code></td>\n                <td>string</td>\n                <td>URL to broker’s API with login credentials.</td>\n              </tr>\n              <tr>\n                <td><code class=\"language-plaintext highlighter-rouge\">flower_broker_url</code></td>\n                <td>string</td>\n                <td>Flower’s RabbitMQ connection string.</td>\n              </tr>\n              <tr>\n                <td><code class=\"language-plaintext highlighter-rouge\">flower_db_file</code></td>\n                <td>string</td>\n                <td>When Flower is in persistent mode, use this path for the database.</td>\n              </tr>\n            </tbody>\n          </table>\n\n          <p>Let’s add variables to our <code class=\"language-plaintext highlighter-rouge\">group_vars/galaxyservers.yml</code>:</p>\n\n          <div data-commit=\"Configure flower\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/group_vars/galaxyservers.yml\n</span><span class=\"gi\">+++ b/group_vars/galaxyservers.yml\n</span><span class=\"p\">@@ -294,3 +294,22 @@</span> galaxy_tus_upload_store: /data/tus\n #Redis\n galaxy_additional_venv_packages:\n   - redis\n<span class=\"gi\">+\n+# Flower\n+flower_python_version: python3\n+flower_app_dir: \"{{ galaxy_root }}\"\n+flower_python_path: \"{{ galaxy_root }}/server/lib\"\n+flower_venv_dir: \"{{ galaxy_venv_dir }}\"\n+flower_app_name: galaxy.celery\n+flower_db_file: \"{{ galaxy_root }}/var/flower.db\"\n+flower_persistent: true\n+flower_broker_api: \"https://flower:{{ vault_rabbitmq_password_flower }}@localhost:5671/api/\"\n+flower_broker_url: \"amqp://flower:{{ vault_rabbitmq_password_flower }}@localhost:5671/galaxy_internal?ssl=true\"\n+flower_proxy_prefix: /flower\n+\n+flower_ui_users:\n+  - name: admin\n+    password: \"{{ vault_flower_user_password}}\"\n+\n+flower_environment_variables:\n+  GALAXY_CONFIG_FILE: \"{{ galaxy_config_file }}\"\n</span>       \n</code></pre></div>          </div>\n        </li>\n        <li>\n          <p>It has a dashboard, so we need to expose that via nginx:</p>\n\n          <div data-commit=\"Add nginx routes\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/templates/nginx/galaxy.j2\n</span><span class=\"gi\">+++ b/templates/nginx/galaxy.j2\n</span><span class=\"p\">@@ -94,4 +94,13 @@</span> server {\n \t\tproxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;\n \t\tproxy_set_header X-Forwarded-Proto $scheme;\n \t}\n<span class=\"gi\">+\n+\tlocation /flower {\n+\t\tproxy_pass http://localhost:5555;\n+\t\tproxy_set_header Host $host;\n+\t\tproxy_redirect off;\n+\t\tproxy_http_version 1.1;\n+\t\tproxy_set_header Upgrade $http_upgrade;\n+\t\tproxy_set_header Connection \"upgrade\";\n+\t}\n</span> }\n       \n</code></pre></div>          </div>\n        </li>\n        <li>\n          <p>Now we can add the Flower Role to our Playbook:</p>\n\n          <div data-commit=\"Add flower role\" data-ref=\"add-req\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/galaxy.yml\n</span><span class=\"gi\">+++ b/galaxy.yml\n</span><span class=\"p\">@@ -43,6 +43,7 @@</span>\n       become: true\n       become_user: \"{{ galaxy_user_name }}\"\n     - geerlingguy.redis\n<span class=\"gi\">+    - usegalaxy_eu.flower\n</span>     - galaxyproject.nginx\n     - geerlingguy.docker\n     - usegalaxy_eu.rabbitmqserver\n       \n</code></pre></div>          </div>\n        </li>\n      </ol>\n    </li>\n    <li>\n      <p>Now it is time to change the <code class=\"language-plaintext highlighter-rouge\">group_vars/galaxyservers.yml</code> and enable celery in galaxy.gravity config.\nAdd the following lines to your file:</p>\n\n      <div data-commit=\"Add celery\" data-ref=\"add-req\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/group_vars/galaxyservers.yml\n</span><span class=\"gi\">+++ b/group_vars/galaxyservers.yml\n</span><span class=\"p\">@@ -130,6 +130,11 @@</span> galaxy_config:\n       preload: true\n     celery:\n       concurrency: 2\n<span class=\"gi\">+      enable_beat: true\n+      enable: true\n+      queues: celery,galaxy.internal,galaxy.external\n+      pool: threads\n+      memory_limit: 2\n</span>       loglevel: DEBUG\n     tusd:\n       enable: true\n   \n</code></pre></div>      </div>\n\n      <p>Now add the second part, Galaxy’s Celery configuration:</p>\n\n      <div data-commit=\"Add celery-redis\" data-ref=\"add-req\" class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">--- a/group_vars/galaxyservers.yml\n</span><span class=\"gi\">+++ b/group_vars/galaxyservers.yml\n</span><span class=\"p\">@@ -111,6 +111,11 @@</span> galaxy_config:\n     # Data Library Directories\n     library_import_dir: /libraries/admin\n     user_library_import_dir: /libraries/user\n<span class=\"gi\">+    # Celery\n+    amqp_internal_connection: \"pyamqp://galaxy:{{ vault_rabbitmq_password_galaxy }}@localhost:5671/galaxy_internal?ssl=1\"\n+    celery_conf:\n+      result_backend: \"redis://localhost:6379/0\"\n+    enable_celery_tasks: true\n</span>   gravity:\n     process_manager: systemd\n     galaxy_root: \"{{ galaxy_root }}/server\"\n   \n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>We are done with the changes and you can enter the command to run your playbook:</p>\n\n      <blockquote class=\"code-in\">\n        <code-in-title>Bash</code-in-title>\n        <div data-cmd=\"true\" class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook galaxy.yml\n</code></pre></div>        </div>\n      </blockquote>\n      <p>This should also restart Galaxy and spawn the amount of Celery workers, that we defined in the Gravity configuration.</p>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h1 id=\"test-celery\">Test Celery</h1>\n\n<p>Now that everything is running, we want to test celery and watch it processing tasks.\nWe can simply do that by starting an upload to our Galaxy.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Test Celery and monitor tasks with Flower</hands-on-title>\n  <ol>\n    <li>First, open a new tab and enter your machines hostname followed by <code class=\"language-plaintext highlighter-rouge\">/flower/dashboard</code> then log in with <code class=\"language-plaintext highlighter-rouge\">username: admin</code> and you password.\nYou should see an overview with active workers.<br />\nKeep that tab open</li>\n    <li>In split view, open a second browser window and open your Galaxy page.\nClick on <i class=\"fas fa-upload\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-upload</span> Upload Data, select a file from your computer and click <code class=\"language-plaintext highlighter-rouge\">upload</code>.</li>\n    <li>The Workers should now receive a new tasks. Click on <code class=\"language-plaintext highlighter-rouge\">Succeeded</code> and then on the UUID of the last upload task.<br />\nYou should see all its details here and the info that it was successful.</li>\n  </ol>\n</blockquote>\n\n<!--SNIPPET-->\n<blockquote class=\"comment\">   <div class=\"box-title comment-title\" id=\"comment-got-lost-along-the-way\"><i class=\"far fa-comment-dots\" aria-hidden=\"true\"></i> Comment: Got lost along the way?</div>   <p>If you missed any steps, you can compare against the <a href=\"https://github.com/hexylena/git-gat/tree/step-12\">reference files</a>, or see what changed since <a href=\"https://github.com/hexylena/git-gat/compare/step-11...step-12#files_bucket\">the previous tutorial</a>.</p>   <p>If you’re using <code class=\"language-plaintext highlighter-rouge\">git</code> to track your progress, remember to add your changes and commit with a good commit message!</p> </blockquote>\n<p><!--END_SNIPPET--></p>\n\n<!--SNIPPET-->\n<blockquote class=\"comment\">   <div class=\"box-title comment-title\" id=\"comment-galaxy-admin-training-path-1\"><i class=\"far fa-comment-dots\" aria-hidden=\"true\"></i> Comment: Galaxy Admin Training Path</div>   <p>The yearly Galaxy Admin Training follows a specific ordering of tutorials. Use this timeline to help keep track of where you are in Galaxy Admin Training.</p>   <ol id=\"git-gat-timeline\">                    <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/ansible-galaxy/tutorial.html\">             <div>Step 1</div>             <div>ansible-galaxy</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/backup-cleanup/tutorial.html\">             <div>Step 2</div>             <div>backup-cleanup</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/customization/tutorial.html\">             <div>Step 3</div>             <div>customization</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/tus/tutorial.html\">             <div>Step 4</div>             <div>tus</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/cvmfs/tutorial.html\">             <div>Step 5</div>             <div>cvmfs</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/apptainer/tutorial.html\">             <div>Step 6</div>             <div>apptainer</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/tool-management/tutorial.html\">             <div>Step 7</div>             <div>tool-management</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/reference-genomes/tutorial.html\">             <div>Step 8</div>             <div>reference-genomes</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/data-library/tutorial.html\">             <div>Step 9</div>             <div>data-library</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/dev/tutorials/bioblend-api/tutorial.html\">             <div>Step 10</div>             <div>dev/bioblend-api</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/connect-to-compute-cluster/tutorial.html\">             <div>Step 11</div>             <div>connect-to-compute-cluster</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/job-destinations/tutorial.html\">             <div>Step 12</div>             <div>job-destinations</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"disabled\">         <a href=\"/training-material/topics/admin/tutorials/pulsar/tutorial.html\">             <div>Step 13</div>             <div>pulsar</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"active\">         <a href=\"/training-material/topics/admin/tutorials/celery/tutorial.html\">             <div>Step 14</div>             <div>celery</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/gxadmin/tutorial.html\">             <div>Step 15</div>             <div>gxadmin</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/reports/tutorial.html\">             <div>Step 16</div>             <div>reports</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/monitoring/tutorial.html\">             <div>Step 17</div>             <div>monitoring</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/tiaas/tutorial.html\">             <div>Step 18</div>             <div>tiaas</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/sentry/tutorial.html\">             <div>Step 19</div>             <div>sentry</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/ftp/tutorial.html\">             <div>Step 20</div>             <div>ftp</div>         </a>     </li>               <span aria-hidden=\"true\">         <i class=\"fas fa-arrow-right\" aria-hidden=\"true\"></i>     </span>                         <li class=\"\">         <a href=\"/training-material/topics/admin/tutorials/beacon/tutorial.html\">             <div>Step 21</div>             <div>beacon</div>         </a>     </li>           </ol> </blockquote>\n<p><!--END_SNIPPET--></p>\n"],"ref_slides":["## Can you eat it?\n\n.pull-left[\nCelery is an asynchronous distributed task queue.\n\nIt consists of:\n\n- Your Application that sends tasks\n- To a broker with queues\n- Celery workers that execute the tasks\n- A result backend to store the task results\n\nIt's written in Python, multiple other languages are supported.\n]\n\n.pull-right[\n\t![celery logo, a cartoon of a piece of celery](images/celery.png)\n]\n\n---\n\n## So many features\n\n.pull-left[\n- Different worker/process [pool options](https://distributedpython.com/posts/celery-execution-pools-what-is-it-all-about/), depending on your needs – I/O or CPU bound\n- CeleryBeat a scheduler for repeated tasks\n- Flower, a monitoring interface for\n\t- Showing tasks, queues and workers\n\t- Prometheus + Grafana integration\n]\n\n.pull-right[\n\t![celery logo, a cartoon of a piece of celery, now with the text celery next to it](images/celery-logo.png)\n]\n\n---\n\n# How does Celery improve Galaxy?\n\n\n---\n\n**The Problem**\n\nThe Galaxy Server should respond quickly to every request.  \nWhile this is easily possible for small instances with few users,  \nwhen scaling to thousands of users and millions of jobs,  \nwithout Celery, Gunicorn and the job handlers spend much of their time on I/O bound side tasks,  \nfor example packing a zip for history export.  \n  \nThis leads to slow responses and scheduling.\n\n---\n.pull-left[\n**The Solution**\n\nQueue asynchronous tasks with Celery  \non a different node or even a whole cluster...\n\n]\n\n.pull-right[\n\t![galaxy logo next to celery logo, with two purple hearts](images/galaxy+celery.png)\n]\n\n---\n\n![A workflow diagram is shown with logos and arrows. Galaxy on the left sends tasks to rabbit MQ. Celery fetches tasks from Rabbit MQ and proceses them. Then celery sends results to the backend database. Finally Galaxy fetches those same results back from the backend.](images/workflow.png)\n\n---\n\n## How does the magic work?\n\n - Celery loads the Galaxy code from NFS when you start the workers\n - Workers connect to the broker and fetch tasks from the queue\n - Since all the python modules are already loaded, it can execute the task directly, with almost no delay\n - Now it runs the code according to the task, for example a SQL update, or a file deletion on the NFS\n - Results are either sent directly back to the broker or stored e.g. in a Redis DB\n\n---\n\n## What is Celery used for\n\n- Processing upload jobs\n- Processing metadata\n- Recalculating disk usage\n- Purging datasets\n- Changing datatypes\n- Preparing compressed downloads (histories, etc.)\n- Creating PDFs for Galaxy workflow reports\n- Cleaning up short term storage\n- Preparing history exports\n. . .\n\n---\n\n.pull-left[\n## What do you need to enable Celery?\n\n- A properly set up broker, for example with [UseGalaxy.eu RabbitMQ Ansible Role](https://github.com/usegalaxy-eu/ansible-rabbitmq)\n- A result backend, e.g. a Redis server, for example with [geerlingguy's Ansible Role](https://github.com/geerlingguy/ansible-role-redis)\n- A shared filesystem (e.g. NFS) to which you export Galaxy's root dir and which is mounted on the Celery nodes\n- Optional: Flower, the Celery UI, for example with [UseGalaxy.eu Flower Ansible Role](https://github.com/usegalaxy-eu/flower-ansible-role) \n]\n\n.pull-right[\n![Collection of three logos, Galaxy, RabbitMQ, and celery](images/logos.png)\n]\n\n\n---\n\n.pull-left[\n![](images/celery.png)\n]\n\n.pull-right[\n\n## Where to get Celery?\n\n- It is in your Galaxy virtual environment (`venv`) already!\n- Mount the Galaxy root with `venv` and config dirs on your Celery node\n- Create an Ansible Playbook e.g. with [UseGalaxy.eu's Systemd Role](https://github.com/usegalaxy-eu/ansible-galaxy-systemd)\n- For inspiration, you can check out GalaxyEU's vars [file](https://github.com/usegalaxy-eu/infrastructure-playbook/blob/master/group_vars/celerycluster.yml)\n]\n\n---\n.pull-left[\n\t![screenshot of galaxy documentation page, linked in next section](images/docs.png)\n]\n.pull-right[\n## How to set the Galaxy Config\n- [Configuration in `galaxy.yml` file](https://docs.galaxyproject.org/en/latest/admin/options.html#amqp-internal-connection)\n- Documentation still WIP\n- To connect to your broker, `celery_broker` can be set. Defaults to `amqp_internal_connection` otherwise\n- `celery_conf` takes basically all [documented options](https://docs.celeryq.dev/en/stable/getting-started/first-steps-with-celery.html)\n- Set your [`result_backend`](https://docs.celeryq.dev/en/stable/getting-started/first-steps-with-celery.html#keeping-results) / Redis connection here\n- Celery, Flower and RabbitMQ are all well documented\n]\n\n---\n\n.pull-top[\n## How to monitor Celery\nIn the Flower dashboard you can monitor your workers live.  \nThe screenshot below shows all registered workers and their status.\n]\n\n.pull-bottom[\n\t![screenshot of the flower dashboard showing a bunch of workers](images/flower-screenshot.png)\n]\n\n---\n\n.pull-top[\n## How to monitor Celery Tasks\nIn the 'Tasks' tab, you can click on each individual task and see all its details, like    \nargs, timestamp, worker, result and stack trace if it errored.\n]\n\n.pull-bottom[\n\t![screenshot of a simple flower task](images/flower-screenshot-task.png)\n]\n\n---\n\n## Take Home Message\n - Celery is a nice way to load off computation from your head-node\n - On the other hand you have to maintain a broker and monitor your Celery node/cluster\n - If you have strong load fluctuations, you might need to find a way to scale your Celery cluster flexibly\n - Not necessarily needed for smaller instances, but can be considered, if your head node has too high load or I/O\n"],"video_library":{"tutorial":null,"slides":null,"demo":null,"both":null,"session":null},"hands_on":true,"slides":true,"mod_date":"2024-01-31 16:33:56 +0000","pub_date":"2022-07-16 17:42:54 +0000","version":59,"api":"https://training.galaxyproject.org/training-material/api/topics/admin/tutorials/celery/tutorial.json","tools":[],"supported_servers":[],"topic_name_human":"Galaxy Server administration","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial","contributors":[{"name":"Mira Kuntz","orcid":"0000-0003-4302-5091","matrix":"mira-miracoli:matrix.org","email":"kuntzm@informatik.uni-freiburg.de","joined":"2022-07","elixir_node":"de","affiliations":["uni-freiburg","elixir-europe","deNBI"],"id":"mira-miracoli","url":"https://training.galaxyproject.org/training-material/api/contributors/mira-miracoli.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/mira-miracoli/"},{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"}]}