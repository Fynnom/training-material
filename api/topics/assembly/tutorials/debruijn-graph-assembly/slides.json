{"layout":"tutorial_slides","title":"De Bruijn Graph Assembly","zenodo_link":"https://doi.org/10.5281/zenodo.582600","questions":["What are the factors that affect genome assembly?","How does Genome assembly work?"],"objectives":["Perform an optimised Velvet assembly with the Velvet Optimiser","Compare this assembly with those we did in the basic tutorial","Perform an assembly using the SPAdes assembler."],"time_estimation":"2h","level":"Introductory","key_points":["We learned about how the choice of k-mer size will affect assembly outcomes","We learned about the strategies that assemblers use to make reference genomes","We performed a number of assemblies with Velvet and SPAdes.","You should use SPAdes or another more modern assembler than Velvet for actual assemblies now."],"contributors":["slugger70"],"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"S00032","url":"/topics/assembly/tutorials/debruijn-graph-assembly/slides.html","topic_name":"assembly","tutorial_name":"debruijn-graph-assembly","dir":"topics/assembly/tutorials/debruijn-graph-assembly","symlink":null,"id":"assembly/debruijn-graph-assembly","ref_tutorials":["<h1 id=\"optimised-de-bruijn-graph-assemblies-using-the-velvet-optimiser-and-spades\">Optimised de Bruijn Graph assemblies using the Velvet Optimiser and SPAdes</h1>\n\n<p>In this activity, we will perform <em>de novo</em> assemblies of a short read set using the Velvet Optimiser and the SPAdes assemblers. We are using the Velvet Optimiser for illustrative purposes. For real assembly work, a more suitable assembler should be chosen - such as SPAdes.</p>\n\n<p>The Velvet Optimiser is a script written by <a href=\"/training-material/hall-of-fame/slugger70/\" class=\"contributor-badge-inline contributor-slugger70\">\n  <img src=\"https://avatars.githubusercontent.com/slugger70?s=36\" alt=\"Simon Gladman avatar\" width=\"36\" class=\"avatar\" />\n  Simon Gladman</a>\n to optimise the k-mer size and coverage cutoff parameters for Velvet. More information can be found <a href=\"https://github.com/slugger70/VelvetOptimiser\">in its repository</a>.</p>\n\n<p>SPAdes is a de novo genome assembler written by Pavel Pevzner’s group in St. Petersburg. More details on it can be found <a href=\"http://cab.spbu.ru/software/spades/\">on Spades’ website</a>&gt;</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will deal with:</p>\n\n  <ol>\n    <li><a href=\"#get-the-data\">Get the data</a></li>\n    <li><a href=\"#assembly-with-the-velvet-optimiser\">Assemble with the Velvet Optimiser</a></li>\n    <li><a href=\"#assemble-with-spades\">Assemble with SPAdes</a></li>\n  </ol>\n</blockquote>\n\n<h1 id=\"get-the-data\">Get the data</h1>\n\n<p>We will be using the same data that we used in the introductory tutorial, so if you have already completed that and have the data, skip this section.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Getting the data</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Create and name a new history for this tutorial.</p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-creating-a-new-history\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-creating-a-new-history\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Creating a new history</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <p>Click the <i class=\"fas fa-plus\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">new-history</span> icon at the top of the history panel:</p>   <p><img src=\"/training-material/shared/images/history_create_new.svg\" alt=\"UI for creating new history\" /></p>   <!-- the original drawing can be found here https://docs.google.com/drawings/d/1cCBrLAo4kDGic5QyB70rRiWJAKTenTU8STsKDaLcVU8/edit?usp=sharing --> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n    <li>\n      <p>Import the sequence read raw data (*.fastq) from <a href=\"https://zenodo.org/record/582600\">Zenodo</a></p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://zenodo.org/record/582600/files/mutant_R1.fastq\nhttps://zenodo.org/record/582600/files/mutant_R2.fastq\n</code></pre></div>      </div>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-importing-via-links\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-importing-via-links\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Importing via links</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ul>   <li>Copy the link location</li>   <li>     <p>Click <i class=\"fas fa-upload\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-upload</span> <strong>Upload Data</strong> at the top of the tool panel</p>   </li>   <li>Select <i class=\"fa fa-edit\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-wf-edit</span> <strong>Paste/Fetch Data</strong></li>   <li>     <p>Paste the link(s) into the text field</p>   </li>   <li>     <p>Press <strong>Start</strong></p>   </li>   <li><strong>Close</strong> the window</li> </ul> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n    <li>\n      <p>Rename the files <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-pencil</span></p>\n      <ul>\n        <li>The name of the files are the full URL, let’s make the names a little clearer</li>\n        <li>Change the names to just the last part, <code class=\"language-plaintext highlighter-rouge\">Mutant_R1.fastq</code>, <code class=\"language-plaintext highlighter-rouge\">Mutant_R2.fastq</code>  respectively</li>\n      </ul>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-renaming-a-dataset\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-renaming-a-dataset\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Renaming a dataset</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ul>   <li>Click on the <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-pencil</span> <strong>pencil icon</strong> for the dataset to edit its attributes</li>   <li>In the central panel, change the <strong>Name</strong> field</li>   <li>Click the <strong>Save</strong> button</li> </ul> </blockquote>\n      <p><!--END_SNIPPET--></p>\n\n      <blockquote class=\"question\">\n        <question-title></question-title>\n\n        <ol>\n          <li>What are four key features of a FASTQ file?</li>\n          <li>What is the main difference between a FASTQ and a FASTA file?</li>\n        </ol>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h1 id=\"assembly-with-the-velvet-optimiser\">Assembly with the Velvet Optimiser</h1>\n\n<p>We will perform an assembly with the Velvet Optimiser, which automatically runs and optimises the output of the Velvet assembler (<span class=\"citation\"><a href=\"#Velvet2008\">Zerbino and Birney 2008</a></span>). It will automatically choose a suitable value for the k-mer size (<strong>k</strong>). It will then go on to optimise the coverage cutoff (<strong>cov_cutoff</strong>) which corrects for read errors. It will use the “<em>n50</em>” metric for optimising the k-mer size and the “<em>total number of bases in contigs</em>” for optimising the coverage cutoff.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Assemble with the Velvet Optimiser</hands-on-title>\n\n  <ol>\n    <li><strong>Velvet Optimiser</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>: Optimise your assembly with the following parameters:\n      <ul>\n        <li><em>“Start k-mer size”</em>: <code class=\"language-plaintext highlighter-rouge\">45</code></li>\n        <li><em>“End k-mer size”</em>: <code class=\"language-plaintext highlighter-rouge\">73</code></li>\n        <li><em>“Input file type”</em>: <code class=\"language-plaintext highlighter-rouge\">Fastq</code></li>\n        <li><em>“Single or paired end reads”</em>: <code class=\"language-plaintext highlighter-rouge\">Paired</code></li>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Select first set of reads”</em>: <code class=\"language-plaintext highlighter-rouge\">mutant_R1.fastq</code></li>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Select second set of reads”</em>: <code class=\"language-plaintext highlighter-rouge\">mutant_R2.fastq</code></li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>Your history will now contain a number of new files:</p>\n\n<ul>\n  <li>Velvet optimiser contigs\n    <ul>\n      <li>A fasta file of the final assembled contigs</li>\n    </ul>\n  </li>\n  <li>Velvet optimiser contig stats\n    <ul>\n      <li>A table of the lengths (in k-mer length) and coverages (k-mer coverages) for the final contigs.</li>\n    </ul>\n  </li>\n</ul>\n\n<p>Have a look at each file.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Get contig statistics for Velvet Optimiser contigs</hands-on-title>\n\n  <ol>\n    <li><strong>Fasta Statistics</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>: Produce a summary of the velvet optimiser contigs:\n      <ul>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“fasta or multifasta file”</em>: Select your velvet optimiser contigs file</li>\n      </ul>\n    </li>\n    <li>\n      <p>View the output</p>\n\n      <blockquote class=\"question\">\n        <question-title></question-title>\n\n        <p>Compare the output we got here with the output of the simple assemblies obtained in the introductory tutorial.</p>\n        <ol>\n          <li>What are the main differences between them?</li>\n          <li>Which has a higher “n50”? What does this mean?</li>\n        </ol>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>Tables of results from <strong>(a)</strong> Simple assembly and <strong>(b)</strong> optimised assembly.</p>\n\n<p><strong>(a)</strong> <a href=\"../../images/image12.png\" rel=\"noopener noreferrer\"><img src=\"../../images/image12.png\" alt=\"The results of the contigs from Simple assembly.\" width=\"482\" height=\"305\" loading=\"lazy\" /></a></p>\n\n<p><strong>(b)</strong> <a href=\"../../images/optstats.png\" rel=\"noopener noreferrer\"><img src=\"../../images/optstats.png\" alt=\"The results of the contigs from Optimised assembly. In contrast to simple assembly produced much higher n_50, while num_seq is lower.\" width=\"188\" height=\"302\" loading=\"lazy\" /></a></p>\n\n<blockquote class=\"details\">\n  <details-title>Further reading on assembly with Velvet</details-title>\n  <ul>\n    <li>Heuristic Resolution of Repeats and Scaffolding in the Velvet Short-Read de Novo Assembler (<span class=\"citation\"><a href=\"#Zerbino2009\">Zerbino <i>et al.</i> 2009</a></span>)</li>\n  </ul>\n\n</blockquote>\n\n<h2 id=\"visualisation-of-the-assembly\">Visualisation of the Assembly</h2>\n\n<p>Now that we’ve assembled the genomes, let’s visualise this assembly using <a href=\"https://rrwick.github.io/Bandage/\">Bandage</a> (<span class=\"citation\"><a href=\"#Wick2015\">Wick <i>et al.</i> 2015</a></span>). This tool will let us better understand how the assembly graph really looks, and can give us a feeling for if the genome was well assembled or not.</p>\n\n<p>Currently VelvetOptimiser does not include the LastGraph output, so we will manually run <code class=\"language-plaintext highlighter-rouge\">velveth</code> and <code class=\"language-plaintext highlighter-rouge\">velvetg</code> with the optimised parameters.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Manually running velvetg/h</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Locate the output called “VelvetOptimiser: Contigs” in your history</p>\n    </li>\n    <li>\n      <p>Click the (i) information icon</p>\n    </li>\n    <li>\n      <p>Check the tool <code class=\"language-plaintext highlighter-rouge\">stderr</code> in the information page for the optimised k-mer value</p>\n    </li>\n  </ol>\n</blockquote>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n  <p>What was the optimal k-mer value? (referred to as <em>“hash”</em> in the stderr log)</p>\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <p>55</p>\n  </blockquote>\n</blockquote>\n\n<p>With this information in hand, let’s run velvet:</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Manually running velvetg/h</hands-on-title>\n\n  <ol>\n    <li><strong>velveth</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>: Prepare a dataset for the Velvet velvetg Assembler\n      <ul>\n        <li><em>“Hash length”</em>: <code class=\"language-plaintext highlighter-rouge\">55</code></li>\n        <li><em>“Insert Input Files”</em>:\n          <ul>\n            <li>1: Input Files\n              <ul>\n                <li><em>“file format”</em>: <code class=\"language-plaintext highlighter-rouge\">fastq</code></li>\n                <li><em>“read type”</em>: <code class=\"language-plaintext highlighter-rouge\">shortPaired reads</code></li>\n                <li><em>“Dataset”</em>: <code class=\"language-plaintext highlighter-rouge\">mutant_R1.fastq</code></li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n        <li><em>“Insert Input Files”</em>:\n          <ul>\n            <li>2: Input Files\n              <ul>\n                <li><em>“file format”</em>: <code class=\"language-plaintext highlighter-rouge\">fastq</code></li>\n                <li><em>“read type”</em>: <code class=\"language-plaintext highlighter-rouge\">shortPaired reads</code></li>\n                <li><em>“Dataset”</em>: <code class=\"language-plaintext highlighter-rouge\">mutant_R2.fastq</code></li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </li>\n    <li><strong>velvetg</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>: Velvet sequence assembler for very short reads\n      <ul>\n        <li><em>“Velvet dataset”</em>: output from <strong>velveth</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span></li>\n        <li><em>“Generate velvet LastGraph file”</em>: <code class=\"language-plaintext highlighter-rouge\">Yes</code></li>\n        <li><em>“Coverage cutoff”</em>: <code class=\"language-plaintext highlighter-rouge\">Specify Cutoff Value</code>\n          <ul>\n            <li><em>“Remove nodes with coverage below”</em>: <code class=\"language-plaintext highlighter-rouge\">1.44</code></li>\n          </ul>\n        </li>\n        <li><em>“Using Paired Reads”</em>: <code class=\"language-plaintext highlighter-rouge\">Yes</code></li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>The LastGraph contains a detailed representation of the De Bruijn graph, which can give us an idea how velvet has assembled the genome and potentially resolved any conflicts.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Bandage</hands-on-title>\n\n  <ol>\n    <li><strong>Bandage Image</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>: visualize de novo assembly graphs\n      <ul>\n        <li><em>“Graphical Fragment Assembly”</em>: The “LastGraph” output of <strong>velvetg</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span></li>\n        <li><em>“Produce jpg, png or svg file?”</em>: <code class=\"language-plaintext highlighter-rouge\">.svg</code></li>\n      </ul>\n    </li>\n    <li>Execute</li>\n    <li>View the output file</li>\n  </ol>\n</blockquote>\n\n<p>And now you should be able to see the graph that velvet produced:</p>\n\n<p><a href=\"../../images/bandage-velvet.svg\" rel=\"noopener noreferrer\"><img src=\"../../images/bandage-velvet.svg\" alt=\"velvet graph. \" width=\"492\" height=\"352\" loading=\"lazy\" /></a></p>\n\n<h2 id=\"interpreting-bandage-graphs\">Interpreting Bandage Graphs</h2>\n\n<p>k-mer size has a <a href=\"https://github.com/rrwick/Bandage/wiki/Effect-of-kmer-size\">significant effect</a> on the assembly. You can play around with various k-mers to see this effect in practice.</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>k-mer</th>\n      <th>graph</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>21</td>\n      <td><a href=\"../../images/bandage-velvet-21.svg\"><a href=\"../../images/bandage-velvet-21.svg\" rel=\"noopener noreferrer\"><img src=\"../../images/bandage-velvet-21.svg\" alt=\"21. \" width=\"918\" height=\"352\" loading=\"lazy\" /></a></a></td>\n    </tr>\n    <tr>\n      <td>33</td>\n      <td><a href=\"../../images/bandage-velvet-33.svg\"><a href=\"../../images/bandage-velvet-33.svg\" rel=\"noopener noreferrer\"><img src=\"../../images/bandage-velvet-33.svg\" alt=\"33. \" width=\"781\" height=\"352\" loading=\"lazy\" /></a></a></td>\n    </tr>\n    <tr>\n      <td>53</td>\n      <td><a href=\"../../images/bandage-velvet-53.svg\"><a href=\"../../images/bandage-velvet-53.svg\" rel=\"noopener noreferrer\"><img src=\"../../images/bandage-velvet-53.svg\" alt=\"53. \" width=\"729\" height=\"352\" loading=\"lazy\" /></a></a></td>\n    </tr>\n    <tr>\n      <td>77</td>\n      <td><a href=\"../../images/bandage-velvet-77.svg\"><a href=\"../../images/bandage-velvet-77.svg\" rel=\"noopener noreferrer\"><img src=\"../../images/bandage-velvet-77.svg\" alt=\"77. \" width=\"457\" height=\"352\" loading=\"lazy\" /></a></a></td>\n    </tr>\n  </tbody>\n</table>\n\n<p>The next thing to be aware of is that there can be multiple valid interpretations of a graph, all equally valid in absence of other data. The following is taken verbatim <a href=\"https://github.com/rrwick/Bandage/wiki/Simple-example\">from Bandage’s wiki</a>:</p>\n\n<blockquote class=\"quote\" cite=\"https://github.com/rrwick/Bandage/wiki/Simple-example\">\n  <p>For a simple case, imagine a bacterial genome that contains a single repeated element in two separate places in the chromosome:</p>\n\n  <p><a href=\"https://camo.githubusercontent.com/03628b49f50ccf7a9c565d7712bfc70c7764cbeb/687474703a2f2f72727769636b2e6769746875622e696f2f42616e646167652f696d616765732f77696b692f73696d706c655f6578616d706c655f312e706e67\" rel=\"noopener noreferrer\"><img src=\"https://camo.githubusercontent.com/03628b49f50ccf7a9c565d7712bfc70c7764cbeb/687474703a2f2f72727769636b2e6769746875622e696f2f42616e646167652f696d616765732f77696b692f73696d706c655f6578616d706c655f312e706e67\" alt=\"Simple example 1. \" loading=\"lazy\" /></a></p>\n\n  <p>A researcher (who does not yet know the structure of the genome) sequences it, and the resulting 100 bp reads are assembled with a de novo assembler:</p>\n\n  <p><a href=\"https://camo.githubusercontent.com/a51f384b83fbb97590ce86b8ec14d4ebd1bb60d1/687474703a2f2f72727769636b2e6769746875622e696f2f42616e646167652f696d616765732f77696b692f73696d706c655f6578616d706c655f322e706e67\" rel=\"noopener noreferrer\"><img src=\"https://camo.githubusercontent.com/a51f384b83fbb97590ce86b8ec14d4ebd1bb60d1/687474703a2f2f72727769636b2e6769746875622e696f2f42616e646167652f696d616765732f77696b692f73696d706c655f6578616d706c655f322e706e67\" alt=\"Simple example 2. \" loading=\"lazy\" /></a></p>\n\n  <p>Because the repeated element is longer than the sequencing reads, the assembler was not able to reproduce the original genome as a single contig. Rather, three contigs are produced: one for the repeated sequence (even though it occurs twice) and one for each sequence between the repeated elements.</p>\n\n  <p>Given only the contigs, the relationship between these sequences is not clear. However, the assembly graph contains additional information which is made apparent in Bandage:</p>\n\n  <p><a href=\"https://camo.githubusercontent.com/406648509cf478ac0b2ab9f2447aec4e7575b7dd/687474703a2f2f72727769636b2e6769746875622e696f2f42616e646167652f696d616765732f77696b692f73696d706c655f6578616d706c655f332e706e67\" rel=\"noopener noreferrer\"><img src=\"https://camo.githubusercontent.com/406648509cf478ac0b2ab9f2447aec4e7575b7dd/687474703a2f2f72727769636b2e6769746875622e696f2f42616e646167652f696d616765732f77696b692f73696d706c655f6578616d706c655f332e706e67\" alt=\"Simple example 3. \" loading=\"lazy\" /></a></p>\n\n  <p>There are two principal underlying sequences compatible with this graph: two separate circular sequences that share a region in common, or a single larger circular sequence with an element that occurs twice:</p>\n\n  <p><a href=\"https://camo.githubusercontent.com/58d0aa7eff4cfd3d36c9210e9f6a2f0265396715/687474703a2f2f72727769636b2e6769746875622e696f2f42616e646167652f696d616765732f77696b692f73696d706c655f6578616d706c655f342e706e67\" rel=\"noopener noreferrer\"><img src=\"https://camo.githubusercontent.com/58d0aa7eff4cfd3d36c9210e9f6a2f0265396715/687474703a2f2f72727769636b2e6769746875622e696f2f42616e646167652f696d616765732f77696b692f73696d706c655f6578616d706c655f342e706e67\" alt=\"Simple example 4. \" loading=\"lazy\" /></a></p>\n\n  <p>Additional knowledge, such as information on the approximate size of the bacterial chromosome, can help the researcher to rule out the first alternative. In this way, Bandage has assisted in turning a fragmented assembly of three contigs into a completed genome of one sequence.</p>\n</blockquote>\n\n<h1 id=\"assemble-with-spades\">Assemble with SPAdes</h1>\n\n<p>We will now perform an assembly with the much more modern SPAdes assembler (<span class=\"citation\"><a href=\"#Bankevich2012\">Bankevich <i>et al.</i> 2012</a></span>). It goes through a similar process to Velvet in the fact that it uses and simplifies de Bruijn graphs but it uses multiple values for k-mer size and combines the resultant graphs. This combination produces very good assemblies. When using SPAdes it is typical to choose at least 3 k-mer sizes. One low, one medium and one high. We will use 33, 55 and 91.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Assemble with SPAdes</hands-on-title>\n\n  <ol>\n    <li>\n      <p><strong>SPAdes</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>: Assemble the reads:</p>\n\n      <ul>\n        <li><em>“Run only assembly”</em>: <code class=\"language-plaintext highlighter-rouge\">yes</code></li>\n        <li><em>“K-mers to use separated by commas”</em>: <code class=\"language-plaintext highlighter-rouge\">33,55,91</code> [note: no spaces!]</li>\n        <li><em>“Coverage cutoff”</em>: <code class=\"language-plaintext highlighter-rouge\">auto</code></li>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Files -&gt; forward reads”</em>: <code class=\"language-plaintext highlighter-rouge\">mutant_R1.fastq</code></li>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Files -&gt; reverse reads”</em>: <code class=\"language-plaintext highlighter-rouge\">mutant_R2.fastq</code></li>\n        <li><em>“Output final assembly graph with scaffolds?”</em>: <code class=\"language-plaintext highlighter-rouge\">Yes</code></li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>You will now have 5 new files in your history:</p>\n\n<ul>\n  <li>two Fasta files, one for contigs and one for scaffolds</li>\n  <li>two statistics files, one for contigs and one for scaffolds</li>\n  <li>the SPAdes log file.</li>\n</ul>\n\n<p>Examine each file, especially the stats files.</p>\n\n<p><a href=\"../../images/contig_stats.png\" rel=\"noopener noreferrer\"><img src=\"../../images/contig_stats.png\" alt=\"Contig stats file with NODE_5 being the shortest contig with the highest coverage and NODE_1 being the opposite.\" width=\"512\" height=\"249\" loading=\"lazy\" /></a></p>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <ol>\n    <li>Why would one of the contigs have much higher coverage than the others?</li>\n    <li>What could this represent?</li>\n  </ol>\n\n</blockquote>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Visualize assembly with Bandage</hands-on-title>\n\n  <ol>\n    <li><strong>Bandage</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> with the following parameters:\n      <ul>\n        <li><em>“Graphical Fragment Assembly”</em>: <code class=\"language-plaintext highlighter-rouge\">assembly graph with scaffolds</code> output from <strong>SPAdes</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span></li>\n      </ul>\n    </li>\n    <li>Examine the output image <i class=\"far fa-eye\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-eye</span></li>\n  </ol>\n\n</blockquote>\n\n<p>The visualized assembly should look something like this:</p>\n\n<p><a href=\"../../images/bandage_spades.svg\" rel=\"noopener noreferrer\"><img src=\"../../images/bandage_spades.svg\" alt=\"bandage spades. \" width=\"842\" height=\"352\" loading=\"lazy\" /></a></p>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <p>Which assembly looks better to you? Why?</p>\n\n</blockquote>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Get contig statistics for SPAdes contigs</hands-on-title>\n\n  <ol>\n    <li><strong>Fasta Statistics</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>: Produce a summary of the SPAdes contigs:\n      <ul>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“fasta or multifasta file”</em>: Select your velvet optimiser contigs file</li>\n      </ul>\n    </li>\n    <li>\n      <p>Look at the output file.</p>\n\n      <blockquote class=\"question\">\n        <question-title></question-title>\n\n        <p>Compare the output we got here with the output of the simple assemblies obtained in the introductory tutorial.</p>\n        <ol>\n          <li>What are the main differences between them?</li>\n          <li>Did SPAdes produce a better assembly than the Velvet Optimiser?</li>\n        </ol>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n"],"ref_slides":[".enlarge120[\n\n# ***De novo* Genome Assembly**\n\n## **Part 2: De Bruijn Graph Assembly**\n\n]\n\n#### With thanks to T Seemann, D Bulach, I Cooke and Simon Gladman\n---\n.enlarge120[\n# **de Bruijn Graphs**\n]\n.pull-left[\n* Named after Nicolaas Govert de Bruijn\n* Directed graph representing overlaps between sequences of symbols\n* Sequences can be reconstructed by moving between nodes in graph\n]\n.pull-right[\n.image-50[![black and white image of a man wearing glasses](../../images/debruijn.png)]\n]\n---\n.enlarge120[# **de Bruijn Graphs**\n\n* A directed graph of sequences of symbols\n* Nodes in the graph are k-mers\n* Edges represent consecutive k-mers (which overlap by k-1 symbols)\n]\nConsider the 2 symbol alphabet (0 & 1) de Bruijn Graph for k =3\n![every permutation of 3 0s and/or 1s is shown, each is a node. Lines connect ones that share at least 2 overlap.](../../images/debruijn01.png)\n---\n.enlarge120[# **Producing sequences**\n\n* Sequences of symbols are produced by moving through the graph\n]\n![Same graph as before with arrows listing a path through the graph. Nodes 111, 110, 100, and 000 combine into 111000.](../../images/debruijn02.png)\n\n---\n.enlarge120[\n# **K-mers?**       .pull-right[.image-25[![Special K Logo](../../images/specialk.png)]]\n\n\n<hr>\n* To be able to use de Bruijn graphs, we need reads of length **L** to overlap by **L-1** bases.\n* Not all reads will overlap another read perfectly.\n  * Read errors\n  * Coverage \"holes\"\n* Not all reads are the same length (depending on technology and quality cleanup)\n\n***To help us get around these problems, we use all k-length subsequences of the reads, these are the k-mers.***\n]\n---\n.enlarge120[\n# **What are K-mers?**       .pull-right[.image-25[![Special K Logo](../../images/specialk.png)]]]\n![k=12 kmers show three sequences with length 12 overlapping. For k=5 10 different shorter sequences are shown.](../../images/kmers01.png)\n\n---\n.enlarge120[\n# **K-mers de Bruijn graph**       .pull-right[.image-25[![Wooden blocks with letters A, B, C.](../../images/abc.png)]]]\n![An example of happiness is given with 4 fragments, happi, pine, iness, appin.](../../images/ex1-1.png)\n---\n.enlarge120[\n# **K-mers de Bruijn graph**       .pull-right[.image-25[![Wooden blocks with letters A, B, C.](../../images/abc.png)]]]\n![all 4-mers are shown from those 5-mers, so happi becomes happ and appi. These are then uniqued.](../../images/ex1-2.png)\n---\n.enlarge120[\n# **K-mers de Bruijn graph**       .pull-right[.image-25[![Wooden blocks with letters A, B, C.](../../images/abc.png)]]]\n![A graph is drawn based on overlaps between those 4-mers.](../../images/ex1-3.png)\n---\n.enlarge120[\n# **K-mers de Bruijn graph**       .pull-right[.image-25[![Wooden blocks with letters A, B, C.](../../images/abc.png)]]]\n![The graph is collapsed into the word happiness, success.](../../images/ex1-4.png)\n\n---\n.enlarge120[\n# **The problem of repeats**       .pull-right[.image-25[![Repeat icon](../../images/repeatlogo.png)]]]\n![A second example with the word mississippi is shown. The fragments are now missis, ssissi, ssippi.](../../images/ex2-1.png)\n---\n.enlarge120[\n# **The problem of repeats**       .pull-right[.image-25[![Repeat icon](../../images/repeatlogo.png)]]]\n![All 4-mers are generated so missis becomes miss, issi, and ssis. These are then uniqued to get 7 unique 4-mers.](../../images/ex2-2.png)\n---\n.enlarge120[\n# **The problem of repeats**       .pull-right[.image-25[![Repeat icon](../../images/repeatlogo.png)]]]\n![A graph is generated but this graph is more complex and has a loop.](../../images/ex2-3.png)\n---\n.enlarge120[\n# **The problem of repeats**       .pull-right[.image-25[![Repeat icon](../../images/repeatlogo.png)]]]\n![This graph is walked and now the results are shown, mississippi, mississississippi, or more could be found by following the loop repeatedly.](../../images/ex2-4.png)\n---\n.enlarge120[\n# **Different k**       .pull-right[.image-25[![Letter K](../../images/bigk.png)]]]\n![The same mississippi example from the start.](../../images/ex2a-1.png)\n---\n.enlarge120[\n# **Different k**       .pull-right[.image-25[![Letter K](../../images/bigk.png)]]]\n![Instead of 4-mers, we now produce 5-mers.](../../images/ex2a-2.png)\n---\n.enlarge120[\n# **Different k**       .pull-right[.image-25[![Letter K](../../images/bigk.png)]]]\n![The graph is produced, and now there are two disconnected sets of nodes.](../../images/ex2a-3.png)\n---\n.enlarge120[\n# **Different k**       .pull-right[.image-25[![Letter K](../../images/bigk.png)]]]\n![When collapsing this graph we see two results, MISSISSIS and SSIPPI.](../../images/ex2a-4.png)\n\n---\n.enlarge120[\n# **Choose k wisely**       .pull-right[.image-25[![An old man from some movie.](../../images/wisely.png)]]]\n\n.enlarge120[\n* Lower k\n  * More connections\n  * Less chance of resolving small repeats\n  * Higher k-mer coverage\n\n* Higher k\n  * Less connections\n  * More chance of resolving small repeats\n  * Lower k-mer coverage\n\n***Optimum value for k will balance these effects.***\n\n]\n---\n.enlarge120[\n# **Read errors**       .pull-right[.image-25[![hazard symbol](../../images/hazardsymbol.png)]]]\n.image-75[![Example 3, happiness again, with fragments happi, iness, aplin, pinet](../../images/ex3-head.png)]\n![Blank image](../../images/blank.png)\n---\n.enlarge120[\n# **Read errors**       .pull-right[.image-25[![hazard symbol](../../images/hazardsymbol.png)]]]\n.image-75[![Happiness example 5-mers](../../images/ex3-head.png)]\n![all 3-mers are produced](../../images/ex3-2.png)\n---\n.enlarge120[\n# **Read errors**       .pull-right[.image-25[![hazard symbol](../../images/hazardsymbol.png)]]]\n.image-75[![Happiness example 5-mers](../../images/ex3-head.png)]\n![The three mers are collapsed into an overlap graph](../../images/ex3-3.png)\n---\n.enlarge120[\n# **Read errors**       .pull-right[.image-25[![hazard symbol](../../images/hazardsymbol.png)]]]\n.image-75[![Happiness example 5-mers](../../images/ex3-head.png)]\n![The graph is coloured and six contigs are produced based on overlaps.](../../images/ex3-4.png)\n\n---\n.enlarge120[\n# **More coverage**       .pull-right[.image-50[![hazard symbol](../../images/depthlogo.png)]]]\n\n.enlarge120[\n* Errors won't be duplicated in every read\n* Most reads will be error free\n* We can count the frequency of each k-mer\n* Annotate the graph with the frequencies\n* Use the frequency data to clean the de Bruijn graph\n\n\n***More coverage depth will help overcome errors!***\n]\n---\n.enlarge120[\n# **Read errors revisited**       .pull-right[.image-50[![hazard symbol](../../images/hazardsymbol.png)]]]\n![Same happiness example, all three mers are present, but now the counts are shown. One path has many more counts than the other. Text asks which path looks most valid? why?](../../images/ex3a.png)\n\n---\n.enlarge120[\n# **Another parameter - coverage cutoff**]\n\n.enlarge120[\n* At what point is a low coverage indicative of an error?\n* Can we ignore low coverage nodes and paths?\n* This is a new assembly parameter\n\n***Coverage cutoff***\n]\n\n---\n.enlarge120[\n# **de Bruijn graph assembly process**]\n\n.enlarge120[\n1. Select a value for k\n2. \"Hash\" the reads (make the kmers)\n3. Count the kmers\n4. Make the de Bruijn graph\n5. **Perform graph simplification steps** - use cov cutoff\n6. Read off contigs from simplified graph\n\n]\n\n---\n.enlarge120[\n# **Graph simplification**]\n\n## Step 1: Chain merging\n\n![Looking at a doubly connected graph with forward/reverse sequences and piles of overlaps. Nodes are connected with lines. One node is labelled as already merged, and two nodes sharing a prefix are labelled as further merging possible.](../../images/tipclipping.png)\n\n---\n.enlarge120[\n# **Graph simplification**]\n\n## Step 2: Tip clipping\n\n![a graph with every node doubled for forward/reverse strands is shown, clip tips if the length of the tip of the node is less than 2 times k.](../../images/shortnodes.png)\n\n---\n.enlarge120[\n# **Graph simplification**]\n\n\n.pull-left[\n![Three graphs are shown, B, C, and D. B is the most complex, C combines two nodes B and B prime, while D collapses even more nodes to further simplify the graph.](../../images/bubblemerging.png)\n]\n.pull-right[\n## Step 3: Bubble collapsing\n\n* Detect redundant paths through graph\n* Compare the paths using sequence alignment\n* If similar, merge the paths\n\n.reduce70[Image: Zerbino & Birney 2008]\n]\n\n---\n.enlarge120[\n# **Graph simplification**\n\n## Step 4: Remove low coverage nodes\n\n* Remove erroneous nodes and connections using the \"coverage cutoff\"\n* Genuine short nodes will have a high coverage\n\n]\n---\n.enlarge120[\n# **Make contigs**\n\n* Find an unbalanced node in the graph\n* Follow the chain of nodes and \"read off\" the bases to produce the contigs\n* Where there is an ambiguous divergence/convergence, stop the current contig and start a new one.\n* Re-trace the reads through the contigs to help with repeat resolution\n\n]\n\n---\n.enlarge120[\n# **Velvet**\n\nVelvet has two separate programs:\n\n\n* Velveth\n  * Makes the k-mers and\n  * Efficiently counts (hashes) them\n  * All in O(N) time\n\n\n* Velvetg\n  * Makes the graph - O(U) time. U = unique k-mers.\n  * Simplifies it\n  * Makes contigs - O(E) time. E = edges in graph\n\nBut: You need to choose **k** and **c** wisely!\n\n]\n\n---\n.enlarge120[\n# **Velvet - Paired end scaffolding**\n\n* Breadcrumb algorithm\n]\n\n![Two boxes A and B are at opposite ends, there are many nodes along a line between them, and some sitting outside of the graph or otherwise weirdly connected.](../../images/breadcrumb.png)\n\n---\n.enlarge120[\n# **Extensions of the idea**\n]\n---\n.enlarge120[\n# **SPAdes**     .pull-right[.image-50[![spades logo](../../images/spades.png)]]]\n\n.enlarge120[\n* de Bruijn graph assembler by Pavel Pevzner's group out of St. Petersburg\n\n\n* Uses multiple k-mers to build the graph\n  * Graph has connectivity **and** specificity\n  * Usually use a low, medium and high k-mer size together.\n\n\n* Performs error correction on the reads first\n\n* Maps reads back to the contigs and scaffolds as a check\n\n* Under active development\n\n* Much slower than Velvet\n* Should be used in preference to Velvet now.\n\n]\n---\n.enlarge120[\n# **A move back to OLC**]\n\n.pull-left[\n.enlarge120[\n* New long read technologies\n  * PacBio and MinIon\n\n\n* Assemblers: HGap, CANU\n  * Use overlap, layout consensus approach\n\n\n* CANU can perform hybrid assemblies with long and short reads\n]\n]\n\n.pull-right[\n![image of a minion connected to a computer via a cable. Below a man stands next to a very large machine.](../../images/minionpacbio.png)\n]\n---\n.enlarge120[# **Bandage**\n\n* Assembly graph viewer and manipulator\n* Written by Ryan Wick of Centre for Systems Genomics - Uni. Melbourne, Australia\n]\n![A screenshot of the bandage gui showning drawing options on left and a middle window with a close up of a genome assembly graph.](../../images/bandage.png)\n"],"hands_on":true,"slides":true,"mod_date":"2024-02-01 10:46:14 +0000","pub_date":"2017-05-24 15:42:44 +0000","version":51,"workflows":[{"workflow":"debruijn-graph.ga","tests":true,"url":"https://training.galaxyproject.org/training-material/topics/assembly/tutorials/debruijn-graph-assembly/workflows/debruijn-graph.ga","path":"topics/assembly/tutorials/debruijn-graph-assembly/workflows/debruijn-graph.ga","wfid":"assembly-debruijn-graph-assembly","wfname":"debruijn-graph","trs_endpoint":"https://training.galaxyproject.org/training-material/api/ga4gh/trs/v2/tools/assembly-debruijn-graph-assembly/versions/debruijn-graph","license":null,"creators":[],"name":"Debruijn Graph","title":"Debruijn Graph","test_results":null,"modified":"2024-06-15 00:05:34 +0000","mermaid":"flowchart TD\n  0[\"ℹ️ Input Dataset\\nmutant_R1\"];\n  style 0 stroke:#2c3143,stroke-width:4px;\n  1[\"ℹ️ Input Dataset\\nmutant_R2\"];\n  style 1 stroke:#2c3143,stroke-width:4px;\n  2[\"VelvetOptimiser\"];\n  0 -->|output| 2;\n  1 -->|output| 2;\n  3[\"SPAdes\"];\n  0 -->|output| 3;\n  1 -->|output| 3;\n  4[\"Fasta Statistics\"];\n  2 -->|contigs| 4;\n  dacb84a5-5482-4ab0-81ad-e92af21636cd[\"Output\\nfasta_stats_velvet\"];\n  4 --> dacb84a5-5482-4ab0-81ad-e92af21636cd;\n  style dacb84a5-5482-4ab0-81ad-e92af21636cd stroke:#2c3143,stroke-width:4px;\n  5[\"Fasta Statistics\"];\n  3 -->|out_contigs| 5;\n  ff376be9-7361-48c6-b1c8-d9f951b9c6fa[\"Output\\nfasta_stats_spades\"];\n  5 --> ff376be9-7361-48c6-b1c8-d9f951b9c6fa;\n  style ff376be9-7361-48c6-b1c8-d9f951b9c6fa stroke:#2c3143,stroke-width:4px;"}],"api":"https://training.galaxyproject.org/training-material/api/topics/assembly/tutorials/debruijn-graph-assembly/tutorial.json","tools":["toolshed.g2.bx.psu.edu/repos/iuc/fasta_stats/fasta-stats/1.0.1","toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1","toolshed.g2.bx.psu.edu/repos/simon-gladman/velvetoptimiser/velvetoptimiser/2.2.6"],"supported_servers":{"exact":[{"url":"https://galaxy.mesocentre.uca.fr","name":"Galaxy@AuBi","usegalaxy":false},{"url":"https://usegalaxy.be/","name":"UseGalaxy.be","usegalaxy":false},{"url":"https://usegalaxy.eu","name":"UseGalaxy.eu","usegalaxy":true},{"url":"https://usegalaxy.no/","name":"UseGalaxy.no","usegalaxy":false},{"url":"https://usegalaxy.org","name":"UseGalaxy.org (Main)","usegalaxy":true},{"url":"https://usegalaxy.org.au","name":"UseGalaxy.org.au","usegalaxy":true}],"inexact":[{"url":"https://usegalaxy.cz/","name":"UseGalaxy.cz","usegalaxy":false}]},"topic_name_human":"Assembly","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[{"name":"fasta_stats","owner":"iuc","revisions":"9c620a950d3a","tool_panel_section_label":"FASTA/FASTQ","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"spades","owner":"nml","revisions":"b7829778729f","tool_panel_section_label":"Assembly","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"velvetoptimiser","owner":"simon-gladman","revisions":"37d88f41c810","tool_panel_section_label":"Assembly","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"}]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools:\n- name: fasta_stats\n  owner: iuc\n  revisions: 9c620a950d3a\n  tool_panel_section_label: FASTA/FASTQ\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: spades\n  owner: nml\n  revisions: b7829778729f\n  tool_panel_section_label: Assembly\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: velvetoptimiser\n  owner: simon-gladman\n  revisions: 37d88f41c810\n  tool_panel_section_label: Assembly\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n","tours":false,"video":false,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial","logo":"GTN","class":"enlarge120","redirect_from":["/short/assembly/debruijn-graph-assembly/slides","/short/S00032"]}