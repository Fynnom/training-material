{"layout":"tutorial_slides","title":"Unicycler assembly of SARS-CoV-2 genome with preprocessing to remove human genome reads","zenodo_link":"https://zenodo.org/record/3732359","questions":["How can a genome of interest be assembled against a background of contaminating reads from other genomes?","How can sequencing data used to obtain an assembled genome?"],"objectives":["Know basic characteristics of SARS-CoV-2","Understand Nanopore and Illumina technologies","Detect and remove human reads from SARS-CoV-2 sequencing reads","Know main _de novo_ genome assembly algorithms","Perform a hybrid _de novo_ genome assembly "],"time_estimation":"4h","level":"Intermediate","key_points":["Certain types of NGS samples can be heavily contaminated with sequences from other genomes.","Reads from known/expected contaminating sources can be identified by mapping to the respective genomes.","The different characteristics of Illumina and Nanopore sequencing technologies require processing by different tools.","Hybrid genome assembly allows to obtain high quality genome sequences."],"requirements":[{"type":"internal","topic_name":"assembly","tutorials":["unicycler-assembly"]},{"type":"internal","topic_name":"sequence-analysis","tutorials":["mapping"]},{"type":"internal","topic_name":"galaxy-interface","tutorials":["collections"]}],"tags":["covid19"],"contributors":["gallardoalba"],"recordings":[{"captioners":["mtekman"],"date":"2021-02-15","galaxy_version":"21.01","length":"25M","youtube_id":"jNFLYhjgJPs","speakers":["gallardoalba"]}],"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"S00031","url":"/topics/assembly/tutorials/assembly-with-preprocessing/slides.html","topic_name":"assembly","tutorial_name":"assembly-with-preprocessing","dir":"topics/assembly/tutorials/assembly-with-preprocessing","symlink":null,"id":"assembly/assembly-with-preprocessing","ref_tutorials":["<p>In some research or clinical contexts it is not possible, or very hard, to\npurify DNA/RNA for sequencing from just the specimen of interest.\nInstead you will isolate DNA that is contaminated, sometimes heavily, with\nDNA/RNA of a different origin.\nThis is the case for example with microbiome samples, which typically display\nconsiderable contamination with host DNA, or with samples of body fluids for\npathogen detection. Such contamination can pose an issue with certain types of\nanalyses, in particular with genome assembly.</p>\n\n<p>This tutorial guides you through the preprocessing of sequencing data of\nbronchoalveolar lavage fluid (BALF) samples obtained from early COVID-19\npatients in China. Since such samples are expected to be contaminated\nsignficantly with human sequenced reads, the goal is to enrich the data for\nSARS-CoV-2 reads by identifying and discarding reads of human origin before\ntrying to assemble the viral genome sequence.</p>\n\n<blockquote class=\"comment\">\n  <comment-title>The usegalaxy.* COVID-19 analysis project</comment-title>\n  <p>This tutorial uses the same data as, and recapitulates to a large extent, the\n<a href=\"https://covid19.galaxyproject.org/genomics/1-PreProcessing/\">Pre-processing</a>\nand <a href=\"https://covid19.galaxyproject.org/genomics/2-Assembly/\">Assembly</a> steps\nof the <a href=\"https://covid19.galaxyproject.org/genomics/\">Genomics</a> section of\n<a href=\"https://covid19.galaxyproject.org/\">covid19.galaxyproject.org</a>.</p>\n\n</blockquote>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will deal with:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#get-data\" id=\"markdown-toc-get-data\">Get data</a>    <ol>\n      <li><a href=\"#get-data-from-ncbi-sra\" id=\"markdown-toc-get-data-from-ncbi-sra\">Get data from NCBI SRA</a></li>\n      <li><a href=\"#get-data-from-zenodo\" id=\"markdown-toc-get-data-from-zenodo\">Get data from Zenodo</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#read-trimming-and-quality-control\" id=\"markdown-toc-read-trimming-and-quality-control\">Read trimming and quality control</a>    <ol>\n      <li><a href=\"#trimming-and-filtering-of-illumina-reads\" id=\"markdown-toc-trimming-and-filtering-of-illumina-reads\">Trimming and filtering of Illumina reads</a></li>\n      <li><a href=\"#quality-control-of-nanopore-reads\" id=\"markdown-toc-quality-control-of-nanopore-reads\">Quality control of Nanopore reads</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#subtraction-of-reads-mapping-to-the-human-reference-genome\" id=\"markdown-toc-subtraction-of-reads-mapping-to-the-human-reference-genome\">Subtraction of reads mapping to the human reference genome</a>    <ol>\n      <li><a href=\"#mapping-of-illumina-reads\" id=\"markdown-toc-mapping-of-illumina-reads\">Mapping of Illumina reads</a></li>\n      <li><a href=\"#mapping-of-nanopore-reads\" id=\"markdown-toc-mapping-of-nanopore-reads\">Mapping of Nanopore reads</a></li>\n      <li><a href=\"#human-reads-subtraction\" id=\"markdown-toc-human-reads-subtraction\">Human reads subtraction</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#format-conversion-of-remaining-reads\" id=\"markdown-toc-format-conversion-of-remaining-reads\">Format conversion of remaining reads</a>    <ol>\n      <li><a href=\"#conversion-to-fastq-format\" id=\"markdown-toc-conversion-to-fastq-format\">Conversion to fastq format</a></li>\n      <li><a href=\"#optional-rearrange-the-filtered-data-into-the-original-nested-data-structure\" id=\"markdown-toc-optional-rearrange-the-filtered-data-into-the-original-nested-data-structure\">Optional: Rearrange the filtered data into the original nested data structure</a></li>\n      <li><a href=\"#merging-of-reads-with-collection-operations\" id=\"markdown-toc-merging-of-reads-with-collection-operations\">Merging of reads with collection operations</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#sars-cov-2-genome-assembly\" id=\"markdown-toc-sars-cov-2-genome-assembly\">SARS-CoV-2 genome assembly</a>    <ol>\n      <li><a href=\"#optional-subsampling-of-reads\" id=\"markdown-toc-optional-subsampling-of-reads\">Optional: Subsampling of reads</a></li>\n      <li><a href=\"#create-assembly\" id=\"markdown-toc-create-assembly\">Create assembly</a></li>\n      <li><a href=\"#explore-assembly\" id=\"markdown-toc-explore-assembly\">Explore assembly</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#conclusion\" id=\"markdown-toc-conclusion\">Conclusion</a></li>\n</ol>\n\n</blockquote>\n\n<h1 id=\"get-data\">Get data</h1>\n\n<p>We are going to create an assembly of the SARS-CoV-2 genome based on mixed\nshort-reads (Illumina) and long-reads (Nanopore) data from a total of six\ndifferent samples, all of which are publicly accessible through the NCBI\nand EBI short-reads archives (SRAs).</p>\n\n<p>Since automated data downloads from SRAs can be unreliable at times and could\nget broken by changes to the download interface on the NCBI/EBI side, this\ntutorial offers two ways to access the sequenced reads input data:</p>\n\n<ol>\n  <li>\n    <p>Direct download from the NCBI SRA based on accession numbers and using the\ndedicated <strong>Faster Download</strong> tool</p>\n\n    <p>Use this method if it works and is fast enough for you, and if you are\ninterested in learning to obtain short-reads data directly from NCBI, in\ngeneral.</p>\n  </li>\n  <li>\n    <p>Download of the same data deposited as a copy at <a href=\"https://zenodo.org/record/3732359\">Zenodo</a>\nThis method uses Galaxy’s generic data import functionality, and should be\nvery reliable and faster than the download from NCBI.\nIt also showcases <strong>rule-based</strong> uploads and demonstrates how they can be\nused to download several datasets and to arrange them into easy to handle\ndata structures at the same time.</p>\n\n    <blockquote class=\"details\">\n      <details-title>Rule-based uploads</details-title>\n      <p>In this tutorial you will only use the features of Galaxy’s rule-based\nuploader that are required to get the input data ready for our analysis,\nand we will not explain those features in much detail.</p>\n\n      <p>If, after this first taste, you are interested in a thorough introduction\nwe recommend the advanced tutorial\n<a href=\"../../../galaxy-interface/tutorials/upload-rules/tutorial.html\">Collections: Rule Based Uploader</a>.</p>\n    </blockquote>\n\n    <p>Use this method if the direct download from the NCBI SRA does not work, or\nis too slow for your time frame, or if you are interested in advanced use\nof Galaxy’s data import functionality.</p>\n  </li>\n</ol>\n\n<p>The corresponding two step-by-step instructions below have been crafted to\nproduce identically arranged data structures in your history so all subsequent\nsteps are independent of the data source you choose.</p>\n\n<h2 id=\"get-data-from-ncbi-sra\">Get data from NCBI SRA</h2>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Data upload to Galaxy from NCBI SRA</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Create a new history for this tutorial and give it a proper name</p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-creating-a-new-history\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-creating-a-new-history\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Creating a new history</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <p>Click the <i class=\"fas fa-plus\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">new-history</span> icon at the top of the history panel:</p>   <p><img src=\"/training-material/shared/images/history_create_new.svg\" alt=\"UI for creating new history\" /></p>   <!-- the original drawing can be found here https://docs.google.com/drawings/d/1cCBrLAo4kDGic5QyB70rRiWJAKTenTU8STsKDaLcVU8/edit?usp=sharing --> </blockquote>\n      <p><!--END_SNIPPET--></p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-renaming-a-history\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-renaming-a-history\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Renaming a history</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ol>   <li>Click on <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-pencil</span> (<strong>Edit</strong>) next to the history name (which by default is “Unnamed history”)</li>   <li>Type the new name</li>   <li>Click on <strong>Save</strong></li> </ol>   <p>If you do not have the <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-pencil</span> (<strong>Edit</strong>) next to the history name:</p>   <ol>   <li>Click on <strong>Unnamed history</strong> (or the current name of the history) (<strong>Click to rename history</strong>) at the top of your history panel</li>   <li>Type the new name</li>   <li>Press <kbd>Enter</kbd></li> </ol> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n    <li>\n      <p>Create a new dataset listing the SRA accession numbers of the Illumina paired-end input data for this tutorial:</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SRR10903401\nSRR10903402\nSRR10971381\n</code></pre></div>      </div>\n\n      <p>call it, <em>e.g.</em>, <code class=\"language-plaintext highlighter-rouge\">Illumina accessions</code> and set its datatype to <code class=\"language-plaintext highlighter-rouge\">tabular</code>.</p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-creating-a-new-file\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-creating-a-new-file\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Creating a new file</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ul>   <li>Click <i class=\"fas fa-upload\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-upload</span> <strong>Upload Data</strong> at the top of the tool panel</li>   <li>Select <i class=\"fa fa-edit\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-wf-edit</span> <strong>Paste/Fetch Data</strong> at the bottom</li>   <li>Paste the file contents into the text field</li>   <li>Change <strong>Type</strong> from “Auto-detect” to <code class=\"language-plaintext highlighter-rouge\">tabular</code>* Press <strong>Start</strong> and <strong>Close</strong> the window</li> </ul> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n    <li>\n      <p>Create another new dataset listing the SRA accession numbers of the Nanopore input data for this tutorial:</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SRR10948550\nSRR10948474\nSRR10902284\n</code></pre></div>      </div>\n\n      <p>call it, <em>e.g.</em>, <code class=\"language-plaintext highlighter-rouge\">Nanopore accessions</code> and set its datatype to <code class=\"language-plaintext highlighter-rouge\">tabular</code>.</p>\n    </li>\n    <li>\n      <p>Add <code class=\"language-plaintext highlighter-rouge\">#illumina</code>/<code class=\"language-plaintext highlighter-rouge\">#nanopore</code> tags to the datasets</p>\n\n      <blockquote class=\"comment\">\n        <comment-title>Name tags in the analysis</comment-title>\n        <p>We are going to treat the Illumina- and the Nanopore-sequenced data\nseparately in this tutorial up to the actual genome assembly step.</p>\n\n        <p>To make it easier to keep track of the two branches of the analysis, we\nrecommend the use of Galaxy’s dataset <strong>name tags</strong>.\nA name tag will automatically propagate to any new dataset derived\nfrom the tagged dataset.</p>\n      </blockquote>\n\n      <p>You can create a name tag by attaching a tag starting with <code class=\"language-plaintext highlighter-rouge\">#</code> to any\ndataset.</p>\n\n      <p>Name tags are meant to help you identify the origin of datasets quickly.\nFeel free to either use the suggested names above or choose ones you like.</p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-adding-a-tag\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-adding-a-tag\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Adding a tag</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ol>   <li>Click on the dataset to expand it</li>   <li>Click on <strong>Add Tags</strong> <i class=\"fas fa-tags\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-tags</span></li>   <li>Add a tag  starting with <code class=\"language-plaintext highlighter-rouge\">#</code>     <ul>       <li>Tags starting with <code class=\"language-plaintext highlighter-rouge\">#</code> will be automatically propagated to the outputs of tools using this dataset.</li>     </ul>   </li>   <li>Press <kbd>Enter</kbd></li>   <li>Check that the tag appears below the dataset name</li> </ol> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n    <li>\n      <p>Retrieve the Illumina reads data from NCBI:</p>\n\n      <p>Run <strong>Faster Download and Extract Reads in FASTQ</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> with\nthe following parameter settings:</p>\n      <ul>\n        <li><em>“select input type”</em>: <code class=\"language-plaintext highlighter-rouge\">List of SRA accession, one per line</code>\n          <ul>\n            <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“sra accession list”</em>:\nthe <code class=\"language-plaintext highlighter-rouge\">Illumina accessions</code> dataset created above</li>\n          </ul>\n        </li>\n        <li>in <em>“Advanced Options”</em>\n          <ul>\n            <li><em>“Select how to split the spots”</em>: <code class=\"language-plaintext highlighter-rouge\">--split-3</code></li>\n          </ul>\n        </li>\n      </ul>\n\n      <p>The tool run should generate four new items in your history - three\ncollections and one <em>log</em> dataset with a summary of what happened.</p>\n\n      <p>Since all three datasets that we tried to retrieve contain only\npaired-end reads, only the <code class=\"language-plaintext highlighter-rouge\">Pair-end data</code> collection is expected to\ncontain downloaded data. Click on the other two collections to verify that\nthey are empty, then delete them from your history (since the collections\ndo not contain any datasets, it does not matter, which delete option -\n“Collection Only”, “Delete Datasets” or “Permanently Delete Datasets” you\nare choosing when prompted).</p>\n    </li>\n    <li>\n      <p>Retrieve the Nanopore reads data from NCBI:</p>\n\n      <p>Run <strong>Faster Download and Extract Reads in FASTQ</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> with\nthe following parameter settings:</p>\n      <ul>\n        <li><em>“select input type”</em>: <code class=\"language-plaintext highlighter-rouge\">List of SRA accession, one per line</code>\n          <ul>\n            <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“sra accession list”</em>:\nthe <code class=\"language-plaintext highlighter-rouge\">Nanopore accessions</code> dataset created above</li>\n          </ul>\n        </li>\n        <li>in <em>“Advanced Options”</em>\n          <ul>\n            <li><em>“Select how to split the spots”</em>: <code class=\"language-plaintext highlighter-rouge\">--split-3</code></li>\n          </ul>\n        </li>\n      </ul>\n\n      <p>As in the previous step, the tool run should generate four new items in\nyour history.</p>\n\n      <p>Since all three datasets that we tried to retrieve in this run contain\nonly single-end reads, only the <code class=\"language-plaintext highlighter-rouge\">Single-end data</code> collection is expected to\ncontain downloaded data this time. Click on the other two collections to\nverify that they are empty, then delete them from your history.</p>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"get-data-from-zenodo\">Get data from Zenodo</h2>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Data upload to Galaxy from Zenodo</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Create a new history for this tutorial and give it a proper name</p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-creating-a-new-history-1\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-creating-a-new-history-1\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Creating a new history</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <p>Click the <i class=\"fas fa-plus\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">new-history</span> icon at the top of the history panel:</p>   <p><img src=\"/training-material/shared/images/history_create_new.svg\" alt=\"UI for creating new history\" /></p>   <!-- the original drawing can be found here https://docs.google.com/drawings/d/1cCBrLAo4kDGic5QyB70rRiWJAKTenTU8STsKDaLcVU8/edit?usp=sharing --> </blockquote>\n      <p><!--END_SNIPPET--></p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-renaming-a-history-1\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-renaming-a-history-1\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Renaming a history</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ol>   <li>Click on <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-pencil</span> (<strong>Edit</strong>) next to the history name (which by default is “Unnamed history”)</li>   <li>Type the new name</li>   <li>Click on <strong>Save</strong></li> </ol>   <p>If you do not have the <i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-pencil</span> (<strong>Edit</strong>) next to the history name:</p>   <ol>   <li>Click on <strong>Unnamed history</strong> (or the current name of the history) (<strong>Click to rename history</strong>) at the top of your history panel</li>   <li>Type the new name</li>   <li>Press <kbd>Enter</kbd></li> </ol> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n    <li>\n      <p>Import Illumina-sequenced reads data from <a href=\"https://zenodo.org/record/3732359\">Zenodo</a></p>\n\n      <p>The Zenodo links for the data are these:</p>\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://zenodo.org/record/3732359/files/SRR10903401_r1.fq.gz\nhttps://zenodo.org/record/3732359/files/SRR10903401_r2.fq.gz\nhttps://zenodo.org/record/3732359/files/SRR10903402_r1.fq.gz\nhttps://zenodo.org/record/3732359/files/SRR10903402_r2.fq.gz\nhttps://zenodo.org/record/3732359/files/SRR10971381_r1.fq.gz\nhttps://zenodo.org/record/3732359/files/SRR10971381_r2.fq.gz\n</code></pre></div>      </div>\n\n      <p>To upload these data to your Galaxy history in structured form:</p>\n\n      <ul>\n        <li>Copy the above list of links</li>\n        <li>Open the Galaxy Upload Manager\n(<i class=\"fas fa-upload\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-upload</span> on the top right of the tool panel)</li>\n        <li>In the pop-up window, switch to the <strong>Rule-based</strong> tab and select\n          <ul>\n            <li><em>“Upload data as:”</em>: <code class=\"language-plaintext highlighter-rouge\">Collection(s)</code></li>\n            <li><em>“Load tabular data from:”</em>: <code class=\"language-plaintext highlighter-rouge\">Pasted Table</code></li>\n            <li>Paste the copied links into the text field</li>\n            <li>Click <strong>Build</strong></li>\n          </ul>\n        </li>\n        <li>In the next screen, select\n          <ul>\n            <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Column”</em>: <code class=\"language-plaintext highlighter-rouge\">Using a Regular expression</code>\n              <ul>\n                <li><em>“From Column”</em>: <code class=\"language-plaintext highlighter-rouge\">A</code></li>\n                <li><i class=\"far fa-check-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-check</span> <em>“Create columns matching expression groups.”</em></li>\n                <li><em>“Regular Expression”</em>: <code class=\"language-plaintext highlighter-rouge\">.+/(SRR\\d+)_r(\\d).fq.gz</code></li>\n                <li><em>“Number of Groups”</em>: <code class=\"language-plaintext highlighter-rouge\">2</code></li>\n                <li>Click <strong>Apply</strong></li>\n              </ul>\n            </li>\n            <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Rules”</em>: <code class=\"language-plaintext highlighter-rouge\">Add / Modify Column Definitions</code>\n              <ul>\n                <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Add Definition”</em>: <code class=\"language-plaintext highlighter-rouge\">URL</code>\n                  <ul>\n                    <li><em>“URL”</em>: <code class=\"language-plaintext highlighter-rouge\">A</code></li>\n                  </ul>\n                </li>\n                <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Add Definition”</em>: <code class=\"language-plaintext highlighter-rouge\">List Identifier(s)</code>\n                  <ul>\n                    <li><em>“List Identifier(s)”</em>: <code class=\"language-plaintext highlighter-rouge\">B</code></li>\n                  </ul>\n                </li>\n                <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Add Definition”</em>: <code class=\"language-plaintext highlighter-rouge\">Paired-end Indicator</code>\n                  <ul>\n                    <li><em>“Paired-end Indicator”</em>: <code class=\"language-plaintext highlighter-rouge\">C</code></li>\n                  </ul>\n                </li>\n                <li>Click <strong>Apply</strong></li>\n              </ul>\n            </li>\n            <li><em>“Type”</em>: <code class=\"language-plaintext highlighter-rouge\">fastqsanger.gz</code></li>\n            <li><em>“Name”</em>: <code class=\"language-plaintext highlighter-rouge\">Illumina PE data</code> (or similar)</li>\n            <li>\n              <p><em>“Add nametag for name:”</em> <i class=\"far fa-check-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-check</span></p>\n\n              <blockquote class=\"comment\">\n                <comment-title>Name tags in the analysis</comment-title>\n                <p>We are going to treat the Illumina- and the Nanopore-sequenced data\nseparately in this tutorial up to the actual genome assembly step.</p>\n\n                <p>To make it easier to keep track of the two branches of the analysis, we\nrecommend the use of Galaxy’s dataset <strong>name tags</strong>.\nA name tag will automatically propagate to any new dataset derived\nfrom the tagged dataset.</p>\n              </blockquote>\n\n              <p>Checking this option tells Galaxy to reuse the collection name above\nas a name tag on the collection.</p>\n            </li>\n            <li>Click <strong>Upload</strong></li>\n          </ul>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <p>Import Nanopore-sequenced reads data from <a href=\"https://zenodo.org/record/3732359\">Zenodo</a></p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://zenodo.org/record/3732359/files/SRR10902284_ONT.fq.gz\nhttps://zenodo.org/record/3732359/files/SRR10948474_ONT.fq.gz\nhttps://zenodo.org/record/3732359/files/SRR10948550_ONT.fq.gz\n</code></pre></div>      </div>\n\n      <p>Again, we want to upload this data to our history in structured form.\nTo do so:</p>\n\n      <ul>\n        <li>Copy the above list of links</li>\n        <li>Open the Galaxy Upload Manager\n(<i class=\"fas fa-upload\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-upload</span> on the top right of the tool panel)</li>\n        <li>In the pop-up window, switch to the <strong>Rule-based</strong> tab and select\n          <ul>\n            <li><em>“Upload data as:”</em>: <code class=\"language-plaintext highlighter-rouge\">Collection(s)</code></li>\n            <li><em>“Load tabular data from:”</em>: <code class=\"language-plaintext highlighter-rouge\">Pasted Table</code></li>\n            <li>Paste the copied links into the text field</li>\n            <li>Click <strong>Build</strong></li>\n          </ul>\n        </li>\n        <li>In the next screen, select\n          <ul>\n            <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Column”</em>: <code class=\"language-plaintext highlighter-rouge\">Using a Regular expression</code>\n              <ul>\n                <li><em>“From Column”</em>: <code class=\"language-plaintext highlighter-rouge\">A</code></li>\n                <li><i class=\"far fa-check-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-check</span> <em>“Create columns matching expression groups.”</em></li>\n                <li><em>“Regular Expression”</em>: <code class=\"language-plaintext highlighter-rouge\">.+/(SRR\\d+)_ONT.fq.gz</code></li>\n                <li><em>“Number of Groups”</em>: <code class=\"language-plaintext highlighter-rouge\">1</code></li>\n                <li>Click <strong>Apply</strong></li>\n              </ul>\n            </li>\n            <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Rules”</em>: <code class=\"language-plaintext highlighter-rouge\">Add / Modify Column Definitions</code>\n              <ul>\n                <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Add Definition”</em>: <code class=\"language-plaintext highlighter-rouge\">URL</code>\n                  <ul>\n                    <li><em>“URL”</em>: <code class=\"language-plaintext highlighter-rouge\">A</code></li>\n                  </ul>\n                </li>\n                <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Add Definition”</em>: <code class=\"language-plaintext highlighter-rouge\">List Identifier(s)</code>\n                  <ul>\n                    <li><em>“List Identifier(s)”</em>: <code class=\"language-plaintext highlighter-rouge\">B</code></li>\n                  </ul>\n                </li>\n                <li>Click <strong>Apply</strong></li>\n              </ul>\n            </li>\n            <li><em>“Type”</em>: <code class=\"language-plaintext highlighter-rouge\">fastqsanger.gz</code></li>\n            <li><em>“Name”</em>: <code class=\"language-plaintext highlighter-rouge\">Nanopore data</code> (or similar)</li>\n            <li><em>“Add nametag for name:”</em> <i class=\"far fa-check-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-check</span></li>\n            <li>Click <strong>Upload</strong></li>\n          </ul>\n        </li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h1 id=\"read-trimming-and-quality-control\">Read trimming and quality control</h1>\n\n<p>In the end, we do not want to base our mapping on low-quality reads that may\ncause misassembly of fragments or introduce sequencing artefacts into the final\nassembled sequence. Since quality control, read filtering and read trimming are\nall quite fast and computationally cheap operations compared to the read\nmapping that we will use to identify and eliminate human reads, it is best to\nperform these steps up front.</p>\n\n<p>Due to their very different nature, however, Illumina- and Nanopore-sequenced\nreads should be treated rather differently.</p>\n\n<h2 id=\"trimming-and-filtering-of-illumina-reads\">Trimming and filtering of Illumina reads</h2>\n\n<p>Galaxy offers a panel of different NGS reads trimming/filtering tools. Here,\nwe use <strong>fastp</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>, which is straightforward to configure,\nand when combined with <strong>MultiQC</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>, enables nice and\neasy-to-interpret visualizations of the effects of preprocessing, in particular\nfor multiple samples.</p>\n\n<p>In the following, we configure the tool to retain reads only if at most 20% of\ntheir bases have a Phred-scaled quality &gt;= 20 and if there length in bases after\ntrimming of adapter sequences (which the tool auto-detects for us) is at least\n50.</p>\n\n<p>The JSON-formatted report produced by the tool, can serve as input to\n<strong>MultiQC</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> for a direct visual comparison of key quality\nmetrics for all samples before and after preprocessing.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Reads preprocessing and quality reporting</hands-on-title>\n  <ol>\n    <li><strong>fastp</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> with the following parameters\n      <ul>\n        <li><em>“Single-end or paired reads”</em>: <code class=\"language-plaintext highlighter-rouge\">Paired Collection</code>\n          <ul>\n            <li><em>“Select paired collection(s)”</em>: the collection of Illumina-sequenced\nreads as produced in the <em>Get Data</em> section</li>\n          </ul>\n        </li>\n        <li>in <em>“Filter Options”</em>\n          <ul>\n            <li>in <em>“Quality filtering options”</em>\n              <ul>\n                <li><em>“Disable quality filtering”</em>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n                <li><em>“Qualified quality phred”</em>: <code class=\"language-plaintext highlighter-rouge\">20</code></li>\n                <li><em>“Unqualified percent limit”</em>: <code class=\"language-plaintext highlighter-rouge\">20</code></li>\n              </ul>\n            </li>\n            <li>in <em>“Length filtering options”</em>\n              <ul>\n                <li><em>“Disable length filtering”</em>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n                <li><em>“Length required”</em>: <code class=\"language-plaintext highlighter-rouge\">50</code></li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n        <li>in <em>“Output Options”</em>\n          <ul>\n            <li><em>“Output HTML report”</em>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n            <li><em>“Output JSON report”</em>: <code class=\"language-plaintext highlighter-rouge\">Yes</code></li>\n          </ul>\n        </li>\n      </ul>\n\n      <p>The tool run produces two collections - one with the actual preprocessed\nreads of all input samples, another one with a JSON-formatted report of\nthe processing for every sample.</p>\n    </li>\n    <li><strong>MultiQC</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> with the following parameters\n      <ul>\n        <li><i class=\"far fa-plus-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-repeat</span> <em>“Results”</em>\n          <ul>\n            <li><em>“Which tool was used generate logs?”</em>: <code class=\"language-plaintext highlighter-rouge\">fastp</code>\n              <ul>\n                <li><i class=\"far fa-folder\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-collection</span> <em>“Output of fastp”</em>: the collection of\nJSON-formatted reports, second collection produced by <strong>fastp</strong>\n<i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span></li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n      </ul>\n\n      <p>This tool run generates a single webpage output with the combined quality reports\nfor all samples before and after processing with <strong>fastp</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>.</p>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"quality-control-of-nanopore-reads\">Quality control of Nanopore reads</h2>\n\n<p>Nanopore-sequenced reads differ greatly in length from one another and are, on\naverage, of relatively low quality (in particular when compared to\nIllumina-sequenced reads). These properties make it challenging to preprocess\nthem with standard tools. Quality assessment tools calibrated to work well with\nIllumina-sequenced reads are less useful for Nanopore-sequenced reads, too, for\nthe same reasons. Here we restrict ourselves to a simple quality check with\n<strong>NanoPlot</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>, a dedicated QC tool for Nanopore-sequenced reads.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Checking the quality of Nanopore reads with NanoPlot</hands-on-title>\n  <ol>\n    <li><strong>NanoPlot</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> with the following parameters\n      <ul>\n        <li><em>“Select multifile mode”</em>: <code class=\"language-plaintext highlighter-rouge\">batch</code>\n          <ul>\n            <li><em>“Type of the file(s) to work on”</em>: <code class=\"language-plaintext highlighter-rouge\">fastq</code>\n              <ul>\n                <li><i class=\"far fa-folder\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-collection</span> <em>“files”</em>: the collection of\nNanopore-sequenced reads as produced in the <em>Get Data</em> section</li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n        <li>in <em>“Options for filtering or transforming input prior to plotting”</em>\n          <ul>\n            <li><em>“Logarithmic scaling of lengths in plots.”</em>: <code class=\"language-plaintext highlighter-rouge\">Yes</code></li>\n          </ul>\n        </li>\n      </ul>\n\n      <blockquote class=\"question\">\n        <question-title></question-title>\n\n        <ol>\n          <li>Looking at the three generated quality reports, which of the three\nsamples seems to be of better quality overall than the other two,\nand what are some criteria that support this conclusion?</li>\n        </ol>\n\n        <blockquote class=\"solution\">\n          <solution-title></solution-title>\n          <ol>\n            <li>\n              <p>Sample <code class=\"language-plaintext highlighter-rouge\">SRR10948474</code> has the best overall quality.</p>\n\n              <p>It has both higher average read length and quality than the other\ntwo (see the <em>Summary statistics</em> table), has a distribution of\nread qualities that peaks around intermediate quality scores (not\nlow ones as for the other samples), and contains some extra-long\n(though at least partly rather low-quality) reads. Those last two\npoints become most obvious when looking at the <em>Read lengths vs\nAverage read quality</em> plots.</p>\n            </li>\n          </ol>\n        </blockquote>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h1 id=\"subtraction-of-reads-mapping-to-the-human-reference-genome\">Subtraction of reads mapping to the human reference genome</h1>\n\n<h2 id=\"mapping-of-illumina-reads\">Mapping of Illumina reads</h2>\n\n<p>In this tutorial, we are using <strong>Bowtie2</strong> for mapping our short-reads data to\nthe human genome. <em>BWA-MEM</em> would be a good alternative for mapping the 150\nnucleotides (see the QC report above) reads from our samples.</p>\n\n<p>According to its authors, the <em>Minimap2</em> aligner, which we will be using for\nmapping the Nanopore-sequenced data in the next step, is supposed to outcompete\n<em>Bowtie2</em> and <em>BWA-MEM</em> in terms of speed even for Illumina-sequenced reads\nof length &gt; 100 nts, but we opt for the conservative approach of using a\nwidely-used, well-tested tool here.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Mapping with Bowtie2</hands-on-title>\n  <ol>\n    <li><strong>Bowtie2</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> with the following parameters\n      <ul>\n        <li><em>“Is this single or paired library”</em>: <code class=\"language-plaintext highlighter-rouge\">Paired-end Dataset Collection</code>\n          <ul>\n            <li><em>“FASTQ Paired Dataset”</em>: the collection of preprocessed\nIllumina-sequenced reads, output of <strong>fastp</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span></li>\n            <li>\n              <p><em>“Write unaligned reads (in fastq format) to separate file(s)”</em>: <code class=\"language-plaintext highlighter-rouge\">No</code></p>\n\n              <p>Activating this option may seem attractive since the unaligned reads\nare what we are interested in, but filtering for those reads with\na dedicated tool in a separate step allows us to filter on the\nproperties of the read pairs instead of those of individual reads.</p>\n            </li>\n            <li><em>“Write aligned reads (in fastq format) to separate file(s)”</em>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n            <li><em>“Do you want to set paired-end options?”</em>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n          </ul>\n        </li>\n        <li><em>“Will you select a reference genome from your history or use a built-in index?”</em>:\n<code class=\"language-plaintext highlighter-rouge\">Use a built-in genome index</code>\n          <ul>\n            <li><em>“Select reference genome”</em>: <code class=\"language-plaintext highlighter-rouge\">Human (Homo sapiens): hg38 Full</code></li>\n          </ul>\n        </li>\n        <li><em>“Set read groups information?”</em>: <code class=\"language-plaintext highlighter-rouge\">Do not set</code></li>\n        <li><em>“Select analysis mode”</em>: <code class=\"language-plaintext highlighter-rouge\">Default setting only</code></li>\n        <li><em>“Do you want to tweak SAM/BAM Options?”</em>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n        <li><em>“Save the bowtie2 mapping statistics to the history”</em>: <code class=\"language-plaintext highlighter-rouge\">Yes</code></li>\n      </ul>\n\n      <p>The tool run should produce two collections of output datasets. One with\nthe actual mapped reads of the three samples and one with the corresponding\nmapping statistics for each sample, which we want to have a brief look at\nnext.</p>\n    </li>\n    <li>\n      <p>Inspect the <code class=\"language-plaintext highlighter-rouge\">mapping stats</code> of each sample by clicking on the corresponding collection, then on the <i class=\"far fa-eye\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-eye</span> (eye) icon of each individual sample data</p>\n\n      <blockquote class=\"question\">\n        <question-title></question-title>\n\n        <ol>\n          <li>What percentage of reads of each sample has been aligned to the <code class=\"language-plaintext highlighter-rouge\">hg38</code> reference genome?</li>\n          <li>Which sample is the least contaminated with human reads?</li>\n          <li>Which sample contains the highest amount of SARS-CoV2 reads?</li>\n        </ol>\n\n        <blockquote class=\"solution\">\n          <solution-title></solution-title>\n          <ol>\n            <li>The samples have between 13% and 21% of reads aligned to <code class=\"language-plaintext highlighter-rouge\">hg38</code>.\nThe information can be found on the last line of output for each\nsample.</li>\n            <li>Sample <code class=\"language-plaintext highlighter-rouge\">SRR10971381</code> is the least contaminated with just above 13%\nof human reads</li>\n            <li>You cannot answer this question with this data. While <code class=\"language-plaintext highlighter-rouge\">SRR10971381</code>\nshows the lowest relative contamination with human reads, that\ndoes not mean that all other reads are from SARS-CoV-2. They could\ncome from other species (<em>e.g.</em>, bacteria or other viruses)\ncontained in this BALF sample.</li>\n          </ol>\n        </blockquote>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"mapping-of-nanopore-reads\">Mapping of Nanopore reads</h2>\n\n<p>For the mapping of the Nanopore-sequenced data we are using the <strong>Minimap2</strong>\naligner, which is particularly efficient for mapping long reads.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Nanopore reads mapping</hands-on-title>\n\n  <ol>\n    <li><strong>Map with minimap2</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> with the following parameters\n      <ul>\n        <li><em>“Will you select a reference genome from your history or use a built-in index?”</em>:\n<code class=\"language-plaintext highlighter-rouge\">Use a built-in genome index</code>\n          <ul>\n            <li><em>“Using reference genome”</em>: <code class=\"language-plaintext highlighter-rouge\">Human Dec. 2013 (GRCh38/hg38) (hg38)</code></li>\n          </ul>\n        </li>\n        <li><em>“Single or Paired-end reads”</em>: <code class=\"language-plaintext highlighter-rouge\">Single</code>\n          <ul>\n            <li><i class=\"far fa-folder\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-collection</span> <em>“Select fastq dataset”</em>: the collection\nof Nanopore-sequenced reads as set up in the <em>Get Data</em> section</li>\n          </ul>\n        </li>\n        <li><em>“Select a profile of preset options”</em>: <code class=\"language-plaintext highlighter-rouge\">Oxford Nanopore read to reference mapping. ...</code></li>\n      </ul>\n\n      <p>This tool run produces one collection with the actual mapped reads for\neach Nanopore-sequenced sample. Unlike <strong>Bowtie2</strong> it does not have an\noption to output mapping statistics directly. However, we can generate\nthat information through an extra step.</p>\n    </li>\n    <li><strong>Samtools stats</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> with the following parameters\n      <ul>\n        <li><i class=\"far fa-folder\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-collection</span> <em>“BAM file”</em>: the collection of mapped\nNanopore-sequenced reads, output of **Map with minimap2 <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> (step 1)</li>\n        <li><em>“Output”</em>: <code class=\"language-plaintext highlighter-rouge\">Separate datasets for each statistic</code>\n          <ul>\n            <li><em>“Desired output files”</em>\n              <ul>\n                <li>\n                  <p><i class=\"far fa-check-square\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-check</span> <em>“Summary numbers”</em></p>\n\n                  <p>These simple summary stats correspond approximately to the\nstatistics generated by <strong>Bowtie2</strong> and are enough for our purpose.</p>\n                </li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n      </ul>\n\n      <blockquote class=\"comment\">\n        <comment-title>Mapping stats for Nanopore-sequenced long reads</comment-title>\n\n        <p>Since, unlike Illumina-generated reads, Nanopore-sequenced reads can\nhave very different lengths, it makes limited sense to calculate a\nratio of mapped to overall reads for them.</p>\n\n        <p>Instead, <code class=\"language-plaintext highlighter-rouge\">bases mapped</code> / <code class=\"language-plaintext highlighter-rouge\">total length</code> should give a more reliable\nestimate of which fraction of the data is due to human genome sequence.</p>\n\n        <p>Try to calculate this ratio for the three samples on your own!</p>\n      </blockquote>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"human-reads-subtraction\">Human reads subtraction</h2>\n\n<p>At this point you should have two collections of mapped reads - one holding the\nmapping results obtained with <strong>Bowtie2</strong> of the three Illumina-sequenced\nsamples, the other one holding the <strong>minimap2</strong> output for the three\nNanopore-sequenced samples.</p>\n\n<p>Next, we are going to filter the data from both collections to retain only\nthose reads that were <em>not</em> mapped to the human genome, <em>i.e</em> those of\npotential viral origin.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Mapped reads filtering</hands-on-title>\n\n  <ol>\n    <li><strong>Samtools view</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> to filter the Illumina-sequenced reads mapped with Bowtie2:\n      <ul>\n        <li><i class=\"far fa-folder\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-collection</span> <em>“SAM/BAM/CRAM data set”</em>: the collection of\nmapped Illumina-sequenced reads, output of <strong>Bowtie2</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span></li>\n        <li><em>“What would you like to look at?”</em>: <code class=\"language-plaintext highlighter-rouge\">A filtered/subsampled selection of reads</code>\n          <ul>\n            <li>in <em>“Configure filters”</em>\n              <ul>\n                <li><em>“Require that these flags are set”</em>: <code class=\"language-plaintext highlighter-rouge\">Read is unmapped</code> and\n<code class=\"language-plaintext highlighter-rouge\">Mate is unmapped</code></li>\n              </ul>\n            </li>\n            <li><em>“What would you like to have reported?”</em>: <code class=\"language-plaintext highlighter-rouge\">All reads retained after filtering and subsampling</code>\n              <ul>\n                <li><em>“Produce extra dataset with dropped reads?”</em>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n                <li><em>“Output format”</em>: <code class=\"language-plaintext highlighter-rouge\">BAM (-b)</code></li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </li>\n    <li><strong>Samtools view</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> to filter the Nanopore-sequenced reads mapped with minimap2:\n      <ul>\n        <li><i class=\"far fa-folder\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-collection</span> <em>“SAM/BAM/CRAM data set”</em>: the collection of\nmapped Nanopore-sequenced reads, output of <strong>minimap2</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span></li>\n        <li><em>“What would you like to look at?”</em>: <code class=\"language-plaintext highlighter-rouge\">A filtered/subsampled selection of reads</code>\n          <ul>\n            <li>In <em>“Configure filters”</em>\n              <ul>\n                <li><em>“Require that these flags are set”</em>: <code class=\"language-plaintext highlighter-rouge\">Read is unmapped</code></li>\n              </ul>\n            </li>\n            <li><em>“What would you like to have reported?”</em>: <code class=\"language-plaintext highlighter-rouge\">All reads retained after filtering and subsampling</code>\n              <ul>\n                <li><em>“Produce extra dataset with dropped reads?”</em>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n                <li><em>“Output format”</em>: <code class=\"language-plaintext highlighter-rouge\">BAM (-b)</code></li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <p>(Optional) Remove the database <code class=\"language-plaintext highlighter-rouge\">hg38</code> attribute from the output files</p>\n\n      <blockquote class=\"details\">\n        <details-title>Why do this?</details-title>\n        <p>When we ran the <strong>Bowtie2</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> and <strong>minimap2</strong>\n<i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> mappers before, these tools set the <em>database</em> attribute\non their outputs to <code class=\"language-plaintext highlighter-rouge\">hg38</code> to indicate that the mapped reads in these\noutputs have been mapped against this version of the human reference\ngenome - an important piece of information for further work with those\nmapped reads.</p>\n\n        <p>In step 1 and 2 above, however, we have eliminated all mapped reads so\nthe <code class=\"language-plaintext highlighter-rouge\">database: hg38</code> info is misleading from this point onward in the\nanalysis. While not directly harmful, it is best practice to remove this\nmetadata now.</p>\n      </blockquote>\n\n      <p>For the outputs of step 1 and step 2 above, reset the database/build\n(dbkey) to <code class=\"language-plaintext highlighter-rouge\">unspecified (?)</code>.</p>\n\n      <!--SNIPPET-->\n      <blockquote class=\"tip\">   <div class=\"box-title tip-title\" id=\"tip-changing-database-build-dbkey\"><button class=\"gtn-boxify-button tip\" type=\"button\" aria-controls=\"tip-changing-database-build-dbkey\" aria-expanded=\"true\"><i class=\"far fa-lightbulb\" aria-hidden=\"true\"></i> <span>Tip: Changing database/build (dbkey)</span><span class=\"fold-unfold fa fa-minus-square\"></span></button></div>   <ul>   <li>Click the desired dataset’s name to expand it.</li>   <li>     <p>Click on the “?” next to database indicator:</p>     <p><img src=\"/training-material/shared/images/datasets_dbkey.svg\" alt=\"UI for changing dbkey\" /></p>   </li>   <li>In the central panel, change the <strong>Database/Build</strong> field</li>   <li>Select your desired database key from the dropdown list: <code class=\"language-plaintext highlighter-rouge\">unspecified (?)</code></li>   <li>Click the <strong>Save</strong> button</li> </ul> </blockquote>\n      <p><!--END_SNIPPET--></p>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h1 id=\"format-conversion-of-remaining-reads\">Format conversion of remaining reads</h1>\n\n<h2 id=\"conversion-to-fastq-format\">Conversion to fastq format</h2>\n\n<p>Assembly tools, typically, expect their input data to be fastq-formatted, but\nwhat we have after mapping and filtering is data in BAM format. Hence, we need\nto convert the retained Illumina- and Nanopore-sequenced reads back into their\noriginal format before proceeding to assembly.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>BAM to fastq format conversion</hands-on-title>\n\n  <ol>\n    <li><strong>Samtools fastx</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> to convert the filtered Illumina-sequenced reads to fastq format\n      <ul>\n        <li><i class=\"far fa-folder\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-collection</span> <em>“BAM or SAM file to convert”</em>: the collection of\nfiltered Illumina-sequenced reads, output of first <strong>Samtools view</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> run</li>\n        <li><em>“Output format”</em>: <code class=\"language-plaintext highlighter-rouge\">compressed FASTQ</code></li>\n        <li><em>“outputs”</em>: <code class=\"language-plaintext highlighter-rouge\">READ1</code> and <code class=\"language-plaintext highlighter-rouge\">READ2</code></li>\n      </ul>\n    </li>\n    <li><strong>Samtools fastx</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> to convert the filtered Nanopore-sequenced reads to fastq format\n      <ul>\n        <li><i class=\"far fa-folder\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-collection</span> <em>“BAM or SAM file to convert”</em>: the collection of\nfiltered Nanopore-sequenced reads, output of second <strong>Samtools view</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> run</li>\n        <li><em>“Output format”</em>: <code class=\"language-plaintext highlighter-rouge\">compressed FASTQ</code></li>\n        <li><em>“outputs”</em>: <code class=\"language-plaintext highlighter-rouge\">unspecific</code></li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"optional-rearrange-the-filtered-data-into-the-original-nested-data-structure\">Optional: Rearrange the filtered data into the original nested data structure</h2>\n\n<p>If you compare the outputs of the last step to the input data we started out\nwith, you will notice that the Illumina-sequenced data is arranged differently\nnow than initially. It is arranged now into separate collections of forward and\nreverse reads, whereas we started with a single nested collection of the data.</p>\n\n<p>We can easily cast the data back into its original structure with one of\nGalaxy’s collection manipulation tools, but note that we will not use the\nresulting nested collection for this tutorial because the <strong>Unicycler</strong> tool\nfor assembling the reads would not be able to handle the nested data correctly.</p>\n\n<p>Thus, the following just serves as an illustration and is entirely optional.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Arrange two list collections into a list of pairs</hands-on-title>\n\n  <ol>\n    <li><strong>Zip Collection</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> with the following parameters\n      <ul>\n        <li><i class=\"far fa-folder\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-collection</span> <em>“Input Dataset (Forward)”</em>: the collection\nof filtered Illumina-sequenced forward reads in fastq format,\nfirst output of first <strong>Samtools fastx</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> run</li>\n        <li><i class=\"far fa-folder\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-collection</span> <em>“Input Dataset (Reverse)”</em>: the collection\nof filtered Illumina-sequenced reverse reads in fastq format,\nsecond output of first <strong>Samtools fastx</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> run</li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"merging-of-reads-with-collection-operations\">Merging of reads with collection operations</h2>\n\n<p>To merge reads from several samples into a combined final assembly, we need to\npass the data to <strong>Unicycler</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> in partially merged form. The\nforward and reverse reads of paired-end data should be kept separate, and so\nshould short and long reads. However, the tool has no option to combine data\nfrom individual samples, so we need to merge the forward, reverse, and the long\nreads data, respectively, across samples. Conveniently for us, the outputs of\nthe earlier <strong>Samtools fastx</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> runs have already returned the\ndata structured into three corresponding collections for us.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Collapsing each collection into a single dataset</hands-on-title>\n\n  <ol>\n    <li><strong>Collapse Collection</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> of Illumina-sequenced <em>forward</em> reads\n      <ul>\n        <li><i class=\"far fa-folder\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-collection</span> <em>“Collection of files to collapse into single dataset”</em>:\nthe collection of filtered Illumina-sequenced forward reads in fastq format,\nfirst output of first <strong>Samtools fastx</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> run</li>\n        <li><em>“Keep one header line”</em>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n        <li><em>“Prepend File name”</em>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n      </ul>\n    </li>\n    <li><strong>Collapse Collection</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> of Illumina-sequenced <em>reverse</em> reads\n      <ul>\n        <li><i class=\"far fa-folder\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-collection</span> <em>“Collection of files to collapse into single dataset”</em>:\nthe collection of filtered Illumina-sequenced reverse reads in fastq format,\nsecond output of first <strong>Samtools fastx</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> run</li>\n        <li><em>“Keep one header line”</em>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n        <li><em>“Prepend File name”</em>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n      </ul>\n    </li>\n    <li><strong>Collapse Collection</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> of Nanopore-sequenced reads\n      <ul>\n        <li><i class=\"far fa-folder\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-collection</span> <em>“Collection of files to collapse into single dataset”</em>:\nthe collection of filtered Nanopore-sequenced reads in fastq format,\noutput of second <strong>Samtools fastx</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> run</li>\n        <li><em>“Keep one header line”</em>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n        <li><em>“Prepend File name”</em>: <code class=\"language-plaintext highlighter-rouge\">No</code></li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h1 id=\"sars-cov-2-genome-assembly\">SARS-CoV-2 genome assembly</h1>\n\n<h2 id=\"optional-subsampling-of-reads\">Optional: Subsampling of reads</h2>\n\n<p>The actual assembly of the sequenced reads represents the real bottleneck in\nthis tutorial. Assembly of the full set of sequences can easily take 10 hours\nand would best be conducted overnight.</p>\n\n<p>If you do not have that much time, you should downsample the Illumina-sequenced\ncombined reads now. Which will reduce the time required to finish the\nsubsequent assembly step to approximately 1-2 hours.</p>\n\n<blockquote class=\"comment\">\n  <comment-title>If you are in a hurry</comment-title>\n  <p>The downsampling parameters below have been chosen to have minimal impact on\nthe assembly results. Further speed-ups are certainly possible, but will\nlikely lead to poor assembly outcomes.</p>\n</blockquote>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Subsampling of paired-end short-reads data</hands-on-title>\n\n  <ol>\n    <li><strong>seqtk_sample</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> with the following parameters\n      <ul>\n        <li><i class=\"far fa-copy\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-files</span> <em>“Input FASTA/Q file”</em>: The two datasets with the\ncombined Illumina-sequenced forward and reverse reads, outputs of the\nfirst and the second run of <strong>Collapse Collection</strong></li>\n        <li><em>“RNG seed”</em>: 4</li>\n        <li><em>“Subsample (decimal fraction or number)”</em>: 0.1</li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"create-assembly\">Create assembly</h2>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Assembly of SARS-CoV2 genome</hands-on-title>\n\n  <ol>\n    <li><strong>Create assemblies with Unicycler</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> with the following parameters\n      <ul>\n        <li><em>“Paired or Single end data?”</em>: <code class=\"language-plaintext highlighter-rouge\">Paired</code>\n          <ul>\n            <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Select first set of reads”</em>: the combined\nIllumina-sequenced forward reads from all samples, output of the\nfirst <strong>Collapse Collection</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> run (or first output of\n<strong>seqtk_sample</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> for a subsample-based assembly)</li>\n            <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Select second set of reads”</em>: the combined\nIllumina-sequenced reverse reads from all samples, output of the\nsecond <strong>Collapse Collection</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> run  (or second output\nof <strong>seqtk_sample</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> for a subsample-based assembly)</li>\n          </ul>\n        </li>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Select long reads. If there are no long reads, leave this empty”</em>:\nNanpore-sequenced reads from all samples, output of the third\n<strong>Collapse Collection</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> run</li>\n        <li><em>“Select Bridging mode”</em>: <code class=\"language-plaintext highlighter-rouge\">Normal (moderate contig size and misassembly rate)</code></li>\n        <li><em>“Exclude contigs from the FASTA file which are shorter than this length (bp)”</em>:\n<code class=\"language-plaintext highlighter-rouge\">100</code></li>\n        <li><em>“The expected number of linear (i.e. non-circular) sequences in the assembly”</em>:\n<code class=\"language-plaintext highlighter-rouge\">1</code></li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<h2 id=\"explore-assembly\">Explore assembly</h2>\n\n<p>The <strong>Unicycler</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> run above should produce two output datasets:</p>\n\n<ul>\n  <li>a final assembly in FASTA format</li>\n  <li>an assembly graph</li>\n</ul>\n\n<p>Of these, the assembly graph is more information-rich because it not only\ncontains the sequences of <em>all</em> assembled fragments (including the ones shorter\nthan the threshold length defined for inclusion of the fragments into the FASTA\noutput), but also indicates the relative average coverage of the fragments by\nsequenced reads and how some of the fragments could potentially be bridged\nafter resolving ambiguities manually.</p>\n\n<h3 id=\"assembly-inspection-with-bandage\">Assembly inspection with Bandage</h3>\n\n<p>On the downside, the assembly graph format takes some getting used to before\nyou can make sense out of the information it provides.</p>\n\n<p>This issue can be alleviated through the use of <strong>Bandage</strong>, a package for\nexploring assembly graphs through summary reports and visualizations of their\ncontents.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Assembly stats and visualization with Bandage</hands-on-title>\n\n  <ol>\n    <li><strong>Bandage Info</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> with the following parameters\n      <ul>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Graphical Fragment Assembly”</em>: the assembly graph dataset produced by\n<strong>Unicycler</strong></li>\n        <li><em>“Output the information in a single tab-delimited line starting with the graph file”</em>:\n<code class=\"language-plaintext highlighter-rouge\">No</code></li>\n      </ul>\n    </li>\n    <li><strong>Bandage Image</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> with the following parameters\n      <ul>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Graphical Fragment Assembly”</em>: the assembly graph dataset produced by\n<strong>Unicycler</strong></li>\n        <li><em>“Node name labels?”</em>: <code class=\"language-plaintext highlighter-rouge\">Yes</code></li>\n        <li><em>“Node length labels?”</em>: <code class=\"language-plaintext highlighter-rouge\">Yes</code></li>\n      </ul>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>Let us inspect the summary report produced by <strong>Bandage Info</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span>\nfirst:</p>\n\n<p>You may be rather disappointed by the large <em>percentage of of dead ends</em> in the\nassembly graph (in general, lower is better here), and by the correspondingly\nlarge <em>node count</em>. After all, should the viral sequence not be encoded on a\nsingle small contig (a quick check at\n<a href=\"https://en.wikipedia.org/wiki/Coronavirus#Genome\">Wikipedia</a> reveals that\ncoronaviruses have genomes in the size range of 30kb)?</p>\n\n<p>On the other hand, there is the <em>Longest node</em> of 29768 bp of assembled\nsequence, which is suspiciously close to the expected genome size, but a much\nlarger <em>Estimated sequence length</em>.</p>\n\n<p>Next, take a look at the assembly graph visualization generated by <strong>Bandage\nImage</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> to see if that tells us more:</p>\n\n<p>Indeed, this output shows that <strong>Unicycler</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> managed to\nassemble a good number of contigs of moderate size, then had trouble with a\nnumber of really small fragments that it could only assemble with lots of\nambiguities (leading to that ugly clutter of nodes in the top row of the\nimage). Those small fragments will probably be hard to make sense of, but the\nmanageable list of moderate-size contigs (nodes 1-23, 25, 26) is encouraging.</p>\n\n<p>Of these, node 1 is the longest node mentioned in the report with a size close\nto our expectations.</p>\n\n<p>Node 2 looks peculiar since <strong>Unicycler</strong> claims it is circular, while\nCoronavirus genomes are known to be linear.</p>\n\n<h3 id=\"check-origin-of-assembled-sequences-with-blast\">Check origin of assembled sequences with BLAST</h3>\n\n<p>While we could view the actual contents of the assembly graph output of\n<strong>Unicycler</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> and extract node sequences of interest from it\n(the longest node and that circular one could be a start), things are much\neasier if we work with the FASTA output of <strong>Unicycler</strong> instead.</p>\n\n<p>From the visualization with <strong>Bandage Image</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> we know that the\nseparately assembled nodes are all longer than 1000 bp. We can extract those\nsequences based on the length threshold in Galaxy, then BLAST all retained\nsequences in one go.</p>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Filter FASTA sequences by their length</hands-on-title>\n\n  <ol>\n    <li><strong>Filter sequences by length</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> with the following parameters\n      <ul>\n        <li><i class=\"far fa-file\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">param-file</span> <em>“Fasta file”</em>: the FASTA output produced by\n<strong>Unicycler</strong></li>\n        <li><em>“Minimal length”</em>: <code class=\"language-plaintext highlighter-rouge\">1000</code></li>\n      </ul>\n\n      <p>This outputs a new FASTA datasets with only the sequences satisfying our\nlength threshold.</p>\n    </li>\n  </ol>\n\n  <blockquote class=\"tip\">\n    <tip-title>Apply length filters after instead of during assembly</tip-title>\n    <p>You may have noted that in the <strong>Unicycler</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> run we kept\nthe tool’s <em>“Exclude contigs from the FASTA file which are shorter than\nthis length (bp)”</em> option at its default value of <code class=\"language-plaintext highlighter-rouge\">100</code> instead of using\nthe 1,000 bp threshold there directly to save a step in the analysis.</p>\n\n    <p>The reason we did this is that normally you will not know the exact length\nthreshold you want until <em>after</em> having explored the generated assembly.</p>\n\n    <p>Length-filtering some FASTA sequences is a trivial process that takes very\nlittle time, but you would not want to rerun an hours-long assembly job\njust because you accidentally stripped some interesting assembled sequences\nfrom the output.</p>\n  </blockquote>\n\n</blockquote>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>NCBI BLAST of multiple contigs</hands-on-title>\n\n  <ol>\n    <li>View the output of <strong>Filter sequences by length</strong> <i class=\"fas fa-wrench\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">tool</span> by\nclicking the <i class=\"far fa-eye\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">galaxy-eye</span> (eye) icon attached to that dataset.</li>\n    <li>Click into the middle panel, which should now display the content of the\ndataset, select all sequences by pressing <kbd>Ctrl</kbd>+<kbd>A</kbd>,\nthen copy the selection to the clipboard with <kbd>Ctrl</kbd>+<kbd>C</kbd></li>\n    <li>Head over to the\n<a href=\"https://blast.ncbi.nlm.nih.gov/Blast.cgi?PAGE=MegaBlast&amp;PROGRAM=blastn\">NCBI BLAST</a>\nservice, paste the copied content into the <code class=\"language-plaintext highlighter-rouge\">Enter Query Sequence</code> text\nbox and click <code class=\"language-plaintext highlighter-rouge\">BLAST</code> at the bottom of the form.</li>\n    <li>Wait for the <em>BLAST</em> run to finish.</li>\n    <li>On the results page, look for the drop-down menu next to <code class=\"language-plaintext highlighter-rouge\">Results for</code>.\nIt lets you toggle the BLAST hits list further down to include only the\nmatches to individual sequences from your multi-sequence query.</li>\n  </ol>\n\n</blockquote>\n\n<p>Now take a bit of time to explore the BLAST hits uncovered for some of your\nassembled nodes. Pay attention, specifically, to the node with the longest\nsequence (node #1) and the circular node #2, but also investigate the results\nfor a few others.</p>\n\n<blockquote class=\"question\">\n  <question-title></question-title>\n\n  <ol>\n    <li>Which genome is represented by node #1?</li>\n    <li>Which genome corresponds to node #2? Does this finding remind you of\nsomething you have learnt before?</li>\n    <li>What do most other node sequences have in common? Do these additinal\nfindings make sense?</li>\n  </ol>\n\n  <blockquote class=\"solution\">\n    <solution-title></solution-title>\n    <ol>\n      <li>The sequence of node #1 is the assembled SARS-CoV-2 sequence we are\nlooking for. It is a perfect match to various SARS-CoV-2 genome\nsequences found in Genbank over the entire assembled length, and we have\nbeen able to assemble almost the entire genome even from the subsampled\nsequencing data.</li>\n      <li>The circular sequence of node #2 corresponds to the 5,386 bp genome of\nbacteriophage phiX174. As explained in the more general\n<a href=\"../unicycler-assembly/tutorial.html\">Unicycler assembly</a> tutorial,\nthis genome is often used as a spike-in in Illumina sequencing.\nFinding the complete sequence here is, thus,  another indication that\nour analysis worked and produced meaningful results.</li>\n      <li>\n        <p>Almost all other assembled sequences appear to represent parts of\nbacterial genomes. The only exceptions are the node #10 sequence, for\nwhich no significant BLAST hits could be found, and the node #11\nsequence, which represents a small stretch of left-over human genomic\nDNA, which seems to have survived our subtraction approach.</p>\n\n        <p>What all the bacterial genomes have in common is that they represent\ngenera of bacteria that are known to colonize the oral cavity and\nmucosa. Since all samples in this analysis are BALF samples the presence\nof DNA from such bacteria should not be surprising. In addition, some\nmembers of the identified genera are known as opportunistic pathogens.\nIn particular, members of the genus <em>Prevotella</em> can infect the\nrespiratory tract and contribute to inflammation under anaerobic\nconditions caused by primary infections. Hence, an alternative\nexplanation for the presence of some of these sequences in the samples\nmight be that the corresponding bacteria contributed to the clinical\npicture of some of the Covid-19 patients they were obtained from.</p>\n      </li>\n    </ol>\n  </blockquote>\n\n</blockquote>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>The power of modern genome assembly tools is remarkable, and so is their\nrobustness in the face of data of metagenomic nature. Assembling reads derived\nfrom a virus and a good handful of copurified bacteria back into separate\ncontigs is a challenging task, which Unicycler solved without major issues!</p>\n\n<p>Nevertheless, good quality assemblies still rely on proper preprocessing and\nfiltering to reduce the number of misassembly events, ambiguous assemblies and\nof incorporation of sequencing errors into the final assembly.</p>\n"],"ref_slides":[".enlarge120[\n\n# **SARS-CoV-2**\n\n]\n\n\nThe severe acute respiratory syndrome coronavirus, known as SARS-CoV-2, is a betacoronavirus which belongs to the subfamily Coronavidinae, family Coronavidae.\n\n* Genome characteristics:\n\n  * Positive-sense single-stranded RNA (+ssRNA) virus of 30 kb.\n  * Encode 9860 aminoacids.\n  * Includes 14 functional ORFs.\n  * Codify 4 structural proteins and 23 non-structural proteins.\n\n---\n\n# **SARS-CoV-2 genome structure**\n\n![Structure of the SARS CoV 2 genome, a 5' utr, a polyprotein pp1ab/pp1b, and several structural and accessory proteins before the 3' utr. The pp1ab polyprotein is shown exapnded into a series of non-structural proteins labelled nsp1 to nsp16.](../../images/SARS-CoV-2_Genome.png)\n\n- NSP1-NSP16 encodes the replicase-transcriptase complex\n- It includes four structural proteins: Spike (S), Envelope (E), Membrane (M) and Nucleocapsid (N).\n\n---\n\n# **SARS-CoV-2 structure**\n\n![A graphic of the virus as a sphere with spikes (S1 and S2) coming out from the membrane, envelope proteins embedded within the membrane, and then a nucelocapsid inside. The 3d protein structures are shown in two styles of the spike proteins with the receptor binding domain highlighted. ](../../images/structure_SARS-CoV_2.png)\n\n---\n\n.enlarge200[\n\n# **Hybrid assembly**\n\n]\n\n.reduce70[\nHybrid assembly consists in using a combination of long and short reads to produce genome sequence.\n\nLong reads are used to resolve ambiguities that exist in genomes previously assembled using the short reads. In addition, low rate-error short reads are used to correct errors that exist in the error-prone long reads.\n]\n\n![Cartoon of hybrid assembly. Step 1 shows short reads from Illumina and long reads from Nanopore. In step 2 these are assembled separately and there are ambiguities in sequence assembly. In step 3, hybrid assembly shows the assembly done with both sets of data and it helps resolve ambiguities with higher coverage.](../../images/hybrid_assembly.png)\n\n\n---\n\n.enlarge200[\n\n# **Data sources**\n\n]\n\n.pull-left[\n\n**Illumina reads**\n\n- Second generation sequencing\n- Short size: 200 bp\n- Low error rate (~1%)\n\n![A picture of an illumina sequencer. It is a large white and grey box with a computer screen](../../images/illumina_sequencing.png)\n\n]\n\n.pull-right[\n\n**Oxford Nanopore reads**\n\n- Third generation sequencing\n- Long size:  >40,000 bp\n- High error rate (~10%)\n\n![A picture of someone holding a nanopore device, approximately the size of an oversize usb stick with a chip visible.](../../images/nanopore_sequencing.png)\n\n]\n\n\n---\n\n\n.enlarge120[\n\n# **Data sources: Illumina sequencing**\n\n]\n\n![Cartoon of illumina sequence, DNA is fragmented and adapters added. This binds to nanowells with oligonucleotides. Then the DNA bends and attaches to another binder. A primer attaches to the adapter and polymerase adds flourescently tagged dNTPs. Imaging happens while these are added. Then it is split, the DNA strand is denaturalised and now it there are two strands, bound to different adapters in the well. This process is repeated many times.](../../images/illumina_sequencing_cluster.png)\n\n\n---\n\n\n.enlarge200[\n\n# **Data sources: Nanopore sequencing**\n\n]\n\n![Single nucleic acid molecules pass through a nanopore and changes in electrical field are measured. The magnitude of the current density depends on which nucleotide occupies the nanopore. This produces a graph which is then rad into individual bases.](../../images/nanopore_sequencing_process.png)\n\n---\n\n\n.enlarge200[\n\n# **Quality control**\n\n]\n\nQuality control, read trimming and filtering are essential preprocessing steps required to garantee accurate results from RNA-seq datasets. Due to their very different nature, Illumina and Nanopore reads should be processed by using different tools.\n\n![Schematic of a workflow, RNA-seq dataset is input which consists of illumina and nanopore reads. Those go through quality assessment with fastp and nanoplot, trimming, and filtering, before producing processed reads.](../../images/rna-seq_processing.png)\n\n.reduce70[\n\n\n]\n\n---\n\n\n\n.enlarge200[\n\n# **Subtraction of reads mapping to the human reference genome**\n\n]\n\nSince the SARS-CoV-2 samples were obtained from human tissues, it is necessary to retain only the reads that don't map to the human genome, i.e those of potential viral origin.\n\n\n---\n\n\n.enlarge200[\n\n# **Subtraction of reads mapping to the human reference genome**\n\n]\n\n.image-75[![A set of reads and a human genome are put together, mapping done with bowtie2 or minimap2 to identify reads which map to the human genome. (Then these are removed.)](../../images/mapping_human_genome.png)]\n\n.reduce70[\n\nAs with quality control, differential characteristics of Illumina and Nanopore reads require different tools for mapping the reads to the human genome:\n\n- __Bowtie2__:  It is optimized for the read lengths and error modes yielded by typical Illumina sequencers.\n\n- __Minimap2__: It is particularly efficient for mapping Nanopore long reads.\n\n]\n\n---\n\n\n.enlarge200[\n\n# **Genome assembly**\n\n]\n\nNow everything is ready to perform genome assembly!\n\n![A picture of a jigsaw puzzle with a DNA image, and several missing pieces scattered around.](../../images/jigsaw_genome.png)\n\nGenome assembly is a complex computational process whose objetive is to reconstruct a genome from the reads obtained by sequencing technologies.\n\n---\n\n\n\n.enlarge200[\n\n# **_De novo_ genome assembly**\n\n]\n\n\n_De novo_ assembly is a method for constructing genomes from a large number of  DNA fragments, with no a priori knowledge of the correct sequence or order of those fragments.\n\nTwo common types of _de novo_ assemblers are greedy algorithm assemblers and graph method assemblers.\n\n\n---\n\n\n\n.enlarge200[\n\n# **_De novo_ genome assembly algorithms**\n\n]\n\n\n.pull-left[\n\n__Greedy algorithm assemblers__\n\nIt finds overlaps between reads, then builds a consensus sequence from the aligned overlapping reads.\n\n\n<br>\n.reduce70[\n\n- Relative efficiency\n- Do not work well for large read sets because only takes into account local information\n- Do not perform well with repeat regions\n\n]\n\n.image-75[![Rainbow coloured reads are aligned locally to make small high quality overlaps. These are then built up into a larger consensus with the entire rainbow.](../../images/greedy_algoritm.png)]\n\n]\n\n\n.pull-right[\n\n__Graph method assemblers__\n\nBasically it represent reads as a set of nodes, and overlaps between these reads as directed edges which connect these nodes to form a complete graph.\n\n\n.reduce70[\n\n- Computationally more expensive\n- Aim for global optima\n- Perform well on large read sets, specially when they contain repeat regions.\n]\n\n.image-75[![A graph with many nodes connected by lines in a large tangle.](../../images/graph_example.png)]\n\n]\n\n---\n\n\n\n.enlarge200[\n\n# **Graph methods assemblers: de Brujin graphs**\n]\n\n.reduce70[\nDe Bruijn graphs is the graph model used by most genome assemblers.\n\nDuring the assembly process reads are broken into smaller fragments of a specified size, the k-mers, whichs are then used as nodes in the graph assembly. Nodes that overlap are then connected by an edge, which represents the reads. An ideal genome assembly corresponds to the path that visits every node exactly once.\n\n]\n\n.image-75[![Reads are provided to the algorithm, they are in the colours of the rainbow. Next overlaps are identified and the rainbow resolves itself. A subset of that is highlighted and points to reads connected by overlaps with many arrows going between the bluegreen fragments that are highlighted. This goes to the hamiltonian path identified with a re-run arrow between, indicating some mount of backtracking needed to find the best path. Finally the hamiltonian produces a consensus sequence with the correct final ordering.](../../images/olc_pic.png)]\n\n\n---\n\n.enlarge200[\n\n# **Graph methods assemblers: de Brujin graphs**\n\n]\n\nThe [de Brujin graph assembly tutorial](https://training.galaxyproject.org/training-material/topics/assembly/tutorials/debruijn-graph-assembly/slides.html#1) provides a detailed explanation about this topic.\n\n\n\n---\n\n.enlarge200[\n\n# **Assembly genome with Unicycler**\n\n]\n\n.image-50[![unicycler logo](../../images/unicycler_logo.png)]\n\nUnicycler is a software tool designed specifically for hybrid assembly of small genomes.\n\n\n\n\n---\n\n.enlarge200[\n\n# **Assembly genome with Unicycler**\n\n]\n\nIt employs a multi-step process that utilizes a set of software tools.\n\n![schematic of the unicycler pipeline, illumina short reads are assembled with spades into an assembly graph in one branch. Another branch brings nanopore reads through miniasm and racon to assemble and polish into long read contigs. Bridge application and contig merging combin the assembly graph and long reads, and this is sent to bowtie2 and pilon for polishing, producing the final assembly.](../../images/unicycler_pipeline.png)\n"],"hands_on":true,"slides":true,"mod_date":"2024-05-29 15:37:52 +0000","pub_date":"2020-04-21 21:52:12 +0000","version":17,"workflows":[{"workflow":"assembly_with_preprocessing.ga","tests":false,"url":"https://training.galaxyproject.org/training-material/topics/assembly/tutorials/assembly-with-preprocessing/workflows/assembly_with_preprocessing.ga","path":"topics/assembly/tutorials/assembly-with-preprocessing/workflows/assembly_with_preprocessing.ga","wfid":"assembly-assembly-with-preprocessing","wfname":"assembly_with_preprocessing","trs_endpoint":"https://training.galaxyproject.org/training-material/api/ga4gh/trs/v2/tools/assembly-assembly-with-preprocessing/versions/assembly_with_preprocessing","license":null,"creators":[],"name":"assembly_with_preprocessing","title":"assembly_with_preprocessing","test_results":null,"modified":"2024-06-17 12:36:38 +0000","mermaid":"flowchart TD\n  0[\"ℹ️ Input Collection\\nCollection of paired short-reads data\"];\n  style 0 stroke:#2c3143,stroke-width:4px;\n  1[\"ℹ️ Input Collection\\nCollection of long-reads data\"];\n  style 1 stroke:#2c3143,stroke-width:4px;\n  10[\"Samtools fastx\"];\n  7 -->|outputsam| 10;\n  11[\"Samtools fastx\"];\n  9 -->|outputsam| 11;\n  12[\"Collapse Collection\"];\n  10 -->|nonspecific| 12;\n  13[\"Zip Collection\"];\n  11 -->|forward| 13;\n  11 -->|reverse| 13;\n  14[\"Collapse Collection\"];\n  11 -->|forward| 14;\n  15[\"Collapse Collection\"];\n  11 -->|reverse| 15;\n  16[\"seqtk_sample\"];\n  14 -->|output| 16;\n  17[\"seqtk_sample\"];\n  15 -->|output| 17;\n  18[\"Create assemblies with Unicycler\"];\n  12 -->|output| 18;\n  16 -->|default| 18;\n  17 -->|default| 18;\n  19[\"Bandage Info\"];\n  18 -->|assembly_graph| 19;\n  2[\"fastp: Trimmed Illumina Reads\"];\n  0 -->|output| 2;\n  20[\"Filter sequences by length\"];\n  18 -->|assembly| 20;\n  21[\"Bandage Image\"];\n  18 -->|assembly_graph| 21;\n  3[\"NanoPlot\"];\n  1 -->|output| 3;\n  4[\"Map with minimap2\"];\n  1 -->|output| 4;\n  5[\"MultiQC\"];\n  2 -->|report_json| 5;\n  6[\"Bowtie2\"];\n  2 -->|output_paired_coll| 6;\n  7[\"Samtools view\"];\n  4 -->|alignment_output| 7;\n  8[\"Samtools stats\"];\n  4 -->|alignment_output| 8;\n  9[\"Samtools view\"];\n  6 -->|output| 9;"},{"workflow":"assembly_with_preprocessing_and_sra_download.ga","tests":false,"url":"https://training.galaxyproject.org/training-material/topics/assembly/tutorials/assembly-with-preprocessing/workflows/assembly_with_preprocessing_and_sra_download.ga","path":"topics/assembly/tutorials/assembly-with-preprocessing/workflows/assembly_with_preprocessing_and_sra_download.ga","wfid":"assembly-assembly-with-preprocessing","wfname":"assembly_with_preprocessing_and_sra_download","trs_endpoint":"https://training.galaxyproject.org/training-material/api/ga4gh/trs/v2/tools/assembly-assembly-with-preprocessing/versions/assembly_with_preprocessing_and_sra_download","license":null,"creators":[],"name":"assembly_with_preprocessing_and_sra_download","title":"assembly_with_preprocessing_and_sra_download","test_results":null,"modified":"2024-06-17 12:36:38 +0000","mermaid":"flowchart TD\n  0[\"ℹ️ Input Dataset\\nList of Illumina accessions\"];\n  style 0 stroke:#2c3143,stroke-width:4px;\n  1[\"ℹ️ Input Dataset\\nList of ONT accessions\"];\n  style 1 stroke:#2c3143,stroke-width:4px;\n  10[\"Samtools stats\"];\n  6 -->|alignment_output| 10;\n  11[\"Samtools view\"];\n  8 -->|output| 11;\n  12[\"Samtools fastx\"];\n  9 -->|outputsam| 12;\n  13[\"Samtools fastx\"];\n  11 -->|outputsam| 13;\n  14[\"Collapse Collection\"];\n  12 -->|nonspecific| 14;\n  15[\"Zip Collection\"];\n  13 -->|forward| 15;\n  13 -->|reverse| 15;\n  16[\"Collapse Collection\"];\n  13 -->|forward| 16;\n  17[\"Collapse Collection\"];\n  13 -->|reverse| 17;\n  18[\"seqtk_sample\"];\n  16 -->|output| 18;\n  19[\"seqtk_sample\"];\n  17 -->|output| 19;\n  2[\"Illumina data\"];\n  0 -->|output| 2;\n  20[\"Create assemblies with Unicycler\"];\n  14 -->|output| 20;\n  18 -->|default| 20;\n  19 -->|default| 20;\n  21[\"Bandage Info\"];\n  20 -->|assembly_graph| 21;\n  22[\"Bandage Image\"];\n  20 -->|assembly_graph| 22;\n  23[\"Filter sequences by length\"];\n  20 -->|assembly| 23;\n  3[\"ONT data\"];\n  1 -->|output| 3;\n  4[\"fastp: Trimmed Illumina Reads\"];\n  2 -->|list_paired| 4;\n  5[\"NanoPlot\"];\n  3 -->|output_collection| 5;\n  6[\"Map with minimap2\"];\n  3 -->|output_collection| 6;\n  7[\"MultiQC\"];\n  4 -->|report_json| 7;\n  8[\"Bowtie2\"];\n  4 -->|output_paired_coll| 8;\n  9[\"Samtools view\"];\n  6 -->|alignment_output| 9;"}],"api":"https://training.galaxyproject.org/training-material/api/topics/assembly/tutorials/assembly-with-preprocessing/tutorial.json","tools":["__ZIP_COLLECTION__","toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.3.4.3+galaxy0","toolshed.g2.bx.psu.edu/repos/devteam/fasta_filter_by_length/fasta_filter_by_length/1.2","toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.2+galaxy2","toolshed.g2.bx.psu.edu/repos/iuc/bandage/bandage_image/0.8.1+galaxy2","toolshed.g2.bx.psu.edu/repos/iuc/bandage/bandage_info/0.8.1+galaxy1","toolshed.g2.bx.psu.edu/repos/iuc/fastp/fastp/0.19.5+galaxy1","toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy1","toolshed.g2.bx.psu.edu/repos/iuc/multiqc/multiqc/1.7","toolshed.g2.bx.psu.edu/repos/iuc/nanoplot/nanoplot/1.25.0+galaxy1","toolshed.g2.bx.psu.edu/repos/iuc/samtools_fastx/samtools_fastx/1.9+galaxy1","toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy1","toolshed.g2.bx.psu.edu/repos/iuc/seqtk/seqtk_sample/1.3.2","toolshed.g2.bx.psu.edu/repos/iuc/sra_tools/fasterq_dump/2.10.4+galaxy1","toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0","toolshed.g2.bx.psu.edu/repos/nml/collapse_collections/collapse_dataset/4.2"],"supported_servers":{"exact":[{"url":"https://usegalaxy.eu","name":"UseGalaxy.eu","usegalaxy":true},{"url":"https://usegalaxy.org.au","name":"UseGalaxy.org.au","usegalaxy":true}],"inexact":[{"url":"https://mississippi.sorbonne-universite.fr","name":"MISSISSIPPI","usegalaxy":false},{"url":"https://usegalaxy.be/","name":"UseGalaxy.be","usegalaxy":false},{"url":"https://usegalaxy.cz/","name":"UseGalaxy.cz","usegalaxy":false},{"url":"https://usegalaxy.fr/","name":"UseGalaxy.fr","usegalaxy":false},{"url":"https://usegalaxy.no/","name":"UseGalaxy.no","usegalaxy":false},{"url":"https://usegalaxy.org","name":"UseGalaxy.org (Main)","usegalaxy":true}]},"topic_name_human":"Assembly","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[{"name":"bowtie2","owner":"devteam","revisions":"749c918495f7","tool_panel_section_label":"Mapping","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"fasta_filter_by_length","owner":"devteam","revisions":"8cacfcf96a52","tool_panel_section_label":"FASTA/FASTQ","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"samtools_stats","owner":"devteam","revisions":"145f6d74ff5e","tool_panel_section_label":"SAM/BAM","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"bandage","owner":"iuc","revisions":"b2860df42e16","tool_panel_section_label":"Graph/Display Data","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"bandage","owner":"iuc","revisions":"94fe43e75ddc","tool_panel_section_label":"Graph/Display Data","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"fastp","owner":"iuc","revisions":"1d8fe9bc4cb0","tool_panel_section_label":"FASTA/FASTQ","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"minimap2","owner":"iuc","revisions":"53c0b7a1a0c3","tool_panel_section_label":"Mapping","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"multiqc","owner":"iuc","revisions":"b2f1f75d49c4","tool_panel_section_label":"Quality Control","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"nanoplot","owner":"iuc","revisions":"645159bcee2d","tool_panel_section_label":"Nanopore","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"samtools_fastx","owner":"iuc","revisions":"a8d69aee190e","tool_panel_section_label":"SAM/BAM","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"samtools_view","owner":"iuc","revisions":"b01db2684fa5","tool_panel_section_label":"SAM/BAM","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"seqtk","owner":"iuc","revisions":"3da72230c066","tool_panel_section_label":"FASTA/FASTQ","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"sra_tools","owner":"iuc","revisions":"aad3885b3216","tool_panel_section_label":"Get Data","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"unicycler","owner":"iuc","revisions":"9e3e80cc4ad4","tool_panel_section_label":"Assembly","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"},{"name":"collapse_collections","owner":"nml","revisions":"830961c48e42","tool_panel_section_label":"Collection Operations","tool_shed_url":"https://toolshed.g2.bx.psu.edu/"}]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools:\n- name: bowtie2\n  owner: devteam\n  revisions: 749c918495f7\n  tool_panel_section_label: Mapping\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: fasta_filter_by_length\n  owner: devteam\n  revisions: 8cacfcf96a52\n  tool_panel_section_label: FASTA/FASTQ\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: samtools_stats\n  owner: devteam\n  revisions: 145f6d74ff5e\n  tool_panel_section_label: SAM/BAM\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: bandage\n  owner: iuc\n  revisions: b2860df42e16\n  tool_panel_section_label: Graph/Display Data\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: bandage\n  owner: iuc\n  revisions: 94fe43e75ddc\n  tool_panel_section_label: Graph/Display Data\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: fastp\n  owner: iuc\n  revisions: 1d8fe9bc4cb0\n  tool_panel_section_label: FASTA/FASTQ\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: minimap2\n  owner: iuc\n  revisions: 53c0b7a1a0c3\n  tool_panel_section_label: Mapping\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: multiqc\n  owner: iuc\n  revisions: b2f1f75d49c4\n  tool_panel_section_label: Quality Control\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: nanoplot\n  owner: iuc\n  revisions: 645159bcee2d\n  tool_panel_section_label: Nanopore\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: samtools_fastx\n  owner: iuc\n  revisions: a8d69aee190e\n  tool_panel_section_label: SAM/BAM\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: samtools_view\n  owner: iuc\n  revisions: b01db2684fa5\n  tool_panel_section_label: SAM/BAM\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: seqtk\n  owner: iuc\n  revisions: 3da72230c066\n  tool_panel_section_label: FASTA/FASTQ\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: sra_tools\n  owner: iuc\n  revisions: aad3885b3216\n  tool_panel_section_label: Get Data\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: unicycler\n  owner: iuc\n  revisions: 9e3e80cc4ad4\n  tool_panel_section_label: Assembly\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: collapse_collections\n  owner: nml\n  revisions: 830961c48e42\n  tool_panel_section_label: Collection Operations\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n","tours":false,"video":false,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial","logo":"GTN","class":"enlarge120","redirect_from":["/short/assembly/assembly-with-preprocessing/slides","/short/S00031"]}