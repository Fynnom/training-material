{"layout":"tutorial_hands_on","title":"RO-Crate in Python","time_estimation":"30M","questions":["What data is contained within an RO-Crate","How can I create an RO-Crate myself?"],"objectives":["Create a custom, annotated RO-Crate","Use ORCIDs and other linked data to annotate datasets contained within the crate"],"key_points":["RO-Crates can be created by hand with essentially arbitrary data, using the rocrate python module","However the rocrate command line tool adds several commands to make it easier to automatically generate crates based on existing folder structures."],"tags":["ro-crate","jupyter-notebook"],"priority":2,"contributions":{"authorship":["simleo","kinow"],"editing":["hexylena","elichad"],"testing":["elichad"],"funding":["by-covid"]},"license":"Apache-2.0","subtopic":"ro-crate","notebook":{"language":"python"},"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00341","url":"/topics/fair/tutorials/ro-crate-in-python/tutorial.html","topic_name":"fair","tutorial_name":"ro-crate-in-python","dir":"topics/fair/tutorials/ro-crate-in-python","symlink":null,"id":"fair/ro-crate-in-python","ref_tutorials":["<p>This tutorial will show you how to manipulate <a href=\"https://w3id.org/ro/crate/\">RO-Crates</a> in Python using the <a href=\"https://github.com/ResearchObject/ro-crate-py\">ro-crate-py</a> package. It is based on the <a href=\"https://github.com/ResearchObject/ro-crate-py/blob/e1218fbca595f4c33059cfe15849ee2ae9e6896b/README.md\">ro-crate-py documentation</a>.</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will cover:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#creating-an-ro-crate\" id=\"markdown-toc-creating-an-ro-crate\">Creating an RO-Crate</a>    <ol>\n      <li><a href=\"#appending-elements-to-property-values\" id=\"markdown-toc-appending-elements-to-property-values\">Appending elements to property values</a></li>\n      <li><a href=\"#adding-remote-entities\" id=\"markdown-toc-adding-remote-entities\">Adding remote entities</a></li>\n      <li><a href=\"#adding-entities-with-an-arbitrary-type\" id=\"markdown-toc-adding-entities-with-an-arbitrary-type\">Adding entities with an arbitrary type</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#consuming-an-ro-crate\" id=\"markdown-toc-consuming-an-ro-crate\">Consuming an RO-Crate</a></li>\n  <li><a href=\"#command-line-interface\" id=\"markdown-toc-command-line-interface\">Command Line Interface</a>    <ol>\n      <li><a href=\"#crate-initialization\" id=\"markdown-toc-crate-initialization\">Crate initialization</a></li>\n      <li><a href=\"#adding-items-to-the-crate\" id=\"markdown-toc-adding-items-to-the-crate\">Adding items to the crate</a></li>\n      <li><a href=\"#example\" id=\"markdown-toc-example\">Example</a></li>\n    </ol>\n  </li>\n</ol>\n\n</blockquote>\n\n<p>Let’s start by installing the library via <a href=\"https://docs.python.org/3/installing/\">pip</a>. Note that the name of the package is <code class=\"language-plaintext highlighter-rouge\">rocrate</code>.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install </span>rocrate\n</code></pre></div></div>\n\n<h1 id=\"creating-an-ro-crate\">Creating an RO-Crate</h1>\n\n<p>In its simplest form, an RO-Crate is a directory tree with an <code class=\"language-plaintext highlighter-rouge\">ro-crate-metadata.json</code> file at the top level. This file contains metadata about the other files and directories, represented by <a href=\"https://www.researchobject.org/ro-crate/1.1/data-entities.html\">data entities</a>. These metadata consist both of properties of the data entities themselves and of other, non-digital entities called <a href=\"https://www.researchobject.org/ro-crate/1.1/contextual-entities.html\">contextual entities</a>. A contextual entity can represent, for instance, a person, an organization or an event.</p>\n\n<p>Suppose Alice and Bob worked on a research project together, and then wrote a paper about it; additionally, Alice prepared a spreadsheet containing experimental data, which Bob then used to generate a diagram. For the purpose of this tutorial, you can just create placeholder files for the documents:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">os</span>\n\n<span class=\"n\">data_dir</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">exp</span><span class=\"sh\">\"</span>\n<span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">mkdir</span><span class=\"p\">(</span><span class=\"n\">data_dir</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">filename</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">paper.pdf</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">results.csv</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">diagram.svg</span><span class=\"sh\">\"</span><span class=\"p\">]:</span>\n    <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">data_dir</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">),</span> <span class=\"sh\">\"</span><span class=\"s\">w</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"nb\">file</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n\n<p>Let’s make an RO-Crate to represent this information:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">rocrate.rocrate</span> <span class=\"kn\">import</span> <span class=\"n\">ROCrate</span>\n\n<span class=\"n\">crate</span> <span class=\"o\">=</span> <span class=\"nc\">ROCrate</span><span class=\"p\">()</span>\n<span class=\"n\">paper</span> <span class=\"o\">=</span> <span class=\"n\">crate</span><span class=\"p\">.</span><span class=\"nf\">add_file</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">exp/paper.pdf</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">manuscript</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">encodingFormat</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">application/pdf</span><span class=\"sh\">\"</span>\n<span class=\"p\">})</span>\n<span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">crate</span><span class=\"p\">.</span><span class=\"nf\">add_file</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">exp/results.csv</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">experimental data</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">encodingFormat</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">text/csv</span><span class=\"sh\">\"</span>\n<span class=\"p\">})</span>\n<span class=\"n\">diagram</span> <span class=\"o\">=</span> <span class=\"n\">crate</span><span class=\"p\">.</span><span class=\"nf\">add_file</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">exp/diagram.svg</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">dest_path</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">images/figure.svg</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">bar chart</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">encodingFormat</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">image/svg+xml</span><span class=\"sh\">\"</span>\n<span class=\"p\">})</span>\n</code></pre></div></div>\n\n<p>We’ve started by adding the data entities. Now we add contextual entities representing Alice and Bob:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">rocrate.model.person</span> <span class=\"kn\">import</span> <span class=\"n\">Person</span>\n\n<span class=\"n\">alice_id</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">https://orcid.org/0000-0000-0000-0000</span><span class=\"sh\">\"</span>\n<span class=\"n\">bob_id</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">https://orcid.org/0000-0000-0000-0001</span><span class=\"sh\">\"</span>\n<span class=\"n\">alice</span> <span class=\"o\">=</span> <span class=\"n\">crate</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">crate</span><span class=\"p\">,</span> <span class=\"n\">alice_id</span><span class=\"p\">,</span> <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Alice Doe</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">affiliation</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">University of Flatland</span><span class=\"sh\">\"</span>\n<span class=\"p\">}))</span>\n<span class=\"n\">bob</span> <span class=\"o\">=</span> <span class=\"n\">crate</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">crate</span><span class=\"p\">,</span> <span class=\"n\">bob_id</span><span class=\"p\">,</span> <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Bob Doe</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">affiliation</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">University of Flatland</span><span class=\"sh\">\"</span>\n<span class=\"p\">}))</span>\n</code></pre></div></div>\n\n<p>At this point, we have a representation of the various entities. Now we need to express the relationships between them. This is done by adding properties that reference other entities:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">paper</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">author</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">alice</span><span class=\"p\">,</span> <span class=\"n\">bob</span><span class=\"p\">]</span>\n<span class=\"n\">table</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">author</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">alice</span>\n<span class=\"n\">diagram</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">author</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">bob</span>\n</code></pre></div></div>\n\n<p>You can also add whole directories together with their contents. In an RO-Crate, a directory is represented by the <code class=\"language-plaintext highlighter-rouge\">Dataset</code> entity:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">logs_dir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">data_dir</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">logs</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">mkdir</span><span class=\"p\">(</span><span class=\"n\">logs_dir</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">filename</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">log1.txt</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">log2.txt</span><span class=\"sh\">\"</span><span class=\"p\">]:</span>\n    <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">logs_dir</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">),</span> <span class=\"sh\">\"</span><span class=\"s\">w</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"nb\">file</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"n\">logs</span> <span class=\"o\">=</span> <span class=\"n\">crate</span><span class=\"p\">.</span><span class=\"nf\">add_dataset</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">exp/logs</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Finally, we serialize the crate to disk:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">crate</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">exp_crate</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>This should generate an <code class=\"language-plaintext highlighter-rouge\">exp_crate</code> directory containing copies of all the files we added and an <code class=\"language-plaintext highlighter-rouge\">ro-crate-metadata.json</code> file containing a <a href=\"https://json-ld.org\">JSON-LD</a> representation of the metadata. Note that we have chosen a different destination path for the diagram, while the paper and the spreadsheet have been placed at the top level with their names unchanged (the default).</p>\n\n<p>Some applications and services support RO-Crates stored as archives. To save the crate in zip format, you can use <code class=\"language-plaintext highlighter-rouge\">write_zip</code>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">crate</span><span class=\"p\">.</span><span class=\"nf\">write_zip</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">exp_crate.zip</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote class=\"comment\">\n  <comment-title>How `rocrate` handles the contents of `exp/logs`</comment-title>\n\n  <p>Exploring the <code class=\"language-plaintext highlighter-rouge\">exp_crate</code> directory, we see that all files and directories contained in <code class=\"language-plaintext highlighter-rouge\">exp/logs</code> have been added recursively to the crate. However, in the <code class=\"language-plaintext highlighter-rouge\">ro-crate-metadata.json</code> file, only the top level Dataset with <code class=\"language-plaintext highlighter-rouge\">@id</code> <code class=\"language-plaintext highlighter-rouge\">\"exp/logs\"</code> is listed. This is because we used <code class=\"language-plaintext highlighter-rouge\">crate.add_dataset(\"exp/logs\")</code> rather than adding every file individually. There is no requirement to represent every file and folder within the crate in the <code class=\"language-plaintext highlighter-rouge\">ro-crate-metadata.json</code> file - in fact, if there were many files in the crate it would be impractical to do so.</p>\n\n  <p>If you do want to add files and directories recursively to the metadata, use <code class=\"language-plaintext highlighter-rouge\">crate.add_tree</code> instead of <code class=\"language-plaintext highlighter-rouge\">crate.add_dataset</code> (but note that it only works on local directory trees).</p>\n</blockquote>\n\n<h2 id=\"appending-elements-to-property-values\">Appending elements to property values</h2>\n\n<p>What ro-crate-py entities actually store is their JSON representation:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">paper</span><span class=\"p\">.</span><span class=\"nf\">properties</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"@id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"paper.pdf\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"@type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"File\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"manuscript\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"encodingFormat\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"application/pdf\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"author\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"nl\">\"@id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://orcid.org/0000-0000-0000-0000\"</span><span class=\"p\">},</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"nl\">\"@id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://orcid.org/0000-0000-0000-0001\"</span><span class=\"p\">},</span><span class=\"w\">\n  </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>When <code class=\"language-plaintext highlighter-rouge\">paper[\"author\"]</code> is accessed, a new list containing the <code class=\"language-plaintext highlighter-rouge\">alice</code> and <code class=\"language-plaintext highlighter-rouge\">bob</code> entities is generated on the fly. For this reason, calling <code class=\"language-plaintext highlighter-rouge\">append</code> on <code class=\"language-plaintext highlighter-rouge\">paper[\"author\"]</code> won’t actually modify the <code class=\"language-plaintext highlighter-rouge\">paper</code> entity in any way. To add an author, use the <code class=\"language-plaintext highlighter-rouge\">append_to</code> method instead:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">donald</span> <span class=\"o\">=</span> <span class=\"n\">crate</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">crate</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">https://en.wikipedia.org/wiki/Donald_Duck</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"p\">{</span>\n  <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Donald Duck</span><span class=\"sh\">\"</span>\n<span class=\"p\">}))</span>\n<span class=\"n\">paper</span><span class=\"p\">.</span><span class=\"nf\">append_to</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">author</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">donald</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Note that <code class=\"language-plaintext highlighter-rouge\">append_to</code> also works if the property to be updated is missing or has only one value:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"sh\">\"</span><span class=\"s\">Mickey_Mouse</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Scrooge_McDuck</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">crate</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">crate</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">https://en.wikipedia.org/wiki/</span><span class=\"si\">{</span><span class=\"n\">n</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">))</span>\n    <span class=\"n\">donald</span><span class=\"p\">.</span><span class=\"nf\">append_to</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">follows</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"adding-remote-entities\">Adding remote entities</h2>\n\n<p>Data entities can also be remote:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">input_data</span> <span class=\"o\">=</span> <span class=\"n\">crate</span><span class=\"p\">.</span><span class=\"nf\">add_file</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">http://example.org/exp_data.zip</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>By default the file won’t be downloaded, and will be referenced by its URI in <code class=\"language-plaintext highlighter-rouge\">ro-crate-metadata.json</code>:</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"@id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"http://example.org/exp_data.zip\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"@type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"File\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>If you add <code class=\"language-plaintext highlighter-rouge\">fetch_remote=True</code> to the <code class=\"language-plaintext highlighter-rouge\">add_file</code> call, however, the library (when <code class=\"language-plaintext highlighter-rouge\">crate.write</code> is called) will try to download the file and include it in the output crate.</p>\n\n<p>Another option that influences the behavior when dealing with remote entities is <code class=\"language-plaintext highlighter-rouge\">validate_url</code>, also <code class=\"language-plaintext highlighter-rouge\">False</code> by default: if it’s set to <code class=\"language-plaintext highlighter-rouge\">True</code>, when the crate is serialized, the library will try to open the URL to add / update metadata such as the content’s length and format.</p>\n\n<h2 id=\"adding-entities-with-an-arbitrary-type\">Adding entities with an arbitrary type</h2>\n\n<p>An entity can be of any type listed in the <a href=\"https://www.researchobject.org/ro-crate/1.1/context.jsonld\">RO-Crate context</a>. However, only a few of them have a counterpart (e.g., <code class=\"language-plaintext highlighter-rouge\">File</code>) in the library’s class hierarchy, either because they are very common or because they are associated with specific functionality that can be conveniently embedded in the class implementation. In other cases, you can explicitly pass the type via the <code class=\"language-plaintext highlighter-rouge\">properties</code> argument:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">rocrate.model.contextentity</span> <span class=\"kn\">import</span> <span class=\"n\">ContextEntity</span>\n\n<span class=\"n\">hackathon</span> <span class=\"o\">=</span> <span class=\"n\">crate</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"nc\">ContextEntity</span><span class=\"p\">(</span><span class=\"n\">crate</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">#bh2021</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"sh\">\"</span><span class=\"s\">@type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Hackathon</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Biohackathon 2021</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">location</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Barcelona, Spain</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">startDate</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">2021-11-08</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">endDate</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">2021-11-12</span><span class=\"sh\">\"</span>\n<span class=\"p\">}))</span>\n</code></pre></div></div>\n\n<p>Note that entities can have multiple types, e.g.:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    \"@type\" = [\"File\", \"SoftwareSourceCode\"]\n</code></pre></div></div>\n\n<h1 id=\"consuming-an-ro-crate\">Consuming an RO-Crate</h1>\n\n<p>An existing RO-Crate package can be loaded from a directory or zip file:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">crate</span> <span class=\"o\">=</span> <span class=\"nc\">ROCrate</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">exp_crate</span><span class=\"sh\">'</span><span class=\"p\">)</span>  <span class=\"c1\"># or ROCrate('exp_crate.zip')\n</span><span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">crate</span><span class=\"p\">.</span><span class=\"nf\">get_entities</span><span class=\"p\">():</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">.</span><span class=\"nb\">type</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./ Dataset\nro-crate-metadata.json CreativeWork\npaper.pdf File\nresults.csv File\nimages/figure.svg File\nhttps://orcid.org/0000-0000-0000-0000 Person\nhttps://orcid.org/0000-0000-0000-0001 Person\n...\n</code></pre></div></div>\n\n<p>The first two entities shown in the output are the <a href=\"https://www.researchobject.org/ro-crate/1.1/root-data-entity.html\">root data entity</a> and the <a href=\"https://www.researchobject.org/ro-crate/1.1/metadata.html\">metadata file descriptor</a>, respectively. The former represents the whole crate, while the latter represents the metadata file. These are special entities managed by the <code class=\"language-plaintext highlighter-rouge\">ROCrate</code> object, and are always present. The other entities are the ones we added in the <a href=\"#creating-an-ro-crate\">section on RO-Crate creation</a>. As shown above, <code class=\"language-plaintext highlighter-rouge\">get_entities</code> allows to iterate over all entities in the crate. You can also access only data entities with <code class=\"language-plaintext highlighter-rouge\">crate.data_entities</code> and only contextual entities with <code class=\"language-plaintext highlighter-rouge\">crate.contextual_entities</code>. For instance:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">crate</span><span class=\"p\">.</span><span class=\"n\">data_entities</span><span class=\"p\">:</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">author</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">author</span><span class=\"p\">:</span>\n        <span class=\"k\">continue</span>\n    <span class=\"k\">elif</span> <span class=\"nf\">isinstance</span><span class=\"p\">(</span><span class=\"n\">author</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">author</span><span class=\"p\">])</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"nf\">repr</span><span class=\"p\">(</span><span class=\"n\">author</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">)))</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>paper.pdf ['Alice Doe', 'Bob Doe']\nresults.csv 'Alice Doe'\nimages/figure.svg 'Bob Doe'\n</code></pre></div></div>\n\n<p>You can fetch an entity by its <code class=\"language-plaintext highlighter-rouge\">@id</code> as follows:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">article</span> <span class=\"o\">=</span> <span class=\"n\">crate</span><span class=\"p\">.</span><span class=\"nf\">dereference</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">paper.pdf</span><span class=\"sh\">\"</span><span class=\"p\">)</span>  <span class=\"c1\"># or crate.get(\"paper.pdf\")\n</span></code></pre></div></div>\n\n<h1 id=\"command-line-interface\">Command Line Interface</h1>\n\n<blockquote class=\"comment\">\n  <comment-title>Jupyter Notebook users: switch to a terminal</comment-title>\n  <p>The code cells in this section use Unix shell commands, which can’t be run within a notebook. Open a Unix/Linux terminal to follow along.</p>\n</blockquote>\n\n<p><code class=\"language-plaintext highlighter-rouge\">ro-crate-py</code> includes a hierarchical command line interface: the <code class=\"language-plaintext highlighter-rouge\">rocrate</code> tool. <code class=\"language-plaintext highlighter-rouge\">rocrate</code> is the top-level command, while specific functionalities are provided via sub-commands. Currently, the tool allows to initialize a directory tree as an RO-Crate (<code class=\"language-plaintext highlighter-rouge\">rocrate init</code>) and to modify the metadata of an existing RO-Crate (<code class=\"language-plaintext highlighter-rouge\">rocrate add</code>).</p>\n\n<div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>rocrate <span class=\"nt\">--help</span>\n<span class=\"go\">Usage: rocrate [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  add\n  init\n  write-zip\n</span></code></pre></div></div>\n\n<h2 id=\"crate-initialization\">Crate initialization</h2>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">rocrate init</code> command explores a directory tree and generates an RO-Crate metadata file (<code class=\"language-plaintext highlighter-rouge\">ro-crate-metadata.json</code>) listing all files and directories as <code class=\"language-plaintext highlighter-rouge\">File</code> and <code class=\"language-plaintext highlighter-rouge\">Dataset</code> entities, respectively.</p>\n\n<div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>rocrate init <span class=\"nt\">--help</span>\n<span class=\"go\">Usage: rocrate init [OPTIONS]\n\nOptions:\n  --gen-preview\n  -e, --exclude CSV\n  -c, --crate-dir PATH\n  --help                Show this message and exit.\n</span></code></pre></div></div>\n\n<p>The command acts on the current directory, unless the <code class=\"language-plaintext highlighter-rouge\">-c</code> option is specified. The metadata file is added (overwritten if present) to the directory at the top level, turning it into an RO-Crate.</p>\n\n<h2 id=\"adding-items-to-the-crate\">Adding items to the crate</h2>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">rocrate add</code> command allows to add files, datasets (directories), workflows, and other entity types (currently <a href=\"https://crs4.github.io/life_monitor/workflow_testing_ro_crate\">testing-related metadata</a>) to an RO-Crate:</p>\n\n<div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>rocrate add <span class=\"nt\">--help</span>\n<span class=\"go\">Usage: rocrate add [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  dataset\n  file\n  test-definition\n  test-instance\n  test-suite\n  workflow\n</span></code></pre></div></div>\n\n<p>Note that data entities (e.g., workflows) must already be present in the directory tree: the effect of the command is to register them in the metadata file.</p>\n\n<h2 id=\"example\">Example</h2>\n\n<p>To run the following commands, we need a copy of the ro-crate-py repository:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git clone https://github.com/ResearchObject/ro-crate-py\n</code></pre></div></div>\n\n<p>Navigate to the following directory in the repository we just cloned:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cd </span>ro-crate-py/test/test-data/ro-crate-galaxy-sortchangecase\n</code></pre></div></div>\n\n<p>This directory is already an RO-Crate. Delete the metadata file to get a plain directory tree:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">rm </span>ro-crate-metadata.json\n</code></pre></div></div>\n\n<p>Now the directory tree contains several files and directories, including a Galaxy workflow and a Planemo test file, but it’s not an RO-Crate anymore, since there is no metadata file. Initialize the crate:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>rocrate init\n</code></pre></div></div>\n\n<p>This creates an <code class=\"language-plaintext highlighter-rouge\">ro-crate-metadata.json</code> file that lists files and directories rooted at the current directory. Note that the Galaxy workflow is listed as a plain <code class=\"language-plaintext highlighter-rouge\">File</code>:</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"@id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"sort-and-change-case.ga\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"@type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"File\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>To register the workflow as a <code class=\"language-plaintext highlighter-rouge\">ComputationalWorkflow</code>, run the following:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>rocrate add workflow <span class=\"nt\">-l</span> galaxy sort-and-change-case.ga\n</code></pre></div></div>\n\n<p>Now the workflow has a type of <code class=\"language-plaintext highlighter-rouge\">[\"File\", \"SoftwareSourceCode\", \"ComputationalWorkflow\"]</code> and points to a <code class=\"language-plaintext highlighter-rouge\">ComputerLanguage</code> entity that represents the Galaxy workflow language. Also, the workflow is listed as the crate’s <code class=\"language-plaintext highlighter-rouge\">mainEntity</code> (this is required by the <a href=\"https://w3id.org/workflowhub/workflow-ro-crate/1.0\">Workflow RO-Crate profile</a>, a subtype of RO-Crate which provides extra specifications for workflow metadata).</p>\n\n<p>To add files or directories after crate initialization:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cp</span> ../sample_file.txt <span class=\"nb\">.</span>\nrocrate add file sample_file.txt <span class=\"nt\">-P</span> <span class=\"nv\">name</span><span class=\"o\">=</span>sample <span class=\"nt\">-P</span> <span class=\"nv\">description</span><span class=\"o\">=</span><span class=\"s2\">\"Sample file\"</span>\n<span class=\"nb\">cp</span> <span class=\"nt\">-r</span> ../test_add_dir <span class=\"nb\">.</span>\nrocrate add dataset test_add_dir\n</code></pre></div></div>\n\n<p>The above example also shows how to set arbitrary properties for the entity with -P. This is supported by most <code class=\"language-plaintext highlighter-rouge\">rocrate add</code> subcommands.</p>\n"],"ref_slides":[],"hands_on":true,"slides":false,"mod_date":"2024-03-26 13:59:39 +0000","pub_date":"2023-05-11 12:51:10 +0000","version":13,"api":"https://training.galaxyproject.org/training-material/api/topics/fair/tutorials/ro-crate-in-python/tutorial.json","tools":[],"supported_servers":{"exact":[],"inexact":[{"name":"UseGalaxy.eu","url":"https://usegalaxy.eu","id":"eu","human":"Galaxy Europe","usegalaxy":true},{"name":"UseGalaxy.org","url":"https://usegalaxy.org","id":"us","human":"Galaxy Main","usegalaxy":true},{"name":"UseGalaxy.org.au","url":"https://usegalaxy.org.au","id":"au","human":"Galaxy Australia","usegalaxy":true},{"name":"UseGalaxy.fr","url":"https://usegalaxy.fr","id":"fr","human":"Galaxy France","usegalaxy":true}]},"topic_name_human":"FAIR Data, Workflows, and Research","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"slides_recordings":false,"translations":{"tutorial":[],"slides":[],"video":false},"type":"tutorial","contributors":[{"name":"Simone Leo","joined":"2023-04","elixir_node":"it","orcid":"0000-0001-8271-5429","affiliations":["by-covid","elixir-europe"],"id":"simleo","url":"https://training.galaxyproject.org/training-material/api/contributors/simleo.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/simleo/"},{"name":"Bruno P. Kinoshita","joined":"2023-04","orcid":"0000-0001-8250-4074","elixir_node":"es","affiliations":["elixir-europe"],"id":"kinow","url":"https://training.galaxyproject.org/training-material/api/contributors/kinow.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/kinow/"},{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"},{"name":"Eli Chadwick","email":"eli.chadwick@manchester.ac.uk","orcid":"0000-0002-0035-6475","joined":"2022-11","id":"elichad","url":"https://training.galaxyproject.org/training-material/api/contributors/elichad.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/elichad/"},{"name":"Eli Chadwick","email":"eli.chadwick@manchester.ac.uk","orcid":"0000-0002-0035-6475","joined":"2022-11","id":"elichad","url":"https://training.galaxyproject.org/training-material/api/contributors/elichad.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/elichad/"},{"name":"BeYond-COVID","joined":"2023-04","funder":true,"funding_id":"101046203","funding_system":"cordis","funding_statement":"BY-COVID is an EC funded project that tackles the data challenges that can hinder effective pandemic response.\n\nThis project has received funding from the European Union’s Horizon Europe research and innovation programme under grant agreement № 101046203 (BY-COVID)","url":"https://training.galaxyproject.org/training-material/api/funders/by-covid.json","members":["bgruening","hexylena","ilveroluca","kikkomep","mbaardwijk","PapXis","pauldg","simleo","stain","wm75"],"id":"by-covid","page":"https://training.galaxyproject.org/training-material/hall-of-fame/by-covid/"}]}