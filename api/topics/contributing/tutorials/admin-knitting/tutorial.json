{"layout":"tutorial_hands_on","title":"Updating diffs in admin training","questions":["How does it work?"],"objectives":["Update some text in an earlier commit"],"time_estimation":"5m","key_points":["The knitting script works OK?","Learn to rebase now, if you haven't yet","git am is not fun","If you have issues, ping me."],"contributors":[{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"}],"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00055","url":"/topics/contributing/tutorials/admin-knitting/tutorial.html","topic_name":"contributing","tutorial_name":"admin-knitting","dir":"topics/contributing/tutorials/admin-knitting","symlink":null,"id":"contributing/admin-knitting","ref_tutorials":["<h1 id=\"updating-diffs\">Updating Diffs</h1>\n\n<p>The admin training was recently converted completely to use diffs. This was\ndone so we could build a git repository, and time travel to any point within\nadmin training, in support of students and testing.</p>\n\n<p>Here’s some common editing scenarios to help you out.</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, we will:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#updating-diffs\" id=\"markdown-toc-updating-diffs\">Updating Diffs</a>    <ol>\n      <li><a href=\"#how-it-works\" id=\"markdown-toc-how-it-works\">How it Works</a></li>\n      <li><a href=\"#automation\" id=\"markdown-toc-automation\">Automation</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#git-gat-knick-knacks-some-common-scenarios\" id=\"markdown-toc-git-gat-knick-knacks-some-common-scenarios\">Git-Gat Knick-Knacks: Some Common Scenarios</a>    <ol>\n      <li><a href=\"#i-want-to-update-the-text-of-a-specific-commit\" id=\"markdown-toc-i-want-to-update-the-text-of-a-specific-commit\">I want to update the text of a specific commit</a></li>\n      <li><a href=\"#upgrading-an-existing-tutorial\" id=\"markdown-toc-upgrading-an-existing-tutorial\">Upgrading an existing tutorial</a></li>\n      <li><a href=\"#i-want-to-add-a-new-commit\" id=\"markdown-toc-i-want-to-add-a-new-commit\">I want to add a new commit</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#errors-that-can-occur-and-how-to-fix-them\" id=\"markdown-toc-errors-that-can-occur-and-how-to-fix-them\">Errors that can occur and how to fix them</a>    <ol>\n      <li><a href=\"#sha1-information-is-lacking-or-useless\" id=\"markdown-toc-sha1-information-is-lacking-or-useless\">sha1 information is lacking or useless</a></li>\n    </ol>\n  </li>\n</ol>\n\n</blockquote>\n\n<h2 id=\"how-it-works\">How it Works</h2>\n\n<p>Tutorials are written with diffs that look like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>```diff\n--- /dev/null\n+++ b/ansible.cfg\n@@ -0,0 +1,4 @@\n+[defaults]\n+interpreter_python = /usr/bin/python3\n+inventory = hosts\n+retry_files_enabled = false\n```\n{: data-commit=\"Add ansible.cfg\"}\n</code></pre></div></div>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">data-commit</code> will be turned into the commit message, so, you can write something nice here. Otherwise it’s a pretty standard diff. For tutorials which are written in this way, we can extract all of the diffs.</p>\n\n<h3 id=\"frogging\">Frogging</h3>\n\n<p>In knitting you sometimes need to rip out the stitches, a process sometimes called frogging.</p>\n\n<blockquote class=\"quote\" cite=\"https://en.wikipedia.org/wiki/Knitting\">\n  <p>If they are not secured, the loops of a knitted course will come undone when their yarn is pulled; this is known as ripping out, unravelling knitting, or humorously, frogging (because you ‘rip it’, this sounds like a frog croaking: ‘rib-bit’).</p>\n</blockquote>\n\n<div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>python bin/knit-frog.py topics/admin/tutorials/singularity/tutorial.md /tmp/03-singularity\n<span class=\"go\">/tmp/03-singularity-commit-0000-add-golang-and-singulary-ansible-roles.patch\n/tmp/03-singularity-commit-0001-configure-golang-and-singularity.patch\n/tmp/03-singularity-commit-0002-add-the-roles-to-the-playbook.patch\n/tmp/03-singularity-commit-0003-configure-the-container-and-dependency-resolvers.patch\n/tmp/03-singularity-commit-0004-configure-the-dependency-resolvers.patch\n/tmp/03-singularity-commit-0005-configure-the-container-resolver.patch\n/tmp/03-singularity-commit-0006-update-the-job-conf-xml-with-singularity-destination.patch\n</span></code></pre></div></div>\n\n<p>This rips out the diffs and writes them into patch files.</p>\n\n<h3 id=\"knitting\">Knitting</h3>\n\n<p>With a series of patch files, we have a similar script to knit them back together.</p>\n\n<div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>python bin/knit.py topics/admin/tutorials/singularity/tutorial.md <span class=\"nt\">--patches</span> /tmp/03-singularity<span class=\"k\">*</span>\n</code></pre></div></div>\n\n<p>This takes the patch files and lines them up in the tutorial. It is <strong>not intelligent</strong>. You should have the same number of patch files as you do diffs with <code class=\"language-plaintext highlighter-rouge\">data-commit</code>. Up to you to manage that.</p>\n\n<h2 id=\"automation\">Automation</h2>\n\n<p>But mostly you don’t need to care about the <code class=\"language-plaintext highlighter-rouge\">knit.py</code> or <code class=\"language-plaintext highlighter-rouge\">knit-frog.py</code>, we have <code class=\"language-plaintext highlighter-rouge\">knit-automated.sh</code> which takes care of calling those properly. You can call it with <code class=\"language-plaintext highlighter-rouge\">export</code> to write the patches into <code class=\"language-plaintext highlighter-rouge\">/tmp/git-gat/</code></p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ ./bin/knit-automated.sh export\n/tmp/git-gat/0-ansible-galaxy-commit-0000-add-requirements.patch\n/tmp/git-gat/0-ansible-galaxy-commit-0001-add-ansible-cfg.patch\n/tmp/git-gat/0-ansible-galaxy-commit-0002-add-hosts.patch\n/tmp/git-gat/0-ansible-galaxy-commit-0003-add-initial-group-variables-file.patch\n/tmp/git-gat/0-ansible-galaxy-commit-0004-add-initial-galaxy-playbook.patch\n/tmp/git-gat/0-ansible-galaxy-commit-0005-add-pip--miniconda--galaxy-to-playbook.patch\n/tmp/git-gat/0-ansible-galaxy-commit-0006-configure-miniconda-and-galaxy.patch\n[...]\n/tmp/git-gat/6-pulsar-commit-0000-add-requirements.patch\n/tmp/git-gat/6-pulsar-commit-0001-configure-rabbitmq.patch\n/tmp/git-gat/6-pulsar-commit-0002-add-role.patch\n/tmp/git-gat/6-pulsar-commit-0003-add-pulsar-group-variables.patch\n/tmp/git-gat/6-pulsar-commit-0004-add-pulsar-host.patch\n/tmp/git-gat/6-pulsar-commit-0005-add-pulsar-playbook.patch\n/tmp/git-gat/6-pulsar-commit-0006-add-pulsar-plugin.patch\n/tmp/git-gat/6-pulsar-commit-0007-add-pulsar-destination.patch\n/tmp/git-gat/6-pulsar-commit-0008-send-bwa-and-bwa-mem-to-pulsar.patch\n</code></pre></div></div>\n\n<p>And there you can build a repository from them!</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[hxr@mk:/tmp/git-gat]$ git init\n[hxr@mk:/tmp/git-gat]$ git am -3 *\nApplying: admin/ansible-galaxy/0000: Add requirements\napplying to an empty history\nApplying: admin/ansible-galaxy/0001: Add ansible.cfg\nApplying: admin/ansible-galaxy/0002: Add hosts\nApplying: admin/ansible-galaxy/0003: Add initial group variables file\nApplying: admin/ansible-galaxy/0004: Add initial galaxy playbook\nApplying: admin/ansible-galaxy/0005: Add pip, miniconda, galaxy to playbook\n[...]\nApplying: admin/pulsar/0004: Add pulsar host\nApplying: admin/pulsar/0005: Add pulsar playbook\nApplying: admin/pulsar/0006: Add pulsar plugin\nApplying: admin/pulsar/0007: Add pulsar destination\nApplying: admin/pulsar/0008: Send bwa and bwa-mem to pulsar\n</code></pre></div></div>\n\n<p>Et voila!</p>\n\n<div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">rm</span> <span class=\"k\">*</span>.patch\n<span class=\"gp\">$</span><span class=\"w\"> </span>tree\n<span class=\"c\">.\n</span><span class=\"go\">├── ansible.cfg\n├── files\n│   └── galaxy\n│       ├── config\n│       │   ├── dependency_resolvers_conf.xml\n│       │   └── tool_destinations.yml\n│       ├── dynamic_job_rules\n│       │   ├── map_resources.py\n│       │   └── my_rules.py\n│       └── tools\n│           └── testing.xml\n├── galaxy.yml\n├── group_vars\n│   ├── all.yml\n│   ├── galaxyservers.yml\n│   └── pulsarservers.yml\n├── hosts\n├── pulsar.yml\n├── requirements.yml\n└── templates\n    ├── galaxy\n    │   └── config\n    │       ├── container_resolvers_conf.xml.j2\n    │       ├── job_conf.yml.j2\n    │       └── job_resource_params_conf.xml.j2\n    └── nginx\n        ├── galaxy.j2\n        └── redirect-ssl.j2\n\n10 directories, 18 files\n</span></code></pre></div></div>\n\n<p>When you’re done editing, you can run the <code class=\"language-plaintext highlighter-rouge\">./bin/knit-automated.sh import</code>, it will</p>\n\n<ul>\n  <li>extract the history as patches (using <code class=\"language-plaintext highlighter-rouge\">git format-patch</code>)</li>\n  <li>knit them into the tutorials</li>\n</ul>\n\n<blockquote class=\"warning\">\n  <warning-title>Danger: Don't mess with the commit names at this step</warning-title>\n  <p>They’re used for figuring out which commit a patch file belongs to. Sorry!</p>\n</blockquote>\n\n<h1 id=\"git-gat-knick-knacks-some-common-scenarios\">Git-Gat Knick-Knacks: Some Common Scenarios</h1>\n\n<h2 id=\"i-want-to-update-the-text-of-a-specific-commit\">I want to update the text of a specific commit</h2>\n\n<blockquote class=\"question\">\n  <question-title>Example problem</question-title>\n  <p>I want to edit the commit titled “Add production facing vars” to add an addtional variable in admin/ansible-galaxy.</p>\n</blockquote>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Make the change you want to see in the GAT</hands-on-title>\n  <ol>\n    <li>\n      <p>Start by exporting</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ bash bin/knit-automated.sh export\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Build the repository, and apply the patches to get the current state.</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[hxr@mk:/tmp/git-gat]$ git init\n[hxr@mk:/tmp/git-gat]$ git am -3 *.patch\nApplying: admin/ansible-galaxy/0000: Add requirements\napplying to an empty history\nApplying: admin/ansible-galaxy/0001: Add ansible.cfg\nApplying: admin/ansible-galaxy/0002: Add hosts\nApplying: admin/ansible-galaxy/0003: Add initial group variables file\nApplying: admin/ansible-galaxy/0004: Add initial galaxy playbook\nApplying: admin/ansible-galaxy/0005: Add pip, miniconda, galaxy to playbook\nApplying: admin/ansible-galaxy/0006: Configure miniconda and galaxy\nApplying: admin/ansible-galaxy/0007: Configure galaxy config\n[...]\n[hxr@mk:/tmp/git-gat]$ rm *.patch\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Find the commit:</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ git log --oneline | grep \"Add production facing vars\"\n2f5b416 admin/ansible-galaxy/0022: Add production facing vars\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Edit rebase one upstream of that commit</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ git rebase -i 2f5b416~\n</code></pre></div>      </div>\n\n      <p>Mark it for editing</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>edit 2f5b416 admin/ansible-galaxy/0022: Add production facing vars\npick a352bec admin/ansible-galaxy/0023: Add nginx x-accel-redir and g-i-g webhook config to nginx\npick 59f9ff0 admin/singularity/0000: Add golang and singulary ansible roles\npick f38ddbf admin/singularity/0001: Configure golang and singularity\n</code></pre></div>      </div>\n\n      <p>It should stop there</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Stopped at 2f5b416...  admin/ansible-galaxy/0022: Add production facing vars\nYou can amend the commit now, with\n\n  git commit --amend\n\nOnce you are satisfied with your changes, run\n\n  git rebase --continue\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Open your file, make your change. Here I’m showing the change I made with <code class=\"language-plaintext highlighter-rouge\">git diff</code></p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ git diff | cat\ndiff --git a/group_vars/galaxyservers.yml b/group_vars/galaxyservers.yml\nindex 15fbf1e..8fe4343 100644\n--- a/group_vars/galaxyservers.yml\n+++ b/group_vars/galaxyservers.yml\n@@ -53,6 +53,8 @@ galaxy_config:\n     expose_user_name: true\n     expose_dataset_path: true\n     expose_potentially_sensitive_job_metrics: true\n+    # NFS workarounds\n+    retry_job_output_collection: 3\n     # Debugging\n     cleanup_job: onsuccess\n     allow_user_impersonation: true\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>The status probably looks like this, the file that was changed in that commit is marked as modified</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ git status\ninteractive rebase in progress; onto 7284036\nLast command done (1 command done):\n   edit 2f5b416 admin/ansible-galaxy/0022: Add production facing vars\nNext commands to do (46 remaining commands):\n   pick 3c6a72e admin/ansible-galaxy/0023: Add nginx x-accel-redir and g-i-g webhook config to nginx\n   pick a893955 admin/singularity/0000: Add golang and singulary ansible roles\n  (use \"git rebase --edit-todo\" to view and edit)\nYou are currently editing a commit while rebasing branch 'main' on '7284036'.\n  (use \"git commit --amend\" to amend the current commit)\n  (use \"git rebase --continue\" once you are satisfied with your changes)\n\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        modified:   group_vars/galaxyservers.yml\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Ammend the commit, and continue the rebase</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ git commit --amend\n[detached HEAD ed290de] admin/ansible-galaxy/0022: Add production facing vars\n Author: The Galaxy Training Network &lt;galaxytrainingnetwork@gmail.com&gt;\n Date: Mon Feb 15 14:06:56 2021 +0100\n 1 file changed, 22 insertions(+)\n$ git rebase --continue\nSuccessfully rebased and updated refs/heads/main.\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Import the changes back in the GTN repository</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./bin/knit-automated.sh import\n</code></pre></div>      </div>\n    </li>\n  </ol>\n\n</blockquote>\n\n<p>The above shows commands with outputs, the rest will be more abbreviated</p>\n\n<h2 id=\"upgrading-an-existing-tutorial\">Upgrading an existing tutorial</h2>\n\n<blockquote class=\"question\">\n  <question-title>Example problem</question-title>\n  <p>I have a new tutorial in the schedule and I want to upgrade it to use this feature</p>\n</blockquote>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Make the change you want to see in the GAT</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Start by exporting</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ bash bin/knit-automated.sh export\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Build the repository… <strong>up to the point where your tuto is</strong></p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[hxr@mk:/tmp/git-gat]$ git init\n[hxr@mk:/tmp/git-gat]$ git am -3 0* 1* 2*\nApplying: admin/ansible-galaxy/0000: Add requirements\napplying to an empty history\nApplying: admin/ansible-galaxy/0001: Add ansible.cfg\nApplying: admin/ansible-galaxy/0002: Add hosts\nApplying: admin/ansible-galaxy/0003: Add initial group variables file\nApplying: admin/ansible-galaxy/0004: Add initial galaxy playbook\nApplying: admin/ansible-galaxy/0005: Add pip, miniconda, galaxy to playbook\nApplying: admin/ansible-galaxy/0006: Configure miniconda and galaxy\nApplying: admin/ansible-galaxy/0007: Configure galaxy config\n[...]\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Go diff-by-diff in your tutorial, making the change, and then making a new commit on top for each diff. For each of these, add the <code class=\"language-plaintext highlighter-rouge\">{: data-commit=\"Something usful\"}</code> below the commit.</p>\n\n      <p>Do they have a <code class=\"language-plaintext highlighter-rouge\">{ % endraw % }</code>? then move that above the backticks.</p>\n    </li>\n    <li>\n      <p>Format them as patches</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git format-patch &lt;the last commit before you started committing&gt;\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Knit them together</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>python bin/knit.py topics/admin/tutorials/&lt;yourtuto&gt;/tutorial.md --patches /tmp/&lt;the-patches-you-exported&gt;*\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>That’s part one done! Now we need to finish the rest of the patches.</p>\n    </li>\n    <li>\n      <p>Update <code class=\"language-plaintext highlighter-rouge\">./bin/knit-automated.sh</code> to include your tutorial in the right order.</p>\n    </li>\n    <li>\n      <p>Go through an export-import cycle</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ rm -rf /tmp/git-gat/\n$ ./bin/knit-automated.sh export\n$ cd /tmp/git-gat/\n$ git am -3 *.patch # Resolve any conflicts\n$ cd -\n$ ./bin/knit-automated.sh import\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>Done!</p>\n    </li>\n  </ol>\n</blockquote>\n\n<h2 id=\"i-want-to-add-a-new-commit\">I want to add a new commit</h2>\n\n<blockquote class=\"hands_on\">\n  <hands-on-title>Make the change you want to see in the GAT</hands-on-title>\n\n  <ol>\n    <li>\n      <p>Add your commit where it belongs in the tutorial</p>\n\n      <pre>\n   \n{ raw }\n```diff\n--- a/requirements.yml\n+++ b/requirements.yml\n@@ -22,3 +22,7 @@\n   version: 0.0.2\n - src: galaxyproject.slurm\n   version: 0.1.3\n+- name: usegalaxy_eu.rabbitmq\n+  version: 0.1.0\n+- src: galaxyproject.pulsar\n+  version: 1.0.7\n{ endraw }\n```\n{: data-commit=\"Add requirements\"}\n   \n</pre>\n\n      <p>Use your imagination to pretend the raw/endraw tags are correct with the missing percent signs.</p>\n    </li>\n    <li>\n      <p>Now in the above diff we’ve written some — and +++ and more metadata we don’t really have. So: just make it up, the commit will fail to apply, and we’ll go fix it. You can really write <em>anything</em> here you want, and the diff will fail which is what we want.</p>\n    </li>\n    <li>\n      <p>Now, go apply the commits</p>\n\n      <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ ./bin/knit-automated.sh export\n$ cd /tmp/git-gat/\n$ git am -3 *.patch # Resolve any conflicts\n</code></pre></div>      </div>\n    </li>\n    <li>\n      <p>This will fail. Here’s how to fix it:</p>\n\n      <ol>\n        <li>Run <code class=\"language-plaintext highlighter-rouge\">git am --show-current-patch</code> to see the above diff you’ve inserted (or the otherwise incorrect diff that’s a downstream result of your new change).</li>\n        <li>Make the correct change to the file on disk.</li>\n        <li><code class=\"language-plaintext highlighter-rouge\">git add &lt;path&gt;</code></li>\n        <li><code class=\"language-plaintext highlighter-rouge\">git am --continue</code></li>\n      </ol>\n    </li>\n    <li>\n      <p>You’ll probably have to do this quite a few more times, diffs have a habit of affecting downstream diffs (e.g. changing a version number or being included in the diff context.)</p>\n    </li>\n    <li>\n      <p>Once you’ve finished all of them, you’ll just <code class=\"language-plaintext highlighter-rouge\">./bin/knit-automated.sh import</code> and commit the resulting changes!</p>\n    </li>\n  </ol>\n</blockquote>\n\n<p>The alternative to the above approach is</p>\n\n<ol>\n  <li>Export</li>\n  <li>git rebase and make the corresponding change in the history</li>\n  <li>Let the rebase finish</li>\n  <li>Insert a ‘dummy’ diff (raw/open code+diff/endraw/close code/data-commit tag) without any content and then run <code class=\"language-plaintext highlighter-rouge\">import</code> which should insert it in the correct place.</li>\n</ol>\n\n<h1 id=\"errors-that-can-occur-and-how-to-fix-them\">Errors that can occur and how to fix them</h1>\n\n<h2 id=\"sha1-information-is-lacking-or-useless\">sha1 information is lacking or useless</h2>\n\n<p>This is because there’s a mismatch in the commits you’re trying to apply and what the merge commit is seeing. Usually you won’t notice. <strong>fix by rebasing, and roundtripping the commits.</strong></p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Applying: admin/pulsar/0012: Send bwa and bwa-mem to pulsar\nTagging step-17\nCommitting 18-gxadmin-commit-0000-add-requirement.patch\n18-gxadmin-commit-0002-add-the-gxadmin-role.patch\nApplying: admin/gxadmin/0000: Add requirement\nerror: sha1 information is lacking or useless (requirements.yml).\nerror: could not build fake ancestor\nPatch failed at 0001 admin/gxadmin/0000: Add requirement\nhint: Use 'git am --show-current-patch' to see the failed patch\nWhen you have resolved this problem, run \"git am --continue\".\nIf you prefer to skip this patch, run \"git am --skip\" instead.\nTo restore the original branch and stop patching, run \"git am --abort\".\n</code></pre></div></div>\n\n<p>Here you grumble at how picky it is.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ git am --show-current-patch\nFrom: The Galaxy Training Network &lt;galaxytrainingnetwork@gmail.com&gt;\nDate: Mon, 15 Feb 2021 14:06:56 +0100\nSubject: admin/gxadmin/0000: Add requirement\n\n\n--- a/requirements.yml\n+++ b/requirements.yml\n@@ -26,3 +26,5 @@\n   version: 0.1.0\n - src: galaxyproject.pulsar\n   version: 1.0.6\n+- src: galaxyproject.gxadmin\n+  version: 0.0.8\n--\n2.25.1\n</code></pre></div></div>\n\n<p>That looks right, doesn’t it? But if we grep we’ll see</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ ag -Q '1.0.6' topics/admin\ntopics/admin/tutorials/gxadmin/tutorial.md\n55:&gt;       version: 1.0.6\n\ntopics/admin/tutorials/monitoring/tutorial.md\n80:&gt;       version: 1.0.6\n\ntopics/admin/tutorials/pulsar/tutorial.md\n149:&gt;    +  version: 1.0.6\n</code></pre></div></div>\n\n<p>again right, but is it? No. Github is testing the merge commit. Rebase your commits, and now you’ll see:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ ag -Q '1.0.6' topics/admin\ntopics/admin/tutorials/gxadmin/tutorial.md\n55:&gt;       version: 1.0.6\n\ntopics/admin/tutorials/monitoring/tutorial.md\n80:&gt;       version: 1.0.6\n\n$ ag -Q '1.0.7' topics/admin\ntopics/admin/tutorials/pulsar/tutorial.md\n149:&gt;    +  version: 1.0.7\n</code></pre></div></div>\n\n<p>Aha, two different version. This is what breaks the hashes (hence the error message.)</p>\n\n<p>Roundtripping the commits and fixing up everywhere there was a single character difference in the diff context (UGH) will fix it.</p>\n"],"ref_slides":[],"video_library":{"tutorial":null,"slides":null,"demo":null,"both":null,"session":null},"hands_on":true,"slides":false,"mod_date":"2023-11-21 13:51:43 +0000","pub_date":"2021-06-07 08:12:11 +0000","version":14,"api":"https://training.galaxyproject.org/training-material/api/topics/contributing/tutorials/admin-knitting/tutorial.json","tools":[],"supported_servers":[],"topic_name_human":"Contributing to the Galaxy Training Material","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial"}