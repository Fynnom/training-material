{"layout":"tutorial_hands_on","title":"Teaching Python","questions":["What methods can I incorporate to improve student material uptake within my python courses?","How do I write problems that use these methodologies"],"objectives":["Learn about four different problem design ideas, and one teaching methodology."],"key_points":["Debugging code is an absolutely critical skill for students that they need ot become familiar with early on.","There are a lot of strategies you can teach students to give them the necessary skills for this, such as Wolf Fence debugging.","Or simply adding print statements so they can trace the code's execution.","Fading examples helps students become more independent as they work onwards through problems.","Conversely compounding problems are sometimes a good fit for homework to give numerous \"easy\" problems followed by some \"stretch\" goals that students can reach for, combining their previous work.","Pair progarmming is proven to improve student learning outcomes, when applied correctly."],"time_estimation":"2h","subtopic":"writing","contributions":{"authorship":["hexylena"],"editing":["bazante1"],"testing":["dirowa"]},"js_requirements":{"mathjax":null,"mermaid":false},"short_id":"T00068","url":"/topics/contributing/tutorials/python/tutorial.html","topic_name":"contributing","tutorial_name":"python","dir":"topics/contributing/tutorials/python","symlink":null,"id":"contributing/python","ref_tutorials":["<p>Improving student learning and out comes should always be a goal of teaching. Here we present several strategies to improve student experiences during courses by focusing on how they approach specific problems, and giving them real world applicable solutions to those problems.</p>\n\n<blockquote class=\"agenda\">\n  <agenda-title></agenda-title>\n\n  <p>In this tutorial, you will learn how to run a local instance of the GTN website:</p>\n\n<ol id=\"markdown-toc\">\n  <li><a href=\"#course-management-strategies\" id=\"markdown-toc-course-management-strategies\">Course Management Strategies</a></li>\n  <li><a href=\"#problem-strategies\" id=\"markdown-toc-problem-strategies\">Problem Strategies</a></li>\n  <li><a href=\"#comparisons-to-k-12-methodologies\" id=\"markdown-toc-comparisons-to-k-12-methodologies\">Comparisons to K-12 methodologies</a></li>\n</ol>\n\n</blockquote>\n\n<p>“Live coding”, as espoused by the Carpentries, is a fantastic strategy to communicate material to students and ensure they get a hands-on experience simultaneously.\nShowing what happens live on the screen is received well by students, if\nthey can manage to watch what we type and try to type it themselves\nsimultaneously. We know at least that our examples give the correct result,\n<em>but</em> students never see anything other than correct, working code, and never\nhave to formulate an internal model for how to write code. They end up\ncopying and pasting and not understanding <em>why</em>.</p>\n\n<p>Predicting code behaviour without running it is a key component of work as a\nprogrammer, and a lot of the time we spend debugging relies on us emulating\nthe computer in our head. Without a solid mental model of code behaviour\none cannot predict how it will function in one situation, much less other or\nnon-standard situations. Planning for code to handle both good and bad\ninputs requires some creativity and mentally planning around expected values\nat various points throughout the execution.</p>\n\n<p>This situation leaves students unprepared for incorrect or buggy code,\neither (un)intentionally included in homework assignments, or, generated by\nthemselves, if they cannot identify where code will fail without executing\nit.</p>\n\n<p>Augmenting lessons with:</p>\n\n<ul>\n  <li>Pair programming</li>\n  <li>Tracing - Stepping through the internal state</li>\n  <li>Faded examples</li>\n  <li>Compounding examples</li>\n  <li>Debugging intentionally broken examples</li>\n</ul>\n\n<p>Will give students enough tools to respond dynamically to failure\nstates with informed experience to resolve issues they encounter as programmers.</p>\n\n<p>The student’s mental model of the code underlies everything they do as a programmer, from conception to implementation to debugging to their self efficacy:</p>\n\n<blockquote class=\"quote\" cite=\"https://doi.org/10.1145%2F1007996.1008042\">\n  <p>This study shows that a well-developed and accurate mental model directly\naffects course performance and also increases self efficacy, the other key\nelement in course performance. Given this double impact, helping students\ndevelop good mental models should remain a goal in introductory programming\ncourses.</p>\n</blockquote>\n\n<p>This is a foundational skill to be able to <em>think</em> through a program, step by step, and understand how the code executes and which variables exist when, and what their values should be. This mental modelling allows students to predict the behaviour of a system, and when it diverges from their prediction, recognise any potential bugs.</p>\n\n<h2 id=\"course-management-strategies\">Course Management Strategies</h2>\n\n<h3 id=\"pair-programming\">Pair Programming</h3>\n\n<p>Complementary to the other strategies, <a href=\"https://en.wikipedia.org/wiki/Pair_programming\">Pair Programming</a> or “pairing” provides a reinforcement activity where they utilise similar skills. As one person writes and executes code, the other person ‘drives’ the experience, telling them what to write (<span class=\"citation\"><a href=\"#Williams\">Williams</a></span>, <span class=\"citation\"><a href=\"#Williams_2001\">Williams and Upchurch 2001</a></span>). It has become a common learning model in introductory courses due to its benefits to students (<span class=\"citation\"><a href=\"#mendes2005investigating\">Mendes <i>et al.</i> 2005</a></span>, <span class=\"citation\"><a href=\"#mendes2006replicated\">Mendes <i>et al.</i> 2006</a></span>, <span class=\"citation\"><a href=\"#Hannay_2007\">Hannay <i>et al.</i> 2007</a></span>). Specifically this technique has also been shown to be beneficial for women in computer science and gives them better chances for success in future programming endeavours (<span class=\"citation\"><a href=\"#werner2004pair\">Werner <i>et al.</i> 2004</a></span>). Adopting this technique is promising, provided you adhere to principles outlined by <span class=\"citation\"><a href=\"#Mentz_2008\">Mentz <i>et al.</i> 2008</a></span>.</p>\n\n<p>These can often be implemented as breakout rooms wherein students are assigned a handful of problems to complete. After the breakout rooms end, you can have students summarize solutions, pick on individual ones for their ideas, etc.</p>\n\n<h2 id=\"problem-strategies\">Problem Strategies</h2>\n\n<h3 id=\"tracing-code-execution\">Tracing Code Execution</h3>\n\n<blockquote class=\"code-2col\">\n  <blockquote class=\"code-in\">\n    <code-in-title>Code</code-in-title>\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Initialise our accumulator\n</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"c1\"># Loop over our input data\n</span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span> <span class=\"c1\"># 0..9\n</span>    <span class=\"c1\"># In-loop temporary variable\n</span>    <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">i</span>\n    <span class=\"c1\"># Update our accumulator\n</span>    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"c1\"># Output our result\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">The final value is </span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n  </blockquote>\n\n  <blockquote class=\"code-out\">\n    <code-out-title>Trace</code-out-title>\n\n    <table>\n      <thead>\n        <tr>\n          <th>Line</th>\n          <th><code class=\"language-plaintext highlighter-rouge\">i</code></th>\n          <th><code class=\"language-plaintext highlighter-rouge\">x</code></th>\n          <th><code class=\"language-plaintext highlighter-rouge\">tmp</code></th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>2</td>\n          <td>n/a</td>\n          <td>2</td>\n          <td>n/a</td>\n        </tr>\n        <tr>\n          <td>4</td>\n          <td>0</td>\n          <td>2</td>\n          <td>n/a</td>\n        </tr>\n        <tr>\n          <td>6</td>\n          <td>0</td>\n          <td>2</td>\n          <td>4</td>\n        </tr>\n        <tr>\n          <td>8</td>\n          <td>0</td>\n          <td>5</td>\n          <td>4</td>\n        </tr>\n        <tr>\n          <td>4</td>\n          <td>1</td>\n          <td>5</td>\n          <td>n/a</td>\n        </tr>\n        <tr>\n          <td>6</td>\n          <td>1</td>\n          <td>5</td>\n          <td>11</td>\n        </tr>\n        <tr>\n          <td>8</td>\n          <td>1</td>\n          <td>12</td>\n          <td>11</td>\n        </tr>\n        <tr>\n          <td>4</td>\n          <td>2</td>\n          <td>12</td>\n          <td>n/a</td>\n        </tr>\n        <tr>\n          <td>6</td>\n          <td>2</td>\n          <td>12</td>\n          <td>26</td>\n        </tr>\n        <tr>\n          <td>8</td>\n          <td>2</td>\n          <td>27</td>\n          <td>26</td>\n        </tr>\n      </tbody>\n    </table>\n\n  </blockquote>\n</blockquote>\n\n<p>While there is no bug in the above, when there <em>is</em> a bug present, having students produce a table like that significantly improves their understanding of code flow and execution <span class=\"citation\"><a href=\"#Hertz_2013\">Hertz and Jump 2013</a></span>. “Tracing” is a valuable and easy to complete exercise, and the results can even be checked automatically leading to good scalability of the exercise across larger classes.</p>\n\n<p>Here students can also use a Debugger like <a href=\"https://github.com/inducer/pudb\">pudb</a> which can follow the execution of a bit of code, and show exactly how it’s working.</p>\n\n<script id=\"asciicast\" src=\"https://asciinema.org/a/530572.js\" data-theme=\"monokai\" async=\"\"></script>\n\n<p>Here teaching liberal use of the <code class=\"language-plaintext highlighter-rouge\">print()</code> command, as opposed to more complicated tools like the above, can give students the tools they need to solve problems.\nThis was generated by <a href=\"https://github.com/hexylena/auto-python/\">hexylena/auto-python</a> which can be reused or contributed to if new examples are needed.</p>\n\n<h3 id=\"faded-examples\">Faded Examples</h3>\n\n<p>When teaching programming one must constantly be cognisant of the student’s cognitive load. It is a complicated task that demands a lot of students, requiring types of explicit logic analysis that they may not have engaged in before. Both learning based on problem-solving and worked examples may cause high cognitive loads for different audiences, and exploring alternatives is important (<span class=\"citation\"><a href=\"#Retnowati_2017\">Retnowati 2017</a></span>). Faded examples such as what is seen below are exactly such an alternative, starting with a fully worked example and removing successive components until we reach a problem description requiring a full solution. This leads to fewer unproductive learning events (<span class=\"citation\"><a href=\"#Renkl_2004\">Renkl <i>et al.</i> 2004</a></span>).</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">### Write a function that multiplies two numbers\n</span><span class=\"k\">def</span> <span class=\"nf\">multiply</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">b</span>\n    <span class=\"k\">return</span> <span class=\"n\">c</span>\n</code></pre></div></div>\n\n<p>The initial problem shows the entire solution to students</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">### Write a function that adds two numbers\n</span><span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">___</span><span class=\"p\">):</span>\n    <span class=\"n\">____</span>\n    <span class=\"k\">return</span> <span class=\"n\">c</span>\n</code></pre></div></div>\n\n<p>Increased fading, here we call out blanks students should fill in specifically with syntactically incorrect underscores.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">### Write a function that subtracts two numbers\n</span></code></pre></div></div>\n<p>Final fading, the entire problem is gone except for the description of what they need to do.</p>\n\n<p>Faded examples however, do come at a higher cost of implementation than worked out examples (<span class=\"citation\"><a href=\"#Zamary_2018\">Zamary and Rawson 2018</a></span>). They require writing the correct worked out example and then determining which components to remove, which presents an additional cost during course updates that if examples are changed they need to be double checked to ensure they are still valid, whereas worked examples can be checked more automatically.</p>\n\n<h3 id=\"compounding-problems\">Compounding Problems</h3>\n\n<p>Compounding problems are a good strategy for homework problems, as you can ask multiple things of students and provide a gentle ramp up to increased complexity. Start by designing a small but complex problem like “write a fastq trimmer”, where here they need to implement several different subtasks:</p>\n\n<ul>\n  <li>file processing</li>\n  <li>several utility functions</li>\n  <li>multiple filter stages</li>\n  <li>a single main function which combines all of the above</li>\n</ul>\n\n<p>If done correctly, the students have freedom to move around individual functions that aren’t dependent on each other, making sure they’re correct, before building them up into a final function.</p>\n\n<p>There are two alternative ways to further design the problem:</p>\n\n<ul>\n  <li>Provide it broken down, precise small functions they should implement.</li>\n  <li>Describe the problem and let students determine the optimal way to break it down into small, manageable components.</li>\n</ul>\n\n<p>Which option is prefgerrable depends strongly on how advanced your students are. See the example homework <a href=\"homework/FastQ_trimmer.html\">FastQ_trimmer.html</a> and it’s <a href=\"homework/FastQ_trimmer.ipynb\">associated ipynb file</a>.</p>\n\n<h3 id=\"debugging\">Debugging</h3>\n\n<p>Debugging is the act of identify and resolving “bugs” or defects within code, a term popularly attributed to my personal hero Admiral Grace Hopper:</p>\n\n<blockquote class=\"quote\" cite=\"https://en.wikipedia.org/w/index.php?title=Debugging&amp;oldid=1069955193\">\n  <p>While she was working on a Mark II computer at Harvard University, her associates discovered a moth stuck in a relay and thereby impeding operation, whereupon she remarked that they were “debugging” the system</p>\n</blockquote>\n\n<p>Debugging also functions as a reinforcement method we can use once students have an ok mental model of code execution, a necessary pre-requisite for this activity, which can be further developed through debugging (<span class=\"citation\"><a href=\"#Ramalingam_2004\">Ramalingam <i>et al.</i> 2004</a></span>) alongside their self-efficacy (<span class=\"citation\"><a href=\"#Michaeli_2019\">Michaeli and Romeike 2019</a></span>). Debugging activities can take many forms but most commonly the task is to correct incorrect code, an activity that works best if they are primed with a number of methods of debugging (<span class=\"citation\"><a href=\"#Murphy_2008\">Murphy <i>et al.</i> 2008</a></span>) such as the “Wolf Fence” (<span class=\"citation\"><a href=\"#Gauss_1982\">Gauss 1982</a></span>), commenting out code, or breakpoints.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">### Fix me!\n</span><span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"c1\"># use a if the number is a multiple of 3, otherwise use b\n</span>    <span class=\"k\">if</span> <span class=\"n\">Number</span> \\<span class=\"o\">%</span> <span class=\"mi\">3</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">message</span> <span class=\"o\">+</span> <span class=\"n\">a</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">message</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">b</span><span class=\"sh\">\"</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>The above debugging exercise featuring code with numerous issues from type confusion, variable typos, and failure to initialise a variable.\nStudents can run this example iteratively to figure out where it fails and attempt to fix it.</p>\n\n<p>Use of more complex debugging tools is not always indicated, as the cognitive complexity may be too much for students.</p>\n\n<h2 id=\"comparisons-to-k-12-methodologies\">Comparisons to K-12 methodologies</h2>\n\n<p>In K-12 teaching (<span class=\"citation\"><a href=\"#Sentance_2017\">Sentance and Waite 2017</a></span>), this intervention is used to good\nresults. Their model, PRIMM (<span class=\"citation\"><a href=\"#Sentance_2017\">Sentance and Waite 2017</a></span>), starts with a good\nmental model which is required to predict, tracing during investigation, and\ndebugging to modify code, all building towards students making things\nthemselves.</p>\n\n<p><a href=\"https://primmportal.com/\">Here are some examples</a> of how to implement the PRIMM methodology in exercises.</p>\n"],"ref_slides":[],"video_library":{"tutorial":null,"slides":null,"demo":null,"both":null,"session":null},"hands_on":true,"slides":false,"mod_date":"2023-11-23 09:08:56 +0000","pub_date":"2022-10-19 13:04:07 +0000","version":12,"api":"https://training.galaxyproject.org/training-material/api/topics/contributing/tutorials/python/tutorial.json","tools":[],"supported_servers":[],"topic_name_human":"Contributing to the Galaxy Training Material","admin_install":{"install_tool_dependencies":true,"install_repository_dependencies":true,"install_resolver_dependencies":true,"tools":[]},"admin_install_yaml":"---\ninstall_tool_dependencies: true\ninstall_repository_dependencies: true\ninstall_resolver_dependencies: true\ntools: []\n","tours":false,"video":false,"translations":{"tutorial":[],"slides":[],"video":false},"license":"CC-BY-4.0","type":"tutorial","contributors":[{"name":"Helena Rasche","orcid":"0000-0001-9760-8992","maintainer_contact":"gitter","matrix":"hexylena:matrix.org","joined":"2017-09","elixir_node":"nl","affiliations":["gallantries","by-covid","erasmusmc","elixir-europe","elixir-converge"],"former_affiliations":["deNBI","avans-atgm","uni-freiburg"],"contact_for_training":false,"location":{"country":"NL","lat":51.91,"lon":4.46},"id":"hexylena","url":"https://training.galaxyproject.org/training-material/api/contributors/hexylena.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/hexylena/"},{"name":"Bazante Sanders","joined":"2020-12","affiliations":["avans-atgm"],"id":"bazante1","url":"https://training.galaxyproject.org/training-material/api/contributors/bazante1.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/bazante1/"},{"name":"Donny Vrins","joined":"2021-10","linkedin":"Donny Vrins","email":"D.vrins@live.nl","former_affiliations":["avans-atgm"],"id":"dirowa","url":"https://training.galaxyproject.org/training-material/api/contributors/dirowa.json","page":"https://training.galaxyproject.org/training-material/hall-of-fame/dirowa/"}]}